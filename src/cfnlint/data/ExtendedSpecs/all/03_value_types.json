[
  {
    "op": "add",
    "path": "/ValueTypes",
    "value": {
      "AllocationId": {
        "GetAtt": {
          "AWS::EC2::EIP": "AllocationId"
        },
        "Ref": {
          "Parameters": [
            "String"
          ]
        }
      },
      "AmazonMQDeploymentMode": {
        "AllowedValues": [
          "ACTIVE_STANDBY_MULTI_AZ",
          "SINGLE_INSTANCE"
        ]
      },
      "AmazonMQEngineType": {
        "AllowedValues": [
          "ACTIVEMQ"
        ]
      },
      "AmazonMQEngineVersion": {
        "AllowedValues": [
          "5.15.0",
          "5.15.6",
          "5.15.8"
        ]
      },
      "AmazonMQHostInstanceType": {
        "Ref": {
          "Parameters": [
            "String"
          ]
        }
      },
      "ApiGatewatRestApiKeySourceType": {
        "AllowedValues": [
          "AUTHORIZER",
          "HEADER"
        ]
      },
      "ApiGatewayAuthorizerType": {
        "AllowedValues": [
          "COGNITO_USER_POOLS",
          "REQUEST",
          "TOKEN"
        ]
      },
      "ApiGatewayResponeType": {
        "AllowedValues": [
          "ACCESS_DENIED",
          "API_CONFIGURATION_ERROR",
          "AUTHORIZER_FAILURE",
          "AUTHORIZER_CONFIGURATION_ERROR",
          "BAD_REQUEST_PARAMETERS",
          "BAD_REQUEST_BODY",
          "DEFAULT_4XX",
          "DEFAULT_5XX",
          "EXPIRED_TOKEN",
          "INVALID_SIGNATURE",
          "INTEGRATION_FAILURE",
          "INTEGRATION_TIMEOUT",
          "INVALID_API_KEY",
          "MISSING_AUTHENTICATION_TOKEN",
          "QUOTA_EXCEEDED",
          "REQUEST_TOO_LARGE",
          "RESOURCE_NOT_FOUND",
          "THROTTLED",
          "UNAUTHORIZED",
          "UNSUPPORTED_MEDIA_TYPE"
        ]
      },
      "ApiGatewayUsagePlanKeyType": {
        "AllowedValues": [
          "API_KEY"
        ]
      },
      "AppSyncDataSourceType": {
        "AllowedValues": [
          "AMAZON_DYNAMODB",
          "AMAZON_ELASTICSEARCH",
          "AWS_LAMBDA",
          "HTTP",
          "NONE",
          "RELATIONAL_DATABASE"
        ]
      },
      "AppSyncGraphQLApiAuthType": {
        "AllowedValues": [
          "AMAZON_COGNITO_USER_POOLS",
          "API_KEY",
          "AWS_IAM",
          "OPENID_CONNECT"
        ]
      },
      "AppSyncResolverKind": {
        "AllowedValues": [
          "PIPELINE",
          "UNIT"
        ]
      },
      "ApplicationAutoScalingPolicyType": {
        "AllowedValues": [
          "StepScaling",
          "TargetTrackingScaling"
        ]
      },
      "ApplicationAutoScalingPredefinedMetricSpecificationType": {
        "AllowedValues": [
          "ALBRequestCountPerTarget",
          "DynamoDBReadCapacityUtilization",
          "DynamoDBWriteCapacityUtilization",
          "EC2SpotFleetRequestAverageCPUUtilization",
          "EC2SpotFleetRequestAverageNetworkIn",
          "EC2SpotFleetRequestAverageNetworkOut",
          "ECSServiceAverageCPUUtilization",
          "ECSServiceAverageMemoryUtilization",
          "RDSReaderAverageCPUUtilization",
          "RDSReaderAverageDatabaseConnections",
          "SageMakerVariantInvocationsPerInstance"
        ]
      },
      "AutoScalingGroupHealthCheckType": {
        "AllowedValues": [
          "EC2",
          "ELB"
        ]
      },
      "AutoScalingLifecycleHookResult": {
        "AllowedValues": [
          "ABANDON",
          "CONTINUE"
        ]
      },
      "AutoScalingLifecycleTransition": {
        "AllowedValues": [
          "autoscaling:EC2_INSTANCE_LAUNCHING",
          "autoscaling:EC2_INSTANCE_TERMINATING"
        ]
      },
      "AutoScalingPolicyAdjustmentType": {
        "AllowedValues": [
          "ChangeInCapacity",
          "ExactCapacity",
          "PercentChangeInCapacity"
        ]
      },
      "AutoScalingPolicyMetricAggregationType": {
        "AllowedValues": [
          "Average",
          "Maximum",
          "Minimum"
        ]
      },
      "AutoScalingPolicyType": {
        "AllowedValues": [
          "SimpleScaling",
          "StepScaling",
          "TargetTrackingScaling"
        ]
      },
      "AvailabilityZone": {
        "GetAtt": {
          "AWS::EC2::Instance": "AvailabilityZone",
          "AWS::EC2::Subnet": "AvailabilityZone",
          "AWS::OpsWorks::Instance": "AvailabilityZone"
        },
        "Ref": {
          "Parameters": [
            "String",
            "AvailabilityZone"
          ]
        }
      },
      "AvailabilityZones": {
        "GetAtt": {
        },
        "Ref": {
          "Parameters": [
            "Strings",
            "AvailabilityZones"
          ]
        }
      },
      "BudgetDataBudgetType": {
        "AllowedValues": [
          "COST",
          "RI_COVERAGE",
          "RI_UTILIZATION",
          "USAGE"
        ]
      },
      "BudgetDataTimeUnit": {
        "AllowedValues": [
          "ANNUALLY",
          "DAILY",
          "MONTHLY",
          "QUARTERLY"
        ]
      },
      "BudgetNotificationComparisonOperator": {
        "AllowedValues": [
          "EQUAL_TO",
          "GREATER_THAN",
          "LESS_THAN"
        ]
      },
      "BudgetNotificationNotificationType": {
        "AllowedValues": [
          "ACTUAL",
          "FORECASTED"
        ]
      },
      "BudgetNotificationThresholdType": {
        "AllowedValues": [
          "ABSOLUTE_VALUE",
          "PERCENTAGE"
        ]
      },
      "BudgetSubscriptionType": {
        "AllowedValues": [
          "EMAIL",
          "SNS"
        ]
      },
      "CertificateValidationMethod": {
        "AllowedValues": [
          "DNS",
          "EMAIL"
        ]
      },
      "CloudTrailEventSelectorDataResourceType": {
        "AllowedValues": [
          "AWS::Lambda::Function",
          "AWS::S3::Object"
        ]
      },
      "CloudTrailEventSelectorReadWriteType": {
        "AllowedValues": [
          "All",
          "ReadOnly",
          "WriteOnly"
        ]
      },
      "CloudWatchAlarmComparisonOperator": {
        "AllowedValues": [
          "GreaterThanOrEqualToThreshold",
          "GreaterThanThreshold",
          "LessThanOrEqualToThreshold",
          "LessThanThreshold"
        ]
      },
      "CloudWatchAlarmStatistic": {
        "AllowedValues": [
          "Average",
          "Maximum",
          "Minimum",
          "SampleCount",
          "Sum"
        ]
      },
      "CloudWatchAlarmTreatMissingData": {
        "AllowedValues": [
          "breaching",
          "ignore",
          "missing",
          "notBreaching"
        ]
      },
      "CloudWatchAlarmUnit": {
        "AllowedValues": [
          "Bits",
          "Bits/Second",
          "Bytes",
          "Bytes/Second",
          "Count",
          "Count/Second",
          "Gigabits",
          "Gigabits/Second",
          "Gigabytes",
          "Gigabytes/Second",
          "Kilobits",
          "Kilobits/Second",
          "Kilobytes",
          "Kilobytes/Second",
          "Megabits",
          "Megabits/Second",
          "Megabytes",
          "Megabytes/Second",
          "Microseconds",
          "Milliseconds",
          "None",
          "Percent",
          "Seconds",
          "Terabits",
          "Terabits/Second",
          "Terabytes",
          "Terabytes/Second"
        ]
      },
      "CloudWatchEventRuleState": {
        "AllowedValues": [
          "DISABLED",
          "ENABLED"
        ]
      },
      "CloudWatchEventBusPolicyAction": {
        "AllowedValues": [
          "events:PutEvents"
        ]
      },
      "CloudWatchEventBusPolicyConditionKey": {
        "AllowedValues": [
          "aws:PrincipalOrgID"
        ]
      },
      "CloudWatchEventBusPolicyConditionType": {
        "AllowedValues": [
          "StringEquals"
        ]
      },
      "CodeBuildArtifactPackaging": {
        "AllowedValues": [
          "NONE",
          "ZIP"
        ]
      },
      "CodeBuildArtifactType": {
        "AllowedValues": [
          "CODEPIPELINE",
          "NO_ARTIFACTS",
          "S3"
        ]
      },
      "CodeBuildCacheType": {
        "AllowedValues": [
          "NO_CACHE",
          "S3"
        ]
      },
      "CodeBuildEnvironmentComputeType": {
        "AllowedValues": [
          "BUILD_GENERAL1_LARGE",
          "BUILD_GENERAL1_MEDIUM",
          "BUILD_GENERAL1_SMALL"
        ]
      },
      "CodeBuildEnvironmentCredentialsType": {
        "AllowedValues": [
          "CODEBUILD",
          "SERVICE_ROLE"
        ]
      },
      "CodeBuildEnvironmentType": {
        "AllowedValues": [
          "LINUX_CONTAINER",
          "WINDOWS_CONTAINER"
        ]
      },
      "CodeBuildLogConfigStatus": {
        "AllowedValues": [
          "DISABLED",
          "ENABLED"
        ]
      },
      "CodeBuildSourceType": {
        "AllowedValues": [
          "BITBUCKET",
          "CODECOMMIT",
          "CODEPIPELINE",
          "GITHUB",
          "GITHUB_ENTERPRISE",
          "NO_SOURCE",
          "S3"
        ]
      },
      "CodeCommitEvent": {
        "AllowedValues": [
          "all",
          "createReference",
          "deleteReference",
          "updateReference"
        ]
      },
      "CodeDeployApplicationPlatform": {
        "AllowedValues": [
          "ECS",
          "Lambda",
          "Server"
        ]
      },
      "CodeDeployAutoRollbackConfigurationEvents": {
        "AllowedValues": [
          "DEPLOYMENT_FAILURE",
          "DEPLOYMENT_STOP_ON_ALARM",
          "DEPLOYMENT_STOP_ON_REQUEST"
        ]
      },
      "CodeDeployConfigMinimumHealthyHostsType": {
        "AllowedValues": [
          "FLEET_PERCENT",
          "HOST_COUNT"
        ]
      },
      "CodeDeployDeploymentStyleOption": {
        "AllowedValues": [
          "WITH_TRAFFIC_CONTROL",
          "WITHOUT_TRAFFIC_CONTROL"
        ]
      },
      "CodeDeployDeploymentStyleType": {
        "AllowedValues": [
          "BLUE_GREEN",
          "IN_PLACE"
        ]
      },
      "CodeDeployTriggerConfigEvent": {
        "AllowedValues": [
          "DeploymentFailure",
          "DeploymentReady",
          "DeploymentRollback",
          "DeploymentStart",
          "DeploymentStop",
          "DeploymentSuccess",
          "InstanceFailure",
          "InstanceReady",
          "InstanceStart",
          "InstanceSuccess"
        ]
      },
      "CodePipelineActionTypeCategory": {
        "AllowedValues": [
          "Approval",
          "Build",
          "Deploy",
          "Invoke",
          "Source",
          "Test"
        ]
      },
      "CodePipelineConfigurationPropertiesType": {
        "AllowedValues": [
          "Boolean",
          "Number",
          "String"
        ]
      },
      "CodePipelineActionTypeOwner": {
        "AllowedValues": [
          "AWS",
          "Custom",
          "ThirdParty"
        ]
      },
      "CodePipelineArtifactStoreType": {
        "AllowedValues": [
          "S3"
        ]
      },
      "CodePipelineBlockerType": {
        "AllowedValues": [
          "Schedule"
        ]
      },
      "CodePipelineWehbookAuthentication": {
        "AllowedValues": [
          "GITHUB_HMAC",
          "IP",
          "UNAUTHENTICATED"
        ]
      },
      "CognitoStreamingStatus": {
        "AllowedValues": [
          "DISABLED",
          "ENABLED"
        ]
      },
      "CognitoAliasAttributes": {
        "AllowedValues": [
          "email",
          "phone_number",
          "preferred_username"
        ]
      },
      "CognitoAttributes": {
        "AllowedValues": [
          "email",
          "phone_number"
        ]
      },
      "CognitoMfaConfiguration": {
        "AllowedValues": [
          "OFF",
          "ON",
          "OPTIONAL"
        ]
      },
      "CognitoSchemaAttributeDataType": {
        "AllowedValues": [
          "Boolean",
          "DateTime",
          "Number",
          "String"
        ]
      },
      "CognitoExplicitAuthFlows": {
        "AllowedValues": [
          "ADMIN_NO_SRP_AUTH",
          "CUSTOM_AUTH_FLOW_ONLY",
          "USER_PASSWORD_AUTH"
        ]
      },
      "CognitoDesiredDeliveryMediums": {
        "AllowedValues": [
          "EMAIL",
          "SMS"
        ]
      },
      "CognitoMessageAction": {
        "AllowedValues": [
          "RESEND",
          "SUPPRESS"
        ]
      },
      "ConfigFrequency": {
        "AllowedValues": [
          "One_Hour",
          "Six_Hours",
          "Three_Hours",
          "Twelve_Hours",
          "TwentyFour_Hours"
        ]
      },
      "ConfigRuleMessageType": {
        "AllowedValues": [
          "ConfigurationItemChangeNotification",
          "ConfigurationSnapshotDeliveryCompleted",
          "OversizedConfigurationItemChangeNotification",
          "ScheduledNotification"
        ]
      },
      "ConfigRuleSourceOwner": {
        "AllowedValues": [
          "AWS",
          "CUSTOM_LAMBDA"
        ]
      },
      "ConfigRuleEventSource": {
        "AllowedValues": [
          "aws.config"
        ]
      },
      "DmsEndpointEngineName": {
        "AllowedValues": [
          "aurora-postgresql",
          "aurora",
          "azuredb",
          "db2",
          "dynamodb",
          "mariad",
          "mongodb",
          "mysql",
          "oracle",
          "postgres",
          "redshift",
          "s3",
          "sqlserver",
          "sybase"
        ]
      },
      "DmsEndpointSslMode": {
        "AllowedValues": [
          "none",
          "require",
          "verify-ca",
          "verify-full"
        ]
      },
      "DmsEndpointType": {
        "AllowedValues": [
          "source",
          "target"
        ]
      },
      "EC2ScalingPolicyPredifinedMetricSpecificationType": {
        "AllowedValues": [
          "ALBRequestCountPerTarget",
          "ASGAverageCPUUtilization",
          "ASGAverageNetworkIn",
          "ASGAverageNetworkOut"
        ]
      },
      "EbsVolumeType": {
        "AllowedValues": [
          "gp2",
          "io1",
          "sc1",
          "st1",
          "standard"
        ]
      },
      "Ec2InstanceType": {
        "Ref": {
          "Parameters": [
            "String"
          ]
        }
      },
      "GlueConnectionInputType": {
        "AllowedValues": [
          "JDBC",
          "SFTP"
        ]
      },
      "HttpProtocol": {
        "AllowedValues": [
          "http",
          "https"
        ]
      },
      "IamInstanceProfile": {
        "GetAtt": {
        },
        "Ref": {
          "Parameters": [
            "String"
          ],
          "Resources": [
            "AWS::IAM::InstanceProfile"
          ]
        }
      },
      "IamInstanceProfile.Arn": {
        "GetAtt": {
          "AWS::IAM::InstanceProfile": "Arn"
        },
        "Ref": {
          "Parameters": [
            "String"
          ],
          "Resources": [
            "AWS::IAM::InstanceProfile"
          ]
        }
      },
      "IamRole": {
        "GetAtt": {
        },
        "Ref": {
          "Parameters": [
            "String"
          ],
          "Resources": [
            "AWS::IAM::Role"
          ]
        }
      },
      "IamRole.Arn": {
        "GetAtt": {
          "AWS::IAM::Role": "Arn"
        },
        "Ref": {
          "Parameters": [
            "String"
          ],
          "Resources": [
            "AWS::IAM::Role"
          ]
        }
      },
      "IamUser.Arn": {
        "GetAtt": {
          "AWS::IAM::User": "Arn"
        },
        "Ref": {
          "Parameters": [
            "String"
          ]
        }
      },
      "ImageId": {
        "GetAtt": {
        },
        "Ref": {
          "Parameters": [
            "String",
            "ImageId"
          ]
        }
      },
      "KeyPair": {
        "GetAtt": {
        },
        "Ref": {
          "Parameters": [
            "String",
            "KeyPair"
          ]
        }
      },
      "KmsKey.Arn": {
        "GetAtt": {
          "AWS::KMS::Key": "Arn"
        },
        "Ref": {
          "Parameters": [
            "String"
          ]
        }
      },
      "KmsKey.Id": {
        "GetAtt": {
        },
        "Ref": {
          "Parameters": [
            "String"
          ],
          "Resources": [
            "AWS::KMS::Key"
          ]
        }
      },
      "KmsKey.IdOrArn": {
        "GetAtt": {
          "AWS::KMS::Key": "Arn"
        },
        "Ref": {
          "Parameters": [
            "String"
          ],
          "Resources": [
            "AWS::KMS::Key"
          ]
        }
      },
      "LambdaRuntime": {
        "AllowedValues": [
          "dotnetcore1.0",
          "dotnetcore2.0",
          "dotnetcore2.1",
          "go1.x",
          "java8",
          "nodejs",
          "nodejs4.3-edge",
          "nodejs4.3",
          "nodejs6.10",
          "nodejs8.10",
          "provided",
          "python2.7",
          "python3.6",
          "python3.7",
          "ruby2.5"
        ]
      },
      "LaunchConfigurationName": {
        "GetAtt": {
        },
        "Ref": {
          "Parameters": [
            "String"
          ],
          "Resources": [
            "AWS::AutoScaling::LaunchConfiguration"
          ]
        }
      },
      "LoadBalancerName": {
        "GetAtt": {
        },
        "Ref": {
          "Parameters": [
            "String"
          ],
          "Resources": [
            "AWS::ElasticLoadBalancing::LoadBalancer"
          ]
        }
      },
      "LoadBalancerNames": {
        "GetAtt": {
        },
        "Ref": {
          "Parameters": [
            "Strings"
          ]
        }
      },
      "LoadBalancerV2Arn": {
        "GetAtt": {
        },
        "Ref": {
          "Parameters": [
            "String"
          ],
          "Resources": [
            "AWS::ElasticLoadBalancingV2::LoadBalancer"
          ]
        }
      },
      "PlacementGroup": {
        "GetAtt": {
        },
        "Ref": {
          "Parameters": [
            "String"
          ],
          "Resources": [
            "AWS::EC2::PlacementGroup"
          ]
        }
      },
      "PlacementTenancy": {
        "AllowedValues": [
          "dedicated",
          "default"
        ],
        "Ref": {
          "Parameters": [
            "String"
          ]
        }
      },
      "PredicateType": {
        "AllowedValues": [
          "ByteMatch",
          "GeoMatch",
          "IPMatch",
          "RegexMatch",
          "SizeConstraint",
          "SqlInjectionMatch",
          "XssMatch"
        ]
      },
      "PrivateIpAddress": {
        "GetAtt": {
          "AWS::EC2::NetworkInterface": "PrimaryPrivateIpAddress"
        },
        "Ref": {
          "Parameters": [
            "String"
          ]
        }
      },
      "RdsInstanceType": {
        "Ref": {
          "Parameters": [
            "String"
          ]
        }
      },
      "RecordSetFailover": {
        "AllowedValues": [
          "PRIMARY",
          "SECONDARY"
        ]
      },
      "RecordSetGeoContinentCode": {
        "AllowedValues": [
          "AF",
          "AN",
          "AS",
          "EU",
          "NA",
          "OC",
          "SA"
        ]
      },
      "RecordSetType": {
        "AllowedValues": [
          "A",
          "AAAA",
          "CAA",
          "CNAME",
          "MX",
          "NAPTR",
          "NS",
          "PTR",
          "SOA",
          "SPF",
          "SRV",
          "TXT"
        ]
      },
      "Region": {
        "AllowedValues": [
          "ap-northeast-1",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "ap-southeast-1",
          "ap-southeast-2",
          "ca-central-1",
          "eu-central-1",
          "eu-north-1",
          "eu-west-1",
          "eu-west-2",
          "eu-west-3",
          "sa-east-1",
          "us-east-1",
          "us-east-2",
          "us-gov-east-1",
          "us-gov-west-1",
          "us-west-1",
          "us-west-2"
        ]
      },
      "RestApiId": {
        "GetAtt": {
        },
        "Ref": {
          "Parameters": [
            "String"
          ],
          "Resources": [
            "AWS::ApiGateway::RestApi"
          ]
        }
      },
      "Route53HealthCheckConfigHealthStatus": {
        "AllowedValues": [
          "Healthy",
          "LastKnownStatus",
          "Unhealthy"
        ]
      },
      "Route53HealthCheckConfigType": {
        "AllowedValues": [
          "CALCULATED",
          "CLOUDWATCH_METRIC",
          "HTTP_STR_MATCH",
          "HTTP",
          "HTTPS_STR_MATCH",
          "HTTPS",
          "TCP"
        ]
      },
      "Route53ResolverEndpointDirection": {
        "AllowedValues": [
          "INBOUND",
          "OUTBOUND"
        ]
      },
      "Route53ResolverRuleType": {
        "AllowedValues": [
          "FORWARD",
          "RECURSIVE",
          "SYSTEM"
        ]
      },
      "S3BucketAccelerationStatus": {
        "AllowedValues": [
          "Enabled",
          "Suspended"
        ]
      },
      "S3BucketAccessControl": {
        "AllowedValues": [
          "AuthenticatedRead",
          "AwsExecRead",
          "BucketOwnerFullControl",
          "BucketOwnerRead",
          "LogDeliveryWrite",
          "Private",
          "PublicRead",
          "PublicReadWrite"
        ]
      },
      "S3BucketSSEAlgorithm": {
        "AllowedValues": [
          "AES256",
          "aws:kms"
        ]
      },
      "S3BucketTopicConfigurationEvent": {
        "AllowedValues": [
          "s3:ObjectCreated:*",
          "s3:ObjectCreated:CompleteMultipartUpload",
          "s3:ObjectCreated:Copy",
          "s3:ObjectCreated:Post",
          "s3:ObjectCreated:Put",
          "s3:ObjectRemoved:*",
          "s3:ObjectRemoved:Delete",
          "s3:ObjectRemoved:DeleteMarkerCreated",
          "s3:ObjectRestore:Completed",
          "s3:ObjectRestore:Post",
          "s3:ReducedRedundancyLostObject"
        ]
      },
      "S3BucketVersioningConfigurationStatus": {
        "AllowedValues": [
          "Enabled",
          "Suspended"
        ]
      },
      "ScalingInstructionPredictiveScalingMaxCapacityBehavior": {
        "AllowedValues": [
          "SetForecastCapacityToMaxCapacity",
          "SetMaxCapacityToForecastCapacity",
          "SetMaxCapacityAboveForecastCapacity"
        ]
      },
      "ScalingInstructionPredictiveScalingMode": {
        "AllowedValues": [
          "ForecastAndScale",
          "ForecastOnly"
        ]
      },
      "ScalingInstructionScalableDimension": {
        "AllowedValues": [
          "autoscaling:autoScalingGroup:DesiredCapacity",
          "ecs:service:DesiredCount",
          "ec2:spot-fleet-request:TargetCapacity",
          "dynamodb:table:ReadCapacityUnits",
          "dynamodb:table:WriteCapacityUnits",
          "dynamodb:index:ReadCapacityUnits",
          "dynamodb:index:WriteCapacityUnits",
          "rds:cluster:ReadReplicaCount"
        ]
      },
      "ScalingInstructionServiceNamespace": {
        "AllowedValues": [
          "autoscaling",
          "dynamodb",
          "ecs",
          "ec2",
          "rds"
        ]
      },
      "ScalingPolicyCustomizedMetricSpecificationStatistic": {
        "AllowedValues": [
          "Average",
          "Minimum",
          "Maximum",
          "SampleCount",
          "Sum"
        ]
      },
      "SecretsManagerTargetType": {
        "AllowedValues": [
          "AWS::RDS::DBCluster",
          "AWS::RDS::DBInstance"
        ]
      },
      "SecurityGroup": {
        "GetAtt": {
        },
        "Ref": {
          "Parameters": [
            "String",
            "SecurityGroupId"
          ],
          "Resources": [
            "AWS::EC2::SecurityGroup"
          ]
        }
      },
      "SecurityGroupId": {
        "GetAtt": {
          "AWS::EC2::SecurityGroup": "GroupId",
          "AWS::EC2::VPC": "DefaultSecurityGroup"
        },
        "Ref": {
          "Parameters": [
            "String",
            "SecurityGroupId"
          ],
          "Resources": [
            "AWS::EC2::SecurityGroup"
          ]
        }
      },
      "SecurityGroupIds": {
        "GetAtt": {
          "AWS::ElasticLoadBalancingV2::LoadBalancer": "SecurityGroups"
        },
        "Ref": {
          "Parameters": [
            "Strings",
            "SecurityGroupIds"
          ]
        }
      },
      "SecurityGroups": {
        "GetAtt": {
        },
        "Ref": {
          "Parameters": [
            "Strings",
            "SecurityGroupIds"
          ],
          "Resources": [
            "AWS::EC2::SecurityGroup"
          ]
        }
      },
      "ServiceDiscoveryDnsType": {
        "AllowedValues": [
          "A",
          "AAAA",
          "SRV"
        ]
      },
      "ServiceDiscoveryHealthCheckConfigType": {
        "AllowedValues": [
          "HTTP",
          "HTTPS",
          "TCP"
        ]
      },
      "SesReceiptRuleTlsPolicy": {
        "AllowedValues": [
          "Optional",
          "Require"
        ]
      },
      "SnsSubscriptionProtocol": {
        "AllowedValues": [
          "application",
          "email-json",
          "email",
          "http",
          "https",
          "lambda",
          "sms",
          "sqs"
        ]
      },
      "SsmDocumentName": {
        "GetAtt": {
        },
        "Ref": {
          "Parameters": [
            "String"
          ],
          "Resources": [
            "AWS::SSM::Document"
          ]
        }
      },
      "String": {
        "GetAtt": {
        },
        "Ref": {
          "Parameters": [
            "String"
          ]
        }
      },
      "SubnetId": {
        "GetAtt": {
        },
        "Ref": {
          "Parameters": [
            "String",
            "SubnetId"
          ],
          "Resources": [
            "AWS::EC2::Subnet"
          ]
        }
      },
      "SubnetIds": {
        "GetAtt": {
        },
        "Ref": {
          "Parameters": [
            "Strings",
            "SubnetIds"
          ]
        }
      },
      "TargetGroupArn": {
        "GetAtt": {
        },
        "Ref": {
          "Parameters": [
            "String"
          ],
          "Resources": [
            "AWS::ElasticLoadBalancingV2::TargetGroup"
          ]
        }
      },
      "TargetGroupArns": {
        "GetAtt": {
        },
        "Ref": {
          "Parameters": [
            "Strings"
          ]
        }
      },
      "VpcId": {
        "GetAtt": {
          "AWS::EC2::SecurityGroup": "VpcId",
          "AWS::EC2::Subnet": "VpcId"
        },
        "Ref": {
          "Parameters": [
            "VpcId"
          ],
          "Resources": [
            "AWS::EC2::VPC"
          ]
        }
      },
      "WorkspacePropertyComputeType": {
        "AllowedValues": [
          "GRAPHICS",
          "PERFORMANCE",
          "POWER",
          "STANDARD",
          "VALUE"
        ]
      },
      "WorkspacePropertyRunningMode": {
        "AllowedValues": [
          "ALWAYS_ON",
          "AUTO_STOP"
        ]
      }
    }
  }
]
