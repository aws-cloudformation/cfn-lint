{
 "allOf": [
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "$ref": "#/definitions/resources_asterisk",
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/resources_asterisk"
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "enum": [
         "*"
        ]
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "*"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "a4b:AssociateContactWithAddressBook",
         "a4b:DeleteAddressBook",
         "a4b:DisassociateContactFromAddressBook",
         "a4b:GetAddressBook",
         "a4b:UpdateAddressBook"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "a4b:AssociateContactWithAddressBook",
        "a4b:DeleteAddressBook",
        "a4b:DisassociateContactFromAddressBook",
        "a4b:GetAddressBook",
        "a4b:UpdateAddressBook"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/a4b:addressbook"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/a4b:addressbook"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "a4b:AssociateContactWithAddressBook",
         "a4b:DeleteContact",
         "a4b:DisassociateContactFromAddressBook",
         "a4b:GetContact",
         "a4b:UpdateContact"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "a4b:AssociateContactWithAddressBook",
        "a4b:DeleteContact",
        "a4b:DisassociateContactFromAddressBook",
        "a4b:GetContact",
        "a4b:UpdateContact"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/a4b:contact"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/a4b:contact"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "a4b:AssociateDeviceWithNetworkProfile",
         "a4b:AssociateDeviceWithRoom",
         "a4b:DeleteDevice",
         "a4b:DeleteDeviceUsageData",
         "a4b:DisassociateDeviceFromRoom",
         "a4b:GetDevice",
         "a4b:ListDeviceEvents",
         "a4b:ListTags",
         "a4b:TagResource",
         "a4b:UntagResource",
         "a4b:UpdateDevice"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "a4b:AssociateDeviceWithNetworkProfile",
        "a4b:AssociateDeviceWithRoom",
        "a4b:DeleteDevice",
        "a4b:DeleteDeviceUsageData",
        "a4b:DisassociateDeviceFromRoom",
        "a4b:GetDevice",
        "a4b:ListDeviceEvents",
        "a4b:ListTags",
        "a4b:TagResource",
        "a4b:UntagResource",
        "a4b:UpdateDevice"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/a4b:device"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/a4b:device"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "a4b:AssociateDeviceWithNetworkProfile",
         "a4b:DeleteNetworkProfile",
         "a4b:GetNetworkProfile",
         "a4b:UpdateNetworkProfile"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "a4b:AssociateDeviceWithNetworkProfile",
        "a4b:DeleteNetworkProfile",
        "a4b:GetNetworkProfile",
        "a4b:UpdateNetworkProfile"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/a4b:networkprofile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/a4b:networkprofile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "a4b:AssociateDeviceWithRoom",
         "a4b:AssociateSkillGroupWithRoom",
         "a4b:DeleteRoom",
         "a4b:DeleteRoomSkillParameter",
         "a4b:DeleteSkillAuthorization",
         "a4b:DisassociateSkillGroupFromRoom",
         "a4b:ForgetSmartHomeAppliances",
         "a4b:GetRoom",
         "a4b:GetRoomSkillParameter",
         "a4b:ListSmartHomeAppliances",
         "a4b:ListTags",
         "a4b:PutRoomSkillParameter",
         "a4b:PutSkillAuthorization",
         "a4b:StartSmartHomeApplianceDiscovery",
         "a4b:TagResource",
         "a4b:UntagResource",
         "a4b:UpdateRoom"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "a4b:AssociateDeviceWithRoom",
        "a4b:AssociateSkillGroupWithRoom",
        "a4b:DeleteRoom",
        "a4b:DeleteRoomSkillParameter",
        "a4b:DeleteSkillAuthorization",
        "a4b:DisassociateSkillGroupFromRoom",
        "a4b:ForgetSmartHomeAppliances",
        "a4b:GetRoom",
        "a4b:GetRoomSkillParameter",
        "a4b:ListSmartHomeAppliances",
        "a4b:ListTags",
        "a4b:PutRoomSkillParameter",
        "a4b:PutSkillAuthorization",
        "a4b:StartSmartHomeApplianceDiscovery",
        "a4b:TagResource",
        "a4b:UntagResource",
        "a4b:UpdateRoom"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/a4b:room"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/a4b:room"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "a4b:AssociateSkillGroupWithRoom",
         "a4b:AssociateSkillWithSkillGroup",
         "a4b:DeleteSkillGroup",
         "a4b:DisassociateSkillFromSkillGroup",
         "a4b:DisassociateSkillGroupFromRoom",
         "a4b:GetSkillGroup",
         "a4b:UpdateSkillGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "a4b:AssociateSkillGroupWithRoom",
        "a4b:AssociateSkillWithSkillGroup",
        "a4b:DeleteSkillGroup",
        "a4b:DisassociateSkillFromSkillGroup",
        "a4b:DisassociateSkillGroupFromRoom",
        "a4b:GetSkillGroup",
        "a4b:UpdateSkillGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/a4b:skillgroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/a4b:skillgroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "a4b:CreateRoom",
         "a4b:DeleteProfile",
         "a4b:GetProfile",
         "a4b:UpdateProfile"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "a4b:CreateRoom",
        "a4b:DeleteProfile",
        "a4b:GetProfile",
        "a4b:UpdateProfile"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/a4b:profile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/a4b:profile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "a4b:CreateUser",
         "a4b:DeleteUser",
         "a4b:DisassociateSkillFromUsers",
         "a4b:ListTags",
         "a4b:RevokeInvitation",
         "a4b:SendInvitation",
         "a4b:TagResource",
         "a4b:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "a4b:CreateUser",
        "a4b:DeleteUser",
        "a4b:DisassociateSkillFromUsers",
        "a4b:ListTags",
        "a4b:RevokeInvitation",
        "a4b:SendInvitation",
        "a4b:TagResource",
        "a4b:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/a4b:user"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/a4b:user"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "a4b:DeleteBusinessReportSchedule",
         "a4b:UpdateBusinessReportSchedule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "a4b:DeleteBusinessReportSchedule",
        "a4b:UpdateBusinessReportSchedule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/a4b:schedule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/a4b:schedule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "a4b:DeleteConferenceProvider",
         "a4b:GetConferenceProvider",
         "a4b:UpdateConferenceProvider"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "a4b:DeleteConferenceProvider",
        "a4b:GetConferenceProvider",
        "a4b:UpdateConferenceProvider"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/a4b:conferenceprovider"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/a4b:conferenceprovider"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "a4b:DeleteGatewayGroup",
         "a4b:GetGatewayGroup",
         "a4b:ListGateways",
         "a4b:UpdateGatewayGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "a4b:DeleteGatewayGroup",
        "a4b:GetGatewayGroup",
        "a4b:ListGateways",
        "a4b:UpdateGatewayGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/a4b:gatewaygroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/a4b:gatewaygroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "a4b:GetGateway",
         "a4b:UpdateGateway"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "a4b:GetGateway",
        "a4b:UpdateGateway"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/a4b:gateway"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/a4b:gateway"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "access-analyzer:ApplyArchiveRule",
         "access-analyzer:CreateAccessPreview",
         "access-analyzer:CreateAnalyzer",
         "access-analyzer:DeleteAnalyzer",
         "access-analyzer:GenerateFindingRecommendation",
         "access-analyzer:GetAccessPreview",
         "access-analyzer:GetAnalyzedResource",
         "access-analyzer:GetAnalyzer",
         "access-analyzer:GetFinding",
         "access-analyzer:GetFindingRecommendation",
         "access-analyzer:GetFindingsStatistics",
         "access-analyzer:ListAccessPreviewFindings",
         "access-analyzer:ListAccessPreviews",
         "access-analyzer:ListAnalyzedResources",
         "access-analyzer:ListArchiveRules",
         "access-analyzer:ListFindings",
         "access-analyzer:ListTagsForResource",
         "access-analyzer:StartResourceScan",
         "access-analyzer:TagResource",
         "access-analyzer:UntagResource",
         "access-analyzer:UpdateAnalyzer",
         "access-analyzer:UpdateFindings"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "access-analyzer:ApplyArchiveRule",
        "access-analyzer:CreateAccessPreview",
        "access-analyzer:CreateAnalyzer",
        "access-analyzer:DeleteAnalyzer",
        "access-analyzer:GenerateFindingRecommendation",
        "access-analyzer:GetAccessPreview",
        "access-analyzer:GetAnalyzedResource",
        "access-analyzer:GetAnalyzer",
        "access-analyzer:GetFinding",
        "access-analyzer:GetFindingRecommendation",
        "access-analyzer:GetFindingsStatistics",
        "access-analyzer:ListAccessPreviewFindings",
        "access-analyzer:ListAccessPreviews",
        "access-analyzer:ListAnalyzedResources",
        "access-analyzer:ListArchiveRules",
        "access-analyzer:ListFindings",
        "access-analyzer:ListTagsForResource",
        "access-analyzer:StartResourceScan",
        "access-analyzer:TagResource",
        "access-analyzer:UntagResource",
        "access-analyzer:UpdateAnalyzer",
        "access-analyzer:UpdateFindings"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/access-analyzer:Analyzer"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/access-analyzer:Analyzer"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "access-analyzer:CreateArchiveRule",
         "access-analyzer:DeleteArchiveRule",
         "access-analyzer:GetArchiveRule",
         "access-analyzer:UpdateArchiveRule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "access-analyzer:CreateArchiveRule",
        "access-analyzer:DeleteArchiveRule",
        "access-analyzer:GetArchiveRule",
        "access-analyzer:UpdateArchiveRule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/access-analyzer:ArchiveRule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/access-analyzer:ArchiveRule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "account:AcceptPrimaryEmailUpdate",
         "account:DeleteAlternateContact",
         "account:DisableRegion",
         "account:EnableRegion",
         "account:GetAlternateContact",
         "account:GetContactInformation",
         "account:GetPrimaryEmail",
         "account:GetRegionOptStatus",
         "account:ListRegions",
         "account:PutAlternateContact",
         "account:PutContactInformation",
         "account:StartPrimaryEmailUpdate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "account:AcceptPrimaryEmailUpdate",
        "account:DeleteAlternateContact",
        "account:DisableRegion",
        "account:EnableRegion",
        "account:GetAlternateContact",
        "account:GetContactInformation",
        "account:GetPrimaryEmail",
        "account:GetRegionOptStatus",
        "account:ListRegions",
        "account:PutAlternateContact",
        "account:PutContactInformation",
        "account:StartPrimaryEmailUpdate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/account:accountInOrganization"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/account:accountInOrganization"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "account:CloseAccount",
         "account:DeleteAlternateContact",
         "account:DisableRegion",
         "account:EnableRegion",
         "account:GetAccountInformation",
         "account:GetAlternateContact",
         "account:GetContactInformation",
         "account:GetRegionOptStatus",
         "account:ListRegions",
         "account:PutAlternateContact",
         "account:PutContactInformation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "account:CloseAccount",
        "account:DeleteAlternateContact",
        "account:DisableRegion",
        "account:EnableRegion",
        "account:GetAccountInformation",
        "account:GetAlternateContact",
        "account:GetContactInformation",
        "account:GetRegionOptStatus",
        "account:ListRegions",
        "account:PutAlternateContact",
        "account:PutContactInformation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/account:account"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/account:account"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "acm:AddTagsToCertificate",
         "acm:DeleteCertificate",
         "acm:DescribeCertificate",
         "acm:ExportCertificate",
         "acm:GetCertificate",
         "acm:ImportCertificate",
         "acm:ListTagsForCertificate",
         "acm:RemoveTagsFromCertificate",
         "acm:RenewCertificate",
         "acm:ResendValidationEmail",
         "acm:UpdateCertificateOptions"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "acm:AddTagsToCertificate",
        "acm:DeleteCertificate",
        "acm:DescribeCertificate",
        "acm:ExportCertificate",
        "acm:GetCertificate",
        "acm:ImportCertificate",
        "acm:ListTagsForCertificate",
        "acm:RemoveTagsFromCertificate",
        "acm:RenewCertificate",
        "acm:ResendValidationEmail",
        "acm:UpdateCertificateOptions"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/acm:certificate"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/acm:certificate"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "acm-pca:CreateCertificateAuthorityAuditReport",
         "acm-pca:CreatePermission",
         "acm-pca:DeleteCertificateAuthority",
         "acm-pca:DeletePermission",
         "acm-pca:DeletePolicy",
         "acm-pca:DescribeCertificateAuthority",
         "acm-pca:DescribeCertificateAuthorityAuditReport",
         "acm-pca:GetCertificate",
         "acm-pca:GetCertificateAuthorityCertificate",
         "acm-pca:GetCertificateAuthorityCsr",
         "acm-pca:GetPolicy",
         "acm-pca:ImportCertificateAuthorityCertificate",
         "acm-pca:IssueCertificate",
         "acm-pca:ListPermissions",
         "acm-pca:ListTags",
         "acm-pca:PutPolicy",
         "acm-pca:RestoreCertificateAuthority",
         "acm-pca:RevokeCertificate",
         "acm-pca:TagCertificateAuthority",
         "acm-pca:UntagCertificateAuthority",
         "acm-pca:UpdateCertificateAuthority"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "acm-pca:CreateCertificateAuthorityAuditReport",
        "acm-pca:CreatePermission",
        "acm-pca:DeleteCertificateAuthority",
        "acm-pca:DeletePermission",
        "acm-pca:DeletePolicy",
        "acm-pca:DescribeCertificateAuthority",
        "acm-pca:DescribeCertificateAuthorityAuditReport",
        "acm-pca:GetCertificate",
        "acm-pca:GetCertificateAuthorityCertificate",
        "acm-pca:GetCertificateAuthorityCsr",
        "acm-pca:GetPolicy",
        "acm-pca:ImportCertificateAuthorityCertificate",
        "acm-pca:IssueCertificate",
        "acm-pca:ListPermissions",
        "acm-pca:ListTags",
        "acm-pca:PutPolicy",
        "acm-pca:RestoreCertificateAuthority",
        "acm-pca:RevokeCertificate",
        "acm-pca:TagCertificateAuthority",
        "acm-pca:UntagCertificateAuthority",
        "acm-pca:UpdateCertificateAuthority"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/acm-pca:certificate-authority"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/acm-pca:certificate-authority"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "aiops:CreateInvestigation",
         "aiops:CreateInvestigationEvent",
         "aiops:CreateInvestigationResource",
         "aiops:DeleteInvestigation",
         "aiops:DeleteInvestigationGroup",
         "aiops:DeleteInvestigationGroupPolicy",
         "aiops:GetInvestigation",
         "aiops:GetInvestigationEvent",
         "aiops:GetInvestigationGroup",
         "aiops:GetInvestigationGroupPolicy",
         "aiops:GetInvestigationResource",
         "aiops:ListInvestigationEvents",
         "aiops:ListInvestigations",
         "aiops:ListTagsForResource",
         "aiops:PutInvestigationGroupPolicy",
         "aiops:TagResource",
         "aiops:UntagResource",
         "aiops:UpdateInvestigation",
         "aiops:UpdateInvestigationEvent",
         "aiops:UpdateInvestigationGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "aiops:CreateInvestigation",
        "aiops:CreateInvestigationEvent",
        "aiops:CreateInvestigationResource",
        "aiops:DeleteInvestigation",
        "aiops:DeleteInvestigationGroup",
        "aiops:DeleteInvestigationGroupPolicy",
        "aiops:GetInvestigation",
        "aiops:GetInvestigationEvent",
        "aiops:GetInvestigationGroup",
        "aiops:GetInvestigationGroupPolicy",
        "aiops:GetInvestigationResource",
        "aiops:ListInvestigationEvents",
        "aiops:ListInvestigations",
        "aiops:ListTagsForResource",
        "aiops:PutInvestigationGroupPolicy",
        "aiops:TagResource",
        "aiops:UntagResource",
        "aiops:UpdateInvestigation",
        "aiops:UpdateInvestigationEvent",
        "aiops:UpdateInvestigationGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/aiops:investigation-group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/aiops:investigation-group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "airflow:CreateCliToken",
         "airflow:CreateEnvironment",
         "airflow:DeleteEnvironment",
         "airflow:GetEnvironment",
         "airflow:ListTagsForResource",
         "airflow:PublishMetrics",
         "airflow:TagResource",
         "airflow:UntagResource",
         "airflow:UpdateEnvironment"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "airflow:CreateCliToken",
        "airflow:CreateEnvironment",
        "airflow:DeleteEnvironment",
        "airflow:GetEnvironment",
        "airflow:ListTagsForResource",
        "airflow:PublishMetrics",
        "airflow:TagResource",
        "airflow:UntagResource",
        "airflow:UpdateEnvironment"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/airflow:environment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/airflow:environment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "airflow:CreateWebLoginToken",
         "airflow:InvokeRestApi"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "airflow:CreateWebLoginToken",
        "airflow:InvokeRestApi"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/airflow:rbac-role"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/airflow:rbac-role"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "amplify:AssociateWebACL",
         "amplify:CreateApp",
         "amplify:CreateBackendEnvironment",
         "amplify:DeleteApp",
         "amplify:DeleteBackendEnvironment",
         "amplify:DisassociateWebACL",
         "amplify:GenerateAccessLogs",
         "amplify:GetApp",
         "amplify:GetArtifactUrl",
         "amplify:GetBackendEnvironment",
         "amplify:GetWebACLForResource",
         "amplify:ListArtifacts",
         "amplify:ListBackendEnvironments",
         "amplify:ListBranches",
         "amplify:ListDomainAssociations",
         "amplify:ListTagsForResource",
         "amplify:ListWebHooks",
         "amplify:TagResource",
         "amplify:UntagResource",
         "amplify:UpdateApp"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "amplify:AssociateWebACL",
        "amplify:CreateApp",
        "amplify:CreateBackendEnvironment",
        "amplify:DeleteApp",
        "amplify:DeleteBackendEnvironment",
        "amplify:DisassociateWebACL",
        "amplify:GenerateAccessLogs",
        "amplify:GetApp",
        "amplify:GetArtifactUrl",
        "amplify:GetBackendEnvironment",
        "amplify:GetWebACLForResource",
        "amplify:ListArtifacts",
        "amplify:ListBackendEnvironments",
        "amplify:ListBranches",
        "amplify:ListDomainAssociations",
        "amplify:ListTagsForResource",
        "amplify:ListWebHooks",
        "amplify:TagResource",
        "amplify:UntagResource",
        "amplify:UpdateApp"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/amplify:apps"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/amplify:apps"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "amplify:CreateBranch",
         "amplify:CreateDeployment",
         "amplify:CreateWebHook",
         "amplify:DeleteBranch",
         "amplify:GetBranch",
         "amplify:ListJobs",
         "amplify:ListTagsForResource",
         "amplify:StartDeployment",
         "amplify:TagResource",
         "amplify:UntagResource",
         "amplify:UpdateBranch"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "amplify:CreateBranch",
        "amplify:CreateDeployment",
        "amplify:CreateWebHook",
        "amplify:DeleteBranch",
        "amplify:GetBranch",
        "amplify:ListJobs",
        "amplify:ListTagsForResource",
        "amplify:StartDeployment",
        "amplify:TagResource",
        "amplify:UntagResource",
        "amplify:UpdateBranch"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/amplify:branches"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/amplify:branches"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "amplify:CreateDomainAssociation",
         "amplify:DeleteDomainAssociation",
         "amplify:GetDomainAssociation",
         "amplify:ListTagsForResource",
         "amplify:TagResource",
         "amplify:UntagResource",
         "amplify:UpdateDomainAssociation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "amplify:CreateDomainAssociation",
        "amplify:DeleteDomainAssociation",
        "amplify:GetDomainAssociation",
        "amplify:ListTagsForResource",
        "amplify:TagResource",
        "amplify:UntagResource",
        "amplify:UpdateDomainAssociation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/amplify:domains"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/amplify:domains"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "amplify:DeleteJob",
         "amplify:GetJob",
         "amplify:StartJob",
         "amplify:StopJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "amplify:DeleteJob",
        "amplify:GetJob",
        "amplify:StartJob",
        "amplify:StopJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/amplify:jobs"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/amplify:jobs"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "amplify:DeleteWebHook",
         "amplify:GetWebHook",
         "amplify:ListTagsForResource",
         "amplify:TagResource",
         "amplify:UntagResource",
         "amplify:UpdateWebHook"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "amplify:DeleteWebHook",
        "amplify:GetWebHook",
        "amplify:ListTagsForResource",
        "amplify:TagResource",
        "amplify:UntagResource",
        "amplify:UpdateWebHook"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/amplify:webhooks"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/amplify:webhooks"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "amplifybackend:CloneBackend",
         "amplifybackend:CreateBackendAPI",
         "amplifybackend:CreateBackendAuth",
         "amplifybackend:CreateBackendStorage",
         "amplifybackend:CreateToken",
         "amplifybackend:DeleteBackend",
         "amplifybackend:DeleteBackendAPI",
         "amplifybackend:DeleteBackendAuth",
         "amplifybackend:DeleteBackendStorage",
         "amplifybackend:DeleteToken",
         "amplifybackend:GenerateBackendAPIModels",
         "amplifybackend:GetBackend",
         "amplifybackend:GetBackendAPI",
         "amplifybackend:GetBackendAPIModels",
         "amplifybackend:GetBackendAuth",
         "amplifybackend:GetBackendJob",
         "amplifybackend:GetBackendStorage",
         "amplifybackend:GetToken",
         "amplifybackend:ImportBackendAuth",
         "amplifybackend:ImportBackendStorage",
         "amplifybackend:ListBackendJobs",
         "amplifybackend:RemoveAllBackends",
         "amplifybackend:UpdateBackendAPI",
         "amplifybackend:UpdateBackendAuth",
         "amplifybackend:UpdateBackendJob",
         "amplifybackend:UpdateBackendStorage"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "amplifybackend:CloneBackend",
        "amplifybackend:CreateBackendAPI",
        "amplifybackend:CreateBackendAuth",
        "amplifybackend:CreateBackendStorage",
        "amplifybackend:CreateToken",
        "amplifybackend:DeleteBackend",
        "amplifybackend:DeleteBackendAPI",
        "amplifybackend:DeleteBackendAuth",
        "amplifybackend:DeleteBackendStorage",
        "amplifybackend:DeleteToken",
        "amplifybackend:GenerateBackendAPIModels",
        "amplifybackend:GetBackend",
        "amplifybackend:GetBackendAPI",
        "amplifybackend:GetBackendAPIModels",
        "amplifybackend:GetBackendAuth",
        "amplifybackend:GetBackendJob",
        "amplifybackend:GetBackendStorage",
        "amplifybackend:GetToken",
        "amplifybackend:ImportBackendAuth",
        "amplifybackend:ImportBackendStorage",
        "amplifybackend:ListBackendJobs",
        "amplifybackend:RemoveAllBackends",
        "amplifybackend:UpdateBackendAPI",
        "amplifybackend:UpdateBackendAuth",
        "amplifybackend:UpdateBackendJob",
        "amplifybackend:UpdateBackendStorage"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/amplifybackend:backend"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/amplifybackend:backend"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "amplifybackend:CreateBackend"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "amplifybackend:CreateBackend"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/amplifybackend:created-backend"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/amplifybackend:created-backend"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "amplifybackend:CreateBackendAPI",
         "amplifybackend:DeleteBackendAPI",
         "amplifybackend:GenerateBackendAPIModels",
         "amplifybackend:GetBackendAPI",
         "amplifybackend:GetBackendAPIModels",
         "amplifybackend:UpdateBackendAPI"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "amplifybackend:CreateBackendAPI",
        "amplifybackend:DeleteBackendAPI",
        "amplifybackend:GenerateBackendAPIModels",
        "amplifybackend:GetBackendAPI",
        "amplifybackend:GetBackendAPIModels",
        "amplifybackend:UpdateBackendAPI"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/amplifybackend:api"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/amplifybackend:api"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "amplifybackend:CreateBackendAPI",
         "amplifybackend:CreateBackendAuth",
         "amplifybackend:CreateBackendStorage",
         "amplifybackend:DeleteBackend",
         "amplifybackend:DeleteBackendAPI",
         "amplifybackend:DeleteBackendAuth",
         "amplifybackend:DeleteBackendStorage",
         "amplifybackend:GenerateBackendAPIModels",
         "amplifybackend:GetBackend",
         "amplifybackend:GetBackendAPI",
         "amplifybackend:GetBackendAPIModels",
         "amplifybackend:GetBackendAuth",
         "amplifybackend:GetBackendStorage",
         "amplifybackend:ImportBackendAuth",
         "amplifybackend:ImportBackendStorage",
         "amplifybackend:RemoveAllBackends",
         "amplifybackend:UpdateBackendAPI",
         "amplifybackend:UpdateBackendAuth",
         "amplifybackend:UpdateBackendStorage"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "amplifybackend:CreateBackendAPI",
        "amplifybackend:CreateBackendAuth",
        "amplifybackend:CreateBackendStorage",
        "amplifybackend:DeleteBackend",
        "amplifybackend:DeleteBackendAPI",
        "amplifybackend:DeleteBackendAuth",
        "amplifybackend:DeleteBackendStorage",
        "amplifybackend:GenerateBackendAPIModels",
        "amplifybackend:GetBackend",
        "amplifybackend:GetBackendAPI",
        "amplifybackend:GetBackendAPIModels",
        "amplifybackend:GetBackendAuth",
        "amplifybackend:GetBackendStorage",
        "amplifybackend:ImportBackendAuth",
        "amplifybackend:ImportBackendStorage",
        "amplifybackend:RemoveAllBackends",
        "amplifybackend:UpdateBackendAPI",
        "amplifybackend:UpdateBackendAuth",
        "amplifybackend:UpdateBackendStorage"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/amplifybackend:environment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/amplifybackend:environment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "amplifybackend:CreateBackendAuth",
         "amplifybackend:DeleteBackendAuth",
         "amplifybackend:GetBackendAuth",
         "amplifybackend:ImportBackendAuth",
         "amplifybackend:UpdateBackendAuth"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "amplifybackend:CreateBackendAuth",
        "amplifybackend:DeleteBackendAuth",
        "amplifybackend:GetBackendAuth",
        "amplifybackend:ImportBackendAuth",
        "amplifybackend:UpdateBackendAuth"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/amplifybackend:auth"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/amplifybackend:auth"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "amplifybackend:CreateBackendConfig",
         "amplifybackend:RemoveBackendConfig",
         "amplifybackend:UpdateBackendConfig"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "amplifybackend:CreateBackendConfig",
        "amplifybackend:RemoveBackendConfig",
        "amplifybackend:UpdateBackendConfig"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/amplifybackend:config"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/amplifybackend:config"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "amplifybackend:CreateBackendStorage",
         "amplifybackend:DeleteBackendStorage",
         "amplifybackend:ImportBackendStorage",
         "amplifybackend:UpdateBackendStorage"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "amplifybackend:CreateBackendStorage",
        "amplifybackend:DeleteBackendStorage",
        "amplifybackend:ImportBackendStorage",
        "amplifybackend:UpdateBackendStorage"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/amplifybackend:storage"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/amplifybackend:storage"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "amplifybackend:CreateToken",
         "amplifybackend:DeleteToken",
         "amplifybackend:GetToken"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "amplifybackend:CreateToken",
        "amplifybackend:DeleteToken",
        "amplifybackend:GetToken"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/amplifybackend:token"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/amplifybackend:token"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "amplifybackend:GetBackendJob",
         "amplifybackend:ListBackendJobs",
         "amplifybackend:UpdateBackendJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "amplifybackend:GetBackendJob",
        "amplifybackend:ListBackendJobs",
        "amplifybackend:UpdateBackendJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/amplifybackend:job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/amplifybackend:job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "amplifyuibuilder:DeleteComponent",
         "amplifyuibuilder:GetComponent",
         "amplifyuibuilder:ListTagsForResource",
         "amplifyuibuilder:TagResource",
         "amplifyuibuilder:UntagResource",
         "amplifyuibuilder:UpdateComponent"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "amplifyuibuilder:DeleteComponent",
        "amplifyuibuilder:GetComponent",
        "amplifyuibuilder:ListTagsForResource",
        "amplifyuibuilder:TagResource",
        "amplifyuibuilder:UntagResource",
        "amplifyuibuilder:UpdateComponent"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/amplifyuibuilder:ComponentResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/amplifyuibuilder:ComponentResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "amplifyuibuilder:DeleteForm",
         "amplifyuibuilder:GetForm",
         "amplifyuibuilder:ListTagsForResource",
         "amplifyuibuilder:TagResource",
         "amplifyuibuilder:UntagResource",
         "amplifyuibuilder:UpdateForm"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "amplifyuibuilder:DeleteForm",
        "amplifyuibuilder:GetForm",
        "amplifyuibuilder:ListTagsForResource",
        "amplifyuibuilder:TagResource",
        "amplifyuibuilder:UntagResource",
        "amplifyuibuilder:UpdateForm"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/amplifyuibuilder:FormResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/amplifyuibuilder:FormResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "amplifyuibuilder:DeleteTheme",
         "amplifyuibuilder:GetTheme",
         "amplifyuibuilder:ListTagsForResource",
         "amplifyuibuilder:TagResource",
         "amplifyuibuilder:UntagResource",
         "amplifyuibuilder:UpdateTheme"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "amplifyuibuilder:DeleteTheme",
        "amplifyuibuilder:GetTheme",
        "amplifyuibuilder:ListTagsForResource",
        "amplifyuibuilder:TagResource",
        "amplifyuibuilder:UntagResource",
        "amplifyuibuilder:UpdateTheme"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/amplifyuibuilder:ThemeResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/amplifyuibuilder:ThemeResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "amplifyuibuilder:GetCodegenJob",
         "amplifyuibuilder:ListTagsForResource",
         "amplifyuibuilder:TagResource",
         "amplifyuibuilder:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "amplifyuibuilder:GetCodegenJob",
        "amplifyuibuilder:ListTagsForResource",
        "amplifyuibuilder:TagResource",
        "amplifyuibuilder:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/amplifyuibuilder:CodegenJobResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/amplifyuibuilder:CodegenJobResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "aoss:APIAccessAll",
         "aoss:DeleteCollection",
         "aoss:UpdateCollection"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "aoss:APIAccessAll",
        "aoss:DeleteCollection",
        "aoss:UpdateCollection"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/aoss:Collection"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/aoss:Collection"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "aoss:DashboardsAccessAll"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "aoss:DashboardsAccessAll"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/aoss:Dashboards"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/aoss:Dashboards"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:AddCertificateToDomain",
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH",
         "apigateway:RemoveCertificateFromDomain"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:AddCertificateToDomain",
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH",
        "apigateway:RemoveCertificateFromDomain"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:DomainName"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:DomainName"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:AddCertificateToDomain",
         "apigateway:GET",
         "apigateway:POST",
         "apigateway:RemoveCertificateFromDomain",
         "apigateway:UpdateDomainNamePolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:AddCertificateToDomain",
        "apigateway:GET",
        "apigateway:POST",
        "apigateway:RemoveCertificateFromDomain",
        "apigateway:UpdateDomainNamePolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:DomainNames"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:DomainNames"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:CreateAccessAssociation",
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH",
         "apigateway:RejectAccessAssociation",
         "apigateway:UpdateDomainNameManagementPolicy",
         "apigateway:UpdateDomainNamePolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:CreateAccessAssociation",
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH",
        "apigateway:RejectAccessAssociation",
        "apigateway:UpdateDomainNameManagementPolicy",
        "apigateway:UpdateDomainNamePolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:PrivateDomainName"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:PrivateDomainName"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:AccessLogSettings"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:AccessLogSettings"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH",
         "apigateway:PUT"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH",
        "apigateway:PUT"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:Api"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:Api"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:ApiKey"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:ApiKey"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:ApiMapping"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:ApiMapping"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:Authorizer"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:Authorizer"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:AuthorizersCache"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:AuthorizersCache"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:BasePathMapping"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:BasePathMapping"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:ClientCertificate"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:ClientCertificate"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:Cors"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:Cors"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:Deployment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:Deployment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH",
         "apigateway:PUT"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH",
        "apigateway:PUT"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:DocumentationPart"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:DocumentationPart"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:DocumentationVersion"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:DocumentationVersion"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:DomainNameAccessAssociation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:DomainNameAccessAssociation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH",
         "apigateway:PUT"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH",
        "apigateway:PUT"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:GatewayResponse"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:GatewayResponse"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:Integration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:Integration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH",
         "apigateway:POST",
         "apigateway:PUT"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH",
        "apigateway:POST",
        "apigateway:PUT"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:IntegrationResponse"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:IntegrationResponse"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:Method"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:Method"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH",
         "apigateway:POST",
         "apigateway:PUT"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH",
        "apigateway:POST",
        "apigateway:PUT"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:MethodResponse"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:MethodResponse"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:Model"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:Model"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:PrivateBasePathMapping"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:PrivateBasePathMapping"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:RequestValidator"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:RequestValidator"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:Resource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:Resource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH",
         "apigateway:PUT",
         "apigateway:UpdateRestApiPolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH",
        "apigateway:PUT",
        "apigateway:UpdateRestApiPolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:RestApi"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:RestApi"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:Route"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:Route"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:RouteRequestParameter"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:RouteRequestParameter"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:RouteResponse"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:RouteResponse"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:RouteSettings"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:RouteSettings"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH",
         "apigateway:SetWebACL"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH",
        "apigateway:SetWebACL"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:Stage"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:Stage"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PUT"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PUT"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:Tags"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:Tags"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:PATCH"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:PATCH"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:Template"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:Template"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:UsagePlan"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:UsagePlan"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:UsagePlanKey"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:UsagePlanKey"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:DELETE",
         "apigateway:GET",
         "apigateway:PATCH"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:DELETE",
        "apigateway:GET",
        "apigateway:PATCH"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:VpcLink"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:VpcLink"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET",
         "apigateway:PATCH"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET",
        "apigateway:PATCH"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:Account"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:Account"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET",
         "apigateway:POST"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET",
        "apigateway:POST"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:ApiKeys"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:ApiKeys"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET",
         "apigateway:POST"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET",
        "apigateway:POST"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:ApiMappings"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:ApiMappings"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET",
         "apigateway:POST",
         "apigateway:PUT"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET",
        "apigateway:POST",
        "apigateway:PUT"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:Apis"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:Apis"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET",
         "apigateway:POST"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET",
        "apigateway:POST"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:Authorizers"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:Authorizers"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET",
         "apigateway:POST"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET",
        "apigateway:POST"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:BasePathMappings"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:BasePathMappings"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET",
         "apigateway:POST"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET",
        "apigateway:POST"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:ClientCertificates"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:ClientCertificates"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET",
         "apigateway:POST"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET",
        "apigateway:POST"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:Deployments"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:Deployments"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET",
         "apigateway:POST"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET",
        "apigateway:POST"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:DocumentationParts"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:DocumentationParts"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET",
         "apigateway:POST"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET",
        "apigateway:POST"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:DocumentationVersions"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:DocumentationVersions"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET",
         "apigateway:POST"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET",
        "apigateway:POST"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:DomainNameAccessAssociations"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:DomainNameAccessAssociations"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:ExportedAPI"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:ExportedAPI"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET",
         "apigateway:POST"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET",
        "apigateway:POST"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:GatewayResponses"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:GatewayResponses"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET",
         "apigateway:POST"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET",
        "apigateway:POST"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:IntegrationResponses"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:IntegrationResponses"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET",
         "apigateway:POST"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET",
        "apigateway:POST"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:Integrations"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:Integrations"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:ModelTemplate"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:ModelTemplate"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET",
         "apigateway:POST"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET",
        "apigateway:POST"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:Models"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:Models"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET",
         "apigateway:POST"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET",
        "apigateway:POST"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:PrivateBasePathMappings"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:PrivateBasePathMappings"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET",
         "apigateway:POST"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET",
        "apigateway:POST"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:RequestValidators"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:RequestValidators"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET",
         "apigateway:POST"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET",
        "apigateway:POST"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:Resources"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:Resources"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET",
         "apigateway:POST",
         "apigateway:UpdateRestApiPolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET",
        "apigateway:POST",
        "apigateway:UpdateRestApiPolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:RestApis"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:RestApis"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET",
         "apigateway:POST"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET",
        "apigateway:POST"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:RouteResponses"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:RouteResponses"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET",
         "apigateway:POST"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET",
        "apigateway:POST"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:Routes"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:Routes"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:Sdk"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:Sdk"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET",
         "apigateway:POST",
         "apigateway:SetWebACL"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET",
        "apigateway:POST",
        "apigateway:SetWebACL"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:Stages"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:Stages"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET",
         "apigateway:POST"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET",
        "apigateway:POST"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:UsagePlanKeys"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:UsagePlanKeys"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET",
         "apigateway:POST"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET",
        "apigateway:POST"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:UsagePlans"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:UsagePlans"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apigateway:GET",
         "apigateway:POST"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apigateway:GET",
        "apigateway:POST"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apigateway:VpcLinks"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apigateway:VpcLinks"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "app-integrations:CreateApplication",
         "app-integrations:CreateApplicationAssociation",
         "app-integrations:DeleteApplication",
         "app-integrations:GetApplication",
         "app-integrations:ListTagsForResource",
         "app-integrations:TagResource",
         "app-integrations:UntagResource",
         "app-integrations:UpdateApplication"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "app-integrations:CreateApplication",
        "app-integrations:CreateApplicationAssociation",
        "app-integrations:DeleteApplication",
        "app-integrations:GetApplication",
        "app-integrations:ListTagsForResource",
        "app-integrations:TagResource",
        "app-integrations:UntagResource",
        "app-integrations:UpdateApplication"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/app-integrations:application"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/app-integrations:application"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "app-integrations:CreateDataIntegration",
         "app-integrations:CreateDataIntegrationAssociation",
         "app-integrations:DeleteDataIntegration",
         "app-integrations:GetDataIntegration",
         "app-integrations:ListTagsForResource",
         "app-integrations:TagResource",
         "app-integrations:UntagResource",
         "app-integrations:UpdateDataIntegration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "app-integrations:CreateDataIntegration",
        "app-integrations:CreateDataIntegrationAssociation",
        "app-integrations:DeleteDataIntegration",
        "app-integrations:GetDataIntegration",
        "app-integrations:ListTagsForResource",
        "app-integrations:TagResource",
        "app-integrations:UntagResource",
        "app-integrations:UpdateDataIntegration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/app-integrations:data-integration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/app-integrations:data-integration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "app-integrations:CreateEventIntegration",
         "app-integrations:CreateEventIntegrationAssociation",
         "app-integrations:DeleteEventIntegration",
         "app-integrations:GetEventIntegration",
         "app-integrations:ListTagsForResource",
         "app-integrations:TagResource",
         "app-integrations:UntagResource",
         "app-integrations:UpdateEventIntegration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "app-integrations:CreateEventIntegration",
        "app-integrations:CreateEventIntegrationAssociation",
        "app-integrations:DeleteEventIntegration",
        "app-integrations:GetEventIntegration",
        "app-integrations:ListTagsForResource",
        "app-integrations:TagResource",
        "app-integrations:UntagResource",
        "app-integrations:UpdateEventIntegration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/app-integrations:event-integration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/app-integrations:event-integration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "app-integrations:DeleteApplicationAssociation",
         "app-integrations:TagResource",
         "app-integrations:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "app-integrations:DeleteApplicationAssociation",
        "app-integrations:TagResource",
        "app-integrations:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/app-integrations:application-association"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/app-integrations:application-association"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "app-integrations:DeleteDataIntegrationAssociation",
         "app-integrations:ListTagsForResource",
         "app-integrations:TagResource",
         "app-integrations:UntagResource",
         "app-integrations:UpdateDataIntegrationAssociation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "app-integrations:DeleteDataIntegrationAssociation",
        "app-integrations:ListTagsForResource",
        "app-integrations:TagResource",
        "app-integrations:UntagResource",
        "app-integrations:UpdateDataIntegrationAssociation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/app-integrations:data-integration-association"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/app-integrations:data-integration-association"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "app-integrations:DeleteEventIntegrationAssociation",
         "app-integrations:ListTagsForResource",
         "app-integrations:TagResource",
         "app-integrations:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "app-integrations:DeleteEventIntegrationAssociation",
        "app-integrations:ListTagsForResource",
        "app-integrations:TagResource",
        "app-integrations:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/app-integrations:event-integration-association"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/app-integrations:event-integration-association"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appconfig:CreateConfigurationProfile",
         "appconfig:CreateEnvironment",
         "appconfig:CreateHostedConfigurationVersion",
         "appconfig:DeleteApplication",
         "appconfig:DeleteConfigurationProfile",
         "appconfig:DeleteEnvironment",
         "appconfig:DeleteHostedConfigurationVersion",
         "appconfig:GetApplication",
         "appconfig:GetConfiguration",
         "appconfig:GetConfigurationProfile",
         "appconfig:GetDeployment",
         "appconfig:GetEnvironment",
         "appconfig:GetHostedConfigurationVersion",
         "appconfig:ListConfigurationProfiles",
         "appconfig:ListDeployments",
         "appconfig:ListEnvironments",
         "appconfig:ListHostedConfigurationVersions",
         "appconfig:ListTagsForResource",
         "appconfig:StartDeployment",
         "appconfig:StopDeployment",
         "appconfig:TagResource",
         "appconfig:UntagResource",
         "appconfig:UpdateApplication",
         "appconfig:UpdateConfigurationProfile",
         "appconfig:UpdateEnvironment",
         "appconfig:ValidateConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appconfig:CreateConfigurationProfile",
        "appconfig:CreateEnvironment",
        "appconfig:CreateHostedConfigurationVersion",
        "appconfig:DeleteApplication",
        "appconfig:DeleteConfigurationProfile",
        "appconfig:DeleteEnvironment",
        "appconfig:DeleteHostedConfigurationVersion",
        "appconfig:GetApplication",
        "appconfig:GetConfiguration",
        "appconfig:GetConfigurationProfile",
        "appconfig:GetDeployment",
        "appconfig:GetEnvironment",
        "appconfig:GetHostedConfigurationVersion",
        "appconfig:ListConfigurationProfiles",
        "appconfig:ListDeployments",
        "appconfig:ListEnvironments",
        "appconfig:ListHostedConfigurationVersions",
        "appconfig:ListTagsForResource",
        "appconfig:StartDeployment",
        "appconfig:StopDeployment",
        "appconfig:TagResource",
        "appconfig:UntagResource",
        "appconfig:UpdateApplication",
        "appconfig:UpdateConfigurationProfile",
        "appconfig:UpdateEnvironment",
        "appconfig:ValidateConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appconfig:application"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appconfig:application"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appconfig:CreateHostedConfigurationVersion",
         "appconfig:DeleteConfigurationProfile",
         "appconfig:DeleteHostedConfigurationVersion",
         "appconfig:GetConfiguration",
         "appconfig:GetConfigurationProfile",
         "appconfig:GetHostedConfigurationVersion",
         "appconfig:ListHostedConfigurationVersions",
         "appconfig:ListTagsForResource",
         "appconfig:StartDeployment",
         "appconfig:TagResource",
         "appconfig:UntagResource",
         "appconfig:UpdateConfigurationProfile",
         "appconfig:ValidateConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appconfig:CreateHostedConfigurationVersion",
        "appconfig:DeleteConfigurationProfile",
        "appconfig:DeleteHostedConfigurationVersion",
        "appconfig:GetConfiguration",
        "appconfig:GetConfigurationProfile",
        "appconfig:GetHostedConfigurationVersion",
        "appconfig:ListHostedConfigurationVersions",
        "appconfig:ListTagsForResource",
        "appconfig:StartDeployment",
        "appconfig:TagResource",
        "appconfig:UntagResource",
        "appconfig:UpdateConfigurationProfile",
        "appconfig:ValidateConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appconfig:configurationprofile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appconfig:configurationprofile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appconfig:DeleteDeploymentStrategy",
         "appconfig:GetDeploymentStrategy",
         "appconfig:ListTagsForResource",
         "appconfig:StartDeployment",
         "appconfig:TagResource",
         "appconfig:UntagResource",
         "appconfig:UpdateDeploymentStrategy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appconfig:DeleteDeploymentStrategy",
        "appconfig:GetDeploymentStrategy",
        "appconfig:ListTagsForResource",
        "appconfig:StartDeployment",
        "appconfig:TagResource",
        "appconfig:UntagResource",
        "appconfig:UpdateDeploymentStrategy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appconfig:deploymentstrategy"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appconfig:deploymentstrategy"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appconfig:DeleteEnvironment",
         "appconfig:GetConfiguration",
         "appconfig:GetDeployment",
         "appconfig:GetEnvironment",
         "appconfig:ListDeployments",
         "appconfig:ListTagsForResource",
         "appconfig:StartDeployment",
         "appconfig:StopDeployment",
         "appconfig:TagResource",
         "appconfig:UntagResource",
         "appconfig:UpdateEnvironment"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appconfig:DeleteEnvironment",
        "appconfig:GetConfiguration",
        "appconfig:GetDeployment",
        "appconfig:GetEnvironment",
        "appconfig:ListDeployments",
        "appconfig:ListTagsForResource",
        "appconfig:StartDeployment",
        "appconfig:StopDeployment",
        "appconfig:TagResource",
        "appconfig:UntagResource",
        "appconfig:UpdateEnvironment"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appconfig:environment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appconfig:environment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appconfig:DeleteExtension",
         "appconfig:GetExtension",
         "appconfig:ListTagsForResource",
         "appconfig:TagResource",
         "appconfig:UntagResource",
         "appconfig:UpdateExtension"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appconfig:DeleteExtension",
        "appconfig:GetExtension",
        "appconfig:ListTagsForResource",
        "appconfig:TagResource",
        "appconfig:UntagResource",
        "appconfig:UpdateExtension"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appconfig:extension"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appconfig:extension"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appconfig:DeleteExtensionAssociation",
         "appconfig:GetExtensionAssociation",
         "appconfig:ListTagsForResource",
         "appconfig:TagResource",
         "appconfig:UntagResource",
         "appconfig:UpdateExtensionAssociation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appconfig:DeleteExtensionAssociation",
        "appconfig:GetExtensionAssociation",
        "appconfig:ListTagsForResource",
        "appconfig:TagResource",
        "appconfig:UntagResource",
        "appconfig:UpdateExtensionAssociation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appconfig:extensionassociation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appconfig:extensionassociation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appconfig:DeleteHostedConfigurationVersion",
         "appconfig:GetHostedConfigurationVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appconfig:DeleteHostedConfigurationVersion",
        "appconfig:GetHostedConfigurationVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appconfig:hostedconfigurationversion"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appconfig:hostedconfigurationversion"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appconfig:GetDeployment",
         "appconfig:ListTagsForResource",
         "appconfig:StopDeployment",
         "appconfig:TagResource",
         "appconfig:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appconfig:GetDeployment",
        "appconfig:ListTagsForResource",
        "appconfig:StopDeployment",
        "appconfig:TagResource",
        "appconfig:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appconfig:deployment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appconfig:deployment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appconfig:GetLatestConfiguration",
         "appconfig:StartConfigurationSession",
         "appconfig:TagResource",
         "appconfig:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appconfig:GetLatestConfiguration",
        "appconfig:StartConfigurationSession",
        "appconfig:TagResource",
        "appconfig:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appconfig:configuration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appconfig:configuration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appfabric:BatchGetUserAccessTasks",
         "appfabric:ConnectAppAuthorization",
         "appfabric:CreateAppAuthorization",
         "appfabric:CreateIngestion",
         "appfabric:CreateIngestionDestination",
         "appfabric:DeleteAppAuthorization",
         "appfabric:DeleteAppBundle",
         "appfabric:DeleteIngestion",
         "appfabric:DeleteIngestionDestination",
         "appfabric:GetAppAuthorization",
         "appfabric:GetAppBundle",
         "appfabric:GetIngestion",
         "appfabric:GetIngestionDestination",
         "appfabric:ListAppAuthorizations",
         "appfabric:ListIngestionDestinations",
         "appfabric:ListIngestions",
         "appfabric:ListTagsForResource",
         "appfabric:StartIngestion",
         "appfabric:StartUserAccessTasks",
         "appfabric:StopIngestion",
         "appfabric:TagResource",
         "appfabric:UntagResource",
         "appfabric:UpdateAppAuthorization",
         "appfabric:UpdateIngestionDestination"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appfabric:BatchGetUserAccessTasks",
        "appfabric:ConnectAppAuthorization",
        "appfabric:CreateAppAuthorization",
        "appfabric:CreateIngestion",
        "appfabric:CreateIngestionDestination",
        "appfabric:DeleteAppAuthorization",
        "appfabric:DeleteAppBundle",
        "appfabric:DeleteIngestion",
        "appfabric:DeleteIngestionDestination",
        "appfabric:GetAppAuthorization",
        "appfabric:GetAppBundle",
        "appfabric:GetIngestion",
        "appfabric:GetIngestionDestination",
        "appfabric:ListAppAuthorizations",
        "appfabric:ListIngestionDestinations",
        "appfabric:ListIngestions",
        "appfabric:ListTagsForResource",
        "appfabric:StartIngestion",
        "appfabric:StartUserAccessTasks",
        "appfabric:StopIngestion",
        "appfabric:TagResource",
        "appfabric:UntagResource",
        "appfabric:UpdateAppAuthorization",
        "appfabric:UpdateIngestionDestination"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appfabric:appbundle"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appfabric:appbundle"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appfabric:ConnectAppAuthorization",
         "appfabric:DeleteAppAuthorization",
         "appfabric:GetAppAuthorization",
         "appfabric:ListTagsForResource",
         "appfabric:TagResource",
         "appfabric:UntagResource",
         "appfabric:UpdateAppAuthorization"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appfabric:ConnectAppAuthorization",
        "appfabric:DeleteAppAuthorization",
        "appfabric:GetAppAuthorization",
        "appfabric:ListTagsForResource",
        "appfabric:TagResource",
        "appfabric:UntagResource",
        "appfabric:UpdateAppAuthorization"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appfabric:appauthorization"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appfabric:appauthorization"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appfabric:CreateIngestionDestination",
         "appfabric:DeleteIngestion",
         "appfabric:DeleteIngestionDestination",
         "appfabric:GetIngestion",
         "appfabric:GetIngestionDestination",
         "appfabric:ListIngestionDestinations",
         "appfabric:ListTagsForResource",
         "appfabric:StartIngestion",
         "appfabric:StopIngestion",
         "appfabric:TagResource",
         "appfabric:UntagResource",
         "appfabric:UpdateIngestionDestination"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appfabric:CreateIngestionDestination",
        "appfabric:DeleteIngestion",
        "appfabric:DeleteIngestionDestination",
        "appfabric:GetIngestion",
        "appfabric:GetIngestionDestination",
        "appfabric:ListIngestionDestinations",
        "appfabric:ListTagsForResource",
        "appfabric:StartIngestion",
        "appfabric:StopIngestion",
        "appfabric:TagResource",
        "appfabric:UntagResource",
        "appfabric:UpdateIngestionDestination"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appfabric:ingestion"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appfabric:ingestion"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appfabric:DeleteIngestionDestination",
         "appfabric:GetIngestionDestination",
         "appfabric:ListTagsForResource",
         "appfabric:TagResource",
         "appfabric:UntagResource",
         "appfabric:UpdateIngestionDestination"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appfabric:DeleteIngestionDestination",
        "appfabric:GetIngestionDestination",
        "appfabric:ListTagsForResource",
        "appfabric:TagResource",
        "appfabric:UntagResource",
        "appfabric:UpdateIngestionDestination"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appfabric:ingestiondestination"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appfabric:ingestiondestination"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appflow:CancelFlowExecutions",
         "appflow:DeleteFlow",
         "appflow:DescribeFlow",
         "appflow:DescribeFlowExecution",
         "appflow:DescribeFlowExecutionRecords",
         "appflow:ListFlows",
         "appflow:ListTagsForResource",
         "appflow:RunFlow",
         "appflow:StartFlow",
         "appflow:StopFlow",
         "appflow:TagResource",
         "appflow:UntagResource",
         "appflow:UpdateFlow"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appflow:CancelFlowExecutions",
        "appflow:DeleteFlow",
        "appflow:DescribeFlow",
        "appflow:DescribeFlowExecution",
        "appflow:DescribeFlowExecutionRecords",
        "appflow:ListFlows",
        "appflow:ListTagsForResource",
        "appflow:RunFlow",
        "appflow:StartFlow",
        "appflow:StopFlow",
        "appflow:TagResource",
        "appflow:UntagResource",
        "appflow:UpdateFlow"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appflow:flow"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appflow:flow"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appflow:DeleteConnectorProfile",
         "appflow:DescribeConnectorEntity",
         "appflow:DescribeConnectorFields",
         "appflow:ListConnectorEntities",
         "appflow:ListConnectorFields",
         "appflow:ResetConnectorMetadataCache",
         "appflow:UpdateConnectorProfile",
         "appflow:UseConnectorProfile"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appflow:DeleteConnectorProfile",
        "appflow:DescribeConnectorEntity",
        "appflow:DescribeConnectorFields",
        "appflow:ListConnectorEntities",
        "appflow:ListConnectorFields",
        "appflow:ResetConnectorMetadataCache",
        "appflow:UpdateConnectorProfile",
        "appflow:UseConnectorProfile"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appflow:connectorprofile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appflow:connectorprofile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appflow:DescribeConnector",
         "appflow:ListConnectors",
         "appflow:TagResource",
         "appflow:UnRegisterConnector",
         "appflow:UntagResource",
         "appflow:UpdateConnectorRegistration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appflow:DescribeConnector",
        "appflow:ListConnectors",
        "appflow:TagResource",
        "appflow:UnRegisterConnector",
        "appflow:UntagResource",
        "appflow:UpdateConnectorRegistration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appflow:connector"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appflow:connector"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "application-autoscaling:DeleteScalingPolicy",
         "application-autoscaling:DeleteScheduledAction",
         "application-autoscaling:DeregisterScalableTarget",
         "application-autoscaling:ListTagsForResource",
         "application-autoscaling:PutScalingPolicy",
         "application-autoscaling:PutScheduledAction",
         "application-autoscaling:RegisterScalableTarget",
         "application-autoscaling:TagResource",
         "application-autoscaling:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "application-autoscaling:DeleteScalingPolicy",
        "application-autoscaling:DeleteScheduledAction",
        "application-autoscaling:DeregisterScalableTarget",
        "application-autoscaling:ListTagsForResource",
        "application-autoscaling:PutScalingPolicy",
        "application-autoscaling:PutScheduledAction",
        "application-autoscaling:RegisterScalableTarget",
        "application-autoscaling:TagResource",
        "application-autoscaling:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/application-autoscaling:ScalableTarget"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/application-autoscaling:ScalableTarget"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "application-signals:BatchGetServiceLevelObjectiveBudgetReport",
         "application-signals:BatchUpdateExclusionWindows",
         "application-signals:DeleteServiceLevelObjective",
         "application-signals:GetServiceLevelObjective",
         "application-signals:ListServiceLevelObjectiveExclusionWindows",
         "application-signals:ListTagsForResource",
         "application-signals:TagResource",
         "application-signals:UntagResource",
         "application-signals:UpdateServiceLevelObjective"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "application-signals:BatchGetServiceLevelObjectiveBudgetReport",
        "application-signals:BatchUpdateExclusionWindows",
        "application-signals:DeleteServiceLevelObjective",
        "application-signals:GetServiceLevelObjective",
        "application-signals:ListServiceLevelObjectiveExclusionWindows",
        "application-signals:ListTagsForResource",
        "application-signals:TagResource",
        "application-signals:UntagResource",
        "application-signals:UpdateServiceLevelObjective"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/application-signals:slo"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/application-signals:slo"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appmesh:CreateGatewayRoute",
         "appmesh:DeleteGatewayRoute",
         "appmesh:DescribeGatewayRoute",
         "appmesh:ListTagsForResource",
         "appmesh:TagResource",
         "appmesh:UntagResource",
         "appmesh:UpdateGatewayRoute"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appmesh:CreateGatewayRoute",
        "appmesh:DeleteGatewayRoute",
        "appmesh:DescribeGatewayRoute",
        "appmesh:ListTagsForResource",
        "appmesh:TagResource",
        "appmesh:UntagResource",
        "appmesh:UpdateGatewayRoute"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appmesh:gatewayRoute"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appmesh:gatewayRoute"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appmesh:CreateGatewayRoute",
         "appmesh:CreateVirtualNode",
         "appmesh:CreateVirtualService",
         "appmesh:DeleteVirtualService",
         "appmesh:DescribeVirtualService",
         "appmesh:ListTagsForResource",
         "appmesh:TagResource",
         "appmesh:UntagResource",
         "appmesh:UpdateGatewayRoute",
         "appmesh:UpdateVirtualService"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appmesh:CreateGatewayRoute",
        "appmesh:CreateVirtualNode",
        "appmesh:CreateVirtualService",
        "appmesh:DeleteVirtualService",
        "appmesh:DescribeVirtualService",
        "appmesh:ListTagsForResource",
        "appmesh:TagResource",
        "appmesh:UntagResource",
        "appmesh:UpdateGatewayRoute",
        "appmesh:UpdateVirtualService"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appmesh:virtualService"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appmesh:virtualService"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appmesh:CreateMesh",
         "appmesh:DeleteMesh",
         "appmesh:DeleteMeshPolicy",
         "appmesh:DescribeMesh",
         "appmesh:GetMeshPolicy",
         "appmesh:ListTagsForResource",
         "appmesh:ListVirtualGateways",
         "appmesh:ListVirtualNodes",
         "appmesh:ListVirtualRouters",
         "appmesh:ListVirtualServices",
         "appmesh:PutMeshPolicy",
         "appmesh:TagResource",
         "appmesh:UntagResource",
         "appmesh:UpdateMesh"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appmesh:CreateMesh",
        "appmesh:DeleteMesh",
        "appmesh:DeleteMeshPolicy",
        "appmesh:DescribeMesh",
        "appmesh:GetMeshPolicy",
        "appmesh:ListTagsForResource",
        "appmesh:ListVirtualGateways",
        "appmesh:ListVirtualNodes",
        "appmesh:ListVirtualRouters",
        "appmesh:ListVirtualServices",
        "appmesh:PutMeshPolicy",
        "appmesh:TagResource",
        "appmesh:UntagResource",
        "appmesh:UpdateMesh"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appmesh:mesh"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appmesh:mesh"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appmesh:CreateRoute",
         "appmesh:DeleteRoute",
         "appmesh:DescribeRoute",
         "appmesh:ListTagsForResource",
         "appmesh:TagResource",
         "appmesh:UntagResource",
         "appmesh:UpdateRoute"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appmesh:CreateRoute",
        "appmesh:DeleteRoute",
        "appmesh:DescribeRoute",
        "appmesh:ListTagsForResource",
        "appmesh:TagResource",
        "appmesh:UntagResource",
        "appmesh:UpdateRoute"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appmesh:route"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appmesh:route"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appmesh:CreateRoute",
         "appmesh:CreateVirtualNode",
         "appmesh:CreateVirtualService",
         "appmesh:DeleteVirtualNode",
         "appmesh:DescribeVirtualNode",
         "appmesh:ListTagsForResource",
         "appmesh:StreamAggregatedResources",
         "appmesh:TagResource",
         "appmesh:UntagResource",
         "appmesh:UpdateRoute",
         "appmesh:UpdateVirtualNode",
         "appmesh:UpdateVirtualService"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appmesh:CreateRoute",
        "appmesh:CreateVirtualNode",
        "appmesh:CreateVirtualService",
        "appmesh:DeleteVirtualNode",
        "appmesh:DescribeVirtualNode",
        "appmesh:ListTagsForResource",
        "appmesh:StreamAggregatedResources",
        "appmesh:TagResource",
        "appmesh:UntagResource",
        "appmesh:UpdateRoute",
        "appmesh:UpdateVirtualNode",
        "appmesh:UpdateVirtualService"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appmesh:virtualNode"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appmesh:virtualNode"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appmesh:CreateVirtualGateway",
         "appmesh:DeleteVirtualGateway",
         "appmesh:DescribeVirtualGateway",
         "appmesh:ListGatewayRoutes",
         "appmesh:ListTagsForResource",
         "appmesh:StreamAggregatedResources",
         "appmesh:TagResource",
         "appmesh:UntagResource",
         "appmesh:UpdateVirtualGateway"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appmesh:CreateVirtualGateway",
        "appmesh:DeleteVirtualGateway",
        "appmesh:DescribeVirtualGateway",
        "appmesh:ListGatewayRoutes",
        "appmesh:ListTagsForResource",
        "appmesh:StreamAggregatedResources",
        "appmesh:TagResource",
        "appmesh:UntagResource",
        "appmesh:UpdateVirtualGateway"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appmesh:virtualGateway"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appmesh:virtualGateway"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appmesh:CreateVirtualRouter",
         "appmesh:CreateVirtualService",
         "appmesh:DeleteVirtualRouter",
         "appmesh:DescribeVirtualRouter",
         "appmesh:ListRoutes",
         "appmesh:ListTagsForResource",
         "appmesh:TagResource",
         "appmesh:UntagResource",
         "appmesh:UpdateVirtualRouter",
         "appmesh:UpdateVirtualService"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appmesh:CreateVirtualRouter",
        "appmesh:CreateVirtualService",
        "appmesh:DeleteVirtualRouter",
        "appmesh:DescribeVirtualRouter",
        "appmesh:ListRoutes",
        "appmesh:ListTagsForResource",
        "appmesh:TagResource",
        "appmesh:UntagResource",
        "appmesh:UpdateVirtualRouter",
        "appmesh:UpdateVirtualService"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appmesh:virtualRouter"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appmesh:virtualRouter"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appmesh-preview:CreateGatewayRoute",
         "appmesh-preview:DeleteGatewayRoute",
         "appmesh-preview:DescribeGatewayRoute",
         "appmesh-preview:UpdateGatewayRoute"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appmesh-preview:CreateGatewayRoute",
        "appmesh-preview:DeleteGatewayRoute",
        "appmesh-preview:DescribeGatewayRoute",
        "appmesh-preview:UpdateGatewayRoute"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appmesh-preview:gatewayRoute"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appmesh-preview:gatewayRoute"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appmesh-preview:CreateGatewayRoute",
         "appmesh-preview:CreateVirtualNode",
         "appmesh-preview:CreateVirtualService",
         "appmesh-preview:DeleteVirtualService",
         "appmesh-preview:DescribeVirtualService",
         "appmesh-preview:UpdateGatewayRoute",
         "appmesh-preview:UpdateVirtualService"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appmesh-preview:CreateGatewayRoute",
        "appmesh-preview:CreateVirtualNode",
        "appmesh-preview:CreateVirtualService",
        "appmesh-preview:DeleteVirtualService",
        "appmesh-preview:DescribeVirtualService",
        "appmesh-preview:UpdateGatewayRoute",
        "appmesh-preview:UpdateVirtualService"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appmesh-preview:virtualService"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appmesh-preview:virtualService"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appmesh-preview:CreateMesh",
         "appmesh-preview:DeleteMesh",
         "appmesh-preview:DeleteMeshPolicy",
         "appmesh-preview:DescribeMesh",
         "appmesh-preview:GetMeshPolicy",
         "appmesh-preview:ListVirtualGateways",
         "appmesh-preview:ListVirtualNodes",
         "appmesh-preview:ListVirtualRouters",
         "appmesh-preview:ListVirtualServices",
         "appmesh-preview:PutMeshPolicy",
         "appmesh-preview:UpdateMesh"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appmesh-preview:CreateMesh",
        "appmesh-preview:DeleteMesh",
        "appmesh-preview:DeleteMeshPolicy",
        "appmesh-preview:DescribeMesh",
        "appmesh-preview:GetMeshPolicy",
        "appmesh-preview:ListVirtualGateways",
        "appmesh-preview:ListVirtualNodes",
        "appmesh-preview:ListVirtualRouters",
        "appmesh-preview:ListVirtualServices",
        "appmesh-preview:PutMeshPolicy",
        "appmesh-preview:UpdateMesh"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appmesh-preview:mesh"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appmesh-preview:mesh"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appmesh-preview:CreateRoute",
         "appmesh-preview:DeleteRoute",
         "appmesh-preview:DescribeRoute",
         "appmesh-preview:UpdateRoute"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appmesh-preview:CreateRoute",
        "appmesh-preview:DeleteRoute",
        "appmesh-preview:DescribeRoute",
        "appmesh-preview:UpdateRoute"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appmesh-preview:route"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appmesh-preview:route"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appmesh-preview:CreateRoute",
         "appmesh-preview:CreateVirtualNode",
         "appmesh-preview:CreateVirtualService",
         "appmesh-preview:DeleteVirtualNode",
         "appmesh-preview:DescribeVirtualNode",
         "appmesh-preview:StreamAggregatedResources",
         "appmesh-preview:UpdateRoute",
         "appmesh-preview:UpdateVirtualNode",
         "appmesh-preview:UpdateVirtualService"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appmesh-preview:CreateRoute",
        "appmesh-preview:CreateVirtualNode",
        "appmesh-preview:CreateVirtualService",
        "appmesh-preview:DeleteVirtualNode",
        "appmesh-preview:DescribeVirtualNode",
        "appmesh-preview:StreamAggregatedResources",
        "appmesh-preview:UpdateRoute",
        "appmesh-preview:UpdateVirtualNode",
        "appmesh-preview:UpdateVirtualService"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appmesh-preview:virtualNode"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appmesh-preview:virtualNode"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appmesh-preview:CreateVirtualGateway",
         "appmesh-preview:DeleteVirtualGateway",
         "appmesh-preview:DescribeVirtualGateway",
         "appmesh-preview:ListGatewayRoutes",
         "appmesh-preview:StreamAggregatedResources",
         "appmesh-preview:UpdateVirtualGateway"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appmesh-preview:CreateVirtualGateway",
        "appmesh-preview:DeleteVirtualGateway",
        "appmesh-preview:DescribeVirtualGateway",
        "appmesh-preview:ListGatewayRoutes",
        "appmesh-preview:StreamAggregatedResources",
        "appmesh-preview:UpdateVirtualGateway"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appmesh-preview:virtualGateway"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appmesh-preview:virtualGateway"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appmesh-preview:CreateVirtualRouter",
         "appmesh-preview:CreateVirtualService",
         "appmesh-preview:DeleteVirtualRouter",
         "appmesh-preview:DescribeVirtualRouter",
         "appmesh-preview:ListRoutes",
         "appmesh-preview:UpdateVirtualRouter",
         "appmesh-preview:UpdateVirtualService"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appmesh-preview:CreateVirtualRouter",
        "appmesh-preview:CreateVirtualService",
        "appmesh-preview:DeleteVirtualRouter",
        "appmesh-preview:DescribeVirtualRouter",
        "appmesh-preview:ListRoutes",
        "appmesh-preview:UpdateVirtualRouter",
        "appmesh-preview:UpdateVirtualService"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appmesh-preview:virtualRouter"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appmesh-preview:virtualRouter"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apprunner:AssociateCustomDomain",
         "apprunner:AssociateWebAcl",
         "apprunner:CreateService",
         "apprunner:DeleteService",
         "apprunner:DescribeCustomDomains",
         "apprunner:DescribeOperation",
         "apprunner:DescribeService",
         "apprunner:DescribeWebAclForService",
         "apprunner:DisassociateCustomDomain",
         "apprunner:DisassociateWebAcl",
         "apprunner:ListOperations",
         "apprunner:ListTagsForResource",
         "apprunner:PauseService",
         "apprunner:ResumeService",
         "apprunner:StartDeployment",
         "apprunner:TagResource",
         "apprunner:UntagResource",
         "apprunner:UpdateService"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apprunner:AssociateCustomDomain",
        "apprunner:AssociateWebAcl",
        "apprunner:CreateService",
        "apprunner:DeleteService",
        "apprunner:DescribeCustomDomains",
        "apprunner:DescribeOperation",
        "apprunner:DescribeService",
        "apprunner:DescribeWebAclForService",
        "apprunner:DisassociateCustomDomain",
        "apprunner:DisassociateWebAcl",
        "apprunner:ListOperations",
        "apprunner:ListTagsForResource",
        "apprunner:PauseService",
        "apprunner:ResumeService",
        "apprunner:StartDeployment",
        "apprunner:TagResource",
        "apprunner:UntagResource",
        "apprunner:UpdateService"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apprunner:service"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apprunner:service"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apprunner:AssociateWebAcl",
         "apprunner:ListAssociatedServicesForWebAcl"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apprunner:AssociateWebAcl",
        "apprunner:ListAssociatedServicesForWebAcl"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apprunner:webacl"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apprunner:webacl"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apprunner:CreateAutoScalingConfiguration",
         "apprunner:CreateService",
         "apprunner:DeleteAutoScalingConfiguration",
         "apprunner:DescribeAutoScalingConfiguration",
         "apprunner:ListServicesForAutoScalingConfiguration",
         "apprunner:ListTagsForResource",
         "apprunner:TagResource",
         "apprunner:UntagResource",
         "apprunner:UpdateDefaultAutoScalingConfiguration",
         "apprunner:UpdateService"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apprunner:CreateAutoScalingConfiguration",
        "apprunner:CreateService",
        "apprunner:DeleteAutoScalingConfiguration",
        "apprunner:DescribeAutoScalingConfiguration",
        "apprunner:ListServicesForAutoScalingConfiguration",
        "apprunner:ListTagsForResource",
        "apprunner:TagResource",
        "apprunner:UntagResource",
        "apprunner:UpdateDefaultAutoScalingConfiguration",
        "apprunner:UpdateService"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apprunner:autoscalingconfiguration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apprunner:autoscalingconfiguration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apprunner:CreateConnection",
         "apprunner:CreateService",
         "apprunner:DeleteConnection",
         "apprunner:ListTagsForResource",
         "apprunner:TagResource",
         "apprunner:UntagResource",
         "apprunner:UpdateService"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apprunner:CreateConnection",
        "apprunner:CreateService",
        "apprunner:DeleteConnection",
        "apprunner:ListTagsForResource",
        "apprunner:TagResource",
        "apprunner:UntagResource",
        "apprunner:UpdateService"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apprunner:connection"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apprunner:connection"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apprunner:CreateObservabilityConfiguration",
         "apprunner:CreateService",
         "apprunner:DeleteObservabilityConfiguration",
         "apprunner:DescribeObservabilityConfiguration",
         "apprunner:ListTagsForResource",
         "apprunner:TagResource",
         "apprunner:UntagResource",
         "apprunner:UpdateService"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apprunner:CreateObservabilityConfiguration",
        "apprunner:CreateService",
        "apprunner:DeleteObservabilityConfiguration",
        "apprunner:DescribeObservabilityConfiguration",
        "apprunner:ListTagsForResource",
        "apprunner:TagResource",
        "apprunner:UntagResource",
        "apprunner:UpdateService"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apprunner:observabilityconfiguration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apprunner:observabilityconfiguration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apprunner:CreateService",
         "apprunner:CreateVpcConnector",
         "apprunner:DeleteVpcConnector",
         "apprunner:DescribeVpcConnector",
         "apprunner:ListTagsForResource",
         "apprunner:TagResource",
         "apprunner:UntagResource",
         "apprunner:UpdateService"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apprunner:CreateService",
        "apprunner:CreateVpcConnector",
        "apprunner:DeleteVpcConnector",
        "apprunner:DescribeVpcConnector",
        "apprunner:ListTagsForResource",
        "apprunner:TagResource",
        "apprunner:UntagResource",
        "apprunner:UpdateService"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apprunner:vpcconnector"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apprunner:vpcconnector"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apprunner:CreateVpcIngressConnection",
         "apprunner:DeleteVpcIngressConnection",
         "apprunner:DescribeVpcIngressConnection",
         "apprunner:TagResource",
         "apprunner:UntagResource",
         "apprunner:UpdateVpcIngressConnection"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apprunner:CreateVpcIngressConnection",
        "apprunner:DeleteVpcIngressConnection",
        "apprunner:DescribeVpcIngressConnection",
        "apprunner:TagResource",
        "apprunner:UntagResource",
        "apprunner:UpdateVpcIngressConnection"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apprunner:vpcingressconnection"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apprunner:vpcingressconnection"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appstream:AssociateAppBlockBuilderAppBlock",
         "appstream:CreateApplication",
         "appstream:DeleteAppBlock",
         "appstream:DescribeAppBlockBuilderAppBlockAssociations",
         "appstream:DescribeAppBlocks",
         "appstream:DisassociateAppBlockBuilderAppBlock",
         "appstream:TagResource",
         "appstream:UntagResource",
         "appstream:UpdateApplication"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appstream:AssociateAppBlockBuilderAppBlock",
        "appstream:CreateApplication",
        "appstream:DeleteAppBlock",
        "appstream:DescribeAppBlockBuilderAppBlockAssociations",
        "appstream:DescribeAppBlocks",
        "appstream:DisassociateAppBlockBuilderAppBlock",
        "appstream:TagResource",
        "appstream:UntagResource",
        "appstream:UpdateApplication"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appstream:app-block"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appstream:app-block"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appstream:AssociateAppBlockBuilderAppBlock",
         "appstream:CreateAppBlockBuilder",
         "appstream:CreateAppBlockBuilderStreamingURL",
         "appstream:DeleteAppBlockBuilder",
         "appstream:DescribeAppBlockBuilderAppBlockAssociations",
         "appstream:DescribeAppBlockBuilders",
         "appstream:DisassociateAppBlockBuilderAppBlock",
         "appstream:StartAppBlockBuilder",
         "appstream:StopAppBlockBuilder",
         "appstream:TagResource",
         "appstream:UntagResource",
         "appstream:UpdateAppBlockBuilder"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appstream:AssociateAppBlockBuilderAppBlock",
        "appstream:CreateAppBlockBuilder",
        "appstream:CreateAppBlockBuilderStreamingURL",
        "appstream:DeleteAppBlockBuilder",
        "appstream:DescribeAppBlockBuilderAppBlockAssociations",
        "appstream:DescribeAppBlockBuilders",
        "appstream:DisassociateAppBlockBuilderAppBlock",
        "appstream:StartAppBlockBuilder",
        "appstream:StopAppBlockBuilder",
        "appstream:TagResource",
        "appstream:UntagResource",
        "appstream:UpdateAppBlockBuilder"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appstream:app-block-builder"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appstream:app-block-builder"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appstream:AssociateApplicationFleet",
         "appstream:DeleteApplication",
         "appstream:DescribeApplicationFleetAssociations",
         "appstream:DescribeApplications",
         "appstream:DisassociateApplicationFleet",
         "appstream:TagResource",
         "appstream:UntagResource",
         "appstream:UpdateApplication"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appstream:AssociateApplicationFleet",
        "appstream:DeleteApplication",
        "appstream:DescribeApplicationFleetAssociations",
        "appstream:DescribeApplications",
        "appstream:DisassociateApplicationFleet",
        "appstream:TagResource",
        "appstream:UntagResource",
        "appstream:UpdateApplication"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appstream:application"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appstream:application"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appstream:AssociateApplicationFleet",
         "appstream:AssociateFleet",
         "appstream:CreateFleet",
         "appstream:CreateStreamingURL",
         "appstream:DeleteFleet",
         "appstream:DescribeApplicationFleetAssociations",
         "appstream:DescribeFleets",
         "appstream:DescribeSessions",
         "appstream:DisassociateApplicationFleet",
         "appstream:DisassociateFleet",
         "appstream:ListAssociatedStacks",
         "appstream:StartFleet",
         "appstream:StopFleet",
         "appstream:TagResource",
         "appstream:UntagResource",
         "appstream:UpdateFleet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appstream:AssociateApplicationFleet",
        "appstream:AssociateFleet",
        "appstream:CreateFleet",
        "appstream:CreateStreamingURL",
        "appstream:DeleteFleet",
        "appstream:DescribeApplicationFleetAssociations",
        "appstream:DescribeFleets",
        "appstream:DescribeSessions",
        "appstream:DisassociateApplicationFleet",
        "appstream:DisassociateFleet",
        "appstream:ListAssociatedStacks",
        "appstream:StartFleet",
        "appstream:StopFleet",
        "appstream:TagResource",
        "appstream:UntagResource",
        "appstream:UpdateFleet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appstream:fleet"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appstream:fleet"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appstream:AssociateApplicationToEntitlement",
         "appstream:AssociateFleet",
         "appstream:BatchAssociateUserStack",
         "appstream:BatchDisassociateUserStack",
         "appstream:CreateEntitlement",
         "appstream:CreateStack",
         "appstream:CreateStreamingURL",
         "appstream:CreateThemeForStack",
         "appstream:DeleteEntitlement",
         "appstream:DeleteStack",
         "appstream:DeleteThemeForStack",
         "appstream:DescribeEntitlements",
         "appstream:DescribeSessions",
         "appstream:DescribeStacks",
         "appstream:DescribeThemeForStack",
         "appstream:DescribeUserStackAssociations",
         "appstream:DisassociateApplicationFromEntitlement",
         "appstream:DisassociateFleet",
         "appstream:ListAssociatedFleets",
         "appstream:ListEntitledApplications",
         "appstream:Stream",
         "appstream:TagResource",
         "appstream:UntagResource",
         "appstream:UpdateEntitlement",
         "appstream:UpdateStack",
         "appstream:UpdateThemeForStack"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appstream:AssociateApplicationToEntitlement",
        "appstream:AssociateFleet",
        "appstream:BatchAssociateUserStack",
        "appstream:BatchDisassociateUserStack",
        "appstream:CreateEntitlement",
        "appstream:CreateStack",
        "appstream:CreateStreamingURL",
        "appstream:CreateThemeForStack",
        "appstream:DeleteEntitlement",
        "appstream:DeleteStack",
        "appstream:DeleteThemeForStack",
        "appstream:DescribeEntitlements",
        "appstream:DescribeSessions",
        "appstream:DescribeStacks",
        "appstream:DescribeThemeForStack",
        "appstream:DescribeUserStackAssociations",
        "appstream:DisassociateApplicationFromEntitlement",
        "appstream:DisassociateFleet",
        "appstream:ListAssociatedFleets",
        "appstream:ListEntitledApplications",
        "appstream:Stream",
        "appstream:TagResource",
        "appstream:UntagResource",
        "appstream:UpdateEntitlement",
        "appstream:UpdateStack",
        "appstream:UpdateThemeForStack"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appstream:stack"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appstream:stack"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appstream:CopyImage",
         "appstream:CreateFleet",
         "appstream:CreateImageBuilder",
         "appstream:CreateUpdatedImage",
         "appstream:DeleteImage",
         "appstream:DeleteImagePermissions",
         "appstream:DescribeImagePermissions",
         "appstream:DescribeImages",
         "appstream:TagResource",
         "appstream:UntagResource",
         "appstream:UpdateFleet",
         "appstream:UpdateImagePermissions"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appstream:CopyImage",
        "appstream:CreateFleet",
        "appstream:CreateImageBuilder",
        "appstream:CreateUpdatedImage",
        "appstream:DeleteImage",
        "appstream:DeleteImagePermissions",
        "appstream:DescribeImagePermissions",
        "appstream:DescribeImages",
        "appstream:TagResource",
        "appstream:UntagResource",
        "appstream:UpdateFleet",
        "appstream:UpdateImagePermissions"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appstream:image"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appstream:image"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appstream:CreateImageBuilder",
         "appstream:CreateImageBuilderStreamingURL",
         "appstream:DeleteImageBuilder",
         "appstream:DescribeImageBuilders",
         "appstream:StartImageBuilder",
         "appstream:StopImageBuilder",
         "appstream:TagResource",
         "appstream:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appstream:CreateImageBuilder",
        "appstream:CreateImageBuilderStreamingURL",
        "appstream:DeleteImageBuilder",
        "appstream:DescribeImageBuilders",
        "appstream:StartImageBuilder",
        "appstream:StopImageBuilder",
        "appstream:TagResource",
        "appstream:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appstream:image-builder"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appstream:image-builder"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appsync:AssociateApi",
         "appsync:DeleteDomainName",
         "appsync:DisassociateApi",
         "appsync:GetApiAssociation",
         "appsync:GetDomainName",
         "appsync:UpdateDomainName"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appsync:AssociateApi",
        "appsync:DeleteDomainName",
        "appsync:DisassociateApi",
        "appsync:GetApiAssociation",
        "appsync:GetDomainName",
        "appsync:UpdateDomainName"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appsync:domain"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appsync:domain"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appsync:AssociateMergedGraphqlApi",
         "appsync:AssociateSourceGraphqlApi",
         "appsync:DeleteGraphqlApi",
         "appsync:GetGraphqlApi",
         "appsync:GraphQL",
         "appsync:ListTagsForResource",
         "appsync:SourceGraphQL",
         "appsync:TagResource",
         "appsync:UntagResource",
         "appsync:UpdateGraphqlApi"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appsync:AssociateMergedGraphqlApi",
        "appsync:AssociateSourceGraphqlApi",
        "appsync:DeleteGraphqlApi",
        "appsync:GetGraphqlApi",
        "appsync:GraphQL",
        "appsync:ListTagsForResource",
        "appsync:SourceGraphQL",
        "appsync:TagResource",
        "appsync:UntagResource",
        "appsync:UpdateGraphqlApi"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appsync:graphqlapi"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appsync:graphqlapi"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appsync:CreateChannelNamespace",
         "appsync:DeleteChannelNamespace",
         "appsync:EventPublish",
         "appsync:EventSubscribe",
         "appsync:GetChannelNamespace",
         "appsync:ListTagsForResource",
         "appsync:TagResource",
         "appsync:UntagResource",
         "appsync:UpdateChannelNamespace"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appsync:CreateChannelNamespace",
        "appsync:DeleteChannelNamespace",
        "appsync:EventPublish",
        "appsync:EventSubscribe",
        "appsync:GetChannelNamespace",
        "appsync:ListTagsForResource",
        "appsync:TagResource",
        "appsync:UntagResource",
        "appsync:UpdateChannelNamespace"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appsync:channelNamespace"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appsync:channelNamespace"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appsync:DeleteApi",
         "appsync:EventConnect",
         "appsync:GetApi",
         "appsync:ListChannelNamespaces",
         "appsync:ListTagsForResource",
         "appsync:TagResource",
         "appsync:UntagResource",
         "appsync:UpdateApi"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appsync:DeleteApi",
        "appsync:EventConnect",
        "appsync:GetApi",
        "appsync:ListChannelNamespaces",
        "appsync:ListTagsForResource",
        "appsync:TagResource",
        "appsync:UntagResource",
        "appsync:UpdateApi"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appsync:api"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appsync:api"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appsync:DisassociateMergedGraphqlApi"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appsync:DisassociateMergedGraphqlApi"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appsync:mergedApiAssociation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appsync:mergedApiAssociation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appsync:DisassociateSourceGraphqlApi",
         "appsync:GetSourceApiAssociation",
         "appsync:StartSchemaMerge",
         "appsync:UpdateSourceApiAssociation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appsync:DisassociateSourceGraphqlApi",
        "appsync:GetSourceApiAssociation",
        "appsync:StartSchemaMerge",
        "appsync:UpdateSourceApiAssociation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appsync:sourceApiAssociation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appsync:sourceApiAssociation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "appsync:GraphQL",
         "appsync:SourceGraphQL"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "appsync:GraphQL",
        "appsync:SourceGraphQL"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/appsync:field"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/appsync:field"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apptest:DeleteTestCase",
         "apptest:GetTestCase",
         "apptest:TagResource",
         "apptest:UntagResource",
         "apptest:UpdateTestCase"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apptest:DeleteTestCase",
        "apptest:GetTestCase",
        "apptest:TagResource",
        "apptest:UntagResource",
        "apptest:UpdateTestCase"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apptest:TestCase"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apptest:TestCase"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apptest:DeleteTestConfiguration",
         "apptest:GetTestConfiguration",
         "apptest:TagResource",
         "apptest:UntagResource",
         "apptest:UpdateTestConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apptest:DeleteTestConfiguration",
        "apptest:GetTestConfiguration",
        "apptest:TagResource",
        "apptest:UntagResource",
        "apptest:UpdateTestConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apptest:TestConfiguration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apptest:TestConfiguration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apptest:DeleteTestRun",
         "apptest:GetTestRunStep",
         "apptest:ListTestRunSteps",
         "apptest:ListTestRunTestCases",
         "apptest:TagResource",
         "apptest:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apptest:DeleteTestRun",
        "apptest:GetTestRunStep",
        "apptest:ListTestRunSteps",
        "apptest:ListTestRunTestCases",
        "apptest:TagResource",
        "apptest:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apptest:TestRun"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apptest:TestRun"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "apptest:DeleteTestSuite",
         "apptest:GetTestSuite",
         "apptest:TagResource",
         "apptest:UntagResource",
         "apptest:UpdateTestSuite"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "apptest:DeleteTestSuite",
        "apptest:GetTestSuite",
        "apptest:TagResource",
        "apptest:UntagResource",
        "apptest:UpdateTestSuite"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/apptest:TestSuite"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/apptest:TestSuite"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "aps:CreateAlertManagerAlerts",
         "aps:CreateAlertManagerDefinition",
         "aps:CreateLoggingConfiguration",
         "aps:CreateScraper",
         "aps:DeleteAlertManagerDefinition",
         "aps:DeleteAlertManagerSilence",
         "aps:DeleteLoggingConfiguration",
         "aps:DeleteWorkspace",
         "aps:DescribeAlertManagerDefinition",
         "aps:DescribeLoggingConfiguration",
         "aps:DescribeWorkspace",
         "aps:GetAlertManagerSilence",
         "aps:GetAlertManagerStatus",
         "aps:GetLabels",
         "aps:GetMetricMetadata",
         "aps:GetSeries",
         "aps:ListAlertManagerAlertGroups",
         "aps:ListAlertManagerAlerts",
         "aps:ListAlertManagerReceivers",
         "aps:ListAlertManagerSilences",
         "aps:ListAlerts",
         "aps:ListRuleGroupsNamespaces",
         "aps:ListRules",
         "aps:ListTagsForResource",
         "aps:PutAlertManagerDefinition",
         "aps:PutAlertManagerSilences",
         "aps:QueryMetrics",
         "aps:RemoteWrite",
         "aps:TagResource",
         "aps:UntagResource",
         "aps:UpdateLoggingConfiguration",
         "aps:UpdateScraper",
         "aps:UpdateWorkspaceAlias"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "aps:CreateAlertManagerAlerts",
        "aps:CreateAlertManagerDefinition",
        "aps:CreateLoggingConfiguration",
        "aps:CreateScraper",
        "aps:DeleteAlertManagerDefinition",
        "aps:DeleteAlertManagerSilence",
        "aps:DeleteLoggingConfiguration",
        "aps:DeleteWorkspace",
        "aps:DescribeAlertManagerDefinition",
        "aps:DescribeLoggingConfiguration",
        "aps:DescribeWorkspace",
        "aps:GetAlertManagerSilence",
        "aps:GetAlertManagerStatus",
        "aps:GetLabels",
        "aps:GetMetricMetadata",
        "aps:GetSeries",
        "aps:ListAlertManagerAlertGroups",
        "aps:ListAlertManagerAlerts",
        "aps:ListAlertManagerReceivers",
        "aps:ListAlertManagerSilences",
        "aps:ListAlerts",
        "aps:ListRuleGroupsNamespaces",
        "aps:ListRules",
        "aps:ListTagsForResource",
        "aps:PutAlertManagerDefinition",
        "aps:PutAlertManagerSilences",
        "aps:QueryMetrics",
        "aps:RemoteWrite",
        "aps:TagResource",
        "aps:UntagResource",
        "aps:UpdateLoggingConfiguration",
        "aps:UpdateScraper",
        "aps:UpdateWorkspaceAlias"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/aps:workspace"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/aps:workspace"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "aps:CreateRuleGroupsNamespace",
         "aps:DeleteRuleGroupsNamespace",
         "aps:DescribeRuleGroupsNamespace",
         "aps:ListTagsForResource",
         "aps:PutRuleGroupsNamespace",
         "aps:TagResource",
         "aps:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "aps:CreateRuleGroupsNamespace",
        "aps:DeleteRuleGroupsNamespace",
        "aps:DescribeRuleGroupsNamespace",
        "aps:ListTagsForResource",
        "aps:PutRuleGroupsNamespace",
        "aps:TagResource",
        "aps:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/aps:rulegroupsnamespace"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/aps:rulegroupsnamespace"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "aps:CreateScraper"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "aps:CreateScraper"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/aps:cluster"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/aps:cluster"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "aps:DeleteScraper",
         "aps:DescribeScraper",
         "aps:ListTagsForResource",
         "aps:TagResource",
         "aps:UntagResource",
         "aps:UpdateScraper"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "aps:DeleteScraper",
        "aps:DescribeScraper",
        "aps:ListTagsForResource",
        "aps:TagResource",
        "aps:UntagResource",
        "aps:UpdateScraper"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/aps:scraper"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/aps:scraper"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "arc-zonal-shift:CancelZonalShift",
         "arc-zonal-shift:CreatePracticeRunConfiguration",
         "arc-zonal-shift:DeletePracticeRunConfiguration",
         "arc-zonal-shift:GetManagedResource",
         "arc-zonal-shift:StartZonalShift",
         "arc-zonal-shift:UpdatePracticeRunConfiguration",
         "arc-zonal-shift:UpdateZonalAutoshiftConfiguration",
         "arc-zonal-shift:UpdateZonalShift"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "arc-zonal-shift:CancelZonalShift",
        "arc-zonal-shift:CreatePracticeRunConfiguration",
        "arc-zonal-shift:DeletePracticeRunConfiguration",
        "arc-zonal-shift:GetManagedResource",
        "arc-zonal-shift:StartZonalShift",
        "arc-zonal-shift:UpdatePracticeRunConfiguration",
        "arc-zonal-shift:UpdateZonalAutoshiftConfiguration",
        "arc-zonal-shift:UpdateZonalShift"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/arc-zonal-shift:ALB"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/arc-zonal-shift:ALB"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "arc-zonal-shift:CancelZonalShift",
         "arc-zonal-shift:CreatePracticeRunConfiguration",
         "arc-zonal-shift:DeletePracticeRunConfiguration",
         "arc-zonal-shift:GetManagedResource",
         "arc-zonal-shift:StartZonalShift",
         "arc-zonal-shift:UpdatePracticeRunConfiguration",
         "arc-zonal-shift:UpdateZonalAutoshiftConfiguration",
         "arc-zonal-shift:UpdateZonalShift"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "arc-zonal-shift:CancelZonalShift",
        "arc-zonal-shift:CreatePracticeRunConfiguration",
        "arc-zonal-shift:DeletePracticeRunConfiguration",
        "arc-zonal-shift:GetManagedResource",
        "arc-zonal-shift:StartZonalShift",
        "arc-zonal-shift:UpdatePracticeRunConfiguration",
        "arc-zonal-shift:UpdateZonalAutoshiftConfiguration",
        "arc-zonal-shift:UpdateZonalShift"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/arc-zonal-shift:NLB"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/arc-zonal-shift:NLB"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "artifact:AcceptAgreement",
         "artifact:AcceptNdaForAgreement",
         "artifact:DownloadAgreement",
         "artifact:GetAgreement",
         "artifact:GetNdaForAgreement"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "artifact:AcceptAgreement",
        "artifact:AcceptNdaForAgreement",
        "artifact:DownloadAgreement",
        "artifact:GetAgreement",
        "artifact:GetNdaForAgreement"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/artifact:agreement"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/artifact:agreement"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "artifact:DownloadAgreement",
         "artifact:GetCustomerAgreement",
         "artifact:TerminateAgreement"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "artifact:DownloadAgreement",
        "artifact:GetCustomerAgreement",
        "artifact:TerminateAgreement"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/artifact:customer-agreement"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/artifact:customer-agreement"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "artifact:Get"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "artifact:Get"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/artifact:report-package"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/artifact:report-package"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "artifact:GetReport",
         "artifact:GetReportMetadata",
         "artifact:GetTermForReport"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "artifact:GetReport",
        "artifact:GetReportMetadata",
        "artifact:GetTermForReport"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/artifact:report"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/artifact:report"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "athena:BatchGetNamedQuery",
         "athena:BatchGetPreparedStatement",
         "athena:BatchGetQueryExecution",
         "athena:CancelQueryExecution",
         "athena:CreateNamedQuery",
         "athena:CreateNotebook",
         "athena:CreatePreparedStatement",
         "athena:CreatePresignedNotebookUrl",
         "athena:CreateWorkGroup",
         "athena:DeleteNamedQuery",
         "athena:DeleteNotebook",
         "athena:DeletePreparedStatement",
         "athena:DeleteWorkGroup",
         "athena:ExportNotebook",
         "athena:GetCalculationExecution",
         "athena:GetCalculationExecutionCode",
         "athena:GetCalculationExecutionStatus",
         "athena:GetNamedQuery",
         "athena:GetNotebookMetadata",
         "athena:GetPreparedStatement",
         "athena:GetQueryExecution",
         "athena:GetQueryResults",
         "athena:GetQueryResultsStream",
         "athena:GetQueryRuntimeStatistics",
         "athena:GetSession",
         "athena:GetSessionStatus",
         "athena:GetWorkGroup",
         "athena:ImportNotebook",
         "athena:ListCalculationExecutions",
         "athena:ListNamedQueries",
         "athena:ListNotebookMetadata",
         "athena:ListNotebookSessions",
         "athena:ListPreparedStatements",
         "athena:ListQueryExecutions",
         "athena:ListSessions",
         "athena:ListTagsForResource",
         "athena:PutCapacityAssignmentConfiguration",
         "athena:StartCalculationExecution",
         "athena:StartQueryExecution",
         "athena:StartSession",
         "athena:StopCalculationExecution",
         "athena:StopQueryExecution",
         "athena:TagResource",
         "athena:TerminateSession",
         "athena:UntagResource",
         "athena:UpdateNamedQuery",
         "athena:UpdateNotebook",
         "athena:UpdateNotebookMetadata",
         "athena:UpdatePreparedStatement",
         "athena:UpdateWorkGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "athena:BatchGetNamedQuery",
        "athena:BatchGetPreparedStatement",
        "athena:BatchGetQueryExecution",
        "athena:CancelQueryExecution",
        "athena:CreateNamedQuery",
        "athena:CreateNotebook",
        "athena:CreatePreparedStatement",
        "athena:CreatePresignedNotebookUrl",
        "athena:CreateWorkGroup",
        "athena:DeleteNamedQuery",
        "athena:DeleteNotebook",
        "athena:DeletePreparedStatement",
        "athena:DeleteWorkGroup",
        "athena:ExportNotebook",
        "athena:GetCalculationExecution",
        "athena:GetCalculationExecutionCode",
        "athena:GetCalculationExecutionStatus",
        "athena:GetNamedQuery",
        "athena:GetNotebookMetadata",
        "athena:GetPreparedStatement",
        "athena:GetQueryExecution",
        "athena:GetQueryResults",
        "athena:GetQueryResultsStream",
        "athena:GetQueryRuntimeStatistics",
        "athena:GetSession",
        "athena:GetSessionStatus",
        "athena:GetWorkGroup",
        "athena:ImportNotebook",
        "athena:ListCalculationExecutions",
        "athena:ListNamedQueries",
        "athena:ListNotebookMetadata",
        "athena:ListNotebookSessions",
        "athena:ListPreparedStatements",
        "athena:ListQueryExecutions",
        "athena:ListSessions",
        "athena:ListTagsForResource",
        "athena:PutCapacityAssignmentConfiguration",
        "athena:StartCalculationExecution",
        "athena:StartQueryExecution",
        "athena:StartSession",
        "athena:StopCalculationExecution",
        "athena:StopQueryExecution",
        "athena:TagResource",
        "athena:TerminateSession",
        "athena:UntagResource",
        "athena:UpdateNamedQuery",
        "athena:UpdateNotebook",
        "athena:UpdateNotebookMetadata",
        "athena:UpdatePreparedStatement",
        "athena:UpdateWorkGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/athena:workgroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/athena:workgroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "athena:CancelCapacityReservation",
         "athena:CreateCapacityReservation",
         "athena:DeleteCapacityReservation",
         "athena:GetCapacityAssignmentConfiguration",
         "athena:GetCapacityReservation",
         "athena:ListTagsForResource",
         "athena:PutCapacityAssignmentConfiguration",
         "athena:TagResource",
         "athena:UntagResource",
         "athena:UpdateCapacityReservation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "athena:CancelCapacityReservation",
        "athena:CreateCapacityReservation",
        "athena:DeleteCapacityReservation",
        "athena:GetCapacityAssignmentConfiguration",
        "athena:GetCapacityReservation",
        "athena:ListTagsForResource",
        "athena:PutCapacityAssignmentConfiguration",
        "athena:TagResource",
        "athena:UntagResource",
        "athena:UpdateCapacityReservation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/athena:capacity-reservation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/athena:capacity-reservation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "athena:CreateDataCatalog",
         "athena:DeleteDataCatalog",
         "athena:GetDataCatalog",
         "athena:GetDatabase",
         "athena:GetTableMetadata",
         "athena:ListDatabases",
         "athena:ListTableMetadata",
         "athena:ListTagsForResource",
         "athena:TagResource",
         "athena:UntagResource",
         "athena:UpdateDataCatalog"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "athena:CreateDataCatalog",
        "athena:DeleteDataCatalog",
        "athena:GetDataCatalog",
        "athena:GetDatabase",
        "athena:GetTableMetadata",
        "athena:ListDatabases",
        "athena:ListTableMetadata",
        "athena:ListTagsForResource",
        "athena:TagResource",
        "athena:UntagResource",
        "athena:UpdateDataCatalog"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/athena:datacatalog"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/athena:datacatalog"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "auditmanager:AssociateAssessmentReportEvidenceFolder",
         "auditmanager:BatchAssociateAssessmentReportEvidence",
         "auditmanager:BatchCreateDelegationByAssessment",
         "auditmanager:BatchDeleteDelegationByAssessment",
         "auditmanager:BatchDisassociateAssessmentReportEvidence",
         "auditmanager:CreateAssessmentReport",
         "auditmanager:DeleteAssessment",
         "auditmanager:DeleteAssessmentReport",
         "auditmanager:DisassociateAssessmentReportEvidenceFolder",
         "auditmanager:GetAssessment",
         "auditmanager:GetAssessmentReportUrl",
         "auditmanager:GetChangeLogs",
         "auditmanager:GetEvidenceFoldersByAssessment",
         "auditmanager:ListTagsForResource",
         "auditmanager:TagResource",
         "auditmanager:UntagResource",
         "auditmanager:UpdateAssessment",
         "auditmanager:UpdateAssessmentStatus"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "auditmanager:AssociateAssessmentReportEvidenceFolder",
        "auditmanager:BatchAssociateAssessmentReportEvidence",
        "auditmanager:BatchCreateDelegationByAssessment",
        "auditmanager:BatchDeleteDelegationByAssessment",
        "auditmanager:BatchDisassociateAssessmentReportEvidence",
        "auditmanager:CreateAssessmentReport",
        "auditmanager:DeleteAssessment",
        "auditmanager:DeleteAssessmentReport",
        "auditmanager:DisassociateAssessmentReportEvidenceFolder",
        "auditmanager:GetAssessment",
        "auditmanager:GetAssessmentReportUrl",
        "auditmanager:GetChangeLogs",
        "auditmanager:GetEvidenceFoldersByAssessment",
        "auditmanager:ListTagsForResource",
        "auditmanager:TagResource",
        "auditmanager:UntagResource",
        "auditmanager:UpdateAssessment",
        "auditmanager:UpdateAssessmentStatus"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/auditmanager:assessment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/auditmanager:assessment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "auditmanager:BatchImportEvidenceToAssessmentControl",
         "auditmanager:GetEvidence",
         "auditmanager:GetEvidenceByEvidenceFolder",
         "auditmanager:GetEvidenceFolder",
         "auditmanager:GetEvidenceFoldersByAssessmentControl",
         "auditmanager:UpdateAssessmentControl",
         "auditmanager:UpdateAssessmentControlSetStatus"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "auditmanager:BatchImportEvidenceToAssessmentControl",
        "auditmanager:GetEvidence",
        "auditmanager:GetEvidenceByEvidenceFolder",
        "auditmanager:GetEvidenceFolder",
        "auditmanager:GetEvidenceFoldersByAssessmentControl",
        "auditmanager:UpdateAssessmentControl",
        "auditmanager:UpdateAssessmentControlSetStatus"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/auditmanager:assessmentControlSet"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/auditmanager:assessmentControlSet"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "auditmanager:DeleteAssessmentFramework",
         "auditmanager:GetAssessmentFramework",
         "auditmanager:StartAssessmentFrameworkShare",
         "auditmanager:UpdateAssessmentFramework"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "auditmanager:DeleteAssessmentFramework",
        "auditmanager:GetAssessmentFramework",
        "auditmanager:StartAssessmentFrameworkShare",
        "auditmanager:UpdateAssessmentFramework"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/auditmanager:assessmentFramework"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/auditmanager:assessmentFramework"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "auditmanager:DeleteControl",
         "auditmanager:GetControl",
         "auditmanager:ListTagsForResource",
         "auditmanager:TagResource",
         "auditmanager:UntagResource",
         "auditmanager:UpdateControl"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "auditmanager:DeleteControl",
        "auditmanager:GetControl",
        "auditmanager:ListTagsForResource",
        "auditmanager:TagResource",
        "auditmanager:UntagResource",
        "auditmanager:UpdateControl"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/auditmanager:control"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/auditmanager:control"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "autoscaling:AttachInstances",
         "autoscaling:AttachLoadBalancerTargetGroups",
         "autoscaling:AttachLoadBalancers",
         "autoscaling:AttachTrafficSources",
         "autoscaling:BatchDeleteScheduledAction",
         "autoscaling:BatchPutScheduledUpdateGroupAction",
         "autoscaling:CancelInstanceRefresh",
         "autoscaling:CompleteLifecycleAction",
         "autoscaling:CreateAutoScalingGroup",
         "autoscaling:CreateOrUpdateTags",
         "autoscaling:DeleteAutoScalingGroup",
         "autoscaling:DeleteLifecycleHook",
         "autoscaling:DeleteNotificationConfiguration",
         "autoscaling:DeletePolicy",
         "autoscaling:DeleteScheduledAction",
         "autoscaling:DeleteTags",
         "autoscaling:DeleteWarmPool",
         "autoscaling:DetachInstances",
         "autoscaling:DetachLoadBalancerTargetGroups",
         "autoscaling:DetachLoadBalancers",
         "autoscaling:DetachTrafficSources",
         "autoscaling:DisableMetricsCollection",
         "autoscaling:EnableMetricsCollection",
         "autoscaling:EnterStandby",
         "autoscaling:ExecutePolicy",
         "autoscaling:ExitStandby",
         "autoscaling:PutLifecycleHook",
         "autoscaling:PutNotificationConfiguration",
         "autoscaling:PutScalingPolicy",
         "autoscaling:PutScheduledUpdateGroupAction",
         "autoscaling:PutWarmPool",
         "autoscaling:RecordLifecycleActionHeartbeat",
         "autoscaling:ResumeProcesses",
         "autoscaling:RollbackInstanceRefresh",
         "autoscaling:SetDesiredCapacity",
         "autoscaling:SetInstanceHealth",
         "autoscaling:SetInstanceProtection",
         "autoscaling:StartInstanceRefresh",
         "autoscaling:SuspendProcesses",
         "autoscaling:TerminateInstanceInAutoScalingGroup",
         "autoscaling:UpdateAutoScalingGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "autoscaling:AttachInstances",
        "autoscaling:AttachLoadBalancerTargetGroups",
        "autoscaling:AttachLoadBalancers",
        "autoscaling:AttachTrafficSources",
        "autoscaling:BatchDeleteScheduledAction",
        "autoscaling:BatchPutScheduledUpdateGroupAction",
        "autoscaling:CancelInstanceRefresh",
        "autoscaling:CompleteLifecycleAction",
        "autoscaling:CreateAutoScalingGroup",
        "autoscaling:CreateOrUpdateTags",
        "autoscaling:DeleteAutoScalingGroup",
        "autoscaling:DeleteLifecycleHook",
        "autoscaling:DeleteNotificationConfiguration",
        "autoscaling:DeletePolicy",
        "autoscaling:DeleteScheduledAction",
        "autoscaling:DeleteTags",
        "autoscaling:DeleteWarmPool",
        "autoscaling:DetachInstances",
        "autoscaling:DetachLoadBalancerTargetGroups",
        "autoscaling:DetachLoadBalancers",
        "autoscaling:DetachTrafficSources",
        "autoscaling:DisableMetricsCollection",
        "autoscaling:EnableMetricsCollection",
        "autoscaling:EnterStandby",
        "autoscaling:ExecutePolicy",
        "autoscaling:ExitStandby",
        "autoscaling:PutLifecycleHook",
        "autoscaling:PutNotificationConfiguration",
        "autoscaling:PutScalingPolicy",
        "autoscaling:PutScheduledUpdateGroupAction",
        "autoscaling:PutWarmPool",
        "autoscaling:RecordLifecycleActionHeartbeat",
        "autoscaling:ResumeProcesses",
        "autoscaling:RollbackInstanceRefresh",
        "autoscaling:SetDesiredCapacity",
        "autoscaling:SetInstanceHealth",
        "autoscaling:SetInstanceProtection",
        "autoscaling:StartInstanceRefresh",
        "autoscaling:SuspendProcesses",
        "autoscaling:TerminateInstanceInAutoScalingGroup",
        "autoscaling:UpdateAutoScalingGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/autoscaling:autoScalingGroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/autoscaling:autoScalingGroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "autoscaling:CreateLaunchConfiguration",
         "autoscaling:DeleteLaunchConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "autoscaling:CreateLaunchConfiguration",
        "autoscaling:DeleteLaunchConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/autoscaling:launchConfiguration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/autoscaling:launchConfiguration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "aws-marketplace:CancelChangeSet",
         "aws-marketplace:DescribeChangeSet",
         "aws-marketplace:ListTagsForResource",
         "aws-marketplace:TagResource",
         "aws-marketplace:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "aws-marketplace:CancelChangeSet",
        "aws-marketplace:DescribeChangeSet",
        "aws-marketplace:ListTagsForResource",
        "aws-marketplace:TagResource",
        "aws-marketplace:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/aws-marketplace:ChangeSet"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/aws-marketplace:ChangeSet"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "aws-marketplace:DeleteResourcePolicy",
         "aws-marketplace:DescribeEntity",
         "aws-marketplace:GetResourcePolicy",
         "aws-marketplace:ListTagsForResource",
         "aws-marketplace:PutResourcePolicy",
         "aws-marketplace:StartChangeSet",
         "aws-marketplace:TagResource",
         "aws-marketplace:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "aws-marketplace:DeleteResourcePolicy",
        "aws-marketplace:DescribeEntity",
        "aws-marketplace:GetResourcePolicy",
        "aws-marketplace:ListTagsForResource",
        "aws-marketplace:PutResourcePolicy",
        "aws-marketplace:StartChangeSet",
        "aws-marketplace:TagResource",
        "aws-marketplace:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/aws-marketplace:Entity"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/aws-marketplace:Entity"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "aws-marketplace:GetBuyerDashboard"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "aws-marketplace:GetBuyerDashboard"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/aws-marketplace:Dashboard"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/aws-marketplace:Dashboard"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "aws-marketplace:GetSellerDashboard"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "aws-marketplace:GetSellerDashboard"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/aws-marketplace:SellerDashboard"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/aws-marketplace:SellerDashboard"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "aws-marketplace:ListTagsForResource",
         "aws-marketplace:PutDeploymentParameter",
         "aws-marketplace:TagResource",
         "aws-marketplace:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "aws-marketplace:ListTagsForResource",
        "aws-marketplace:PutDeploymentParameter",
        "aws-marketplace:TagResource",
        "aws-marketplace:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/aws-marketplace:DeploymentParameter"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/aws-marketplace:DeploymentParameter"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "b2bi:CreateCapability",
         "b2bi:CreateStarterMappingTemplate",
         "b2bi:DeleteTransformer",
         "b2bi:GenerateMapping",
         "b2bi:GetTransformer",
         "b2bi:GetTransformerJob",
         "b2bi:ListTagsForResource",
         "b2bi:StartTransformerJob",
         "b2bi:TagResource",
         "b2bi:TestConversion",
         "b2bi:TestMapping",
         "b2bi:TestParsing",
         "b2bi:UntagResource",
         "b2bi:UpdateCapability",
         "b2bi:UpdateTransformer"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "b2bi:CreateCapability",
        "b2bi:CreateStarterMappingTemplate",
        "b2bi:DeleteTransformer",
        "b2bi:GenerateMapping",
        "b2bi:GetTransformer",
        "b2bi:GetTransformerJob",
        "b2bi:ListTagsForResource",
        "b2bi:StartTransformerJob",
        "b2bi:TagResource",
        "b2bi:TestConversion",
        "b2bi:TestMapping",
        "b2bi:TestParsing",
        "b2bi:UntagResource",
        "b2bi:UpdateCapability",
        "b2bi:UpdateTransformer"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/b2bi:transformer"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/b2bi:transformer"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "b2bi:CreatePartnership",
         "b2bi:DeleteCapability",
         "b2bi:GetCapability",
         "b2bi:ListTagsForResource",
         "b2bi:TagResource",
         "b2bi:UntagResource",
         "b2bi:UpdateCapability",
         "b2bi:UpdatePartnership"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "b2bi:CreatePartnership",
        "b2bi:DeleteCapability",
        "b2bi:GetCapability",
        "b2bi:ListTagsForResource",
        "b2bi:TagResource",
        "b2bi:UntagResource",
        "b2bi:UpdateCapability",
        "b2bi:UpdatePartnership"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/b2bi:capability"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/b2bi:capability"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "b2bi:CreatePartnership",
         "b2bi:DeleteProfile",
         "b2bi:GetProfile",
         "b2bi:ListTagsForResource",
         "b2bi:TagResource",
         "b2bi:UntagResource",
         "b2bi:UpdateProfile"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "b2bi:CreatePartnership",
        "b2bi:DeleteProfile",
        "b2bi:GetProfile",
        "b2bi:ListTagsForResource",
        "b2bi:TagResource",
        "b2bi:UntagResource",
        "b2bi:UpdateProfile"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/b2bi:profile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/b2bi:profile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "b2bi:DeletePartnership",
         "b2bi:GetPartnership",
         "b2bi:ListTagsForResource",
         "b2bi:TagResource",
         "b2bi:UntagResource",
         "b2bi:UpdatePartnership"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "b2bi:DeletePartnership",
        "b2bi:GetPartnership",
        "b2bi:ListTagsForResource",
        "b2bi:TagResource",
        "b2bi:UntagResource",
        "b2bi:UpdatePartnership"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/b2bi:partnership"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/b2bi:partnership"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "backup:CancelLegalHold",
         "backup:CreateLegalHold",
         "backup:GetLegalHold",
         "backup:ListRecoveryPointsByLegalHold",
         "backup:ListTags",
         "backup:TagResource",
         "backup:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "backup:CancelLegalHold",
        "backup:CreateLegalHold",
        "backup:GetLegalHold",
        "backup:ListRecoveryPointsByLegalHold",
        "backup:ListTags",
        "backup:TagResource",
        "backup:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/backup:legalHold"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/backup:legalHold"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "backup:CopyFromBackupVault",
         "backup:DeleteRecoveryPoint",
         "backup:DescribeRecoveryPoint",
         "backup:DisassociateRecoveryPoint",
         "backup:DisassociateRecoveryPointFromParent",
         "backup:GetRecoveryPointIndexDetails",
         "backup:GetRecoveryPointRestoreMetadata",
         "backup:ListTags",
         "backup:SearchRecoveryPoint",
         "backup:StartCopyJob",
         "backup:StartRestoreJob",
         "backup:TagResource",
         "backup:UntagResource",
         "backup:UpdateRecoveryPointIndexSettings",
         "backup:UpdateRecoveryPointLifecycle"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "backup:CopyFromBackupVault",
        "backup:DeleteRecoveryPoint",
        "backup:DescribeRecoveryPoint",
        "backup:DisassociateRecoveryPoint",
        "backup:DisassociateRecoveryPointFromParent",
        "backup:GetRecoveryPointIndexDetails",
        "backup:GetRecoveryPointRestoreMetadata",
        "backup:ListTags",
        "backup:SearchRecoveryPoint",
        "backup:StartCopyJob",
        "backup:StartRestoreJob",
        "backup:TagResource",
        "backup:UntagResource",
        "backup:UpdateRecoveryPointIndexSettings",
        "backup:UpdateRecoveryPointLifecycle"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/backup:recoveryPoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/backup:recoveryPoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "backup:CopyIntoBackupVault",
         "backup:CreateBackupVault",
         "backup:CreateLogicallyAirGappedBackupVault",
         "backup:DeleteBackupVault",
         "backup:DeleteBackupVaultAccessPolicy",
         "backup:DeleteBackupVaultLockConfiguration",
         "backup:DeleteBackupVaultNotifications",
         "backup:DeleteBackupVaultSharingPolicy",
         "backup:DescribeBackupVault",
         "backup:GetBackupVaultAccessPolicy",
         "backup:GetBackupVaultNotifications",
         "backup:GetBackupVaultSharingPolicy",
         "backup:ListProtectedResourcesByBackupVault",
         "backup:ListRecoveryPointsByBackupVault",
         "backup:ListTags",
         "backup:PutBackupVaultAccessPolicy",
         "backup:PutBackupVaultLockConfiguration",
         "backup:PutBackupVaultNotifications",
         "backup:PutBackupVaultSharingPolicy",
         "backup:StartBackupJob",
         "backup:TagResource",
         "backup:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "backup:CopyIntoBackupVault",
        "backup:CreateBackupVault",
        "backup:CreateLogicallyAirGappedBackupVault",
        "backup:DeleteBackupVault",
        "backup:DeleteBackupVaultAccessPolicy",
        "backup:DeleteBackupVaultLockConfiguration",
        "backup:DeleteBackupVaultNotifications",
        "backup:DeleteBackupVaultSharingPolicy",
        "backup:DescribeBackupVault",
        "backup:GetBackupVaultAccessPolicy",
        "backup:GetBackupVaultNotifications",
        "backup:GetBackupVaultSharingPolicy",
        "backup:ListProtectedResourcesByBackupVault",
        "backup:ListRecoveryPointsByBackupVault",
        "backup:ListTags",
        "backup:PutBackupVaultAccessPolicy",
        "backup:PutBackupVaultLockConfiguration",
        "backup:PutBackupVaultNotifications",
        "backup:PutBackupVaultSharingPolicy",
        "backup:StartBackupJob",
        "backup:TagResource",
        "backup:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/backup:backupVault"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/backup:backupVault"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "backup:CreateBackupPlan",
         "backup:CreateBackupSelection",
         "backup:DeleteBackupPlan",
         "backup:DeleteBackupSelection",
         "backup:GetBackupPlan",
         "backup:GetBackupSelection",
         "backup:ListBackupPlanVersions",
         "backup:ListBackupSelections",
         "backup:ListTags",
         "backup:TagResource",
         "backup:UntagResource",
         "backup:UpdateBackupPlan"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "backup:CreateBackupPlan",
        "backup:CreateBackupSelection",
        "backup:DeleteBackupPlan",
        "backup:DeleteBackupSelection",
        "backup:GetBackupPlan",
        "backup:GetBackupSelection",
        "backup:ListBackupPlanVersions",
        "backup:ListBackupSelections",
        "backup:ListTags",
        "backup:TagResource",
        "backup:UntagResource",
        "backup:UpdateBackupPlan"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/backup:backupPlan"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/backup:backupPlan"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "backup:CreateFramework",
         "backup:DeleteFramework",
         "backup:DescribeFramework",
         "backup:ListTags",
         "backup:TagResource",
         "backup:UntagResource",
         "backup:UpdateFramework"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "backup:CreateFramework",
        "backup:DeleteFramework",
        "backup:DescribeFramework",
        "backup:ListTags",
        "backup:TagResource",
        "backup:UntagResource",
        "backup:UpdateFramework"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/backup:framework"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/backup:framework"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "backup:CreateReportPlan",
         "backup:DeleteReportPlan",
         "backup:DescribeReportPlan",
         "backup:ListTags",
         "backup:StartReportJob",
         "backup:TagResource",
         "backup:UntagResource",
         "backup:UpdateReportPlan"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "backup:CreateReportPlan",
        "backup:DeleteReportPlan",
        "backup:DescribeReportPlan",
        "backup:ListTags",
        "backup:StartReportJob",
        "backup:TagResource",
        "backup:UntagResource",
        "backup:UpdateReportPlan"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/backup:reportPlan"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/backup:reportPlan"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "backup:CreateRestoreTestingPlan",
         "backup:CreateRestoreTestingSelection",
         "backup:DeleteRestoreTestingPlan",
         "backup:DeleteRestoreTestingSelection",
         "backup:GetRestoreTestingPlan",
         "backup:GetRestoreTestingSelection",
         "backup:ListRestoreTestingSelections",
         "backup:ListTags",
         "backup:TagResource",
         "backup:UntagResource",
         "backup:UpdateRestoreTestingPlan",
         "backup:UpdateRestoreTestingSelection"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "backup:CreateRestoreTestingPlan",
        "backup:CreateRestoreTestingSelection",
        "backup:DeleteRestoreTestingPlan",
        "backup:DeleteRestoreTestingSelection",
        "backup:GetRestoreTestingPlan",
        "backup:GetRestoreTestingSelection",
        "backup:ListRestoreTestingSelections",
        "backup:ListTags",
        "backup:TagResource",
        "backup:UntagResource",
        "backup:UpdateRestoreTestingPlan",
        "backup:UpdateRestoreTestingSelection"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/backup:restoreTestingPlan"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/backup:restoreTestingPlan"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "backup-gateway:AssociateGatewayToServer",
         "backup-gateway:DeleteGateway",
         "backup-gateway:DisassociateGatewayFromServer",
         "backup-gateway:GetBandwidthRateLimitSchedule",
         "backup-gateway:GetGateway",
         "backup-gateway:ListTagsForResource",
         "backup-gateway:PutBandwidthRateLimitSchedule",
         "backup-gateway:PutMaintenanceStartTime",
         "backup-gateway:TagResource",
         "backup-gateway:TestHypervisorConfiguration",
         "backup-gateway:UntagResource",
         "backup-gateway:UpdateGatewayInformation",
         "backup-gateway:UpdateGatewaySoftwareNow",
         "backup-gateway:UpdateHypervisor"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "backup-gateway:AssociateGatewayToServer",
        "backup-gateway:DeleteGateway",
        "backup-gateway:DisassociateGatewayFromServer",
        "backup-gateway:GetBandwidthRateLimitSchedule",
        "backup-gateway:GetGateway",
        "backup-gateway:ListTagsForResource",
        "backup-gateway:PutBandwidthRateLimitSchedule",
        "backup-gateway:PutMaintenanceStartTime",
        "backup-gateway:TagResource",
        "backup-gateway:TestHypervisorConfiguration",
        "backup-gateway:UntagResource",
        "backup-gateway:UpdateGatewayInformation",
        "backup-gateway:UpdateGatewaySoftwareNow",
        "backup-gateway:UpdateHypervisor"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/backup-gateway:gateway"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/backup-gateway:gateway"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "backup-gateway:AssociateGatewayToServer",
         "backup-gateway:DeleteHypervisor",
         "backup-gateway:GetHypervisor",
         "backup-gateway:GetHypervisorPropertyMappings",
         "backup-gateway:ListTagsForResource",
         "backup-gateway:PutHypervisorPropertyMappings",
         "backup-gateway:Restore",
         "backup-gateway:StartVirtualMachinesMetadataSync",
         "backup-gateway:TagResource",
         "backup-gateway:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "backup-gateway:AssociateGatewayToServer",
        "backup-gateway:DeleteHypervisor",
        "backup-gateway:GetHypervisor",
        "backup-gateway:GetHypervisorPropertyMappings",
        "backup-gateway:ListTagsForResource",
        "backup-gateway:PutHypervisorPropertyMappings",
        "backup-gateway:Restore",
        "backup-gateway:StartVirtualMachinesMetadataSync",
        "backup-gateway:TagResource",
        "backup-gateway:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/backup-gateway:hypervisor"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/backup-gateway:hypervisor"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "backup-gateway:Backup",
         "backup-gateway:GetVirtualMachine",
         "backup-gateway:ListTagsForResource",
         "backup-gateway:TagResource",
         "backup-gateway:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "backup-gateway:Backup",
        "backup-gateway:GetVirtualMachine",
        "backup-gateway:ListTagsForResource",
        "backup-gateway:TagResource",
        "backup-gateway:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/backup-gateway:virtualmachine"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/backup-gateway:virtualmachine"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "backup-search:GetSearchJob",
         "backup-search:ListSearchJobBackups",
         "backup-search:ListSearchJobResults",
         "backup-search:ListTagsForResource",
         "backup-search:StartSearchResultExportJob",
         "backup-search:StopSearchJob",
         "backup-search:TagResource",
         "backup-search:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "backup-search:GetSearchJob",
        "backup-search:ListSearchJobBackups",
        "backup-search:ListSearchJobResults",
        "backup-search:ListTagsForResource",
        "backup-search:StartSearchResultExportJob",
        "backup-search:StopSearchJob",
        "backup-search:TagResource",
        "backup-search:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/backup-search:searchJob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/backup-search:searchJob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "backup-search:GetSearchResultExportJob",
         "backup-search:ListTagsForResource",
         "backup-search:TagResource",
         "backup-search:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "backup-search:GetSearchResultExportJob",
        "backup-search:ListTagsForResource",
        "backup-search:TagResource",
        "backup-search:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/backup-search:searchExportJob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/backup-search:searchExportJob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "batch:CancelJob",
         "batch:ListTagsForResource",
         "batch:SubmitJob",
         "batch:TagResource",
         "batch:TerminateJob",
         "batch:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "batch:CancelJob",
        "batch:ListTagsForResource",
        "batch:SubmitJob",
        "batch:TagResource",
        "batch:TerminateJob",
        "batch:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/batch:job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/batch:job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "batch:CreateComputeEnvironment",
         "batch:CreateJobQueue",
         "batch:DeleteComputeEnvironment",
         "batch:ListTagsForResource",
         "batch:TagResource",
         "batch:UntagResource",
         "batch:UpdateComputeEnvironment",
         "batch:UpdateJobQueue"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "batch:CreateComputeEnvironment",
        "batch:CreateJobQueue",
        "batch:DeleteComputeEnvironment",
        "batch:ListTagsForResource",
        "batch:TagResource",
        "batch:UntagResource",
        "batch:UpdateComputeEnvironment",
        "batch:UpdateJobQueue"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/batch:compute-environment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/batch:compute-environment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "batch:CreateConsumableResource",
         "batch:DeleteConsumableResource",
         "batch:DescribeConsumableResource",
         "batch:ListJobsByConsumableResource",
         "batch:ListTagsForResource",
         "batch:RegisterJobDefinition",
         "batch:SubmitJob",
         "batch:TagResource",
         "batch:UntagResource",
         "batch:UpdateConsumableResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "batch:CreateConsumableResource",
        "batch:DeleteConsumableResource",
        "batch:DescribeConsumableResource",
        "batch:ListJobsByConsumableResource",
        "batch:ListTagsForResource",
        "batch:RegisterJobDefinition",
        "batch:SubmitJob",
        "batch:TagResource",
        "batch:UntagResource",
        "batch:UpdateConsumableResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/batch:consumable-resource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/batch:consumable-resource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "batch:CreateJobQueue",
         "batch:DeleteJobQueue",
         "batch:GetJobQueueSnapshot",
         "batch:ListTagsForResource",
         "batch:SubmitJob",
         "batch:TagResource",
         "batch:UntagResource",
         "batch:UpdateJobQueue"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "batch:CreateJobQueue",
        "batch:DeleteJobQueue",
        "batch:GetJobQueueSnapshot",
        "batch:ListTagsForResource",
        "batch:SubmitJob",
        "batch:TagResource",
        "batch:UntagResource",
        "batch:UpdateJobQueue"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/batch:job-queue"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/batch:job-queue"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "batch:CreateJobQueue",
         "batch:CreateSchedulingPolicy",
         "batch:DeleteSchedulingPolicy",
         "batch:ListTagsForResource",
         "batch:TagResource",
         "batch:UntagResource",
         "batch:UpdateJobQueue",
         "batch:UpdateSchedulingPolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "batch:CreateJobQueue",
        "batch:CreateSchedulingPolicy",
        "batch:DeleteSchedulingPolicy",
        "batch:ListTagsForResource",
        "batch:TagResource",
        "batch:UntagResource",
        "batch:UpdateJobQueue",
        "batch:UpdateSchedulingPolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/batch:scheduling-policy"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/batch:scheduling-policy"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "batch:DeregisterJobDefinition",
         "batch:ListTagsForResource",
         "batch:TagResource",
         "batch:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "batch:DeregisterJobDefinition",
        "batch:ListTagsForResource",
        "batch:TagResource",
        "batch:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/batch:job-definition-revision"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/batch:job-definition-revision"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "batch:RegisterJobDefinition",
         "batch:SubmitJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "batch:RegisterJobDefinition",
        "batch:SubmitJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/batch:job-definition"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/batch:job-definition"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bcm-data-exports:CreateExport",
         "bcm-data-exports:GetTable",
         "bcm-data-exports:UpdateExport"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bcm-data-exports:CreateExport",
        "bcm-data-exports:GetTable",
        "bcm-data-exports:UpdateExport"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bcm-data-exports:table"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bcm-data-exports:table"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bcm-data-exports:DeleteExport",
         "bcm-data-exports:GetExecution",
         "bcm-data-exports:GetExport",
         "bcm-data-exports:ListExecutions",
         "bcm-data-exports:ListTagsForResource",
         "bcm-data-exports:TagResource",
         "bcm-data-exports:UntagResource",
         "bcm-data-exports:UpdateExport"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bcm-data-exports:DeleteExport",
        "bcm-data-exports:GetExecution",
        "bcm-data-exports:GetExport",
        "bcm-data-exports:ListExecutions",
        "bcm-data-exports:ListTagsForResource",
        "bcm-data-exports:TagResource",
        "bcm-data-exports:UntagResource",
        "bcm-data-exports:UpdateExport"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bcm-data-exports:export"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bcm-data-exports:export"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bcm-pricing-calculator:CreateBillEstimate",
         "bcm-pricing-calculator:CreateBillScenarioCommitmentModification",
         "bcm-pricing-calculator:CreateBillScenarioUsageModification",
         "bcm-pricing-calculator:DeleteBillScenario",
         "bcm-pricing-calculator:DeleteBillScenarioCommitmentModification",
         "bcm-pricing-calculator:DeleteBillScenarioUsageModification",
         "bcm-pricing-calculator:GetBillScenario",
         "bcm-pricing-calculator:ListBillScenarioCommitmentModifications",
         "bcm-pricing-calculator:ListBillScenarioUsageModifications",
         "bcm-pricing-calculator:UpdateBillScenario",
         "bcm-pricing-calculator:UpdateBillScenarioCommitmentModification",
         "bcm-pricing-calculator:UpdateBillScenarioUsageModification"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bcm-pricing-calculator:CreateBillEstimate",
        "bcm-pricing-calculator:CreateBillScenarioCommitmentModification",
        "bcm-pricing-calculator:CreateBillScenarioUsageModification",
        "bcm-pricing-calculator:DeleteBillScenario",
        "bcm-pricing-calculator:DeleteBillScenarioCommitmentModification",
        "bcm-pricing-calculator:DeleteBillScenarioUsageModification",
        "bcm-pricing-calculator:GetBillScenario",
        "bcm-pricing-calculator:ListBillScenarioCommitmentModifications",
        "bcm-pricing-calculator:ListBillScenarioUsageModifications",
        "bcm-pricing-calculator:UpdateBillScenario",
        "bcm-pricing-calculator:UpdateBillScenarioCommitmentModification",
        "bcm-pricing-calculator:UpdateBillScenarioUsageModification"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bcm-pricing-calculator:bill-scenario"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bcm-pricing-calculator:bill-scenario"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bcm-pricing-calculator:CreateWorkloadEstimateUsage",
         "bcm-pricing-calculator:DeleteWorkloadEstimate",
         "bcm-pricing-calculator:DeleteWorkloadEstimateUsage",
         "bcm-pricing-calculator:GetWorkloadEstimate",
         "bcm-pricing-calculator:ListWorkloadEstimateUsage",
         "bcm-pricing-calculator:UpdateWorkloadEstimate",
         "bcm-pricing-calculator:UpdateWorkloadEstimateUsage"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bcm-pricing-calculator:CreateWorkloadEstimateUsage",
        "bcm-pricing-calculator:DeleteWorkloadEstimate",
        "bcm-pricing-calculator:DeleteWorkloadEstimateUsage",
        "bcm-pricing-calculator:GetWorkloadEstimate",
        "bcm-pricing-calculator:ListWorkloadEstimateUsage",
        "bcm-pricing-calculator:UpdateWorkloadEstimate",
        "bcm-pricing-calculator:UpdateWorkloadEstimateUsage"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bcm-pricing-calculator:workload-estimate"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bcm-pricing-calculator:workload-estimate"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bcm-pricing-calculator:DeleteBillEstimate",
         "bcm-pricing-calculator:GetBillEstimate",
         "bcm-pricing-calculator:ListBillEstimateCommitments",
         "bcm-pricing-calculator:ListBillEstimateInputCommitmentModifications",
         "bcm-pricing-calculator:ListBillEstimateInputUsageModifications",
         "bcm-pricing-calculator:ListBillEstimateLineItems",
         "bcm-pricing-calculator:UpdateBillEstimate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bcm-pricing-calculator:DeleteBillEstimate",
        "bcm-pricing-calculator:GetBillEstimate",
        "bcm-pricing-calculator:ListBillEstimateCommitments",
        "bcm-pricing-calculator:ListBillEstimateInputCommitmentModifications",
        "bcm-pricing-calculator:ListBillEstimateInputUsageModifications",
        "bcm-pricing-calculator:ListBillEstimateLineItems",
        "bcm-pricing-calculator:UpdateBillEstimate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bcm-pricing-calculator:bill-estimate"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bcm-pricing-calculator:bill-estimate"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:AllowVendedLogDeliveryForResource",
         "bedrock:AssociateAgentKnowledgeBase",
         "bedrock:CreateDataSource",
         "bedrock:DeleteDataSource",
         "bedrock:DeleteKnowledgeBase",
         "bedrock:DeleteKnowledgeBaseDocuments",
         "bedrock:DisassociateAgentKnowledgeBase",
         "bedrock:GetAgentKnowledgeBase",
         "bedrock:GetDataSource",
         "bedrock:GetIngestionJob",
         "bedrock:GetKnowledgeBase",
         "bedrock:GetKnowledgeBaseDocuments",
         "bedrock:IngestKnowledgeBaseDocuments",
         "bedrock:ListDataSources",
         "bedrock:ListIngestionJobs",
         "bedrock:ListKnowledgeBaseDocuments",
         "bedrock:ListTagsForResource",
         "bedrock:Retrieve",
         "bedrock:StartIngestionJob",
         "bedrock:StopIngestionJob",
         "bedrock:TagResource",
         "bedrock:UntagResource",
         "bedrock:UpdateAgentKnowledgeBase",
         "bedrock:UpdateDataSource",
         "bedrock:UpdateKnowledgeBase"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:AllowVendedLogDeliveryForResource",
        "bedrock:AssociateAgentKnowledgeBase",
        "bedrock:CreateDataSource",
        "bedrock:DeleteDataSource",
        "bedrock:DeleteKnowledgeBase",
        "bedrock:DeleteKnowledgeBaseDocuments",
        "bedrock:DisassociateAgentKnowledgeBase",
        "bedrock:GetAgentKnowledgeBase",
        "bedrock:GetDataSource",
        "bedrock:GetIngestionJob",
        "bedrock:GetKnowledgeBase",
        "bedrock:GetKnowledgeBaseDocuments",
        "bedrock:IngestKnowledgeBaseDocuments",
        "bedrock:ListDataSources",
        "bedrock:ListIngestionJobs",
        "bedrock:ListKnowledgeBaseDocuments",
        "bedrock:ListTagsForResource",
        "bedrock:Retrieve",
        "bedrock:StartIngestionJob",
        "bedrock:StopIngestionJob",
        "bedrock:TagResource",
        "bedrock:UntagResource",
        "bedrock:UpdateAgentKnowledgeBase",
        "bedrock:UpdateDataSource",
        "bedrock:UpdateKnowledgeBase"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:knowledge-base"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:knowledge-base"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:ApplyGuardrail",
         "bedrock:CreateGuardrailVersion",
         "bedrock:DeleteGuardrail",
         "bedrock:GetGuardrail",
         "bedrock:ListGuardrails",
         "bedrock:ListTagsForResource",
         "bedrock:TagResource",
         "bedrock:UntagResource",
         "bedrock:UpdateGuardrail"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:ApplyGuardrail",
        "bedrock:CreateGuardrailVersion",
        "bedrock:DeleteGuardrail",
        "bedrock:GetGuardrail",
        "bedrock:ListGuardrails",
        "bedrock:ListTagsForResource",
        "bedrock:TagResource",
        "bedrock:UntagResource",
        "bedrock:UpdateGuardrail"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:guardrail"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:guardrail"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:AssociateAgentCollaborator",
         "bedrock:AssociateAgentKnowledgeBase",
         "bedrock:CreateAgentActionGroup",
         "bedrock:CreateAgentAlias",
         "bedrock:DeleteAgent",
         "bedrock:DeleteAgentActionGroup",
         "bedrock:DeleteAgentVersion",
         "bedrock:DisassociateAgentCollaborator",
         "bedrock:DisassociateAgentKnowledgeBase",
         "bedrock:GetAgent",
         "bedrock:GetAgentActionGroup",
         "bedrock:GetAgentCollaborator",
         "bedrock:GetAgentKnowledgeBase",
         "bedrock:GetAgentVersion",
         "bedrock:ListAgentActionGroups",
         "bedrock:ListAgentAliases",
         "bedrock:ListAgentCollaborators",
         "bedrock:ListAgentKnowledgeBases",
         "bedrock:ListAgentVersions",
         "bedrock:ListTagsForResource",
         "bedrock:PrepareAgent",
         "bedrock:TagResource",
         "bedrock:UntagResource",
         "bedrock:UpdateAgent",
         "bedrock:UpdateAgentActionGroup",
         "bedrock:UpdateAgentCollaborator",
         "bedrock:UpdateAgentKnowledgeBase"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:AssociateAgentCollaborator",
        "bedrock:AssociateAgentKnowledgeBase",
        "bedrock:CreateAgentActionGroup",
        "bedrock:CreateAgentAlias",
        "bedrock:DeleteAgent",
        "bedrock:DeleteAgentActionGroup",
        "bedrock:DeleteAgentVersion",
        "bedrock:DisassociateAgentCollaborator",
        "bedrock:DisassociateAgentKnowledgeBase",
        "bedrock:GetAgent",
        "bedrock:GetAgentActionGroup",
        "bedrock:GetAgentCollaborator",
        "bedrock:GetAgentKnowledgeBase",
        "bedrock:GetAgentVersion",
        "bedrock:ListAgentActionGroups",
        "bedrock:ListAgentAliases",
        "bedrock:ListAgentCollaborators",
        "bedrock:ListAgentKnowledgeBases",
        "bedrock:ListAgentVersions",
        "bedrock:ListTagsForResource",
        "bedrock:PrepareAgent",
        "bedrock:TagResource",
        "bedrock:UntagResource",
        "bedrock:UpdateAgent",
        "bedrock:UpdateAgentActionGroup",
        "bedrock:UpdateAgentCollaborator",
        "bedrock:UpdateAgentKnowledgeBase"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:agent"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:agent"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:BatchDeleteEvaluationJob",
         "bedrock:GetEvaluationJob",
         "bedrock:ListTagsForResource",
         "bedrock:StopEvaluationJob",
         "bedrock:TagResource",
         "bedrock:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:BatchDeleteEvaluationJob",
        "bedrock:GetEvaluationJob",
        "bedrock:ListTagsForResource",
        "bedrock:StopEvaluationJob",
        "bedrock:TagResource",
        "bedrock:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:evaluation-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:evaluation-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:CreateBlueprintVersion",
         "bedrock:CreateDataAutomationProject",
         "bedrock:DeleteBlueprint",
         "bedrock:GetBlueprint",
         "bedrock:InvokeDataAutomationAsync",
         "bedrock:ListDataAutomationProjects",
         "bedrock:ListTagsForResource",
         "bedrock:TagResource",
         "bedrock:UntagResource",
         "bedrock:UpdateBlueprint",
         "bedrock:UpdateDataAutomationProject"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:CreateBlueprintVersion",
        "bedrock:CreateDataAutomationProject",
        "bedrock:DeleteBlueprint",
        "bedrock:GetBlueprint",
        "bedrock:InvokeDataAutomationAsync",
        "bedrock:ListDataAutomationProjects",
        "bedrock:ListTagsForResource",
        "bedrock:TagResource",
        "bedrock:UntagResource",
        "bedrock:UpdateBlueprint",
        "bedrock:UpdateDataAutomationProject"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:blueprint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:blueprint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:CreateEvaluationJob",
         "bedrock:CreateModelCopyJob",
         "bedrock:CreateModelCustomizationJob",
         "bedrock:CreateModelEvaluationJob",
         "bedrock:CreateModelInvocationJob",
         "bedrock:CreateProvisionedModelThroughput",
         "bedrock:DeleteCustomModel",
         "bedrock:DeleteResourcePolicy",
         "bedrock:GetCustomModel",
         "bedrock:GetResourcePolicy",
         "bedrock:ListTagsForResource",
         "bedrock:PutResourcePolicy",
         "bedrock:TagResource",
         "bedrock:UntagResource",
         "bedrock:UpdateProvisionedModelThroughput"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:CreateEvaluationJob",
        "bedrock:CreateModelCopyJob",
        "bedrock:CreateModelCustomizationJob",
        "bedrock:CreateModelEvaluationJob",
        "bedrock:CreateModelInvocationJob",
        "bedrock:CreateProvisionedModelThroughput",
        "bedrock:DeleteCustomModel",
        "bedrock:DeleteResourcePolicy",
        "bedrock:GetCustomModel",
        "bedrock:GetResourcePolicy",
        "bedrock:ListTagsForResource",
        "bedrock:PutResourcePolicy",
        "bedrock:TagResource",
        "bedrock:UntagResource",
        "bedrock:UpdateProvisionedModelThroughput"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:custom-model"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:custom-model"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:CreateEvaluationJob",
         "bedrock:GetPromptRouter",
         "bedrock:InvokeModel",
         "bedrock:InvokeModelWithResponseStream"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:CreateEvaluationJob",
        "bedrock:GetPromptRouter",
        "bedrock:InvokeModel",
        "bedrock:InvokeModelWithResponseStream"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:default-prompt-router"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:default-prompt-router"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:CreateEvaluationJob",
         "bedrock:CreateInferenceProfile",
         "bedrock:CreateModelCustomizationJob",
         "bedrock:CreateModelEvaluationJob",
         "bedrock:CreateModelInvocationJob",
         "bedrock:CreatePromptRouter",
         "bedrock:CreateProvisionedModelThroughput",
         "bedrock:DetectGeneratedContent",
         "bedrock:GetFoundationModel",
         "bedrock:InvokeModel",
         "bedrock:InvokeModelWithResponseStream",
         "bedrock:UpdateProvisionedModelThroughput"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:CreateEvaluationJob",
        "bedrock:CreateInferenceProfile",
        "bedrock:CreateModelCustomizationJob",
        "bedrock:CreateModelEvaluationJob",
        "bedrock:CreateModelInvocationJob",
        "bedrock:CreatePromptRouter",
        "bedrock:CreateProvisionedModelThroughput",
        "bedrock:DetectGeneratedContent",
        "bedrock:GetFoundationModel",
        "bedrock:InvokeModel",
        "bedrock:InvokeModelWithResponseStream",
        "bedrock:UpdateProvisionedModelThroughput"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:foundation-model"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:foundation-model"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:CreateEvaluationJob",
         "bedrock:DeletePromptRouter",
         "bedrock:GetPromptRouter",
         "bedrock:InvokeModel",
         "bedrock:InvokeModelWithResponseStream",
         "bedrock:ListTagsForResource",
         "bedrock:TagResource",
         "bedrock:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:CreateEvaluationJob",
        "bedrock:DeletePromptRouter",
        "bedrock:GetPromptRouter",
        "bedrock:InvokeModel",
        "bedrock:InvokeModelWithResponseStream",
        "bedrock:ListTagsForResource",
        "bedrock:TagResource",
        "bedrock:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:prompt-router"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:prompt-router"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:CreateFlowAlias",
         "bedrock:CreateFlowVersion",
         "bedrock:DeleteFlow",
         "bedrock:DeleteFlowVersion",
         "bedrock:GetFlow",
         "bedrock:GetFlowVersion",
         "bedrock:ListFlowAliases",
         "bedrock:ListFlowVersions",
         "bedrock:ListTagsForResource",
         "bedrock:PrepareFlow",
         "bedrock:TagResource",
         "bedrock:UntagResource",
         "bedrock:UpdateFlow"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:CreateFlowAlias",
        "bedrock:CreateFlowVersion",
        "bedrock:DeleteFlow",
        "bedrock:DeleteFlowVersion",
        "bedrock:GetFlow",
        "bedrock:GetFlowVersion",
        "bedrock:ListFlowAliases",
        "bedrock:ListFlowVersions",
        "bedrock:ListTagsForResource",
        "bedrock:PrepareFlow",
        "bedrock:TagResource",
        "bedrock:UntagResource",
        "bedrock:UpdateFlow"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:flow"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:flow"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:CreateInferenceProfile",
         "bedrock:CreatePromptRouter",
         "bedrock:DeleteInferenceProfile",
         "bedrock:GetInferenceProfile",
         "bedrock:InvokeModel",
         "bedrock:InvokeModelWithResponseStream",
         "bedrock:ListTagsForResource",
         "bedrock:TagResource",
         "bedrock:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:CreateInferenceProfile",
        "bedrock:CreatePromptRouter",
        "bedrock:DeleteInferenceProfile",
        "bedrock:GetInferenceProfile",
        "bedrock:InvokeModel",
        "bedrock:InvokeModelWithResponseStream",
        "bedrock:ListTagsForResource",
        "bedrock:TagResource",
        "bedrock:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:application-inference-profile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:application-inference-profile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:CreateInferenceProfile",
         "bedrock:CreatePromptRouter",
         "bedrock:GetInferenceProfile",
         "bedrock:InvokeModel",
         "bedrock:InvokeModelWithResponseStream"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:CreateInferenceProfile",
        "bedrock:CreatePromptRouter",
        "bedrock:GetInferenceProfile",
        "bedrock:InvokeModel",
        "bedrock:InvokeModelWithResponseStream"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:inference-profile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:inference-profile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:CreateInvocation",
         "bedrock:DeleteSession",
         "bedrock:EndSession",
         "bedrock:GetInvocationStep",
         "bedrock:GetSession",
         "bedrock:ListInvocationSteps",
         "bedrock:ListInvocations",
         "bedrock:ListTagsForResource",
         "bedrock:PutInvocationStep",
         "bedrock:TagResource",
         "bedrock:UntagResource",
         "bedrock:UpdateSession"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:CreateInvocation",
        "bedrock:DeleteSession",
        "bedrock:EndSession",
        "bedrock:GetInvocationStep",
        "bedrock:GetSession",
        "bedrock:ListInvocationSteps",
        "bedrock:ListInvocations",
        "bedrock:ListTagsForResource",
        "bedrock:PutInvocationStep",
        "bedrock:TagResource",
        "bedrock:UntagResource",
        "bedrock:UpdateSession"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:session"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:session"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:CreateModelInvocationJob",
         "bedrock:GetModelInvocationJob",
         "bedrock:ListTagsForResource",
         "bedrock:StopModelInvocationJob",
         "bedrock:TagResource",
         "bedrock:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:CreateModelInvocationJob",
        "bedrock:GetModelInvocationJob",
        "bedrock:ListTagsForResource",
        "bedrock:StopModelInvocationJob",
        "bedrock:TagResource",
        "bedrock:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:model-invocation-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:model-invocation-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:CreatePromptVersion",
         "bedrock:DeletePrompt",
         "bedrock:GetPrompt",
         "bedrock:ListPrompts",
         "bedrock:ListTagsForResource",
         "bedrock:RenderPrompt",
         "bedrock:TagResource",
         "bedrock:UntagResource",
         "bedrock:UpdatePrompt"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:CreatePromptVersion",
        "bedrock:DeletePrompt",
        "bedrock:GetPrompt",
        "bedrock:ListPrompts",
        "bedrock:ListTagsForResource",
        "bedrock:RenderPrompt",
        "bedrock:TagResource",
        "bedrock:UntagResource",
        "bedrock:UpdatePrompt"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:prompt"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:prompt"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:DeleteAgentAlias",
         "bedrock:DeleteAgentMemory",
         "bedrock:GetAgentAlias",
         "bedrock:GetAgentMemory",
         "bedrock:InvokeAgent",
         "bedrock:ListTagsForResource",
         "bedrock:TagResource",
         "bedrock:UntagResource",
         "bedrock:UpdateAgentAlias"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:DeleteAgentAlias",
        "bedrock:DeleteAgentMemory",
        "bedrock:GetAgentAlias",
        "bedrock:GetAgentMemory",
        "bedrock:InvokeAgent",
        "bedrock:ListTagsForResource",
        "bedrock:TagResource",
        "bedrock:UntagResource",
        "bedrock:UpdateAgentAlias"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:agent-alias"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:agent-alias"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:DeleteDataAutomationProject",
         "bedrock:GetDataAutomationProject",
         "bedrock:InvokeDataAutomationAsync",
         "bedrock:ListBlueprints",
         "bedrock:ListTagsForResource",
         "bedrock:TagResource",
         "bedrock:UntagResource",
         "bedrock:UpdateDataAutomationProject"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:DeleteDataAutomationProject",
        "bedrock:GetDataAutomationProject",
        "bedrock:InvokeDataAutomationAsync",
        "bedrock:ListBlueprints",
        "bedrock:ListTagsForResource",
        "bedrock:TagResource",
        "bedrock:UntagResource",
        "bedrock:UpdateDataAutomationProject"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:data-automation-project"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:data-automation-project"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:DeleteFlowAlias",
         "bedrock:GetFlowAlias",
         "bedrock:InvokeFlow",
         "bedrock:ListTagsForResource",
         "bedrock:TagResource",
         "bedrock:UntagResource",
         "bedrock:UpdateFlowAlias"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:DeleteFlowAlias",
        "bedrock:GetFlowAlias",
        "bedrock:InvokeFlow",
        "bedrock:ListTagsForResource",
        "bedrock:TagResource",
        "bedrock:UntagResource",
        "bedrock:UpdateFlowAlias"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:flow-alias"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:flow-alias"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:DeleteImportedModel",
         "bedrock:GetImportedModel",
         "bedrock:InvokeModel",
         "bedrock:InvokeModelWithResponseStream",
         "bedrock:ListTagsForResource",
         "bedrock:TagResource",
         "bedrock:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:DeleteImportedModel",
        "bedrock:GetImportedModel",
        "bedrock:InvokeModel",
        "bedrock:InvokeModelWithResponseStream",
        "bedrock:ListTagsForResource",
        "bedrock:TagResource",
        "bedrock:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:imported-model"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:imported-model"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:DeleteMarketplaceModelEndpoint",
         "bedrock:DeregisterMarketplaceModelEndpoint",
         "bedrock:GetMarketplaceModelEndpoint",
         "bedrock:InvokeModel",
         "bedrock:InvokeModelWithResponseStream",
         "bedrock:RegisterMarketplaceModelEndpoint",
         "bedrock:UpdateMarketplaceModelEndpoint"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:DeleteMarketplaceModelEndpoint",
        "bedrock:DeregisterMarketplaceModelEndpoint",
        "bedrock:GetMarketplaceModelEndpoint",
        "bedrock:InvokeModel",
        "bedrock:InvokeModelWithResponseStream",
        "bedrock:RegisterMarketplaceModelEndpoint",
        "bedrock:UpdateMarketplaceModelEndpoint"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:bedrock-marketplace-model-endpoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:bedrock-marketplace-model-endpoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:DeletePrompt",
         "bedrock:GetPrompt",
         "bedrock:ListTagsForResource",
         "bedrock:RenderPrompt",
         "bedrock:TagResource",
         "bedrock:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:DeletePrompt",
        "bedrock:GetPrompt",
        "bedrock:ListTagsForResource",
        "bedrock:RenderPrompt",
        "bedrock:TagResource",
        "bedrock:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:prompt-version"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:prompt-version"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:DeleteProvisionedModelThroughput",
         "bedrock:GetProvisionedModelThroughput",
         "bedrock:InvokeModel",
         "bedrock:InvokeModelWithResponseStream",
         "bedrock:ListTagsForResource",
         "bedrock:TagResource",
         "bedrock:UntagResource",
         "bedrock:UpdateProvisionedModelThroughput"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:DeleteProvisionedModelThroughput",
        "bedrock:GetProvisionedModelThroughput",
        "bedrock:InvokeModel",
        "bedrock:InvokeModelWithResponseStream",
        "bedrock:ListTagsForResource",
        "bedrock:TagResource",
        "bedrock:UntagResource",
        "bedrock:UpdateProvisionedModelThroughput"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:provisioned-model"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:provisioned-model"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:GetAsyncInvoke",
         "bedrock:InvokeModel",
         "bedrock:ListTagsForResource",
         "bedrock:TagResource",
         "bedrock:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:GetAsyncInvoke",
        "bedrock:InvokeModel",
        "bedrock:ListTagsForResource",
        "bedrock:TagResource",
        "bedrock:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:async-invoke"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:async-invoke"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:GetDataAutomationStatus",
         "bedrock:ListTagsForResource",
         "bedrock:TagResource",
         "bedrock:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:GetDataAutomationStatus",
        "bedrock:ListTagsForResource",
        "bedrock:TagResource",
        "bedrock:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:data-automation-invocation-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:data-automation-invocation-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:GetModelCopyJob",
         "bedrock:ListTagsForResource",
         "bedrock:TagResource",
         "bedrock:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:GetModelCopyJob",
        "bedrock:ListTagsForResource",
        "bedrock:TagResource",
        "bedrock:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:model-copy-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:model-copy-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:GetModelCustomizationJob",
         "bedrock:ListTagsForResource",
         "bedrock:StopModelCustomizationJob",
         "bedrock:TagResource",
         "bedrock:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:GetModelCustomizationJob",
        "bedrock:ListTagsForResource",
        "bedrock:StopModelCustomizationJob",
        "bedrock:TagResource",
        "bedrock:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:model-customization-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:model-customization-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:GetModelEvaluationJob",
         "bedrock:ListTagsForResource",
         "bedrock:TagResource",
         "bedrock:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:GetModelEvaluationJob",
        "bedrock:ListTagsForResource",
        "bedrock:TagResource",
        "bedrock:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:model-evaluation-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:model-evaluation-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:GetModelImportJob",
         "bedrock:ListTagsForResource",
         "bedrock:TagResource",
         "bedrock:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:GetModelImportJob",
        "bedrock:ListTagsForResource",
        "bedrock:TagResource",
        "bedrock:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:model-import-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:model-import-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bedrock:InvokeBlueprintRecommendationAsync",
         "bedrock:InvokeDataAutomationAsync"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bedrock:InvokeBlueprintRecommendationAsync",
        "bedrock:InvokeDataAutomationAsync"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bedrock:data-automation-profile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bedrock:data-automation-profile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "billing:CreateBillingView",
         "billing:DeleteBillingView",
         "billing:DeleteResourcePolicy",
         "billing:GetBillingView",
         "billing:GetResourcePolicy",
         "billing:ListSourceViewsForBillingView",
         "billing:ListTagsForResource",
         "billing:PutResourcePolicy",
         "billing:TagResource",
         "billing:UntagResource",
         "billing:UpdateBillingView"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "billing:CreateBillingView",
        "billing:DeleteBillingView",
        "billing:DeleteResourcePolicy",
        "billing:GetBillingView",
        "billing:GetResourcePolicy",
        "billing:ListSourceViewsForBillingView",
        "billing:ListTagsForResource",
        "billing:PutResourcePolicy",
        "billing:TagResource",
        "billing:UntagResource",
        "billing:UpdateBillingView"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/billing:billingview"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/billing:billingview"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "billingconductor:AssociateAccounts",
         "billingconductor:CreateCustomLineItem",
         "billingconductor:DeleteBillingGroup",
         "billingconductor:DisassociateAccounts",
         "billingconductor:GetBillingGroupCostReport",
         "billingconductor:ListTagsForResource",
         "billingconductor:TagResource",
         "billingconductor:UntagResource",
         "billingconductor:UpdateBillingGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "billingconductor:AssociateAccounts",
        "billingconductor:CreateCustomLineItem",
        "billingconductor:DeleteBillingGroup",
        "billingconductor:DisassociateAccounts",
        "billingconductor:GetBillingGroupCostReport",
        "billingconductor:ListTagsForResource",
        "billingconductor:TagResource",
        "billingconductor:UntagResource",
        "billingconductor:UpdateBillingGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/billingconductor:billinggroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/billingconductor:billinggroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "billingconductor:AssociatePricingRules",
         "billingconductor:CreateBillingGroup",
         "billingconductor:DeletePricingPlan",
         "billingconductor:DisassociatePricingRules",
         "billingconductor:ListPricingRulesAssociatedToPricingPlan",
         "billingconductor:ListTagsForResource",
         "billingconductor:TagResource",
         "billingconductor:UntagResource",
         "billingconductor:UpdatePricingPlan"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "billingconductor:AssociatePricingRules",
        "billingconductor:CreateBillingGroup",
        "billingconductor:DeletePricingPlan",
        "billingconductor:DisassociatePricingRules",
        "billingconductor:ListPricingRulesAssociatedToPricingPlan",
        "billingconductor:ListTagsForResource",
        "billingconductor:TagResource",
        "billingconductor:UntagResource",
        "billingconductor:UpdatePricingPlan"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/billingconductor:pricingplan"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/billingconductor:pricingplan"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "billingconductor:AssociatePricingRules",
         "billingconductor:CreatePricingPlan",
         "billingconductor:DeletePricingRule",
         "billingconductor:DisassociatePricingRules",
         "billingconductor:ListPricingPlansAssociatedWithPricingRule",
         "billingconductor:ListTagsForResource",
         "billingconductor:TagResource",
         "billingconductor:UntagResource",
         "billingconductor:UpdatePricingRule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "billingconductor:AssociatePricingRules",
        "billingconductor:CreatePricingPlan",
        "billingconductor:DeletePricingRule",
        "billingconductor:DisassociatePricingRules",
        "billingconductor:ListPricingPlansAssociatedWithPricingRule",
        "billingconductor:ListTagsForResource",
        "billingconductor:TagResource",
        "billingconductor:UntagResource",
        "billingconductor:UpdatePricingRule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/billingconductor:pricingrule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/billingconductor:pricingrule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "billingconductor:BatchAssociateResourcesToCustomLineItem",
         "billingconductor:BatchDisassociateResourcesFromCustomLineItem",
         "billingconductor:DeleteCustomLineItem",
         "billingconductor:ListCustomLineItemVersions",
         "billingconductor:ListResourcesAssociatedToCustomLineItem",
         "billingconductor:ListTagsForResource",
         "billingconductor:TagResource",
         "billingconductor:UntagResource",
         "billingconductor:UpdateCustomLineItem"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "billingconductor:BatchAssociateResourcesToCustomLineItem",
        "billingconductor:BatchDisassociateResourcesFromCustomLineItem",
        "billingconductor:DeleteCustomLineItem",
        "billingconductor:ListCustomLineItemVersions",
        "billingconductor:ListResourcesAssociatedToCustomLineItem",
        "billingconductor:ListTagsForResource",
        "billingconductor:TagResource",
        "billingconductor:UntagResource",
        "billingconductor:UpdateCustomLineItem"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/billingconductor:customlineitem"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/billingconductor:customlineitem"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "braket:CancelJob",
         "braket:GetJob",
         "braket:ListTagsForResource",
         "braket:TagResource",
         "braket:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "braket:CancelJob",
        "braket:GetJob",
        "braket:ListTagsForResource",
        "braket:TagResource",
        "braket:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/braket:job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/braket:job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "braket:CancelQuantumTask",
         "braket:GetQuantumTask",
         "braket:ListTagsForResource",
         "braket:TagResource",
         "braket:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "braket:CancelQuantumTask",
        "braket:GetQuantumTask",
        "braket:ListTagsForResource",
        "braket:TagResource",
        "braket:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/braket:quantum-task"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/braket:quantum-task"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "budgets:CreateBudgetAction",
         "budgets:DeleteBudgetAction",
         "budgets:DescribeBudgetAction",
         "budgets:DescribeBudgetActionHistories",
         "budgets:ExecuteBudgetAction",
         "budgets:ListTagsForResource",
         "budgets:TagResource",
         "budgets:UntagResource",
         "budgets:UpdateBudgetAction"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "budgets:CreateBudgetAction",
        "budgets:DeleteBudgetAction",
        "budgets:DescribeBudgetAction",
        "budgets:DescribeBudgetActionHistories",
        "budgets:ExecuteBudgetAction",
        "budgets:ListTagsForResource",
        "budgets:TagResource",
        "budgets:UntagResource",
        "budgets:UpdateBudgetAction"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/budgets:budgetAction"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/budgets:budgetAction"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "budgets:DescribeBudgetActionsForBudget",
         "budgets:ListTagsForResource",
         "budgets:ModifyBudget",
         "budgets:TagResource",
         "budgets:UntagResource",
         "budgets:ViewBudget"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "budgets:DescribeBudgetActionsForBudget",
        "budgets:ListTagsForResource",
        "budgets:ModifyBudget",
        "budgets:TagResource",
        "budgets:UntagResource",
        "budgets:ViewBudget"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/budgets:budget"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/budgets:budget"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "bugbust:EvaluateProfilingGroups",
         "bugbust:GetEvent",
         "bugbust:GetJoinEventStatus",
         "bugbust:JoinEvent",
         "bugbust:ListBugs",
         "bugbust:ListEventParticipants",
         "bugbust:ListEventScores",
         "bugbust:ListProfilingGroups",
         "bugbust:ListPullRequests",
         "bugbust:ListTagsForResource",
         "bugbust:TagResource",
         "bugbust:UntagResource",
         "bugbust:UpdateEvent",
         "bugbust:UpdateWorkItem",
         "bugbust:UpdateWorkItemAdmin"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "bugbust:EvaluateProfilingGroups",
        "bugbust:GetEvent",
        "bugbust:GetJoinEventStatus",
        "bugbust:JoinEvent",
        "bugbust:ListBugs",
        "bugbust:ListEventParticipants",
        "bugbust:ListEventScores",
        "bugbust:ListProfilingGroups",
        "bugbust:ListPullRequests",
        "bugbust:ListTagsForResource",
        "bugbust:TagResource",
        "bugbust:UntagResource",
        "bugbust:UpdateEvent",
        "bugbust:UpdateWorkItem",
        "bugbust:UpdateWorkItemAdmin"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/bugbust:Event"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/bugbust:Event"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cases:BatchGetCaseRule",
         "cases:CreateCaseRule",
         "cases:DeleteCaseRule",
         "cases:TagResource",
         "cases:UntagResource",
         "cases:UpdateCaseRule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cases:BatchGetCaseRule",
        "cases:CreateCaseRule",
        "cases:DeleteCaseRule",
        "cases:TagResource",
        "cases:UntagResource",
        "cases:UpdateCaseRule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cases:CaseRule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cases:CaseRule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cases:BatchGetCaseRule",
         "cases:BatchGetField",
         "cases:BatchPutFieldOptions",
         "cases:CreateCase",
         "cases:CreateCaseRule",
         "cases:CreateField",
         "cases:CreateLayout",
         "cases:CreateRelatedItem",
         "cases:CreateTemplate",
         "cases:DeleteCaseRule",
         "cases:DeleteDomain",
         "cases:DeleteField",
         "cases:DeleteLayout",
         "cases:DeleteRelatedItem",
         "cases:DeleteTemplate",
         "cases:GetCase",
         "cases:GetCaseAuditEvents",
         "cases:GetCaseEventConfiguration",
         "cases:GetDomain",
         "cases:GetLayout",
         "cases:GetTemplate",
         "cases:ListCaseRules",
         "cases:ListCasesForContact",
         "cases:ListFieldOptions",
         "cases:ListFields",
         "cases:ListLayouts",
         "cases:ListTemplates",
         "cases:PutCaseEventConfiguration",
         "cases:SearchCases",
         "cases:SearchRelatedItems",
         "cases:TagResource",
         "cases:UntagResource",
         "cases:UpdateCase",
         "cases:UpdateCaseRule",
         "cases:UpdateField",
         "cases:UpdateLayout",
         "cases:UpdateTemplate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cases:BatchGetCaseRule",
        "cases:BatchGetField",
        "cases:BatchPutFieldOptions",
        "cases:CreateCase",
        "cases:CreateCaseRule",
        "cases:CreateField",
        "cases:CreateLayout",
        "cases:CreateRelatedItem",
        "cases:CreateTemplate",
        "cases:DeleteCaseRule",
        "cases:DeleteDomain",
        "cases:DeleteField",
        "cases:DeleteLayout",
        "cases:DeleteRelatedItem",
        "cases:DeleteTemplate",
        "cases:GetCase",
        "cases:GetCaseAuditEvents",
        "cases:GetCaseEventConfiguration",
        "cases:GetDomain",
        "cases:GetLayout",
        "cases:GetTemplate",
        "cases:ListCaseRules",
        "cases:ListCasesForContact",
        "cases:ListFieldOptions",
        "cases:ListFields",
        "cases:ListLayouts",
        "cases:ListTemplates",
        "cases:PutCaseEventConfiguration",
        "cases:SearchCases",
        "cases:SearchRelatedItems",
        "cases:TagResource",
        "cases:UntagResource",
        "cases:UpdateCase",
        "cases:UpdateCaseRule",
        "cases:UpdateField",
        "cases:UpdateLayout",
        "cases:UpdateTemplate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cases:Domain"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cases:Domain"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cases:BatchGetField",
         "cases:BatchPutFieldOptions",
         "cases:CreateCase",
         "cases:CreateField",
         "cases:DeleteField",
         "cases:GetCase",
         "cases:ListFieldOptions",
         "cases:TagResource",
         "cases:UntagResource",
         "cases:UpdateCase",
         "cases:UpdateField"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cases:BatchGetField",
        "cases:BatchPutFieldOptions",
        "cases:CreateCase",
        "cases:CreateField",
        "cases:DeleteField",
        "cases:GetCase",
        "cases:ListFieldOptions",
        "cases:TagResource",
        "cases:UntagResource",
        "cases:UpdateCase",
        "cases:UpdateField"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cases:Field"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cases:Field"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cases:CreateCase",
         "cases:CreateRelatedItem",
         "cases:DeleteRelatedItem",
         "cases:GetCase",
         "cases:GetCaseAuditEvents",
         "cases:SearchRelatedItems",
         "cases:TagResource",
         "cases:UntagResource",
         "cases:UpdateCase"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cases:CreateCase",
        "cases:CreateRelatedItem",
        "cases:DeleteRelatedItem",
        "cases:GetCase",
        "cases:GetCaseAuditEvents",
        "cases:SearchRelatedItems",
        "cases:TagResource",
        "cases:UntagResource",
        "cases:UpdateCase"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cases:Case"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cases:Case"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cases:CreateCase",
         "cases:CreateTemplate",
         "cases:DeleteTemplate",
         "cases:GetTemplate",
         "cases:TagResource",
         "cases:UntagResource",
         "cases:UpdateTemplate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cases:CreateCase",
        "cases:CreateTemplate",
        "cases:DeleteTemplate",
        "cases:GetTemplate",
        "cases:TagResource",
        "cases:UntagResource",
        "cases:UpdateTemplate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cases:Template"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cases:Template"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cases:CreateLayout",
         "cases:CreateTemplate",
         "cases:DeleteLayout",
         "cases:GetLayout",
         "cases:TagResource",
         "cases:UntagResource",
         "cases:UpdateLayout"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cases:CreateLayout",
        "cases:CreateTemplate",
        "cases:DeleteLayout",
        "cases:GetLayout",
        "cases:TagResource",
        "cases:UntagResource",
        "cases:UpdateLayout"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cases:Layout"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cases:Layout"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cases:CreateRelatedItem",
         "cases:DeleteRelatedItem",
         "cases:TagResource",
         "cases:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cases:CreateRelatedItem",
        "cases:DeleteRelatedItem",
        "cases:TagResource",
        "cases:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cases:RelatedItem"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cases:RelatedItem"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cassandra:Alter",
         "cassandra:AlterMultiRegionResource",
         "cassandra:Create",
         "cassandra:CreateMultiRegionResource",
         "cassandra:Drop",
         "cassandra:DropMultiRegionResource",
         "cassandra:TagMultiRegionResource",
         "cassandra:TagResource",
         "cassandra:UnTagMultiRegionResource",
         "cassandra:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cassandra:Alter",
        "cassandra:AlterMultiRegionResource",
        "cassandra:Create",
        "cassandra:CreateMultiRegionResource",
        "cassandra:Drop",
        "cassandra:DropMultiRegionResource",
        "cassandra:TagMultiRegionResource",
        "cassandra:TagResource",
        "cassandra:UnTagMultiRegionResource",
        "cassandra:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cassandra:keyspace"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cassandra:keyspace"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cassandra:Alter",
         "cassandra:AlterMultiRegionResource",
         "cassandra:Create",
         "cassandra:CreateMultiRegionResource",
         "cassandra:Drop",
         "cassandra:DropMultiRegionResource",
         "cassandra:Modify",
         "cassandra:ModifyMultiRegionResource",
         "cassandra:Restore",
         "cassandra:RestoreMultiRegionTable",
         "cassandra:Select",
         "cassandra:SelectMultiRegionResource",
         "cassandra:TagMultiRegionResource",
         "cassandra:TagResource",
         "cassandra:UnTagMultiRegionResource",
         "cassandra:UntagResource",
         "cassandra:UpdatePartitioner"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cassandra:Alter",
        "cassandra:AlterMultiRegionResource",
        "cassandra:Create",
        "cassandra:CreateMultiRegionResource",
        "cassandra:Drop",
        "cassandra:DropMultiRegionResource",
        "cassandra:Modify",
        "cassandra:ModifyMultiRegionResource",
        "cassandra:Restore",
        "cassandra:RestoreMultiRegionTable",
        "cassandra:Select",
        "cassandra:SelectMultiRegionResource",
        "cassandra:TagMultiRegionResource",
        "cassandra:TagResource",
        "cassandra:UnTagMultiRegionResource",
        "cassandra:UntagResource",
        "cassandra:UpdatePartitioner"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cassandra:table"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cassandra:table"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ce:DeleteAnomalyMonitor",
         "ce:GetAnomalies",
         "ce:GetAnomalyMonitors",
         "ce:ListTagsForResource",
         "ce:TagResource",
         "ce:UntagResource",
         "ce:UpdateAnomalyMonitor"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ce:DeleteAnomalyMonitor",
        "ce:GetAnomalies",
        "ce:GetAnomalyMonitors",
        "ce:ListTagsForResource",
        "ce:TagResource",
        "ce:UntagResource",
        "ce:UpdateAnomalyMonitor"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ce:anomalymonitor"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ce:anomalymonitor"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ce:DeleteAnomalySubscription",
         "ce:GetAnomalySubscriptions",
         "ce:ListTagsForResource",
         "ce:TagResource",
         "ce:UntagResource",
         "ce:UpdateAnomalySubscription"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ce:DeleteAnomalySubscription",
        "ce:GetAnomalySubscriptions",
        "ce:ListTagsForResource",
        "ce:TagResource",
        "ce:UntagResource",
        "ce:UpdateAnomalySubscription"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ce:anomalysubscription"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ce:anomalysubscription"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ce:DeleteCostCategoryDefinition",
         "ce:DescribeCostCategoryDefinition",
         "ce:ListTagsForResource",
         "ce:TagResource",
         "ce:UntagResource",
         "ce:UpdateCostCategoryDefinition"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ce:DeleteCostCategoryDefinition",
        "ce:DescribeCostCategoryDefinition",
        "ce:ListTagsForResource",
        "ce:TagResource",
        "ce:UntagResource",
        "ce:UpdateCostCategoryDefinition"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ce:costcategory"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ce:costcategory"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ce:GetCostAndUsage",
         "ce:GetCostAndUsageWithResources",
         "ce:GetCostCategories",
         "ce:GetCostForecast",
         "ce:GetDimensionValues",
         "ce:GetTags",
         "ce:GetUsageForecast"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ce:GetCostAndUsage",
        "ce:GetCostAndUsageWithResources",
        "ce:GetCostCategories",
        "ce:GetCostForecast",
        "ce:GetDimensionValues",
        "ce:GetTags",
        "ce:GetUsageForecast"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ce:billingview"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ce:billingview"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "chatbot:AssociateToConfiguration",
         "chatbot:DeleteChimeWebhookConfiguration",
         "chatbot:DeleteMicrosoftTeamsChannelConfiguration",
         "chatbot:DeleteSlackChannelConfiguration",
         "chatbot:DisassociateFromConfiguration",
         "chatbot:ListAssociations",
         "chatbot:UpdateChimeWebhookConfiguration",
         "chatbot:UpdateMicrosoftTeamsChannelConfiguration",
         "chatbot:UpdateSlackChannelConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "chatbot:AssociateToConfiguration",
        "chatbot:DeleteChimeWebhookConfiguration",
        "chatbot:DeleteMicrosoftTeamsChannelConfiguration",
        "chatbot:DeleteSlackChannelConfiguration",
        "chatbot:DisassociateFromConfiguration",
        "chatbot:ListAssociations",
        "chatbot:UpdateChimeWebhookConfiguration",
        "chatbot:UpdateMicrosoftTeamsChannelConfiguration",
        "chatbot:UpdateSlackChannelConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/chatbot:ChatbotConfiguration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/chatbot:ChatbotConfiguration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "chatbot:AssociateToConfiguration",
         "chatbot:DeleteCustomAction",
         "chatbot:DisassociateFromConfiguration",
         "chatbot:GetCustomAction",
         "chatbot:UpdateCustomAction"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "chatbot:AssociateToConfiguration",
        "chatbot:DeleteCustomAction",
        "chatbot:DisassociateFromConfiguration",
        "chatbot:GetCustomAction",
        "chatbot:UpdateCustomAction"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/chatbot:custom-action"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/chatbot:custom-action"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "chime:AssociateChannelFlow",
         "chime:BatchCreateChannelMembership",
         "chime:CreateAppInstanceAdmin",
         "chime:CreateChannel",
         "chime:CreateChannelBan",
         "chime:CreateChannelMembership",
         "chime:CreateChannelModerator",
         "chime:DeleteAppInstanceAdmin",
         "chime:DeleteAppInstanceBot",
         "chime:DeleteChannel",
         "chime:DeleteChannelBan",
         "chime:DeleteChannelMembership",
         "chime:DeleteChannelMessage",
         "chime:DeleteChannelModerator",
         "chime:DescribeAppInstanceAdmin",
         "chime:DescribeAppInstanceBot",
         "chime:DescribeChannel",
         "chime:DescribeChannelBan",
         "chime:DescribeChannelMembership",
         "chime:DescribeChannelMembershipForAppInstanceUser",
         "chime:DescribeChannelModeratedByAppInstanceUser",
         "chime:DescribeChannelModerator",
         "chime:DisassociateChannelFlow",
         "chime:GetChannelMembershipPreferences",
         "chime:GetChannelMessage",
         "chime:GetChannelMessageStatus",
         "chime:ListAppInstanceAdmins",
         "chime:ListAppInstanceBots",
         "chime:ListChannelBans",
         "chime:ListChannelMemberships",
         "chime:ListChannelMembershipsForAppInstanceUser",
         "chime:ListChannelMessages",
         "chime:ListChannelModerators",
         "chime:ListChannels",
         "chime:ListChannelsModeratedByAppInstanceUser",
         "chime:ListSubChannels",
         "chime:ListTagsForResource",
         "chime:PutChannelMembershipPreferences",
         "chime:RedactChannelMessage",
         "chime:SearchChannels",
         "chime:SendChannelMessage",
         "chime:TagResource",
         "chime:UntagResource",
         "chime:UpdateAppInstanceBot",
         "chime:UpdateChannel",
         "chime:UpdateChannelMessage",
         "chime:UpdateChannelReadMarker"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "chime:AssociateChannelFlow",
        "chime:BatchCreateChannelMembership",
        "chime:CreateAppInstanceAdmin",
        "chime:CreateChannel",
        "chime:CreateChannelBan",
        "chime:CreateChannelMembership",
        "chime:CreateChannelModerator",
        "chime:DeleteAppInstanceAdmin",
        "chime:DeleteAppInstanceBot",
        "chime:DeleteChannel",
        "chime:DeleteChannelBan",
        "chime:DeleteChannelMembership",
        "chime:DeleteChannelMessage",
        "chime:DeleteChannelModerator",
        "chime:DescribeAppInstanceAdmin",
        "chime:DescribeAppInstanceBot",
        "chime:DescribeChannel",
        "chime:DescribeChannelBan",
        "chime:DescribeChannelMembership",
        "chime:DescribeChannelMembershipForAppInstanceUser",
        "chime:DescribeChannelModeratedByAppInstanceUser",
        "chime:DescribeChannelModerator",
        "chime:DisassociateChannelFlow",
        "chime:GetChannelMembershipPreferences",
        "chime:GetChannelMessage",
        "chime:GetChannelMessageStatus",
        "chime:ListAppInstanceAdmins",
        "chime:ListAppInstanceBots",
        "chime:ListChannelBans",
        "chime:ListChannelMemberships",
        "chime:ListChannelMembershipsForAppInstanceUser",
        "chime:ListChannelMessages",
        "chime:ListChannelModerators",
        "chime:ListChannels",
        "chime:ListChannelsModeratedByAppInstanceUser",
        "chime:ListSubChannels",
        "chime:ListTagsForResource",
        "chime:PutChannelMembershipPreferences",
        "chime:RedactChannelMessage",
        "chime:SearchChannels",
        "chime:SendChannelMessage",
        "chime:TagResource",
        "chime:UntagResource",
        "chime:UpdateAppInstanceBot",
        "chime:UpdateChannel",
        "chime:UpdateChannelMessage",
        "chime:UpdateChannelReadMarker"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/chime:app-instance-bot"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/chime:app-instance-bot"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "chime:AssociateChannelFlow",
         "chime:BatchCreateChannelMembership",
         "chime:Connect",
         "chime:CreateAppInstanceAdmin",
         "chime:CreateChannel",
         "chime:CreateChannelBan",
         "chime:CreateChannelMembership",
         "chime:CreateChannelModerator",
         "chime:DeleteAppInstanceAdmin",
         "chime:DeleteAppInstanceUser",
         "chime:DeleteChannel",
         "chime:DeleteChannelBan",
         "chime:DeleteChannelMembership",
         "chime:DeleteChannelMessage",
         "chime:DeleteChannelModerator",
         "chime:DeregisterAppInstanceUserEndpoint",
         "chime:DescribeAppInstanceAdmin",
         "chime:DescribeAppInstanceUser",
         "chime:DescribeAppInstanceUserEndpoint",
         "chime:DescribeChannel",
         "chime:DescribeChannelBan",
         "chime:DescribeChannelMembership",
         "chime:DescribeChannelMembershipForAppInstanceUser",
         "chime:DescribeChannelModeratedByAppInstanceUser",
         "chime:DescribeChannelModerator",
         "chime:DisassociateChannelFlow",
         "chime:GetChannelMembershipPreferences",
         "chime:GetChannelMessage",
         "chime:GetChannelMessageStatus",
         "chime:ListAppInstanceAdmins",
         "chime:ListAppInstanceUserEndpoints",
         "chime:ListAppInstanceUsers",
         "chime:ListChannelBans",
         "chime:ListChannelMemberships",
         "chime:ListChannelMembershipsForAppInstanceUser",
         "chime:ListChannelMessages",
         "chime:ListChannelModerators",
         "chime:ListChannels",
         "chime:ListChannelsModeratedByAppInstanceUser",
         "chime:ListSubChannels",
         "chime:ListTagsForResource",
         "chime:PutAppInstanceUserExpirationSettings",
         "chime:PutChannelExpirationSettings",
         "chime:PutChannelMembershipPreferences",
         "chime:RedactChannelMessage",
         "chime:RegisterAppInstanceUserEndpoint",
         "chime:SearchChannels",
         "chime:SendChannelMessage",
         "chime:TagResource",
         "chime:UntagResource",
         "chime:UpdateAppInstanceUser",
         "chime:UpdateAppInstanceUserEndpoint",
         "chime:UpdateChannel",
         "chime:UpdateChannelMessage",
         "chime:UpdateChannelReadMarker"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "chime:AssociateChannelFlow",
        "chime:BatchCreateChannelMembership",
        "chime:Connect",
        "chime:CreateAppInstanceAdmin",
        "chime:CreateChannel",
        "chime:CreateChannelBan",
        "chime:CreateChannelMembership",
        "chime:CreateChannelModerator",
        "chime:DeleteAppInstanceAdmin",
        "chime:DeleteAppInstanceUser",
        "chime:DeleteChannel",
        "chime:DeleteChannelBan",
        "chime:DeleteChannelMembership",
        "chime:DeleteChannelMessage",
        "chime:DeleteChannelModerator",
        "chime:DeregisterAppInstanceUserEndpoint",
        "chime:DescribeAppInstanceAdmin",
        "chime:DescribeAppInstanceUser",
        "chime:DescribeAppInstanceUserEndpoint",
        "chime:DescribeChannel",
        "chime:DescribeChannelBan",
        "chime:DescribeChannelMembership",
        "chime:DescribeChannelMembershipForAppInstanceUser",
        "chime:DescribeChannelModeratedByAppInstanceUser",
        "chime:DescribeChannelModerator",
        "chime:DisassociateChannelFlow",
        "chime:GetChannelMembershipPreferences",
        "chime:GetChannelMessage",
        "chime:GetChannelMessageStatus",
        "chime:ListAppInstanceAdmins",
        "chime:ListAppInstanceUserEndpoints",
        "chime:ListAppInstanceUsers",
        "chime:ListChannelBans",
        "chime:ListChannelMemberships",
        "chime:ListChannelMembershipsForAppInstanceUser",
        "chime:ListChannelMessages",
        "chime:ListChannelModerators",
        "chime:ListChannels",
        "chime:ListChannelsModeratedByAppInstanceUser",
        "chime:ListSubChannels",
        "chime:ListTagsForResource",
        "chime:PutAppInstanceUserExpirationSettings",
        "chime:PutChannelExpirationSettings",
        "chime:PutChannelMembershipPreferences",
        "chime:RedactChannelMessage",
        "chime:RegisterAppInstanceUserEndpoint",
        "chime:SearchChannels",
        "chime:SendChannelMessage",
        "chime:TagResource",
        "chime:UntagResource",
        "chime:UpdateAppInstanceUser",
        "chime:UpdateAppInstanceUserEndpoint",
        "chime:UpdateChannel",
        "chime:UpdateChannelMessage",
        "chime:UpdateChannelReadMarker"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/chime:app-instance-user"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/chime:app-instance-user"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "chime:AssociateChannelFlow",
         "chime:BatchCreateChannelMembership",
         "chime:ChannelFlowCallback",
         "chime:CreateChannelBan",
         "chime:CreateChannelMembership",
         "chime:CreateChannelModerator",
         "chime:DeleteChannel",
         "chime:DeleteChannelBan",
         "chime:DeleteChannelFlow",
         "chime:DeleteChannelMembership",
         "chime:DeleteChannelMessage",
         "chime:DeleteChannelModerator",
         "chime:DescribeChannel",
         "chime:DescribeChannelBan",
         "chime:DescribeChannelMembership",
         "chime:DescribeChannelMembershipForAppInstanceUser",
         "chime:DescribeChannelModeratedByAppInstanceUser",
         "chime:DescribeChannelModerator",
         "chime:DisassociateChannelFlow",
         "chime:GetChannelMembershipPreferences",
         "chime:GetChannelMessage",
         "chime:GetChannelMessageStatus",
         "chime:ListChannelBans",
         "chime:ListChannelMemberships",
         "chime:ListChannelMessages",
         "chime:ListChannelModerators",
         "chime:ListSubChannels",
         "chime:ListTagsForResource",
         "chime:PutChannelExpirationSettings",
         "chime:PutChannelMembershipPreferences",
         "chime:RedactChannelMessage",
         "chime:SendChannelMessage",
         "chime:TagResource",
         "chime:UntagResource",
         "chime:UpdateChannel",
         "chime:UpdateChannelMessage",
         "chime:UpdateChannelReadMarker"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "chime:AssociateChannelFlow",
        "chime:BatchCreateChannelMembership",
        "chime:ChannelFlowCallback",
        "chime:CreateChannelBan",
        "chime:CreateChannelMembership",
        "chime:CreateChannelModerator",
        "chime:DeleteChannel",
        "chime:DeleteChannelBan",
        "chime:DeleteChannelFlow",
        "chime:DeleteChannelMembership",
        "chime:DeleteChannelMessage",
        "chime:DeleteChannelModerator",
        "chime:DescribeChannel",
        "chime:DescribeChannelBan",
        "chime:DescribeChannelMembership",
        "chime:DescribeChannelMembershipForAppInstanceUser",
        "chime:DescribeChannelModeratedByAppInstanceUser",
        "chime:DescribeChannelModerator",
        "chime:DisassociateChannelFlow",
        "chime:GetChannelMembershipPreferences",
        "chime:GetChannelMessage",
        "chime:GetChannelMessageStatus",
        "chime:ListChannelBans",
        "chime:ListChannelMemberships",
        "chime:ListChannelMessages",
        "chime:ListChannelModerators",
        "chime:ListSubChannels",
        "chime:ListTagsForResource",
        "chime:PutChannelExpirationSettings",
        "chime:PutChannelMembershipPreferences",
        "chime:RedactChannelMessage",
        "chime:SendChannelMessage",
        "chime:TagResource",
        "chime:UntagResource",
        "chime:UpdateChannel",
        "chime:UpdateChannelMessage",
        "chime:UpdateChannelReadMarker"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/chime:channel"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/chime:channel"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "chime:AssociateChannelFlow",
         "chime:DescribeChannelFlow",
         "chime:DisassociateChannelFlow",
         "chime:ListChannelFlows",
         "chime:ListChannelsAssociatedWithChannelFlow",
         "chime:ListTagsForResource",
         "chime:TagResource",
         "chime:UntagResource",
         "chime:UpdateChannelFlow"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "chime:AssociateChannelFlow",
        "chime:DescribeChannelFlow",
        "chime:DisassociateChannelFlow",
        "chime:ListChannelFlows",
        "chime:ListChannelsAssociatedWithChannelFlow",
        "chime:ListTagsForResource",
        "chime:TagResource",
        "chime:UntagResource",
        "chime:UpdateChannelFlow"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/chime:channel-flow"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/chime:channel-flow"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "chime:AssociatePhoneNumbersWithVoiceConnector",
         "chime:CreateProxySession",
         "chime:CreateVoiceConnectorGroup",
         "chime:DeleteProxySession",
         "chime:DeleteVoiceConnector",
         "chime:DeleteVoiceConnectorEmergencyCallingConfiguration",
         "chime:DeleteVoiceConnectorExternalSystemsConfiguration",
         "chime:DeleteVoiceConnectorOrigination",
         "chime:DeleteVoiceConnectorProxy",
         "chime:DeleteVoiceConnectorStreamingConfiguration",
         "chime:DeleteVoiceConnectorTermination",
         "chime:DeleteVoiceConnectorTerminationCredentials",
         "chime:DisassociatePhoneNumbersFromVoiceConnector",
         "chime:GetProxySession",
         "chime:GetSpeakerSearchTask",
         "chime:GetVoiceConnector",
         "chime:GetVoiceConnectorEmergencyCallingConfiguration",
         "chime:GetVoiceConnectorExternalSystemsConfiguration",
         "chime:GetVoiceConnectorLoggingConfiguration",
         "chime:GetVoiceConnectorOrigination",
         "chime:GetVoiceConnectorProxy",
         "chime:GetVoiceConnectorStreamingConfiguration",
         "chime:GetVoiceConnectorTermination",
         "chime:GetVoiceConnectorTerminationHealth",
         "chime:GetVoiceToneAnalysisTask",
         "chime:ListProxySessions",
         "chime:ListTagsForResource",
         "chime:ListVoiceConnectorTerminationCredentials",
         "chime:PutVoiceConnectorEmergencyCallingConfiguration",
         "chime:PutVoiceConnectorExternalSystemsConfiguration",
         "chime:PutVoiceConnectorLoggingConfiguration",
         "chime:PutVoiceConnectorOrigination",
         "chime:PutVoiceConnectorProxy",
         "chime:PutVoiceConnectorStreamingConfiguration",
         "chime:PutVoiceConnectorTermination",
         "chime:PutVoiceConnectorTerminationCredentials",
         "chime:StartSpeakerSearchTask",
         "chime:StartVoiceToneAnalysisTask",
         "chime:StopSpeakerSearchTask",
         "chime:StopVoiceToneAnalysisTask",
         "chime:TagResource",
         "chime:UntagResource",
         "chime:UpdateProxySession",
         "chime:UpdateVoiceConnector",
         "chime:UpdateVoiceConnectorGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "chime:AssociatePhoneNumbersWithVoiceConnector",
        "chime:CreateProxySession",
        "chime:CreateVoiceConnectorGroup",
        "chime:DeleteProxySession",
        "chime:DeleteVoiceConnector",
        "chime:DeleteVoiceConnectorEmergencyCallingConfiguration",
        "chime:DeleteVoiceConnectorExternalSystemsConfiguration",
        "chime:DeleteVoiceConnectorOrigination",
        "chime:DeleteVoiceConnectorProxy",
        "chime:DeleteVoiceConnectorStreamingConfiguration",
        "chime:DeleteVoiceConnectorTermination",
        "chime:DeleteVoiceConnectorTerminationCredentials",
        "chime:DisassociatePhoneNumbersFromVoiceConnector",
        "chime:GetProxySession",
        "chime:GetSpeakerSearchTask",
        "chime:GetVoiceConnector",
        "chime:GetVoiceConnectorEmergencyCallingConfiguration",
        "chime:GetVoiceConnectorExternalSystemsConfiguration",
        "chime:GetVoiceConnectorLoggingConfiguration",
        "chime:GetVoiceConnectorOrigination",
        "chime:GetVoiceConnectorProxy",
        "chime:GetVoiceConnectorStreamingConfiguration",
        "chime:GetVoiceConnectorTermination",
        "chime:GetVoiceConnectorTerminationHealth",
        "chime:GetVoiceToneAnalysisTask",
        "chime:ListProxySessions",
        "chime:ListTagsForResource",
        "chime:ListVoiceConnectorTerminationCredentials",
        "chime:PutVoiceConnectorEmergencyCallingConfiguration",
        "chime:PutVoiceConnectorExternalSystemsConfiguration",
        "chime:PutVoiceConnectorLoggingConfiguration",
        "chime:PutVoiceConnectorOrigination",
        "chime:PutVoiceConnectorProxy",
        "chime:PutVoiceConnectorStreamingConfiguration",
        "chime:PutVoiceConnectorTermination",
        "chime:PutVoiceConnectorTerminationCredentials",
        "chime:StartSpeakerSearchTask",
        "chime:StartVoiceToneAnalysisTask",
        "chime:StopSpeakerSearchTask",
        "chime:StopVoiceToneAnalysisTask",
        "chime:TagResource",
        "chime:UntagResource",
        "chime:UpdateProxySession",
        "chime:UpdateVoiceConnector",
        "chime:UpdateVoiceConnectorGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/chime:voice-connector"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/chime:voice-connector"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "chime:BatchCreateAttendee",
         "chime:BatchUpdateAttendeeCapabilitiesExcept",
         "chime:CreateAttendee",
         "chime:CreateMeetingDialOut",
         "chime:DeleteAttendee",
         "chime:DeleteMeeting",
         "chime:GetAttendee",
         "chime:GetMeeting",
         "chime:ListAttendeeTags",
         "chime:ListAttendees",
         "chime:ListMeetingTags",
         "chime:ListTagsForResource",
         "chime:TagAttendee",
         "chime:TagMeeting",
         "chime:TagResource",
         "chime:UntagAttendee",
         "chime:UntagMeeting",
         "chime:UntagResource",
         "chime:UpdateAttendeeCapabilities"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "chime:BatchCreateAttendee",
        "chime:BatchUpdateAttendeeCapabilitiesExcept",
        "chime:CreateAttendee",
        "chime:CreateMeetingDialOut",
        "chime:DeleteAttendee",
        "chime:DeleteMeeting",
        "chime:GetAttendee",
        "chime:GetMeeting",
        "chime:ListAttendeeTags",
        "chime:ListAttendees",
        "chime:ListMeetingTags",
        "chime:ListTagsForResource",
        "chime:TagAttendee",
        "chime:TagMeeting",
        "chime:TagResource",
        "chime:UntagAttendee",
        "chime:UntagMeeting",
        "chime:UntagResource",
        "chime:UpdateAttendeeCapabilities"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/chime:meeting"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/chime:meeting"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "chime:CreateAppInstanceAdmin",
         "chime:CreateChannelFlow",
         "chime:DeleteAppInstance",
         "chime:DeleteAppInstanceAdmin",
         "chime:DeleteAppInstanceStreamingConfigurations",
         "chime:DeleteMessagingStreamingConfigurations",
         "chime:DescribeAppInstance",
         "chime:DescribeAppInstanceAdmin",
         "chime:GetAppInstanceRetentionSettings",
         "chime:GetAppInstanceStreamingConfigurations",
         "chime:GetMessagingStreamingConfigurations",
         "chime:ListAppInstanceAdmins",
         "chime:ListAppInstances",
         "chime:ListTagsForResource",
         "chime:PutAppInstanceRetentionSettings",
         "chime:PutAppInstanceStreamingConfigurations",
         "chime:PutMessagingStreamingConfigurations",
         "chime:TagResource",
         "chime:UntagResource",
         "chime:UpdateAppInstance"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "chime:CreateAppInstanceAdmin",
        "chime:CreateChannelFlow",
        "chime:DeleteAppInstance",
        "chime:DeleteAppInstanceAdmin",
        "chime:DeleteAppInstanceStreamingConfigurations",
        "chime:DeleteMessagingStreamingConfigurations",
        "chime:DescribeAppInstance",
        "chime:DescribeAppInstanceAdmin",
        "chime:GetAppInstanceRetentionSettings",
        "chime:GetAppInstanceStreamingConfigurations",
        "chime:GetMessagingStreamingConfigurations",
        "chime:ListAppInstanceAdmins",
        "chime:ListAppInstances",
        "chime:ListTagsForResource",
        "chime:PutAppInstanceRetentionSettings",
        "chime:PutAppInstanceStreamingConfigurations",
        "chime:PutMessagingStreamingConfigurations",
        "chime:TagResource",
        "chime:UntagResource",
        "chime:UpdateAppInstance"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/chime:app-instance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/chime:app-instance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "chime:CreateMediaInsightsPipeline",
         "chime:DeleteMediaInsightsPipelineConfiguration",
         "chime:GetMediaInsightsPipelineConfiguration",
         "chime:ListTagsForResource",
         "chime:PutVoiceConnectorStreamingConfiguration",
         "chime:TagResource",
         "chime:UntagResource",
         "chime:UpdateMediaInsightsPipelineConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "chime:CreateMediaInsightsPipeline",
        "chime:DeleteMediaInsightsPipelineConfiguration",
        "chime:GetMediaInsightsPipelineConfiguration",
        "chime:ListTagsForResource",
        "chime:PutVoiceConnectorStreamingConfiguration",
        "chime:TagResource",
        "chime:UntagResource",
        "chime:UpdateMediaInsightsPipelineConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/chime:media-insights-pipeline-configuration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/chime:media-insights-pipeline-configuration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "chime:CreateMediaStreamPipeline",
         "chime:DeleteMediaPipelineKinesisVideoStreamPool",
         "chime:GetMediaPipelineKinesisVideoStreamPool",
         "chime:ListTagsForResource",
         "chime:TagResource",
         "chime:UntagResource",
         "chime:UpdateMediaPipelineKinesisVideoStreamPool"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "chime:CreateMediaStreamPipeline",
        "chime:DeleteMediaPipelineKinesisVideoStreamPool",
        "chime:GetMediaPipelineKinesisVideoStreamPool",
        "chime:ListTagsForResource",
        "chime:TagResource",
        "chime:UntagResource",
        "chime:UpdateMediaPipelineKinesisVideoStreamPool"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/chime:media-pipeline-kinesis-video-stream-pool"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/chime:media-pipeline-kinesis-video-stream-pool"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "chime:CreateSipMediaApplicationCall",
         "chime:CreateSipRule",
         "chime:DeleteSipMediaApplication",
         "chime:GetSipMediaApplication",
         "chime:GetSipMediaApplicationAlexaSkillConfiguration",
         "chime:GetSipMediaApplicationLoggingConfiguration",
         "chime:ListSipRules",
         "chime:ListTagsForResource",
         "chime:PutSipMediaApplicationAlexaSkillConfiguration",
         "chime:PutSipMediaApplicationLoggingConfiguration",
         "chime:TagResource",
         "chime:UntagResource",
         "chime:UpdateSipMediaApplication",
         "chime:UpdateSipMediaApplicationCall",
         "chime:UpdateSipRule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "chime:CreateSipMediaApplicationCall",
        "chime:CreateSipRule",
        "chime:DeleteSipMediaApplication",
        "chime:GetSipMediaApplication",
        "chime:GetSipMediaApplicationAlexaSkillConfiguration",
        "chime:GetSipMediaApplicationLoggingConfiguration",
        "chime:ListSipRules",
        "chime:ListTagsForResource",
        "chime:PutSipMediaApplicationAlexaSkillConfiguration",
        "chime:PutSipMediaApplicationLoggingConfiguration",
        "chime:TagResource",
        "chime:UntagResource",
        "chime:UpdateSipMediaApplication",
        "chime:UpdateSipMediaApplicationCall",
        "chime:UpdateSipRule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/chime:sip-media-application"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/chime:sip-media-application"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "chime:DeleteMediaCapturePipeline",
         "chime:DeleteMediaPipeline",
         "chime:GetMediaCapturePipeline",
         "chime:GetMediaPipeline",
         "chime:GetSpeakerSearchTask",
         "chime:GetVoiceToneAnalysisTask",
         "chime:ListTagsForResource",
         "chime:StartSpeakerSearchTask",
         "chime:StartVoiceToneAnalysisTask",
         "chime:StopSpeakerSearchTask",
         "chime:StopVoiceToneAnalysisTask",
         "chime:TagResource",
         "chime:UntagResource",
         "chime:UpdateMediaInsightsPipelineStatus"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "chime:DeleteMediaCapturePipeline",
        "chime:DeleteMediaPipeline",
        "chime:GetMediaCapturePipeline",
        "chime:GetMediaPipeline",
        "chime:GetSpeakerSearchTask",
        "chime:GetVoiceToneAnalysisTask",
        "chime:ListTagsForResource",
        "chime:StartSpeakerSearchTask",
        "chime:StartVoiceToneAnalysisTask",
        "chime:StopSpeakerSearchTask",
        "chime:StopVoiceToneAnalysisTask",
        "chime:TagResource",
        "chime:UntagResource",
        "chime:UpdateMediaInsightsPipelineStatus"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/chime:media-pipeline"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/chime:media-pipeline"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "chime:DeleteVoiceProfile",
         "chime:GetVoiceProfile",
         "chime:UpdateVoiceProfile"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "chime:DeleteVoiceProfile",
        "chime:GetVoiceProfile",
        "chime:UpdateVoiceProfile"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/chime:voice-profile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/chime:voice-profile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "chime:DeleteVoiceProfileDomain",
         "chime:GetVoiceProfileDomain",
         "chime:ListTagsForResource",
         "chime:ListVoiceProfiles",
         "chime:TagResource",
         "chime:UntagResource",
         "chime:UpdateVoiceProfileDomain"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "chime:DeleteVoiceProfileDomain",
        "chime:GetVoiceProfileDomain",
        "chime:ListTagsForResource",
        "chime:ListVoiceProfiles",
        "chime:TagResource",
        "chime:UntagResource",
        "chime:UpdateVoiceProfileDomain"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/chime:voice-profile-domain"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/chime:voice-profile-domain"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cleanrooms:BatchGetCollaborationAnalysisTemplate",
         "cleanrooms:CreateAnalysisTemplate",
         "cleanrooms:DeleteAnalysisTemplate",
         "cleanrooms:GetAnalysisTemplate",
         "cleanrooms:GetCollaborationAnalysisTemplate",
         "cleanrooms:ListAnalysisTemplates",
         "cleanrooms:ListTagsForResource",
         "cleanrooms:StartProtectedQuery",
         "cleanrooms:TagResource",
         "cleanrooms:UntagResource",
         "cleanrooms:UpdateAnalysisTemplate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cleanrooms:BatchGetCollaborationAnalysisTemplate",
        "cleanrooms:CreateAnalysisTemplate",
        "cleanrooms:DeleteAnalysisTemplate",
        "cleanrooms:GetAnalysisTemplate",
        "cleanrooms:GetCollaborationAnalysisTemplate",
        "cleanrooms:ListAnalysisTemplates",
        "cleanrooms:ListTagsForResource",
        "cleanrooms:StartProtectedQuery",
        "cleanrooms:TagResource",
        "cleanrooms:UntagResource",
        "cleanrooms:UpdateAnalysisTemplate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cleanrooms:analysistemplate"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cleanrooms:analysistemplate"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cleanrooms:BatchGetCollaborationAnalysisTemplate",
         "cleanrooms:BatchGetSchema",
         "cleanrooms:BatchGetSchemaAnalysisRule",
         "cleanrooms:CreateCollaboration",
         "cleanrooms:CreateMembership",
         "cleanrooms:DeleteCollaboration",
         "cleanrooms:DeleteMember",
         "cleanrooms:GetCollaboration",
         "cleanrooms:GetCollaborationAnalysisTemplate",
         "cleanrooms:GetCollaborationConfiguredAudienceModelAssociation",
         "cleanrooms:GetCollaborationIdNamespaceAssociation",
         "cleanrooms:GetCollaborationPrivacyBudgetTemplate",
         "cleanrooms:GetSchema",
         "cleanrooms:GetSchemaAnalysisRule",
         "cleanrooms:ListCollaborationAnalysisTemplates",
         "cleanrooms:ListCollaborationConfiguredAudienceModelAssociations",
         "cleanrooms:ListCollaborationIdNamespaceAssociations",
         "cleanrooms:ListCollaborationPrivacyBudgetTemplates",
         "cleanrooms:ListCollaborationPrivacyBudgets",
         "cleanrooms:ListMembers",
         "cleanrooms:ListSchemas",
         "cleanrooms:ListTagsForResource",
         "cleanrooms:PassCollaboration",
         "cleanrooms:TagResource",
         "cleanrooms:UntagResource",
         "cleanrooms:UpdateCollaboration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cleanrooms:BatchGetCollaborationAnalysisTemplate",
        "cleanrooms:BatchGetSchema",
        "cleanrooms:BatchGetSchemaAnalysisRule",
        "cleanrooms:CreateCollaboration",
        "cleanrooms:CreateMembership",
        "cleanrooms:DeleteCollaboration",
        "cleanrooms:DeleteMember",
        "cleanrooms:GetCollaboration",
        "cleanrooms:GetCollaborationAnalysisTemplate",
        "cleanrooms:GetCollaborationConfiguredAudienceModelAssociation",
        "cleanrooms:GetCollaborationIdNamespaceAssociation",
        "cleanrooms:GetCollaborationPrivacyBudgetTemplate",
        "cleanrooms:GetSchema",
        "cleanrooms:GetSchemaAnalysisRule",
        "cleanrooms:ListCollaborationAnalysisTemplates",
        "cleanrooms:ListCollaborationConfiguredAudienceModelAssociations",
        "cleanrooms:ListCollaborationIdNamespaceAssociations",
        "cleanrooms:ListCollaborationPrivacyBudgetTemplates",
        "cleanrooms:ListCollaborationPrivacyBudgets",
        "cleanrooms:ListMembers",
        "cleanrooms:ListSchemas",
        "cleanrooms:ListTagsForResource",
        "cleanrooms:PassCollaboration",
        "cleanrooms:TagResource",
        "cleanrooms:UntagResource",
        "cleanrooms:UpdateCollaboration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cleanrooms:collaboration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cleanrooms:collaboration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cleanrooms:BatchGetSchema",
         "cleanrooms:BatchGetSchemaAnalysisRule",
         "cleanrooms:CreateConfiguredTableAssociation",
         "cleanrooms:CreateConfiguredTableAssociationAnalysisRule",
         "cleanrooms:DeleteConfiguredTableAssociation",
         "cleanrooms:DeleteConfiguredTableAssociationAnalysisRule",
         "cleanrooms:GetConfiguredTableAssociation",
         "cleanrooms:GetConfiguredTableAssociationAnalysisRule",
         "cleanrooms:GetSchema",
         "cleanrooms:GetSchemaAnalysisRule",
         "cleanrooms:ListConfiguredTableAssociations",
         "cleanrooms:ListTagsForResource",
         "cleanrooms:StartProtectedQuery",
         "cleanrooms:TagResource",
         "cleanrooms:UntagResource",
         "cleanrooms:UpdateConfiguredTableAssociation",
         "cleanrooms:UpdateConfiguredTableAssociationAnalysisRule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cleanrooms:BatchGetSchema",
        "cleanrooms:BatchGetSchemaAnalysisRule",
        "cleanrooms:CreateConfiguredTableAssociation",
        "cleanrooms:CreateConfiguredTableAssociationAnalysisRule",
        "cleanrooms:DeleteConfiguredTableAssociation",
        "cleanrooms:DeleteConfiguredTableAssociationAnalysisRule",
        "cleanrooms:GetConfiguredTableAssociation",
        "cleanrooms:GetConfiguredTableAssociationAnalysisRule",
        "cleanrooms:GetSchema",
        "cleanrooms:GetSchemaAnalysisRule",
        "cleanrooms:ListConfiguredTableAssociations",
        "cleanrooms:ListTagsForResource",
        "cleanrooms:StartProtectedQuery",
        "cleanrooms:TagResource",
        "cleanrooms:UntagResource",
        "cleanrooms:UpdateConfiguredTableAssociation",
        "cleanrooms:UpdateConfiguredTableAssociationAnalysisRule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cleanrooms:configuredtableassociation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cleanrooms:configuredtableassociation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cleanrooms:BatchGetSchema",
         "cleanrooms:BatchGetSchemaAnalysisRule",
         "cleanrooms:CreateIdMappingTable",
         "cleanrooms:DeleteIdMappingTable",
         "cleanrooms:GetIdMappingTable",
         "cleanrooms:ListIdMappingTables",
         "cleanrooms:PopulateIdMappingTable",
         "cleanrooms:StartProtectedQuery",
         "cleanrooms:TagResource",
         "cleanrooms:UntagResource",
         "cleanrooms:UpdateIdMappingTable"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cleanrooms:BatchGetSchema",
        "cleanrooms:BatchGetSchemaAnalysisRule",
        "cleanrooms:CreateIdMappingTable",
        "cleanrooms:DeleteIdMappingTable",
        "cleanrooms:GetIdMappingTable",
        "cleanrooms:ListIdMappingTables",
        "cleanrooms:PopulateIdMappingTable",
        "cleanrooms:StartProtectedQuery",
        "cleanrooms:TagResource",
        "cleanrooms:UntagResource",
        "cleanrooms:UpdateIdMappingTable"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cleanrooms:idmappingtable"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cleanrooms:idmappingtable"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cleanrooms:CreateAnalysisTemplate",
         "cleanrooms:CreateConfiguredAudienceModelAssociation",
         "cleanrooms:CreateConfiguredTableAssociation",
         "cleanrooms:CreateIdMappingTable",
         "cleanrooms:CreateIdNamespaceAssociation",
         "cleanrooms:CreateMembership",
         "cleanrooms:CreatePrivacyBudgetTemplate",
         "cleanrooms:DeleteIdMappingTable",
         "cleanrooms:DeleteIdNamespaceAssociation",
         "cleanrooms:DeleteMembership",
         "cleanrooms:GetIdMappingTable",
         "cleanrooms:GetIdNamespaceAssociation",
         "cleanrooms:GetMembership",
         "cleanrooms:GetProtectedQuery",
         "cleanrooms:ListAnalysisTemplates",
         "cleanrooms:ListConfiguredAudienceModelAssociations",
         "cleanrooms:ListConfiguredTableAssociations",
         "cleanrooms:ListIdMappingTables",
         "cleanrooms:ListIdNamespaceAssociations",
         "cleanrooms:ListPrivacyBudgetTemplates",
         "cleanrooms:ListPrivacyBudgets",
         "cleanrooms:ListProtectedQueries",
         "cleanrooms:ListTagsForResource",
         "cleanrooms:PassMembership",
         "cleanrooms:PopulateIdMappingTable",
         "cleanrooms:PreviewPrivacyImpact",
         "cleanrooms:StartProtectedQuery",
         "cleanrooms:TagResource",
         "cleanrooms:UntagResource",
         "cleanrooms:UpdateIdMappingTable",
         "cleanrooms:UpdateIdNamespaceAssociation",
         "cleanrooms:UpdateMembership",
         "cleanrooms:UpdateProtectedQuery"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cleanrooms:CreateAnalysisTemplate",
        "cleanrooms:CreateConfiguredAudienceModelAssociation",
        "cleanrooms:CreateConfiguredTableAssociation",
        "cleanrooms:CreateIdMappingTable",
        "cleanrooms:CreateIdNamespaceAssociation",
        "cleanrooms:CreateMembership",
        "cleanrooms:CreatePrivacyBudgetTemplate",
        "cleanrooms:DeleteIdMappingTable",
        "cleanrooms:DeleteIdNamespaceAssociation",
        "cleanrooms:DeleteMembership",
        "cleanrooms:GetIdMappingTable",
        "cleanrooms:GetIdNamespaceAssociation",
        "cleanrooms:GetMembership",
        "cleanrooms:GetProtectedQuery",
        "cleanrooms:ListAnalysisTemplates",
        "cleanrooms:ListConfiguredAudienceModelAssociations",
        "cleanrooms:ListConfiguredTableAssociations",
        "cleanrooms:ListIdMappingTables",
        "cleanrooms:ListIdNamespaceAssociations",
        "cleanrooms:ListPrivacyBudgetTemplates",
        "cleanrooms:ListPrivacyBudgets",
        "cleanrooms:ListProtectedQueries",
        "cleanrooms:ListTagsForResource",
        "cleanrooms:PassMembership",
        "cleanrooms:PopulateIdMappingTable",
        "cleanrooms:PreviewPrivacyImpact",
        "cleanrooms:StartProtectedQuery",
        "cleanrooms:TagResource",
        "cleanrooms:UntagResource",
        "cleanrooms:UpdateIdMappingTable",
        "cleanrooms:UpdateIdNamespaceAssociation",
        "cleanrooms:UpdateMembership",
        "cleanrooms:UpdateProtectedQuery"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cleanrooms:membership"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cleanrooms:membership"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cleanrooms:CreateConfiguredAudienceModelAssociation",
         "cleanrooms:DeleteConfiguredAudienceModelAssociation",
         "cleanrooms:GetCollaborationConfiguredAudienceModelAssociation",
         "cleanrooms:GetConfiguredAudienceModelAssociation",
         "cleanrooms:ListConfiguredAudienceModelAssociations",
         "cleanrooms:ListTagsForResource",
         "cleanrooms:TagResource",
         "cleanrooms:UntagResource",
         "cleanrooms:UpdateConfiguredAudienceModelAssociation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cleanrooms:CreateConfiguredAudienceModelAssociation",
        "cleanrooms:DeleteConfiguredAudienceModelAssociation",
        "cleanrooms:GetCollaborationConfiguredAudienceModelAssociation",
        "cleanrooms:GetConfiguredAudienceModelAssociation",
        "cleanrooms:ListConfiguredAudienceModelAssociations",
        "cleanrooms:ListTagsForResource",
        "cleanrooms:TagResource",
        "cleanrooms:UntagResource",
        "cleanrooms:UpdateConfiguredAudienceModelAssociation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cleanrooms:configuredaudiencemodelassociation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cleanrooms:configuredaudiencemodelassociation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cleanrooms:CreateConfiguredTable",
         "cleanrooms:CreateConfiguredTableAnalysisRule",
         "cleanrooms:CreateConfiguredTableAssociation",
         "cleanrooms:DeleteConfiguredTable",
         "cleanrooms:DeleteConfiguredTableAnalysisRule",
         "cleanrooms:GetConfiguredTable",
         "cleanrooms:GetConfiguredTableAnalysisRule",
         "cleanrooms:ListTagsForResource",
         "cleanrooms:TagResource",
         "cleanrooms:UntagResource",
         "cleanrooms:UpdateConfiguredTable",
         "cleanrooms:UpdateConfiguredTableAnalysisRule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cleanrooms:CreateConfiguredTable",
        "cleanrooms:CreateConfiguredTableAnalysisRule",
        "cleanrooms:CreateConfiguredTableAssociation",
        "cleanrooms:DeleteConfiguredTable",
        "cleanrooms:DeleteConfiguredTableAnalysisRule",
        "cleanrooms:GetConfiguredTable",
        "cleanrooms:GetConfiguredTableAnalysisRule",
        "cleanrooms:ListTagsForResource",
        "cleanrooms:TagResource",
        "cleanrooms:UntagResource",
        "cleanrooms:UpdateConfiguredTable",
        "cleanrooms:UpdateConfiguredTableAnalysisRule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cleanrooms:configuredtable"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cleanrooms:configuredtable"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cleanrooms:CreateIdNamespaceAssociation",
         "cleanrooms:DeleteIdNamespaceAssociation",
         "cleanrooms:GetCollaborationIdNamespaceAssociation",
         "cleanrooms:GetIdNamespaceAssociation",
         "cleanrooms:ListIdNamespaceAssociations",
         "cleanrooms:TagResource",
         "cleanrooms:UntagResource",
         "cleanrooms:UpdateIdNamespaceAssociation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cleanrooms:CreateIdNamespaceAssociation",
        "cleanrooms:DeleteIdNamespaceAssociation",
        "cleanrooms:GetCollaborationIdNamespaceAssociation",
        "cleanrooms:GetIdNamespaceAssociation",
        "cleanrooms:ListIdNamespaceAssociations",
        "cleanrooms:TagResource",
        "cleanrooms:UntagResource",
        "cleanrooms:UpdateIdNamespaceAssociation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cleanrooms:idnamespaceassociation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cleanrooms:idnamespaceassociation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cleanrooms:CreatePrivacyBudgetTemplate",
         "cleanrooms:DeletePrivacyBudgetTemplate",
         "cleanrooms:GetCollaborationPrivacyBudgetTemplate",
         "cleanrooms:GetPrivacyBudgetTemplate",
         "cleanrooms:ListPrivacyBudgetTemplates",
         "cleanrooms:ListTagsForResource",
         "cleanrooms:TagResource",
         "cleanrooms:UntagResource",
         "cleanrooms:UpdatePrivacyBudgetTemplate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cleanrooms:CreatePrivacyBudgetTemplate",
        "cleanrooms:DeletePrivacyBudgetTemplate",
        "cleanrooms:GetCollaborationPrivacyBudgetTemplate",
        "cleanrooms:GetPrivacyBudgetTemplate",
        "cleanrooms:ListPrivacyBudgetTemplates",
        "cleanrooms:ListTagsForResource",
        "cleanrooms:TagResource",
        "cleanrooms:UntagResource",
        "cleanrooms:UpdatePrivacyBudgetTemplate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cleanrooms:privacybudgettemplate"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cleanrooms:privacybudgettemplate"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cleanrooms-ml:CancelTrainedModel",
         "cleanrooms-ml:DeleteTrainedModelOutput",
         "cleanrooms-ml:GetCollaborationTrainedModel",
         "cleanrooms-ml:GetTrainedModel",
         "cleanrooms-ml:ListCollaborationTrainedModelExportJobs",
         "cleanrooms-ml:StartTrainedModelExportJob",
         "cleanrooms-ml:StartTrainedModelInferenceJob",
         "cleanrooms-ml:TagResource",
         "cleanrooms-ml:UnTagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cleanrooms-ml:CancelTrainedModel",
        "cleanrooms-ml:DeleteTrainedModelOutput",
        "cleanrooms-ml:GetCollaborationTrainedModel",
        "cleanrooms-ml:GetTrainedModel",
        "cleanrooms-ml:ListCollaborationTrainedModelExportJobs",
        "cleanrooms-ml:StartTrainedModelExportJob",
        "cleanrooms-ml:StartTrainedModelInferenceJob",
        "cleanrooms-ml:TagResource",
        "cleanrooms-ml:UnTagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cleanrooms-ml:TrainedModel"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cleanrooms-ml:TrainedModel"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cleanrooms-ml:CancelTrainedModelInferenceJob",
         "cleanrooms-ml:GetTrainedModelInferenceJob",
         "cleanrooms-ml:TagResource",
         "cleanrooms-ml:UnTagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cleanrooms-ml:CancelTrainedModelInferenceJob",
        "cleanrooms-ml:GetTrainedModelInferenceJob",
        "cleanrooms-ml:TagResource",
        "cleanrooms-ml:UnTagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cleanrooms-ml:TrainedModelInferenceJob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cleanrooms-ml:TrainedModelInferenceJob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cleanrooms-ml:CreateAudienceModel",
         "cleanrooms-ml:DeleteTrainingDataset",
         "cleanrooms-ml:GetTrainingDataset",
         "cleanrooms-ml:ListTagsForResource",
         "cleanrooms-ml:TagResource",
         "cleanrooms-ml:UnTagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cleanrooms-ml:CreateAudienceModel",
        "cleanrooms-ml:DeleteTrainingDataset",
        "cleanrooms-ml:GetTrainingDataset",
        "cleanrooms-ml:ListTagsForResource",
        "cleanrooms-ml:TagResource",
        "cleanrooms-ml:UnTagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cleanrooms-ml:trainingdataset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cleanrooms-ml:trainingdataset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cleanrooms-ml:CreateConfiguredAudienceModel",
         "cleanrooms-ml:DeleteAudienceModel",
         "cleanrooms-ml:GetAudienceModel",
         "cleanrooms-ml:ListTagsForResource",
         "cleanrooms-ml:TagResource",
         "cleanrooms-ml:UnTagResource",
         "cleanrooms-ml:UpdateConfiguredAudienceModel"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cleanrooms-ml:CreateConfiguredAudienceModel",
        "cleanrooms-ml:DeleteAudienceModel",
        "cleanrooms-ml:GetAudienceModel",
        "cleanrooms-ml:ListTagsForResource",
        "cleanrooms-ml:TagResource",
        "cleanrooms-ml:UnTagResource",
        "cleanrooms-ml:UpdateConfiguredAudienceModel"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cleanrooms-ml:audiencemodel"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cleanrooms-ml:audiencemodel"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cleanrooms-ml:CreateConfiguredModelAlgorithmAssociation",
         "cleanrooms-ml:DeleteConfiguredModelAlgorithm",
         "cleanrooms-ml:GetConfiguredModelAlgorithm",
         "cleanrooms-ml:TagResource",
         "cleanrooms-ml:UnTagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cleanrooms-ml:CreateConfiguredModelAlgorithmAssociation",
        "cleanrooms-ml:DeleteConfiguredModelAlgorithm",
        "cleanrooms-ml:GetConfiguredModelAlgorithm",
        "cleanrooms-ml:TagResource",
        "cleanrooms-ml:UnTagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cleanrooms-ml:ConfiguredModelAlgorithm"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cleanrooms-ml:ConfiguredModelAlgorithm"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cleanrooms-ml:CreateMLInputChannel",
         "cleanrooms-ml:CreateTrainedModel",
         "cleanrooms-ml:DeleteConfiguredModelAlgorithmAssociation",
         "cleanrooms-ml:GetCollaborationConfiguredModelAlgorithmAssociation",
         "cleanrooms-ml:GetConfiguredModelAlgorithmAssociation",
         "cleanrooms-ml:StartTrainedModelInferenceJob",
         "cleanrooms-ml:TagResource",
         "cleanrooms-ml:UnTagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cleanrooms-ml:CreateMLInputChannel",
        "cleanrooms-ml:CreateTrainedModel",
        "cleanrooms-ml:DeleteConfiguredModelAlgorithmAssociation",
        "cleanrooms-ml:GetCollaborationConfiguredModelAlgorithmAssociation",
        "cleanrooms-ml:GetConfiguredModelAlgorithmAssociation",
        "cleanrooms-ml:StartTrainedModelInferenceJob",
        "cleanrooms-ml:TagResource",
        "cleanrooms-ml:UnTagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cleanrooms-ml:ConfiguredModelAlgorithmAssociation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cleanrooms-ml:ConfiguredModelAlgorithmAssociation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cleanrooms-ml:DeleteAudienceGenerationJob",
         "cleanrooms-ml:GetAudienceGenerationJob",
         "cleanrooms-ml:ListAudienceExportJobs",
         "cleanrooms-ml:ListTagsForResource",
         "cleanrooms-ml:StartAudienceExportJob",
         "cleanrooms-ml:TagResource",
         "cleanrooms-ml:UnTagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cleanrooms-ml:DeleteAudienceGenerationJob",
        "cleanrooms-ml:GetAudienceGenerationJob",
        "cleanrooms-ml:ListAudienceExportJobs",
        "cleanrooms-ml:ListTagsForResource",
        "cleanrooms-ml:StartAudienceExportJob",
        "cleanrooms-ml:TagResource",
        "cleanrooms-ml:UnTagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cleanrooms-ml:audiencegenerationjob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cleanrooms-ml:audiencegenerationjob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cleanrooms-ml:DeleteConfiguredAudienceModel",
         "cleanrooms-ml:DeleteConfiguredAudienceModelPolicy",
         "cleanrooms-ml:GetConfiguredAudienceModel",
         "cleanrooms-ml:GetConfiguredAudienceModelPolicy",
         "cleanrooms-ml:ListAudienceGenerationJobs",
         "cleanrooms-ml:ListTagsForResource",
         "cleanrooms-ml:PutConfiguredAudienceModelPolicy",
         "cleanrooms-ml:StartAudienceGenerationJob",
         "cleanrooms-ml:TagResource",
         "cleanrooms-ml:UnTagResource",
         "cleanrooms-ml:UpdateConfiguredAudienceModel"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cleanrooms-ml:DeleteConfiguredAudienceModel",
        "cleanrooms-ml:DeleteConfiguredAudienceModelPolicy",
        "cleanrooms-ml:GetConfiguredAudienceModel",
        "cleanrooms-ml:GetConfiguredAudienceModelPolicy",
        "cleanrooms-ml:ListAudienceGenerationJobs",
        "cleanrooms-ml:ListTagsForResource",
        "cleanrooms-ml:PutConfiguredAudienceModelPolicy",
        "cleanrooms-ml:StartAudienceGenerationJob",
        "cleanrooms-ml:TagResource",
        "cleanrooms-ml:UnTagResource",
        "cleanrooms-ml:UpdateConfiguredAudienceModel"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cleanrooms-ml:configuredaudiencemodel"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cleanrooms-ml:configuredaudiencemodel"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cleanrooms-ml:DeleteMLInputChannelData",
         "cleanrooms-ml:GetCollaborationMLInputChannel",
         "cleanrooms-ml:GetMLInputChannel",
         "cleanrooms-ml:StartTrainedModelInferenceJob",
         "cleanrooms-ml:TagResource",
         "cleanrooms-ml:UnTagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cleanrooms-ml:DeleteMLInputChannelData",
        "cleanrooms-ml:GetCollaborationMLInputChannel",
        "cleanrooms-ml:GetMLInputChannel",
        "cleanrooms-ml:StartTrainedModelInferenceJob",
        "cleanrooms-ml:TagResource",
        "cleanrooms-ml:UnTagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cleanrooms-ml:MLInputChannel"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cleanrooms-ml:MLInputChannel"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloud9:ActivateEC2Remote",
         "cloud9:CreateEnvironmentMembership",
         "cloud9:CreateEnvironmentToken",
         "cloud9:DeleteEnvironment",
         "cloud9:DeleteEnvironmentMembership",
         "cloud9:DescribeEC2Remote",
         "cloud9:DescribeEnvironmentMemberships",
         "cloud9:DescribeEnvironmentStatus",
         "cloud9:DescribeEnvironments",
         "cloud9:DescribeSSHRemote",
         "cloud9:GetEnvironmentConfig",
         "cloud9:GetEnvironmentSettings",
         "cloud9:GetMembershipSettings",
         "cloud9:ListTagsForResource",
         "cloud9:ModifyTemporaryCredentialsOnEnvironmentEC2",
         "cloud9:TagResource",
         "cloud9:UntagResource",
         "cloud9:UpdateEnvironment",
         "cloud9:UpdateEnvironmentMembership",
         "cloud9:UpdateEnvironmentSettings",
         "cloud9:UpdateMembershipSettings",
         "cloud9:UpdateSSHRemote"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloud9:ActivateEC2Remote",
        "cloud9:CreateEnvironmentMembership",
        "cloud9:CreateEnvironmentToken",
        "cloud9:DeleteEnvironment",
        "cloud9:DeleteEnvironmentMembership",
        "cloud9:DescribeEC2Remote",
        "cloud9:DescribeEnvironmentMemberships",
        "cloud9:DescribeEnvironmentStatus",
        "cloud9:DescribeEnvironments",
        "cloud9:DescribeSSHRemote",
        "cloud9:GetEnvironmentConfig",
        "cloud9:GetEnvironmentSettings",
        "cloud9:GetMembershipSettings",
        "cloud9:ListTagsForResource",
        "cloud9:ModifyTemporaryCredentialsOnEnvironmentEC2",
        "cloud9:TagResource",
        "cloud9:UntagResource",
        "cloud9:UpdateEnvironment",
        "cloud9:UpdateEnvironmentMembership",
        "cloud9:UpdateEnvironmentSettings",
        "cloud9:UpdateMembershipSettings",
        "cloud9:UpdateSSHRemote"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloud9:environment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloud9:environment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "clouddirectory:AddFacetToObject",
         "clouddirectory:ApplySchema",
         "clouddirectory:AttachObject",
         "clouddirectory:AttachPolicy",
         "clouddirectory:AttachToIndex",
         "clouddirectory:AttachTypedLink",
         "clouddirectory:BatchRead",
         "clouddirectory:BatchWrite",
         "clouddirectory:CreateIndex",
         "clouddirectory:CreateObject",
         "clouddirectory:DeleteDirectory",
         "clouddirectory:DeleteObject",
         "clouddirectory:DetachFromIndex",
         "clouddirectory:DetachObject",
         "clouddirectory:DetachPolicy",
         "clouddirectory:DetachTypedLink",
         "clouddirectory:DisableDirectory",
         "clouddirectory:EnableDirectory",
         "clouddirectory:GetDirectory",
         "clouddirectory:GetLinkAttributes",
         "clouddirectory:GetObjectAttributes",
         "clouddirectory:GetObjectInformation",
         "clouddirectory:ListAppliedSchemaArns",
         "clouddirectory:ListAttachedIndices",
         "clouddirectory:ListIncomingTypedLinks",
         "clouddirectory:ListIndex",
         "clouddirectory:ListObjectAttributes",
         "clouddirectory:ListObjectChildren",
         "clouddirectory:ListObjectParentPaths",
         "clouddirectory:ListObjectParents",
         "clouddirectory:ListObjectPolicies",
         "clouddirectory:ListOutgoingTypedLinks",
         "clouddirectory:ListPolicyAttachments",
         "clouddirectory:ListTagsForResource",
         "clouddirectory:LookupPolicy",
         "clouddirectory:RemoveFacetFromObject",
         "clouddirectory:TagResource",
         "clouddirectory:UntagResource",
         "clouddirectory:UpdateLinkAttributes",
         "clouddirectory:UpdateObjectAttributes",
         "clouddirectory:UpgradeAppliedSchema"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "clouddirectory:AddFacetToObject",
        "clouddirectory:ApplySchema",
        "clouddirectory:AttachObject",
        "clouddirectory:AttachPolicy",
        "clouddirectory:AttachToIndex",
        "clouddirectory:AttachTypedLink",
        "clouddirectory:BatchRead",
        "clouddirectory:BatchWrite",
        "clouddirectory:CreateIndex",
        "clouddirectory:CreateObject",
        "clouddirectory:DeleteDirectory",
        "clouddirectory:DeleteObject",
        "clouddirectory:DetachFromIndex",
        "clouddirectory:DetachObject",
        "clouddirectory:DetachPolicy",
        "clouddirectory:DetachTypedLink",
        "clouddirectory:DisableDirectory",
        "clouddirectory:EnableDirectory",
        "clouddirectory:GetDirectory",
        "clouddirectory:GetLinkAttributes",
        "clouddirectory:GetObjectAttributes",
        "clouddirectory:GetObjectInformation",
        "clouddirectory:ListAppliedSchemaArns",
        "clouddirectory:ListAttachedIndices",
        "clouddirectory:ListIncomingTypedLinks",
        "clouddirectory:ListIndex",
        "clouddirectory:ListObjectAttributes",
        "clouddirectory:ListObjectChildren",
        "clouddirectory:ListObjectParentPaths",
        "clouddirectory:ListObjectParents",
        "clouddirectory:ListObjectPolicies",
        "clouddirectory:ListOutgoingTypedLinks",
        "clouddirectory:ListPolicyAttachments",
        "clouddirectory:ListTagsForResource",
        "clouddirectory:LookupPolicy",
        "clouddirectory:RemoveFacetFromObject",
        "clouddirectory:TagResource",
        "clouddirectory:UntagResource",
        "clouddirectory:UpdateLinkAttributes",
        "clouddirectory:UpdateObjectAttributes",
        "clouddirectory:UpgradeAppliedSchema"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/clouddirectory:directory"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/clouddirectory:directory"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "clouddirectory:ApplySchema",
         "clouddirectory:CreateDirectory",
         "clouddirectory:DeleteSchema",
         "clouddirectory:GetFacet",
         "clouddirectory:GetSchemaAsJson",
         "clouddirectory:GetTypedLinkFacetInformation",
         "clouddirectory:ListFacetAttributes",
         "clouddirectory:ListFacetNames",
         "clouddirectory:ListTypedLinkFacetAttributes",
         "clouddirectory:ListTypedLinkFacetNames",
         "clouddirectory:UpgradeAppliedSchema",
         "clouddirectory:UpgradePublishedSchema"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "clouddirectory:ApplySchema",
        "clouddirectory:CreateDirectory",
        "clouddirectory:DeleteSchema",
        "clouddirectory:GetFacet",
        "clouddirectory:GetSchemaAsJson",
        "clouddirectory:GetTypedLinkFacetInformation",
        "clouddirectory:ListFacetAttributes",
        "clouddirectory:ListFacetNames",
        "clouddirectory:ListTypedLinkFacetAttributes",
        "clouddirectory:ListTypedLinkFacetNames",
        "clouddirectory:UpgradeAppliedSchema",
        "clouddirectory:UpgradePublishedSchema"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/clouddirectory:publishedSchema"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/clouddirectory:publishedSchema"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "clouddirectory:CreateFacet",
         "clouddirectory:CreateTypedLinkFacet",
         "clouddirectory:GetAppliedSchemaVersion",
         "clouddirectory:GetFacet",
         "clouddirectory:GetSchemaAsJson",
         "clouddirectory:GetTypedLinkFacetInformation",
         "clouddirectory:ListFacetAttributes",
         "clouddirectory:ListFacetNames",
         "clouddirectory:ListTypedLinkFacetAttributes",
         "clouddirectory:ListTypedLinkFacetNames",
         "clouddirectory:UpdateFacet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "clouddirectory:CreateFacet",
        "clouddirectory:CreateTypedLinkFacet",
        "clouddirectory:GetAppliedSchemaVersion",
        "clouddirectory:GetFacet",
        "clouddirectory:GetSchemaAsJson",
        "clouddirectory:GetTypedLinkFacetInformation",
        "clouddirectory:ListFacetAttributes",
        "clouddirectory:ListFacetNames",
        "clouddirectory:ListTypedLinkFacetAttributes",
        "clouddirectory:ListTypedLinkFacetNames",
        "clouddirectory:UpdateFacet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/clouddirectory:appliedSchema"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/clouddirectory:appliedSchema"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "clouddirectory:CreateFacet",
         "clouddirectory:CreateTypedLinkFacet",
         "clouddirectory:DeleteFacet",
         "clouddirectory:DeleteSchema",
         "clouddirectory:DeleteTypedLinkFacet",
         "clouddirectory:GetFacet",
         "clouddirectory:GetSchemaAsJson",
         "clouddirectory:GetTypedLinkFacetInformation",
         "clouddirectory:ListFacetAttributes",
         "clouddirectory:ListFacetNames",
         "clouddirectory:ListTypedLinkFacetAttributes",
         "clouddirectory:ListTypedLinkFacetNames",
         "clouddirectory:PublishSchema",
         "clouddirectory:UpdateFacet",
         "clouddirectory:UpdateSchema",
         "clouddirectory:UpdateTypedLinkFacet",
         "clouddirectory:UpgradePublishedSchema"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "clouddirectory:CreateFacet",
        "clouddirectory:CreateTypedLinkFacet",
        "clouddirectory:DeleteFacet",
        "clouddirectory:DeleteSchema",
        "clouddirectory:DeleteTypedLinkFacet",
        "clouddirectory:GetFacet",
        "clouddirectory:GetSchemaAsJson",
        "clouddirectory:GetTypedLinkFacetInformation",
        "clouddirectory:ListFacetAttributes",
        "clouddirectory:ListFacetNames",
        "clouddirectory:ListTypedLinkFacetAttributes",
        "clouddirectory:ListTypedLinkFacetNames",
        "clouddirectory:PublishSchema",
        "clouddirectory:UpdateFacet",
        "clouddirectory:UpdateSchema",
        "clouddirectory:UpdateTypedLinkFacet",
        "clouddirectory:UpgradePublishedSchema"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/clouddirectory:developmentSchema"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/clouddirectory:developmentSchema"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudformation:CancelUpdateStack",
         "cloudformation:ContinueUpdateRollback",
         "cloudformation:CreateChangeSet",
         "cloudformation:CreateStack",
         "cloudformation:CreateStackRefactor",
         "cloudformation:DeleteChangeSet",
         "cloudformation:DeleteStack",
         "cloudformation:DescribeChangeSet",
         "cloudformation:DescribeChangeSetHooks",
         "cloudformation:DescribeStackEvents",
         "cloudformation:DescribeStackRefactor",
         "cloudformation:DescribeStackResource",
         "cloudformation:DescribeStackResourceDrifts",
         "cloudformation:DescribeStackResources",
         "cloudformation:DescribeStacks",
         "cloudformation:DetectStackDrift",
         "cloudformation:DetectStackResourceDrift",
         "cloudformation:ExecuteChangeSet",
         "cloudformation:ExecuteStackRefactor",
         "cloudformation:GetStackPolicy",
         "cloudformation:GetTemplate",
         "cloudformation:GetTemplateSummary",
         "cloudformation:ListChangeSets",
         "cloudformation:ListHookResults",
         "cloudformation:ListStackRefactorActions",
         "cloudformation:ListStackRefactors",
         "cloudformation:ListStackResources",
         "cloudformation:RecordHandlerProgress",
         "cloudformation:RollbackStack",
         "cloudformation:SetStackPolicy",
         "cloudformation:SignalResource",
         "cloudformation:TagResource",
         "cloudformation:UntagResource",
         "cloudformation:UpdateStack",
         "cloudformation:UpdateTerminationProtection"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudformation:CancelUpdateStack",
        "cloudformation:ContinueUpdateRollback",
        "cloudformation:CreateChangeSet",
        "cloudformation:CreateStack",
        "cloudformation:CreateStackRefactor",
        "cloudformation:DeleteChangeSet",
        "cloudformation:DeleteStack",
        "cloudformation:DescribeChangeSet",
        "cloudformation:DescribeChangeSetHooks",
        "cloudformation:DescribeStackEvents",
        "cloudformation:DescribeStackRefactor",
        "cloudformation:DescribeStackResource",
        "cloudformation:DescribeStackResourceDrifts",
        "cloudformation:DescribeStackResources",
        "cloudformation:DescribeStacks",
        "cloudformation:DetectStackDrift",
        "cloudformation:DetectStackResourceDrift",
        "cloudformation:ExecuteChangeSet",
        "cloudformation:ExecuteStackRefactor",
        "cloudformation:GetStackPolicy",
        "cloudformation:GetTemplate",
        "cloudformation:GetTemplateSummary",
        "cloudformation:ListChangeSets",
        "cloudformation:ListHookResults",
        "cloudformation:ListStackRefactorActions",
        "cloudformation:ListStackRefactors",
        "cloudformation:ListStackResources",
        "cloudformation:RecordHandlerProgress",
        "cloudformation:RollbackStack",
        "cloudformation:SetStackPolicy",
        "cloudformation:SignalResource",
        "cloudformation:TagResource",
        "cloudformation:UntagResource",
        "cloudformation:UpdateStack",
        "cloudformation:UpdateTerminationProtection"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudformation:stack"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudformation:stack"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudformation:CreateStackInstances",
         "cloudformation:DeleteStackInstances",
         "cloudformation:DeleteStackSet",
         "cloudformation:DescribeStackInstance",
         "cloudformation:DescribeStackSet",
         "cloudformation:DescribeStackSetOperation",
         "cloudformation:DetectStackSetDrift",
         "cloudformation:GetTemplateSummary",
         "cloudformation:ImportStacksToStackSet",
         "cloudformation:ListStackInstanceResourceDrifts",
         "cloudformation:ListStackInstances",
         "cloudformation:ListStackSetAutoDeploymentTargets",
         "cloudformation:ListStackSetOperationResults",
         "cloudformation:ListStackSetOperations",
         "cloudformation:StopStackSetOperation",
         "cloudformation:TagResource",
         "cloudformation:UntagResource",
         "cloudformation:UpdateStackInstances",
         "cloudformation:UpdateStackSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudformation:CreateStackInstances",
        "cloudformation:DeleteStackInstances",
        "cloudformation:DeleteStackSet",
        "cloudformation:DescribeStackInstance",
        "cloudformation:DescribeStackSet",
        "cloudformation:DescribeStackSetOperation",
        "cloudformation:DetectStackSetDrift",
        "cloudformation:GetTemplateSummary",
        "cloudformation:ImportStacksToStackSet",
        "cloudformation:ListStackInstanceResourceDrifts",
        "cloudformation:ListStackInstances",
        "cloudformation:ListStackSetAutoDeploymentTargets",
        "cloudformation:ListStackSetOperationResults",
        "cloudformation:ListStackSetOperations",
        "cloudformation:StopStackSetOperation",
        "cloudformation:TagResource",
        "cloudformation:UntagResource",
        "cloudformation:UpdateStackInstances",
        "cloudformation:UpdateStackSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudformation:stackset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudformation:stackset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudformation:CreateStackInstances",
         "cloudformation:DeleteStackInstances",
         "cloudformation:UpdateStackInstances",
         "cloudformation:UpdateStackSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudformation:CreateStackInstances",
        "cloudformation:DeleteStackInstances",
        "cloudformation:UpdateStackInstances",
        "cloudformation:UpdateStackSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudformation:stackset-target"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudformation:stackset-target"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudformation:CreateStackInstances",
         "cloudformation:DeleteStackInstances",
         "cloudformation:UpdateStackInstances",
         "cloudformation:UpdateStackSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudformation:CreateStackInstances",
        "cloudformation:DeleteStackInstances",
        "cloudformation:UpdateStackInstances",
        "cloudformation:UpdateStackSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudformation:type"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudformation:type"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudformation:TagResource",
         "cloudformation:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudformation:TagResource",
        "cloudformation:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudformation:changeset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudformation:changeset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudfront:AllowVendedLogDeliveryForResource",
         "cloudfront:AssociateAlias",
         "cloudfront:CopyDistribution",
         "cloudfront:CreateDistribution",
         "cloudfront:CreateInvalidation",
         "cloudfront:DeleteDistribution",
         "cloudfront:GetDistribution",
         "cloudfront:GetDistributionConfig",
         "cloudfront:GetInvalidation",
         "cloudfront:ListConflictingAliases",
         "cloudfront:ListInvalidations",
         "cloudfront:ListTagsForResource",
         "cloudfront:TagResource",
         "cloudfront:UntagResource",
         "cloudfront:UpdateDistribution",
         "cloudfront:UpdateDistributionWithStagingConfig"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudfront:AllowVendedLogDeliveryForResource",
        "cloudfront:AssociateAlias",
        "cloudfront:CopyDistribution",
        "cloudfront:CreateDistribution",
        "cloudfront:CreateInvalidation",
        "cloudfront:DeleteDistribution",
        "cloudfront:GetDistribution",
        "cloudfront:GetDistributionConfig",
        "cloudfront:GetInvalidation",
        "cloudfront:ListConflictingAliases",
        "cloudfront:ListInvalidations",
        "cloudfront:ListTagsForResource",
        "cloudfront:TagResource",
        "cloudfront:UntagResource",
        "cloudfront:UpdateDistribution",
        "cloudfront:UpdateDistributionWithStagingConfig"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudfront:distribution"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudfront:distribution"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudfront:CreateAnycastIpList",
         "cloudfront:DeleteAnycastIpList",
         "cloudfront:GetAnycastIpList",
         "cloudfront:ListTagsForResource",
         "cloudfront:TagResource",
         "cloudfront:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudfront:CreateAnycastIpList",
        "cloudfront:DeleteAnycastIpList",
        "cloudfront:GetAnycastIpList",
        "cloudfront:ListTagsForResource",
        "cloudfront:TagResource",
        "cloudfront:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudfront:anycast-ip-list"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudfront:anycast-ip-list"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudfront:CreateCachePolicy",
         "cloudfront:DeleteCachePolicy",
         "cloudfront:GetCachePolicy",
         "cloudfront:GetCachePolicyConfig",
         "cloudfront:UpdateCachePolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudfront:CreateCachePolicy",
        "cloudfront:DeleteCachePolicy",
        "cloudfront:GetCachePolicy",
        "cloudfront:GetCachePolicyConfig",
        "cloudfront:UpdateCachePolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudfront:cache-policy"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudfront:cache-policy"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudfront:CreateCloudFrontOriginAccessIdentity",
         "cloudfront:DeleteCloudFrontOriginAccessIdentity",
         "cloudfront:GetCloudFrontOriginAccessIdentity",
         "cloudfront:GetCloudFrontOriginAccessIdentityConfig",
         "cloudfront:UpdateCloudFrontOriginAccessIdentity"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudfront:CreateCloudFrontOriginAccessIdentity",
        "cloudfront:DeleteCloudFrontOriginAccessIdentity",
        "cloudfront:GetCloudFrontOriginAccessIdentity",
        "cloudfront:GetCloudFrontOriginAccessIdentityConfig",
        "cloudfront:UpdateCloudFrontOriginAccessIdentity"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudfront:origin-access-identity"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudfront:origin-access-identity"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudfront:CreateContinuousDeploymentPolicy",
         "cloudfront:DeleteContinuousDeploymentPolicy",
         "cloudfront:GetContinuousDeploymentPolicy",
         "cloudfront:GetContinuousDeploymentPolicyConfig",
         "cloudfront:UpdateContinuousDeploymentPolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudfront:CreateContinuousDeploymentPolicy",
        "cloudfront:DeleteContinuousDeploymentPolicy",
        "cloudfront:GetContinuousDeploymentPolicy",
        "cloudfront:GetContinuousDeploymentPolicyConfig",
        "cloudfront:UpdateContinuousDeploymentPolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudfront:continuous-deployment-policy"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudfront:continuous-deployment-policy"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudfront:CreateFunction",
         "cloudfront:DeleteFunction",
         "cloudfront:DescribeFunction",
         "cloudfront:GetFunction",
         "cloudfront:PublishFunction",
         "cloudfront:TestFunction",
         "cloudfront:UpdateFunction"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudfront:CreateFunction",
        "cloudfront:DeleteFunction",
        "cloudfront:DescribeFunction",
        "cloudfront:GetFunction",
        "cloudfront:PublishFunction",
        "cloudfront:TestFunction",
        "cloudfront:UpdateFunction"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudfront:function"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudfront:function"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudfront:CreateKeyValueStore",
         "cloudfront:DeleteKeyValueStore",
         "cloudfront:DescribeKeyValueStore",
         "cloudfront:UpdateKeyValueStore"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudfront:CreateKeyValueStore",
        "cloudfront:DeleteKeyValueStore",
        "cloudfront:DescribeKeyValueStore",
        "cloudfront:UpdateKeyValueStore"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudfront:key-value-store"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudfront:key-value-store"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudfront:CreateOriginRequestPolicy",
         "cloudfront:DeleteOriginRequestPolicy",
         "cloudfront:GetOriginRequestPolicy",
         "cloudfront:GetOriginRequestPolicyConfig",
         "cloudfront:UpdateOriginRequestPolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudfront:CreateOriginRequestPolicy",
        "cloudfront:DeleteOriginRequestPolicy",
        "cloudfront:GetOriginRequestPolicy",
        "cloudfront:GetOriginRequestPolicyConfig",
        "cloudfront:UpdateOriginRequestPolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudfront:origin-request-policy"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudfront:origin-request-policy"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudfront:CreateRealtimeLogConfig",
         "cloudfront:DeleteRealtimeLogConfig",
         "cloudfront:GetRealtimeLogConfig",
         "cloudfront:UpdateRealtimeLogConfig"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudfront:CreateRealtimeLogConfig",
        "cloudfront:DeleteRealtimeLogConfig",
        "cloudfront:GetRealtimeLogConfig",
        "cloudfront:UpdateRealtimeLogConfig"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudfront:realtime-log-config"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudfront:realtime-log-config"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudfront:CreateResponseHeadersPolicy",
         "cloudfront:DeleteResponseHeadersPolicy",
         "cloudfront:GetResponseHeadersPolicy",
         "cloudfront:GetResponseHeadersPolicyConfig",
         "cloudfront:UpdateResponseHeadersPolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudfront:CreateResponseHeadersPolicy",
        "cloudfront:DeleteResponseHeadersPolicy",
        "cloudfront:GetResponseHeadersPolicy",
        "cloudfront:GetResponseHeadersPolicyConfig",
        "cloudfront:UpdateResponseHeadersPolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudfront:response-headers-policy"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudfront:response-headers-policy"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudfront:CreateStreamingDistribution",
         "cloudfront:CreateStreamingDistributionWithTags",
         "cloudfront:DeleteStreamingDistribution",
         "cloudfront:GetStreamingDistribution",
         "cloudfront:GetStreamingDistributionConfig",
         "cloudfront:TagResource",
         "cloudfront:UntagResource",
         "cloudfront:UpdateStreamingDistribution"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudfront:CreateStreamingDistribution",
        "cloudfront:CreateStreamingDistributionWithTags",
        "cloudfront:DeleteStreamingDistribution",
        "cloudfront:GetStreamingDistribution",
        "cloudfront:GetStreamingDistributionConfig",
        "cloudfront:TagResource",
        "cloudfront:UntagResource",
        "cloudfront:UpdateStreamingDistribution"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudfront:streaming-distribution"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudfront:streaming-distribution"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudfront:DeleteFieldLevelEncryptionConfig",
         "cloudfront:GetFieldLevelEncryption",
         "cloudfront:GetFieldLevelEncryptionConfig"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudfront:DeleteFieldLevelEncryptionConfig",
        "cloudfront:GetFieldLevelEncryption",
        "cloudfront:GetFieldLevelEncryptionConfig"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudfront:field-level-encryption-config"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudfront:field-level-encryption-config"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudfront:DeleteFieldLevelEncryptionProfile",
         "cloudfront:GetFieldLevelEncryptionProfile",
         "cloudfront:GetFieldLevelEncryptionProfileConfig",
         "cloudfront:UpdateFieldLevelEncryptionProfile"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudfront:DeleteFieldLevelEncryptionProfile",
        "cloudfront:GetFieldLevelEncryptionProfile",
        "cloudfront:GetFieldLevelEncryptionProfileConfig",
        "cloudfront:UpdateFieldLevelEncryptionProfile"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudfront:field-level-encryption-profile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudfront:field-level-encryption-profile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudfront:DeleteOriginAccessControl",
         "cloudfront:GetOriginAccessControl",
         "cloudfront:GetOriginAccessControlConfig",
         "cloudfront:UpdateOriginAccessControl"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudfront:DeleteOriginAccessControl",
        "cloudfront:GetOriginAccessControl",
        "cloudfront:GetOriginAccessControlConfig",
        "cloudfront:UpdateOriginAccessControl"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudfront:origin-access-control"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudfront:origin-access-control"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudfront:DeleteVpcOrigin",
         "cloudfront:GetVpcOrigin",
         "cloudfront:ListTagsForResource",
         "cloudfront:TagResource",
         "cloudfront:UntagResource",
         "cloudfront:UpdateVpcOrigin"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudfront:DeleteVpcOrigin",
        "cloudfront:GetVpcOrigin",
        "cloudfront:ListTagsForResource",
        "cloudfront:TagResource",
        "cloudfront:UntagResource",
        "cloudfront:UpdateVpcOrigin"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudfront:vpcorigin"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudfront:vpcorigin"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudfront-keyvaluestore:DeleteKey",
         "cloudfront-keyvaluestore:DescribeKeyValueStore",
         "cloudfront-keyvaluestore:GetKey",
         "cloudfront-keyvaluestore:ListKeys",
         "cloudfront-keyvaluestore:PutKey",
         "cloudfront-keyvaluestore:UpdateKeys"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudfront-keyvaluestore:DeleteKey",
        "cloudfront-keyvaluestore:DescribeKeyValueStore",
        "cloudfront-keyvaluestore:GetKey",
        "cloudfront-keyvaluestore:ListKeys",
        "cloudfront-keyvaluestore:PutKey",
        "cloudfront-keyvaluestore:UpdateKeys"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudfront-keyvaluestore:key-value-store"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudfront-keyvaluestore:key-value-store"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudhsm:CopyBackupToRegion",
         "cloudhsm:CreateCluster",
         "cloudhsm:DeleteBackup",
         "cloudhsm:DeleteResourcePolicy",
         "cloudhsm:GetResourcePolicy",
         "cloudhsm:ListTags",
         "cloudhsm:ModifyBackupAttributes",
         "cloudhsm:PutResourcePolicy",
         "cloudhsm:RestoreBackup",
         "cloudhsm:TagResource",
         "cloudhsm:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudhsm:CopyBackupToRegion",
        "cloudhsm:CreateCluster",
        "cloudhsm:DeleteBackup",
        "cloudhsm:DeleteResourcePolicy",
        "cloudhsm:GetResourcePolicy",
        "cloudhsm:ListTags",
        "cloudhsm:ModifyBackupAttributes",
        "cloudhsm:PutResourcePolicy",
        "cloudhsm:RestoreBackup",
        "cloudhsm:TagResource",
        "cloudhsm:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudhsm:backup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudhsm:backup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudhsm:CreateHsm",
         "cloudhsm:DeleteCluster",
         "cloudhsm:InitializeCluster",
         "cloudhsm:ListTags",
         "cloudhsm:ModifyCluster",
         "cloudhsm:TagResource",
         "cloudhsm:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudhsm:CreateHsm",
        "cloudhsm:DeleteCluster",
        "cloudhsm:InitializeCluster",
        "cloudhsm:ListTags",
        "cloudhsm:ModifyCluster",
        "cloudhsm:TagResource",
        "cloudhsm:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudhsm:cluster"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudhsm:cluster"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudsearch:AddTags",
         "cloudsearch:BuildSuggesters",
         "cloudsearch:CreateDomain",
         "cloudsearch:DefineAnalysisScheme",
         "cloudsearch:DefineExpression",
         "cloudsearch:DefineIndexField",
         "cloudsearch:DefineSuggester",
         "cloudsearch:DeleteAnalysisScheme",
         "cloudsearch:DeleteDomain",
         "cloudsearch:DeleteExpression",
         "cloudsearch:DeleteIndexField",
         "cloudsearch:DeleteSuggester",
         "cloudsearch:DescribeAnalysisSchemes",
         "cloudsearch:DescribeAvailabilityOptions",
         "cloudsearch:DescribeDomainEndpointOptions",
         "cloudsearch:DescribeDomains",
         "cloudsearch:DescribeExpressions",
         "cloudsearch:DescribeIndexFields",
         "cloudsearch:DescribeScalingParameters",
         "cloudsearch:DescribeServiceAccessPolicies",
         "cloudsearch:DescribeSuggesters",
         "cloudsearch:IndexDocuments",
         "cloudsearch:ListDomainNames",
         "cloudsearch:ListTags",
         "cloudsearch:RemoveTags",
         "cloudsearch:UpdateAvailabilityOptions",
         "cloudsearch:UpdateDomainEndpointOptions",
         "cloudsearch:UpdateScalingParameters",
         "cloudsearch:UpdateServiceAccessPolicies",
         "cloudsearch:document",
         "cloudsearch:search",
         "cloudsearch:suggest"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudsearch:AddTags",
        "cloudsearch:BuildSuggesters",
        "cloudsearch:CreateDomain",
        "cloudsearch:DefineAnalysisScheme",
        "cloudsearch:DefineExpression",
        "cloudsearch:DefineIndexField",
        "cloudsearch:DefineSuggester",
        "cloudsearch:DeleteAnalysisScheme",
        "cloudsearch:DeleteDomain",
        "cloudsearch:DeleteExpression",
        "cloudsearch:DeleteIndexField",
        "cloudsearch:DeleteSuggester",
        "cloudsearch:DescribeAnalysisSchemes",
        "cloudsearch:DescribeAvailabilityOptions",
        "cloudsearch:DescribeDomainEndpointOptions",
        "cloudsearch:DescribeDomains",
        "cloudsearch:DescribeExpressions",
        "cloudsearch:DescribeIndexFields",
        "cloudsearch:DescribeScalingParameters",
        "cloudsearch:DescribeServiceAccessPolicies",
        "cloudsearch:DescribeSuggesters",
        "cloudsearch:IndexDocuments",
        "cloudsearch:ListDomainNames",
        "cloudsearch:ListTags",
        "cloudsearch:RemoveTags",
        "cloudsearch:UpdateAvailabilityOptions",
        "cloudsearch:UpdateDomainEndpointOptions",
        "cloudsearch:UpdateScalingParameters",
        "cloudsearch:UpdateServiceAccessPolicies",
        "cloudsearch:document",
        "cloudsearch:search",
        "cloudsearch:suggest"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudsearch:domain"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudsearch:domain"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudshell:ApproveCommand",
         "cloudshell:CreateSession",
         "cloudshell:DeleteEnvironment",
         "cloudshell:GetEnvironmentStatus",
         "cloudshell:GetFileDownloadUrls",
         "cloudshell:GetFileUploadUrls",
         "cloudshell:PutCredentials",
         "cloudshell:StartEnvironment",
         "cloudshell:StopEnvironment"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudshell:ApproveCommand",
        "cloudshell:CreateSession",
        "cloudshell:DeleteEnvironment",
        "cloudshell:GetEnvironmentStatus",
        "cloudshell:GetFileDownloadUrls",
        "cloudshell:GetFileUploadUrls",
        "cloudshell:PutCredentials",
        "cloudshell:StartEnvironment",
        "cloudshell:StopEnvironment"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudshell:Environment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudshell:Environment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudtrail:AddTags",
         "cloudtrail:CreateChannel",
         "cloudtrail:CreateServiceLinkedChannel",
         "cloudtrail:DeleteChannel",
         "cloudtrail:DeleteResourcePolicy",
         "cloudtrail:DeleteServiceLinkedChannel",
         "cloudtrail:GetChannel",
         "cloudtrail:GetResourcePolicy",
         "cloudtrail:GetServiceLinkedChannel",
         "cloudtrail:ListTags",
         "cloudtrail:PutResourcePolicy",
         "cloudtrail:RemoveTags",
         "cloudtrail:UpdateChannel",
         "cloudtrail:UpdateServiceLinkedChannel"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudtrail:AddTags",
        "cloudtrail:CreateChannel",
        "cloudtrail:CreateServiceLinkedChannel",
        "cloudtrail:DeleteChannel",
        "cloudtrail:DeleteResourcePolicy",
        "cloudtrail:DeleteServiceLinkedChannel",
        "cloudtrail:GetChannel",
        "cloudtrail:GetResourcePolicy",
        "cloudtrail:GetServiceLinkedChannel",
        "cloudtrail:ListTags",
        "cloudtrail:PutResourcePolicy",
        "cloudtrail:RemoveTags",
        "cloudtrail:UpdateChannel",
        "cloudtrail:UpdateServiceLinkedChannel"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudtrail:channel"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudtrail:channel"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudtrail:AddTags",
         "cloudtrail:CreateDashboard",
         "cloudtrail:DeleteDashboard",
         "cloudtrail:DeleteResourcePolicy",
         "cloudtrail:GetDashboard",
         "cloudtrail:GetResourcePolicy",
         "cloudtrail:ListTags",
         "cloudtrail:PutResourcePolicy",
         "cloudtrail:RemoveTags",
         "cloudtrail:StartDashboardRefresh",
         "cloudtrail:UpdateDashboard"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudtrail:AddTags",
        "cloudtrail:CreateDashboard",
        "cloudtrail:DeleteDashboard",
        "cloudtrail:DeleteResourcePolicy",
        "cloudtrail:GetDashboard",
        "cloudtrail:GetResourcePolicy",
        "cloudtrail:ListTags",
        "cloudtrail:PutResourcePolicy",
        "cloudtrail:RemoveTags",
        "cloudtrail:StartDashboardRefresh",
        "cloudtrail:UpdateDashboard"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudtrail:dashboard"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudtrail:dashboard"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudtrail:AddTags",
         "cloudtrail:CancelQuery",
         "cloudtrail:CreateChannel",
         "cloudtrail:CreateEventDataStore",
         "cloudtrail:DeleteEventDataStore",
         "cloudtrail:DeleteResourcePolicy",
         "cloudtrail:DescribeQuery",
         "cloudtrail:DisableFederation",
         "cloudtrail:EnableFederation",
         "cloudtrail:GenerateQuery",
         "cloudtrail:GenerateQueryResultsSummary",
         "cloudtrail:GetEventDataStore",
         "cloudtrail:GetEventDataStoreData",
         "cloudtrail:GetInsightSelectors",
         "cloudtrail:GetQueryResults",
         "cloudtrail:GetResourcePolicy",
         "cloudtrail:ListQueries",
         "cloudtrail:ListTags",
         "cloudtrail:PutInsightSelectors",
         "cloudtrail:PutResourcePolicy",
         "cloudtrail:RemoveTags",
         "cloudtrail:RestoreEventDataStore",
         "cloudtrail:StartEventDataStoreIngestion",
         "cloudtrail:StartQuery",
         "cloudtrail:StopEventDataStoreIngestion",
         "cloudtrail:UpdateEventDataStore"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudtrail:AddTags",
        "cloudtrail:CancelQuery",
        "cloudtrail:CreateChannel",
        "cloudtrail:CreateEventDataStore",
        "cloudtrail:DeleteEventDataStore",
        "cloudtrail:DeleteResourcePolicy",
        "cloudtrail:DescribeQuery",
        "cloudtrail:DisableFederation",
        "cloudtrail:EnableFederation",
        "cloudtrail:GenerateQuery",
        "cloudtrail:GenerateQueryResultsSummary",
        "cloudtrail:GetEventDataStore",
        "cloudtrail:GetEventDataStoreData",
        "cloudtrail:GetInsightSelectors",
        "cloudtrail:GetQueryResults",
        "cloudtrail:GetResourcePolicy",
        "cloudtrail:ListQueries",
        "cloudtrail:ListTags",
        "cloudtrail:PutInsightSelectors",
        "cloudtrail:PutResourcePolicy",
        "cloudtrail:RemoveTags",
        "cloudtrail:RestoreEventDataStore",
        "cloudtrail:StartEventDataStoreIngestion",
        "cloudtrail:StartQuery",
        "cloudtrail:StopEventDataStoreIngestion",
        "cloudtrail:UpdateEventDataStore"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudtrail:eventdatastore"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudtrail:eventdatastore"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudtrail:AddTags",
         "cloudtrail:CreateTrail",
         "cloudtrail:DeleteTrail",
         "cloudtrail:GetEventSelectors",
         "cloudtrail:GetInsightSelectors",
         "cloudtrail:GetTrail",
         "cloudtrail:GetTrailStatus",
         "cloudtrail:ListTags",
         "cloudtrail:PutEventSelectors",
         "cloudtrail:PutInsightSelectors",
         "cloudtrail:RemoveTags",
         "cloudtrail:StartLogging",
         "cloudtrail:StopLogging",
         "cloudtrail:UpdateTrail"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudtrail:AddTags",
        "cloudtrail:CreateTrail",
        "cloudtrail:DeleteTrail",
        "cloudtrail:GetEventSelectors",
        "cloudtrail:GetInsightSelectors",
        "cloudtrail:GetTrail",
        "cloudtrail:GetTrailStatus",
        "cloudtrail:ListTags",
        "cloudtrail:PutEventSelectors",
        "cloudtrail:PutInsightSelectors",
        "cloudtrail:RemoveTags",
        "cloudtrail:StartLogging",
        "cloudtrail:StopLogging",
        "cloudtrail:UpdateTrail"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudtrail:trail"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudtrail:trail"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudtrail-data:PutAuditEvents"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudtrail-data:PutAuditEvents"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudtrail-data:channel"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudtrail-data:channel"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudwatch:BatchGetServiceLevelObjectiveBudgetReport",
         "cloudwatch:DeleteServiceLevelObjective",
         "cloudwatch:GetServiceLevelObjective",
         "cloudwatch:ListTagsForResource",
         "cloudwatch:TagResource",
         "cloudwatch:UntagResource",
         "cloudwatch:UpdateServiceLevelObjective"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudwatch:BatchGetServiceLevelObjectiveBudgetReport",
        "cloudwatch:DeleteServiceLevelObjective",
        "cloudwatch:GetServiceLevelObjective",
        "cloudwatch:ListTagsForResource",
        "cloudwatch:TagResource",
        "cloudwatch:UntagResource",
        "cloudwatch:UpdateServiceLevelObjective"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudwatch:slo"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudwatch:slo"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudwatch:DeleteAlarms",
         "cloudwatch:DescribeAlarmHistory",
         "cloudwatch:DescribeAlarms",
         "cloudwatch:DisableAlarmActions",
         "cloudwatch:EnableAlarmActions",
         "cloudwatch:ListTagsForResource",
         "cloudwatch:PutCompositeAlarm",
         "cloudwatch:PutMetricAlarm",
         "cloudwatch:SetAlarmState",
         "cloudwatch:TagResource",
         "cloudwatch:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudwatch:DeleteAlarms",
        "cloudwatch:DescribeAlarmHistory",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:DisableAlarmActions",
        "cloudwatch:EnableAlarmActions",
        "cloudwatch:ListTagsForResource",
        "cloudwatch:PutCompositeAlarm",
        "cloudwatch:PutMetricAlarm",
        "cloudwatch:SetAlarmState",
        "cloudwatch:TagResource",
        "cloudwatch:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudwatch:alarm"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudwatch:alarm"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudwatch:DeleteDashboards",
         "cloudwatch:GetDashboard",
         "cloudwatch:PutDashboard"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudwatch:DeleteDashboards",
        "cloudwatch:GetDashboard",
        "cloudwatch:PutDashboard"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudwatch:dashboard"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudwatch:dashboard"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudwatch:DeleteInsightRules",
         "cloudwatch:DisableInsightRules",
         "cloudwatch:EnableInsightRules",
         "cloudwatch:GetInsightRuleReport",
         "cloudwatch:ListTagsForResource",
         "cloudwatch:PutInsightRule",
         "cloudwatch:TagResource",
         "cloudwatch:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudwatch:DeleteInsightRules",
        "cloudwatch:DisableInsightRules",
        "cloudwatch:EnableInsightRules",
        "cloudwatch:GetInsightRuleReport",
        "cloudwatch:ListTagsForResource",
        "cloudwatch:PutInsightRule",
        "cloudwatch:TagResource",
        "cloudwatch:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudwatch:insight-rule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudwatch:insight-rule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudwatch:DeleteMetricStream",
         "cloudwatch:GetMetricStream",
         "cloudwatch:PutMetricStream",
         "cloudwatch:StartMetricStreams",
         "cloudwatch:StopMetricStreams"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudwatch:DeleteMetricStream",
        "cloudwatch:GetMetricStream",
        "cloudwatch:PutMetricStream",
        "cloudwatch:StartMetricStreams",
        "cloudwatch:StopMetricStreams"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudwatch:metric-stream"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudwatch:metric-stream"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cloudwatch:GetService",
         "cloudwatch:GetServiceData"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cloudwatch:GetService",
        "cloudwatch:GetServiceData"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cloudwatch:service"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cloudwatch:service"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codeartifact:AssociateExternalConnection",
         "codeartifact:AssociateWithDownstreamRepository",
         "codeartifact:CopyPackageVersions",
         "codeartifact:DeleteRepository",
         "codeartifact:DeleteRepositoryPermissionsPolicy",
         "codeartifact:DescribeRepository",
         "codeartifact:DisassociateExternalConnection",
         "codeartifact:GetRepositoryEndpoint",
         "codeartifact:GetRepositoryPermissionsPolicy",
         "codeartifact:ListPackages",
         "codeartifact:ListTagsForResource",
         "codeartifact:PutRepositoryPermissionsPolicy",
         "codeartifact:ReadFromRepository",
         "codeartifact:TagResource",
         "codeartifact:UntagResource",
         "codeartifact:UpdateRepository"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codeartifact:AssociateExternalConnection",
        "codeartifact:AssociateWithDownstreamRepository",
        "codeartifact:CopyPackageVersions",
        "codeartifact:DeleteRepository",
        "codeartifact:DeleteRepositoryPermissionsPolicy",
        "codeartifact:DescribeRepository",
        "codeartifact:DisassociateExternalConnection",
        "codeartifact:GetRepositoryEndpoint",
        "codeartifact:GetRepositoryPermissionsPolicy",
        "codeartifact:ListPackages",
        "codeartifact:ListTagsForResource",
        "codeartifact:PutRepositoryPermissionsPolicy",
        "codeartifact:ReadFromRepository",
        "codeartifact:TagResource",
        "codeartifact:UntagResource",
        "codeartifact:UpdateRepository"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codeartifact:repository"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codeartifact:repository"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codeartifact:CopyPackageVersions",
         "codeartifact:DeletePackage",
         "codeartifact:DeletePackageVersions",
         "codeartifact:DescribePackage",
         "codeartifact:DescribePackageVersion",
         "codeartifact:DisposePackageVersions",
         "codeartifact:GetPackageVersionAsset",
         "codeartifact:GetPackageVersionReadme",
         "codeartifact:ListPackageVersionAssets",
         "codeartifact:ListPackageVersionDependencies",
         "codeartifact:ListPackageVersions",
         "codeartifact:PublishPackageVersion",
         "codeartifact:PutPackageMetadata",
         "codeartifact:PutPackageOriginConfiguration",
         "codeartifact:UpdatePackageVersionsStatus"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codeartifact:CopyPackageVersions",
        "codeartifact:DeletePackage",
        "codeartifact:DeletePackageVersions",
        "codeartifact:DescribePackage",
        "codeartifact:DescribePackageVersion",
        "codeartifact:DisposePackageVersions",
        "codeartifact:GetPackageVersionAsset",
        "codeartifact:GetPackageVersionReadme",
        "codeartifact:ListPackageVersionAssets",
        "codeartifact:ListPackageVersionDependencies",
        "codeartifact:ListPackageVersions",
        "codeartifact:PublishPackageVersion",
        "codeartifact:PutPackageMetadata",
        "codeartifact:PutPackageOriginConfiguration",
        "codeartifact:UpdatePackageVersionsStatus"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codeartifact:package"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codeartifact:package"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codeartifact:DeleteDomain",
         "codeartifact:DeleteDomainPermissionsPolicy",
         "codeartifact:DescribeDomain",
         "codeartifact:GetAuthorizationToken",
         "codeartifact:GetDomainPermissionsPolicy",
         "codeartifact:ListPackageGroups",
         "codeartifact:ListRepositoriesInDomain",
         "codeartifact:ListTagsForResource",
         "codeartifact:PutDomainPermissionsPolicy",
         "codeartifact:TagResource",
         "codeartifact:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codeartifact:DeleteDomain",
        "codeartifact:DeleteDomainPermissionsPolicy",
        "codeartifact:DescribeDomain",
        "codeartifact:GetAuthorizationToken",
        "codeartifact:GetDomainPermissionsPolicy",
        "codeartifact:ListPackageGroups",
        "codeartifact:ListRepositoriesInDomain",
        "codeartifact:ListTagsForResource",
        "codeartifact:PutDomainPermissionsPolicy",
        "codeartifact:TagResource",
        "codeartifact:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codeartifact:domain"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codeartifact:domain"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codeartifact:DeletePackageGroup",
         "codeartifact:DescribePackageGroup",
         "codeartifact:GetAssociatedPackageGroup",
         "codeartifact:ListAllowedRepositoriesForGroup",
         "codeartifact:ListAssociatedPackages",
         "codeartifact:ListSubPackageGroups",
         "codeartifact:ListTagsForResource",
         "codeartifact:TagResource",
         "codeartifact:UntagResource",
         "codeartifact:UpdatePackageGroup",
         "codeartifact:UpdatePackageGroupOriginConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codeartifact:DeletePackageGroup",
        "codeartifact:DescribePackageGroup",
        "codeartifact:GetAssociatedPackageGroup",
        "codeartifact:ListAllowedRepositoriesForGroup",
        "codeartifact:ListAssociatedPackages",
        "codeartifact:ListSubPackageGroups",
        "codeartifact:ListTagsForResource",
        "codeartifact:TagResource",
        "codeartifact:UntagResource",
        "codeartifact:UpdatePackageGroup",
        "codeartifact:UpdatePackageGroupOriginConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codeartifact:package-group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codeartifact:package-group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codebuild:BatchDeleteBuilds",
         "codebuild:BatchGetBuildBatches",
         "codebuild:BatchGetBuilds",
         "codebuild:BatchGetProjects",
         "codebuild:CreateProject",
         "codebuild:CreateWebhook",
         "codebuild:DeleteBuildBatch",
         "codebuild:DeleteProject",
         "codebuild:DeleteResourcePolicy",
         "codebuild:DeleteWebhook",
         "codebuild:GetResourcePolicy",
         "codebuild:InvalidateProjectCache",
         "codebuild:ListBuildBatchesForProject",
         "codebuild:ListBuildsForProject",
         "codebuild:PutResourcePolicy",
         "codebuild:RetryBuild",
         "codebuild:RetryBuildBatch",
         "codebuild:StartBuild",
         "codebuild:StartBuildBatch",
         "codebuild:StopBuild",
         "codebuild:StopBuildBatch",
         "codebuild:UpdateProject",
         "codebuild:UpdateProjectVisibility",
         "codebuild:UpdateWebhook"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codebuild:BatchDeleteBuilds",
        "codebuild:BatchGetBuildBatches",
        "codebuild:BatchGetBuilds",
        "codebuild:BatchGetProjects",
        "codebuild:CreateProject",
        "codebuild:CreateWebhook",
        "codebuild:DeleteBuildBatch",
        "codebuild:DeleteProject",
        "codebuild:DeleteResourcePolicy",
        "codebuild:DeleteWebhook",
        "codebuild:GetResourcePolicy",
        "codebuild:InvalidateProjectCache",
        "codebuild:ListBuildBatchesForProject",
        "codebuild:ListBuildsForProject",
        "codebuild:PutResourcePolicy",
        "codebuild:RetryBuild",
        "codebuild:RetryBuildBatch",
        "codebuild:StartBuild",
        "codebuild:StartBuildBatch",
        "codebuild:StopBuild",
        "codebuild:StopBuildBatch",
        "codebuild:UpdateProject",
        "codebuild:UpdateProjectVisibility",
        "codebuild:UpdateWebhook"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codebuild:project"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codebuild:project"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codebuild:BatchGetFleets",
         "codebuild:CreateFleet",
         "codebuild:DeleteFleet",
         "codebuild:UpdateFleet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codebuild:BatchGetFleets",
        "codebuild:CreateFleet",
        "codebuild:DeleteFleet",
        "codebuild:UpdateFleet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codebuild:fleet"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codebuild:fleet"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codebuild:BatchGetReportGroups",
         "codebuild:BatchGetReports",
         "codebuild:BatchPutCodeCoverages",
         "codebuild:BatchPutTestCases",
         "codebuild:CreateReport",
         "codebuild:CreateReportGroup",
         "codebuild:DeleteReport",
         "codebuild:DeleteReportGroup",
         "codebuild:DeleteResourcePolicy",
         "codebuild:DescribeCodeCoverages",
         "codebuild:DescribeTestCases",
         "codebuild:GetReportGroupTrend",
         "codebuild:GetResourcePolicy",
         "codebuild:ListReportsForReportGroup",
         "codebuild:PutResourcePolicy",
         "codebuild:UpdateReport",
         "codebuild:UpdateReportGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codebuild:BatchGetReportGroups",
        "codebuild:BatchGetReports",
        "codebuild:BatchPutCodeCoverages",
        "codebuild:BatchPutTestCases",
        "codebuild:CreateReport",
        "codebuild:CreateReportGroup",
        "codebuild:DeleteReport",
        "codebuild:DeleteReportGroup",
        "codebuild:DeleteResourcePolicy",
        "codebuild:DescribeCodeCoverages",
        "codebuild:DescribeTestCases",
        "codebuild:GetReportGroupTrend",
        "codebuild:GetResourcePolicy",
        "codebuild:ListReportsForReportGroup",
        "codebuild:PutResourcePolicy",
        "codebuild:UpdateReport",
        "codebuild:UpdateReportGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codebuild:report-group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codebuild:report-group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codecatalyst:AssociateIamRoleToConnection",
         "codecatalyst:DeleteConnection",
         "codecatalyst:DisassociateIamRoleFromConnection",
         "codecatalyst:GetBillingAuthorization",
         "codecatalyst:GetConnection",
         "codecatalyst:ListIamRolesForConnection",
         "codecatalyst:ListTagsForResource",
         "codecatalyst:PutBillingAuthorization",
         "codecatalyst:TagResource",
         "codecatalyst:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codecatalyst:AssociateIamRoleToConnection",
        "codecatalyst:DeleteConnection",
        "codecatalyst:DisassociateIamRoleFromConnection",
        "codecatalyst:GetBillingAuthorization",
        "codecatalyst:GetConnection",
        "codecatalyst:ListIamRolesForConnection",
        "codecatalyst:ListTagsForResource",
        "codecatalyst:PutBillingAuthorization",
        "codecatalyst:TagResource",
        "codecatalyst:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codecatalyst:connections"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codecatalyst:connections"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codecatalyst:AssociateIdentityCenterApplicationToSpace",
         "codecatalyst:AssociateIdentityToIdentityCenterApplication",
         "codecatalyst:BatchAssociateIdentitiesToIdentityCenterApplication",
         "codecatalyst:BatchDisassociateIdentitiesFromIdentityCenterApplication",
         "codecatalyst:CreateSpaceAdminRoleAssignment",
         "codecatalyst:DeleteIdentityCenterApplication",
         "codecatalyst:DisassociateIdentityCenterApplicationFromSpace",
         "codecatalyst:DisassociateIdentityFromIdentityCenterApplication",
         "codecatalyst:GetIdentityCenterApplication",
         "codecatalyst:ListSpacesForIdentityCenterApplication",
         "codecatalyst:ListTagsForResource",
         "codecatalyst:SynchronizeIdentityCenterApplication",
         "codecatalyst:TagResource",
         "codecatalyst:UntagResource",
         "codecatalyst:UpdateIdentityCenterApplication"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codecatalyst:AssociateIdentityCenterApplicationToSpace",
        "codecatalyst:AssociateIdentityToIdentityCenterApplication",
        "codecatalyst:BatchAssociateIdentitiesToIdentityCenterApplication",
        "codecatalyst:BatchDisassociateIdentitiesFromIdentityCenterApplication",
        "codecatalyst:CreateSpaceAdminRoleAssignment",
        "codecatalyst:DeleteIdentityCenterApplication",
        "codecatalyst:DisassociateIdentityCenterApplicationFromSpace",
        "codecatalyst:DisassociateIdentityFromIdentityCenterApplication",
        "codecatalyst:GetIdentityCenterApplication",
        "codecatalyst:ListSpacesForIdentityCenterApplication",
        "codecatalyst:ListTagsForResource",
        "codecatalyst:SynchronizeIdentityCenterApplication",
        "codecatalyst:TagResource",
        "codecatalyst:UntagResource",
        "codecatalyst:UpdateIdentityCenterApplication"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codecatalyst:identity-center-applications"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codecatalyst:identity-center-applications"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codecommit:AssociateApprovalRuleTemplateWithRepository",
         "codecommit:BatchAssociateApprovalRuleTemplateWithRepositories",
         "codecommit:BatchDescribeMergeConflicts",
         "codecommit:BatchDisassociateApprovalRuleTemplateFromRepositories",
         "codecommit:BatchGetCommits",
         "codecommit:BatchGetPullRequests",
         "codecommit:BatchGetRepositories",
         "codecommit:CancelUploadArchive",
         "codecommit:CreateBranch",
         "codecommit:CreateCommit",
         "codecommit:CreatePullRequest",
         "codecommit:CreatePullRequestApprovalRule",
         "codecommit:CreateRepository",
         "codecommit:CreateUnreferencedMergeCommit",
         "codecommit:DeleteBranch",
         "codecommit:DeleteCommentContent",
         "codecommit:DeleteFile",
         "codecommit:DeletePullRequestApprovalRule",
         "codecommit:DeleteRepository",
         "codecommit:DescribeMergeConflicts",
         "codecommit:DescribePullRequestEvents",
         "codecommit:DisassociateApprovalRuleTemplateFromRepository",
         "codecommit:EvaluatePullRequestApprovalRules",
         "codecommit:GetBlob",
         "codecommit:GetBranch",
         "codecommit:GetComment",
         "codecommit:GetCommentReactions",
         "codecommit:GetCommentsForComparedCommit",
         "codecommit:GetCommentsForPullRequest",
         "codecommit:GetCommit",
         "codecommit:GetCommitHistory",
         "codecommit:GetCommitsFromMergeBase",
         "codecommit:GetDifferences",
         "codecommit:GetFile",
         "codecommit:GetFolder",
         "codecommit:GetMergeCommit",
         "codecommit:GetMergeConflicts",
         "codecommit:GetMergeOptions",
         "codecommit:GetObjectIdentifier",
         "codecommit:GetPullRequest",
         "codecommit:GetPullRequestApprovalStates",
         "codecommit:GetPullRequestOverrideState",
         "codecommit:GetReferences",
         "codecommit:GetRepository",
         "codecommit:GetRepositoryTriggers",
         "codecommit:GetTree",
         "codecommit:GetUploadArchiveStatus",
         "codecommit:GitPull",
         "codecommit:GitPush",
         "codecommit:ListAssociatedApprovalRuleTemplatesForRepository",
         "codecommit:ListBranches",
         "codecommit:ListFileCommitHistory",
         "codecommit:ListPullRequests",
         "codecommit:ListTagsForResource",
         "codecommit:MergeBranchesByFastForward",
         "codecommit:MergeBranchesBySquash",
         "codecommit:MergeBranchesByThreeWay",
         "codecommit:MergePullRequestByFastForward",
         "codecommit:MergePullRequestBySquash",
         "codecommit:MergePullRequestByThreeWay",
         "codecommit:OverridePullRequestApprovalRules",
         "codecommit:PostCommentForComparedCommit",
         "codecommit:PostCommentForPullRequest",
         "codecommit:PostCommentReply",
         "codecommit:PutCommentReaction",
         "codecommit:PutFile",
         "codecommit:PutRepositoryTriggers",
         "codecommit:TagResource",
         "codecommit:TestRepositoryTriggers",
         "codecommit:UntagResource",
         "codecommit:UpdateComment",
         "codecommit:UpdateDefaultBranch",
         "codecommit:UpdatePullRequestApprovalRuleContent",
         "codecommit:UpdatePullRequestApprovalState",
         "codecommit:UpdatePullRequestDescription",
         "codecommit:UpdatePullRequestStatus",
         "codecommit:UpdatePullRequestTitle",
         "codecommit:UpdateRepositoryDescription",
         "codecommit:UpdateRepositoryEncryptionKey",
         "codecommit:UpdateRepositoryName",
         "codecommit:UploadArchive"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codecommit:AssociateApprovalRuleTemplateWithRepository",
        "codecommit:BatchAssociateApprovalRuleTemplateWithRepositories",
        "codecommit:BatchDescribeMergeConflicts",
        "codecommit:BatchDisassociateApprovalRuleTemplateFromRepositories",
        "codecommit:BatchGetCommits",
        "codecommit:BatchGetPullRequests",
        "codecommit:BatchGetRepositories",
        "codecommit:CancelUploadArchive",
        "codecommit:CreateBranch",
        "codecommit:CreateCommit",
        "codecommit:CreatePullRequest",
        "codecommit:CreatePullRequestApprovalRule",
        "codecommit:CreateRepository",
        "codecommit:CreateUnreferencedMergeCommit",
        "codecommit:DeleteBranch",
        "codecommit:DeleteCommentContent",
        "codecommit:DeleteFile",
        "codecommit:DeletePullRequestApprovalRule",
        "codecommit:DeleteRepository",
        "codecommit:DescribeMergeConflicts",
        "codecommit:DescribePullRequestEvents",
        "codecommit:DisassociateApprovalRuleTemplateFromRepository",
        "codecommit:EvaluatePullRequestApprovalRules",
        "codecommit:GetBlob",
        "codecommit:GetBranch",
        "codecommit:GetComment",
        "codecommit:GetCommentReactions",
        "codecommit:GetCommentsForComparedCommit",
        "codecommit:GetCommentsForPullRequest",
        "codecommit:GetCommit",
        "codecommit:GetCommitHistory",
        "codecommit:GetCommitsFromMergeBase",
        "codecommit:GetDifferences",
        "codecommit:GetFile",
        "codecommit:GetFolder",
        "codecommit:GetMergeCommit",
        "codecommit:GetMergeConflicts",
        "codecommit:GetMergeOptions",
        "codecommit:GetObjectIdentifier",
        "codecommit:GetPullRequest",
        "codecommit:GetPullRequestApprovalStates",
        "codecommit:GetPullRequestOverrideState",
        "codecommit:GetReferences",
        "codecommit:GetRepository",
        "codecommit:GetRepositoryTriggers",
        "codecommit:GetTree",
        "codecommit:GetUploadArchiveStatus",
        "codecommit:GitPull",
        "codecommit:GitPush",
        "codecommit:ListAssociatedApprovalRuleTemplatesForRepository",
        "codecommit:ListBranches",
        "codecommit:ListFileCommitHistory",
        "codecommit:ListPullRequests",
        "codecommit:ListTagsForResource",
        "codecommit:MergeBranchesByFastForward",
        "codecommit:MergeBranchesBySquash",
        "codecommit:MergeBranchesByThreeWay",
        "codecommit:MergePullRequestByFastForward",
        "codecommit:MergePullRequestBySquash",
        "codecommit:MergePullRequestByThreeWay",
        "codecommit:OverridePullRequestApprovalRules",
        "codecommit:PostCommentForComparedCommit",
        "codecommit:PostCommentForPullRequest",
        "codecommit:PostCommentReply",
        "codecommit:PutCommentReaction",
        "codecommit:PutFile",
        "codecommit:PutRepositoryTriggers",
        "codecommit:TagResource",
        "codecommit:TestRepositoryTriggers",
        "codecommit:UntagResource",
        "codecommit:UpdateComment",
        "codecommit:UpdateDefaultBranch",
        "codecommit:UpdatePullRequestApprovalRuleContent",
        "codecommit:UpdatePullRequestApprovalState",
        "codecommit:UpdatePullRequestDescription",
        "codecommit:UpdatePullRequestStatus",
        "codecommit:UpdatePullRequestTitle",
        "codecommit:UpdateRepositoryDescription",
        "codecommit:UpdateRepositoryEncryptionKey",
        "codecommit:UpdateRepositoryName",
        "codecommit:UploadArchive"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codecommit:repository"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codecommit:repository"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codeconnections:CreateRepositoryLink",
         "codeconnections:DeleteConnection",
         "codeconnections:GetConnection",
         "codeconnections:GetConnectionToken",
         "codeconnections:ListConnections",
         "codeconnections:ListTagsForResource",
         "codeconnections:PassConnection",
         "codeconnections:TagResource",
         "codeconnections:UntagResource",
         "codeconnections:UpdateConnectionInstallation",
         "codeconnections:UseConnection"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codeconnections:CreateRepositoryLink",
        "codeconnections:DeleteConnection",
        "codeconnections:GetConnection",
        "codeconnections:GetConnectionToken",
        "codeconnections:ListConnections",
        "codeconnections:ListTagsForResource",
        "codeconnections:PassConnection",
        "codeconnections:TagResource",
        "codeconnections:UntagResource",
        "codeconnections:UpdateConnectionInstallation",
        "codeconnections:UseConnection"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codeconnections:Connection"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codeconnections:Connection"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codeconnections:CreateSyncConfiguration",
         "codeconnections:DeleteRepositoryLink",
         "codeconnections:GetRepositoryLink",
         "codeconnections:GetRepositorySyncStatus",
         "codeconnections:ListTagsForResource",
         "codeconnections:PassRepository",
         "codeconnections:TagResource",
         "codeconnections:UntagResource",
         "codeconnections:UpdateRepositoryLink"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codeconnections:CreateSyncConfiguration",
        "codeconnections:DeleteRepositoryLink",
        "codeconnections:GetRepositoryLink",
        "codeconnections:GetRepositorySyncStatus",
        "codeconnections:ListTagsForResource",
        "codeconnections:PassRepository",
        "codeconnections:TagResource",
        "codeconnections:UntagResource",
        "codeconnections:UpdateRepositoryLink"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codeconnections:RepositoryLink"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codeconnections:RepositoryLink"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codeconnections:DeleteHost",
         "codeconnections:GetHost",
         "codeconnections:ListTagsForResource",
         "codeconnections:TagResource",
         "codeconnections:UntagResource",
         "codeconnections:UpdateHost"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codeconnections:DeleteHost",
        "codeconnections:GetHost",
        "codeconnections:ListTagsForResource",
        "codeconnections:TagResource",
        "codeconnections:UntagResource",
        "codeconnections:UpdateHost"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codeconnections:Host"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codeconnections:Host"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codedeploy:AddTagsToOnPremisesInstances",
         "codedeploy:BatchGetOnPremisesInstances",
         "codedeploy:DeregisterOnPremisesInstance",
         "codedeploy:GetOnPremisesInstance",
         "codedeploy:RegisterOnPremisesInstance",
         "codedeploy:RemoveTagsFromOnPremisesInstances"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codedeploy:AddTagsToOnPremisesInstances",
        "codedeploy:BatchGetOnPremisesInstances",
        "codedeploy:DeregisterOnPremisesInstance",
        "codedeploy:GetOnPremisesInstance",
        "codedeploy:RegisterOnPremisesInstance",
        "codedeploy:RemoveTagsFromOnPremisesInstances"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codedeploy:instance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codedeploy:instance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codedeploy:BatchGetApplicationRevisions",
         "codedeploy:BatchGetApplications",
         "codedeploy:CreateApplication",
         "codedeploy:DeleteApplication",
         "codedeploy:GetApplication",
         "codedeploy:GetApplicationRevision",
         "codedeploy:ListApplicationRevisions",
         "codedeploy:ListDeploymentGroups",
         "codedeploy:ListTagsForResource",
         "codedeploy:RegisterApplicationRevision",
         "codedeploy:TagResource",
         "codedeploy:UntagResource",
         "codedeploy:UpdateApplication"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codedeploy:BatchGetApplicationRevisions",
        "codedeploy:BatchGetApplications",
        "codedeploy:CreateApplication",
        "codedeploy:DeleteApplication",
        "codedeploy:GetApplication",
        "codedeploy:GetApplicationRevision",
        "codedeploy:ListApplicationRevisions",
        "codedeploy:ListDeploymentGroups",
        "codedeploy:ListTagsForResource",
        "codedeploy:RegisterApplicationRevision",
        "codedeploy:TagResource",
        "codedeploy:UntagResource",
        "codedeploy:UpdateApplication"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codedeploy:application"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codedeploy:application"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codedeploy:BatchGetDeploymentGroups",
         "codedeploy:BatchGetDeploymentInstances",
         "codedeploy:BatchGetDeployments",
         "codedeploy:CreateDeployment",
         "codedeploy:CreateDeploymentGroup",
         "codedeploy:DeleteDeploymentGroup",
         "codedeploy:GetDeployment",
         "codedeploy:GetDeploymentGroup",
         "codedeploy:GetDeploymentInstance",
         "codedeploy:ListDeploymentInstances",
         "codedeploy:ListDeployments",
         "codedeploy:ListTagsForResource",
         "codedeploy:TagResource",
         "codedeploy:UntagResource",
         "codedeploy:UpdateDeploymentGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codedeploy:BatchGetDeploymentGroups",
        "codedeploy:BatchGetDeploymentInstances",
        "codedeploy:BatchGetDeployments",
        "codedeploy:CreateDeployment",
        "codedeploy:CreateDeploymentGroup",
        "codedeploy:DeleteDeploymentGroup",
        "codedeploy:GetDeployment",
        "codedeploy:GetDeploymentGroup",
        "codedeploy:GetDeploymentInstance",
        "codedeploy:ListDeploymentInstances",
        "codedeploy:ListDeployments",
        "codedeploy:ListTagsForResource",
        "codedeploy:TagResource",
        "codedeploy:UntagResource",
        "codedeploy:UpdateDeploymentGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codedeploy:deploymentgroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codedeploy:deploymentgroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codedeploy:CreateDeploymentConfig",
         "codedeploy:DeleteDeploymentConfig",
         "codedeploy:GetDeploymentConfig"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codedeploy:CreateDeploymentConfig",
        "codedeploy:DeleteDeploymentConfig",
        "codedeploy:GetDeploymentConfig"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codedeploy:deploymentconfig"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codedeploy:deploymentconfig"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codeguru-profiler:AddNotificationChannels",
         "codeguru-profiler:BatchGetFrameMetricData",
         "codeguru-profiler:ConfigureAgent",
         "codeguru-profiler:DeleteProfilingGroup",
         "codeguru-profiler:DescribeProfilingGroup",
         "codeguru-profiler:GetNotificationConfiguration",
         "codeguru-profiler:GetPolicy",
         "codeguru-profiler:GetProfile",
         "codeguru-profiler:GetRecommendations",
         "codeguru-profiler:ListFindingsReports",
         "codeguru-profiler:ListProfileTimes",
         "codeguru-profiler:ListTagsForResource",
         "codeguru-profiler:PostAgentProfile",
         "codeguru-profiler:PutPermission",
         "codeguru-profiler:RemoveNotificationChannel",
         "codeguru-profiler:RemovePermission",
         "codeguru-profiler:SubmitFeedback",
         "codeguru-profiler:TagResource",
         "codeguru-profiler:UntagResource",
         "codeguru-profiler:UpdateProfilingGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codeguru-profiler:AddNotificationChannels",
        "codeguru-profiler:BatchGetFrameMetricData",
        "codeguru-profiler:ConfigureAgent",
        "codeguru-profiler:DeleteProfilingGroup",
        "codeguru-profiler:DescribeProfilingGroup",
        "codeguru-profiler:GetNotificationConfiguration",
        "codeguru-profiler:GetPolicy",
        "codeguru-profiler:GetProfile",
        "codeguru-profiler:GetRecommendations",
        "codeguru-profiler:ListFindingsReports",
        "codeguru-profiler:ListProfileTimes",
        "codeguru-profiler:ListTagsForResource",
        "codeguru-profiler:PostAgentProfile",
        "codeguru-profiler:PutPermission",
        "codeguru-profiler:RemoveNotificationChannel",
        "codeguru-profiler:RemovePermission",
        "codeguru-profiler:SubmitFeedback",
        "codeguru-profiler:TagResource",
        "codeguru-profiler:UntagResource",
        "codeguru-profiler:UpdateProfilingGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codeguru-profiler:ProfilingGroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codeguru-profiler:ProfilingGroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codeguru-reviewer:CreateCodeReview",
         "codeguru-reviewer:DescribeCodeReview",
         "codeguru-reviewer:DescribeRecommendationFeedback",
         "codeguru-reviewer:DescribeRepositoryAssociation",
         "codeguru-reviewer:DisassociateRepository",
         "codeguru-reviewer:ListRecommendationFeedback",
         "codeguru-reviewer:ListRecommendations",
         "codeguru-reviewer:ListTagsForResource",
         "codeguru-reviewer:PutRecommendationFeedback",
         "codeguru-reviewer:TagResource",
         "codeguru-reviewer:UnTagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codeguru-reviewer:CreateCodeReview",
        "codeguru-reviewer:DescribeCodeReview",
        "codeguru-reviewer:DescribeRecommendationFeedback",
        "codeguru-reviewer:DescribeRepositoryAssociation",
        "codeguru-reviewer:DisassociateRepository",
        "codeguru-reviewer:ListRecommendationFeedback",
        "codeguru-reviewer:ListRecommendations",
        "codeguru-reviewer:ListTagsForResource",
        "codeguru-reviewer:PutRecommendationFeedback",
        "codeguru-reviewer:TagResource",
        "codeguru-reviewer:UnTagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codeguru-reviewer:association"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codeguru-reviewer:association"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codeguru-security:BatchGetFindings",
         "codeguru-security:CreateScan",
         "codeguru-security:CreateUploadUrl",
         "codeguru-security:GetFindings",
         "codeguru-security:GetScan",
         "codeguru-security:ListTagsForResource",
         "codeguru-security:TagResource",
         "codeguru-security:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codeguru-security:BatchGetFindings",
        "codeguru-security:CreateScan",
        "codeguru-security:CreateUploadUrl",
        "codeguru-security:GetFindings",
        "codeguru-security:GetScan",
        "codeguru-security:ListTagsForResource",
        "codeguru-security:TagResource",
        "codeguru-security:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codeguru-security:ScanName"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codeguru-security:ScanName"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codepipeline:CreateCustomActionType",
         "codepipeline:DeleteCustomActionType",
         "codepipeline:ListTagsForResource",
         "codepipeline:PollForJobs",
         "codepipeline:TagResource",
         "codepipeline:UntagResource",
         "codepipeline:UpdateActionType"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codepipeline:CreateCustomActionType",
        "codepipeline:DeleteCustomActionType",
        "codepipeline:ListTagsForResource",
        "codepipeline:PollForJobs",
        "codepipeline:TagResource",
        "codepipeline:UntagResource",
        "codepipeline:UpdateActionType"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codepipeline:actiontype"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codepipeline:actiontype"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codepipeline:CreatePipeline",
         "codepipeline:DeletePipeline",
         "codepipeline:GetPipeline",
         "codepipeline:GetPipelineExecution",
         "codepipeline:GetPipelineState",
         "codepipeline:ListActionExecutions",
         "codepipeline:ListPipelineExecutions",
         "codepipeline:ListRuleExecutions",
         "codepipeline:ListTagsForResource",
         "codepipeline:PutWebhook",
         "codepipeline:StartPipelineExecution",
         "codepipeline:StopPipelineExecution",
         "codepipeline:TagResource",
         "codepipeline:UntagResource",
         "codepipeline:UpdatePipeline"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codepipeline:CreatePipeline",
        "codepipeline:DeletePipeline",
        "codepipeline:GetPipeline",
        "codepipeline:GetPipelineExecution",
        "codepipeline:GetPipelineState",
        "codepipeline:ListActionExecutions",
        "codepipeline:ListPipelineExecutions",
        "codepipeline:ListRuleExecutions",
        "codepipeline:ListTagsForResource",
        "codepipeline:PutWebhook",
        "codepipeline:StartPipelineExecution",
        "codepipeline:StopPipelineExecution",
        "codepipeline:TagResource",
        "codepipeline:UntagResource",
        "codepipeline:UpdatePipeline"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codepipeline:pipeline"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codepipeline:pipeline"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codepipeline:DeleteWebhook",
         "codepipeline:DeregisterWebhookWithThirdParty",
         "codepipeline:ListTagsForResource",
         "codepipeline:ListWebhooks",
         "codepipeline:PutWebhook",
         "codepipeline:RegisterWebhookWithThirdParty",
         "codepipeline:TagResource",
         "codepipeline:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codepipeline:DeleteWebhook",
        "codepipeline:DeregisterWebhookWithThirdParty",
        "codepipeline:ListTagsForResource",
        "codepipeline:ListWebhooks",
        "codepipeline:PutWebhook",
        "codepipeline:RegisterWebhookWithThirdParty",
        "codepipeline:TagResource",
        "codepipeline:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codepipeline:webhook"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codepipeline:webhook"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codepipeline:DisableStageTransition",
         "codepipeline:EnableStageTransition",
         "codepipeline:OverrideStageCondition",
         "codepipeline:RetryStageExecution",
         "codepipeline:RollbackStage"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codepipeline:DisableStageTransition",
        "codepipeline:EnableStageTransition",
        "codepipeline:OverrideStageCondition",
        "codepipeline:RetryStageExecution",
        "codepipeline:RollbackStage"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codepipeline:stage"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codepipeline:stage"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codepipeline:PutActionRevision",
         "codepipeline:PutApprovalResult"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codepipeline:PutActionRevision",
        "codepipeline:PutApprovalResult"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codepipeline:action"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codepipeline:action"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codestar:AssociateTeamMember",
         "codestar:DeleteExtendedAccess",
         "codestar:DeleteProject",
         "codestar:DescribeProject",
         "codestar:DisassociateTeamMember",
         "codestar:GetExtendedAccess",
         "codestar:ListResources",
         "codestar:ListTagsForProject",
         "codestar:ListTeamMembers",
         "codestar:PutExtendedAccess",
         "codestar:TagProject",
         "codestar:UntagProject",
         "codestar:UpdateProject",
         "codestar:UpdateTeamMember"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codestar:AssociateTeamMember",
        "codestar:DeleteExtendedAccess",
        "codestar:DeleteProject",
        "codestar:DescribeProject",
        "codestar:DisassociateTeamMember",
        "codestar:GetExtendedAccess",
        "codestar:ListResources",
        "codestar:ListTagsForProject",
        "codestar:ListTeamMembers",
        "codestar:PutExtendedAccess",
        "codestar:TagProject",
        "codestar:UntagProject",
        "codestar:UpdateProject",
        "codestar:UpdateTeamMember"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codestar:project"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codestar:project"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codestar:CreateUserProfile",
         "codestar:DeleteUserProfile",
         "codestar:UpdateUserProfile"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codestar:CreateUserProfile",
        "codestar:DeleteUserProfile",
        "codestar:UpdateUserProfile"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codestar:user"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codestar:user"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codestar-connections:CreateRepositoryLink",
         "codestar-connections:DeleteConnection",
         "codestar-connections:GetConnection",
         "codestar-connections:GetConnectionToken",
         "codestar-connections:ListConnections",
         "codestar-connections:ListTagsForResource",
         "codestar-connections:PassConnection",
         "codestar-connections:TagResource",
         "codestar-connections:UntagResource",
         "codestar-connections:UpdateConnectionInstallation",
         "codestar-connections:UseConnection"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codestar-connections:CreateRepositoryLink",
        "codestar-connections:DeleteConnection",
        "codestar-connections:GetConnection",
        "codestar-connections:GetConnectionToken",
        "codestar-connections:ListConnections",
        "codestar-connections:ListTagsForResource",
        "codestar-connections:PassConnection",
        "codestar-connections:TagResource",
        "codestar-connections:UntagResource",
        "codestar-connections:UpdateConnectionInstallation",
        "codestar-connections:UseConnection"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codestar-connections:Connection"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codestar-connections:Connection"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codestar-connections:CreateSyncConfiguration",
         "codestar-connections:DeleteRepositoryLink",
         "codestar-connections:GetRepositoryLink",
         "codestar-connections:GetRepositorySyncStatus",
         "codestar-connections:ListTagsForResource",
         "codestar-connections:PassRepository",
         "codestar-connections:TagResource",
         "codestar-connections:UntagResource",
         "codestar-connections:UpdateRepositoryLink"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codestar-connections:CreateSyncConfiguration",
        "codestar-connections:DeleteRepositoryLink",
        "codestar-connections:GetRepositoryLink",
        "codestar-connections:GetRepositorySyncStatus",
        "codestar-connections:ListTagsForResource",
        "codestar-connections:PassRepository",
        "codestar-connections:TagResource",
        "codestar-connections:UntagResource",
        "codestar-connections:UpdateRepositoryLink"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codestar-connections:RepositoryLink"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codestar-connections:RepositoryLink"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codestar-connections:DeleteHost",
         "codestar-connections:GetHost",
         "codestar-connections:ListTagsForResource",
         "codestar-connections:TagResource",
         "codestar-connections:UntagResource",
         "codestar-connections:UpdateHost"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codestar-connections:DeleteHost",
        "codestar-connections:GetHost",
        "codestar-connections:ListTagsForResource",
        "codestar-connections:TagResource",
        "codestar-connections:UntagResource",
        "codestar-connections:UpdateHost"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codestar-connections:Host"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codestar-connections:Host"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codestar-notifications:CreateNotificationRule",
         "codestar-notifications:DeleteNotificationRule",
         "codestar-notifications:DescribeNotificationRule",
         "codestar-notifications:ListTagsForResource",
         "codestar-notifications:Subscribe",
         "codestar-notifications:TagResource",
         "codestar-notifications:Unsubscribe",
         "codestar-notifications:UntagResource",
         "codestar-notifications:UpdateNotificationRule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codestar-notifications:CreateNotificationRule",
        "codestar-notifications:DeleteNotificationRule",
        "codestar-notifications:DescribeNotificationRule",
        "codestar-notifications:ListTagsForResource",
        "codestar-notifications:Subscribe",
        "codestar-notifications:TagResource",
        "codestar-notifications:Unsubscribe",
        "codestar-notifications:UntagResource",
        "codestar-notifications:UpdateNotificationRule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codestar-notifications:notificationrule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codestar-notifications:notificationrule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codewhisperer:AllowVendedLogDeliveryForResource",
         "codewhisperer:AssociateCustomizationPermission",
         "codewhisperer:CreateCustomization",
         "codewhisperer:DeleteCustomization",
         "codewhisperer:DisassociateCustomizationPermission",
         "codewhisperer:GetCustomization",
         "codewhisperer:ListCustomizationPermissions",
         "codewhisperer:ListCustomizationVersions",
         "codewhisperer:ListCustomizations",
         "codewhisperer:ListTagsForResource",
         "codewhisperer:TagResource",
         "codewhisperer:UntagResource",
         "codewhisperer:UpdateCustomization"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codewhisperer:AllowVendedLogDeliveryForResource",
        "codewhisperer:AssociateCustomizationPermission",
        "codewhisperer:CreateCustomization",
        "codewhisperer:DeleteCustomization",
        "codewhisperer:DisassociateCustomizationPermission",
        "codewhisperer:GetCustomization",
        "codewhisperer:ListCustomizationPermissions",
        "codewhisperer:ListCustomizationVersions",
        "codewhisperer:ListCustomizations",
        "codewhisperer:ListTagsForResource",
        "codewhisperer:TagResource",
        "codewhisperer:UntagResource",
        "codewhisperer:UpdateCustomization"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codewhisperer:customization"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codewhisperer:customization"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "codewhisperer:CreateProfile",
         "codewhisperer:DeleteProfile",
         "codewhisperer:ListTagsForResource",
         "codewhisperer:TagResource",
         "codewhisperer:UntagResource",
         "codewhisperer:UpdateProfile"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "codewhisperer:CreateProfile",
        "codewhisperer:DeleteProfile",
        "codewhisperer:ListTagsForResource",
        "codewhisperer:TagResource",
        "codewhisperer:UntagResource",
        "codewhisperer:UpdateProfile"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/codewhisperer:profile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/codewhisperer:profile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cognito-identity:DeleteIdentityPool",
         "cognito-identity:DescribeIdentityPool",
         "cognito-identity:GetIdentityPoolAnalytics",
         "cognito-identity:GetIdentityPoolDailyAnalytics",
         "cognito-identity:GetIdentityPoolRoles",
         "cognito-identity:GetIdentityProviderDailyAnalytics",
         "cognito-identity:GetOpenIdTokenForDeveloperIdentity",
         "cognito-identity:GetPrincipalTagAttributeMap",
         "cognito-identity:ListIdentities",
         "cognito-identity:ListTagsForResource",
         "cognito-identity:LookupDeveloperIdentity",
         "cognito-identity:MergeDeveloperIdentities",
         "cognito-identity:TagResource",
         "cognito-identity:UnlinkDeveloperIdentity",
         "cognito-identity:UntagResource",
         "cognito-identity:UpdateIdentityPool"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cognito-identity:DeleteIdentityPool",
        "cognito-identity:DescribeIdentityPool",
        "cognito-identity:GetIdentityPoolAnalytics",
        "cognito-identity:GetIdentityPoolDailyAnalytics",
        "cognito-identity:GetIdentityPoolRoles",
        "cognito-identity:GetIdentityProviderDailyAnalytics",
        "cognito-identity:GetOpenIdTokenForDeveloperIdentity",
        "cognito-identity:GetPrincipalTagAttributeMap",
        "cognito-identity:ListIdentities",
        "cognito-identity:ListTagsForResource",
        "cognito-identity:LookupDeveloperIdentity",
        "cognito-identity:MergeDeveloperIdentities",
        "cognito-identity:TagResource",
        "cognito-identity:UnlinkDeveloperIdentity",
        "cognito-identity:UntagResource",
        "cognito-identity:UpdateIdentityPool"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cognito-identity:identitypool"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cognito-identity:identitypool"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cognito-idp:AddCustomAttributes",
         "cognito-idp:AdminAddUserToGroup",
         "cognito-idp:AdminConfirmSignUp",
         "cognito-idp:AdminCreateUser",
         "cognito-idp:AdminDeleteUser",
         "cognito-idp:AdminDeleteUserAttributes",
         "cognito-idp:AdminDisableProviderForUser",
         "cognito-idp:AdminDisableUser",
         "cognito-idp:AdminEnableUser",
         "cognito-idp:AdminForgetDevice",
         "cognito-idp:AdminGetDevice",
         "cognito-idp:AdminGetUser",
         "cognito-idp:AdminInitiateAuth",
         "cognito-idp:AdminLinkProviderForUser",
         "cognito-idp:AdminListDevices",
         "cognito-idp:AdminListGroupsForUser",
         "cognito-idp:AdminListUserAuthEvents",
         "cognito-idp:AdminRemoveUserFromGroup",
         "cognito-idp:AdminResetUserPassword",
         "cognito-idp:AdminRespondToAuthChallenge",
         "cognito-idp:AdminSetUserMFAPreference",
         "cognito-idp:AdminSetUserPassword",
         "cognito-idp:AdminSetUserSettings",
         "cognito-idp:AdminUpdateAuthEventFeedback",
         "cognito-idp:AdminUpdateDeviceStatus",
         "cognito-idp:AdminUpdateUserAttributes",
         "cognito-idp:AdminUserGlobalSignOut",
         "cognito-idp:AssociateWebACL",
         "cognito-idp:CreateGroup",
         "cognito-idp:CreateIdentityProvider",
         "cognito-idp:CreateManagedLoginBranding",
         "cognito-idp:CreateResourceServer",
         "cognito-idp:CreateUserImportJob",
         "cognito-idp:CreateUserPoolClient",
         "cognito-idp:CreateUserPoolDomain",
         "cognito-idp:DeleteGroup",
         "cognito-idp:DeleteIdentityProvider",
         "cognito-idp:DeleteManagedLoginBranding",
         "cognito-idp:DeleteResourceServer",
         "cognito-idp:DeleteUserPool",
         "cognito-idp:DeleteUserPoolClient",
         "cognito-idp:DeleteUserPoolDomain",
         "cognito-idp:DescribeIdentityProvider",
         "cognito-idp:DescribeManagedLoginBranding",
         "cognito-idp:DescribeManagedLoginBrandingByClient",
         "cognito-idp:DescribeResourceServer",
         "cognito-idp:DescribeRiskConfiguration",
         "cognito-idp:DescribeUserImportJob",
         "cognito-idp:DescribeUserPool",
         "cognito-idp:DescribeUserPoolClient",
         "cognito-idp:DisassociateWebACL",
         "cognito-idp:GetCSVHeader",
         "cognito-idp:GetGroup",
         "cognito-idp:GetIdentityProviderByIdentifier",
         "cognito-idp:GetLogDeliveryConfiguration",
         "cognito-idp:GetSigningCertificate",
         "cognito-idp:GetUICustomization",
         "cognito-idp:GetUserPoolMfaConfig",
         "cognito-idp:GetWebACLForResource",
         "cognito-idp:ListGroups",
         "cognito-idp:ListIdentityProviders",
         "cognito-idp:ListResourceServers",
         "cognito-idp:ListTagsForResource",
         "cognito-idp:ListUserImportJobs",
         "cognito-idp:ListUserPoolClients",
         "cognito-idp:ListUsers",
         "cognito-idp:ListUsersInGroup",
         "cognito-idp:SetLogDeliveryConfiguration",
         "cognito-idp:SetRiskConfiguration",
         "cognito-idp:SetUICustomization",
         "cognito-idp:SetUserPoolMfaConfig",
         "cognito-idp:StartUserImportJob",
         "cognito-idp:StopUserImportJob",
         "cognito-idp:TagResource",
         "cognito-idp:UntagResource",
         "cognito-idp:UpdateAuthEventFeedback",
         "cognito-idp:UpdateGroup",
         "cognito-idp:UpdateIdentityProvider",
         "cognito-idp:UpdateManagedLoginBranding",
         "cognito-idp:UpdateResourceServer",
         "cognito-idp:UpdateUserPool",
         "cognito-idp:UpdateUserPoolClient",
         "cognito-idp:UpdateUserPoolDomain"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cognito-idp:AddCustomAttributes",
        "cognito-idp:AdminAddUserToGroup",
        "cognito-idp:AdminConfirmSignUp",
        "cognito-idp:AdminCreateUser",
        "cognito-idp:AdminDeleteUser",
        "cognito-idp:AdminDeleteUserAttributes",
        "cognito-idp:AdminDisableProviderForUser",
        "cognito-idp:AdminDisableUser",
        "cognito-idp:AdminEnableUser",
        "cognito-idp:AdminForgetDevice",
        "cognito-idp:AdminGetDevice",
        "cognito-idp:AdminGetUser",
        "cognito-idp:AdminInitiateAuth",
        "cognito-idp:AdminLinkProviderForUser",
        "cognito-idp:AdminListDevices",
        "cognito-idp:AdminListGroupsForUser",
        "cognito-idp:AdminListUserAuthEvents",
        "cognito-idp:AdminRemoveUserFromGroup",
        "cognito-idp:AdminResetUserPassword",
        "cognito-idp:AdminRespondToAuthChallenge",
        "cognito-idp:AdminSetUserMFAPreference",
        "cognito-idp:AdminSetUserPassword",
        "cognito-idp:AdminSetUserSettings",
        "cognito-idp:AdminUpdateAuthEventFeedback",
        "cognito-idp:AdminUpdateDeviceStatus",
        "cognito-idp:AdminUpdateUserAttributes",
        "cognito-idp:AdminUserGlobalSignOut",
        "cognito-idp:AssociateWebACL",
        "cognito-idp:CreateGroup",
        "cognito-idp:CreateIdentityProvider",
        "cognito-idp:CreateManagedLoginBranding",
        "cognito-idp:CreateResourceServer",
        "cognito-idp:CreateUserImportJob",
        "cognito-idp:CreateUserPoolClient",
        "cognito-idp:CreateUserPoolDomain",
        "cognito-idp:DeleteGroup",
        "cognito-idp:DeleteIdentityProvider",
        "cognito-idp:DeleteManagedLoginBranding",
        "cognito-idp:DeleteResourceServer",
        "cognito-idp:DeleteUserPool",
        "cognito-idp:DeleteUserPoolClient",
        "cognito-idp:DeleteUserPoolDomain",
        "cognito-idp:DescribeIdentityProvider",
        "cognito-idp:DescribeManagedLoginBranding",
        "cognito-idp:DescribeManagedLoginBrandingByClient",
        "cognito-idp:DescribeResourceServer",
        "cognito-idp:DescribeRiskConfiguration",
        "cognito-idp:DescribeUserImportJob",
        "cognito-idp:DescribeUserPool",
        "cognito-idp:DescribeUserPoolClient",
        "cognito-idp:DisassociateWebACL",
        "cognito-idp:GetCSVHeader",
        "cognito-idp:GetGroup",
        "cognito-idp:GetIdentityProviderByIdentifier",
        "cognito-idp:GetLogDeliveryConfiguration",
        "cognito-idp:GetSigningCertificate",
        "cognito-idp:GetUICustomization",
        "cognito-idp:GetUserPoolMfaConfig",
        "cognito-idp:GetWebACLForResource",
        "cognito-idp:ListGroups",
        "cognito-idp:ListIdentityProviders",
        "cognito-idp:ListResourceServers",
        "cognito-idp:ListTagsForResource",
        "cognito-idp:ListUserImportJobs",
        "cognito-idp:ListUserPoolClients",
        "cognito-idp:ListUsers",
        "cognito-idp:ListUsersInGroup",
        "cognito-idp:SetLogDeliveryConfiguration",
        "cognito-idp:SetRiskConfiguration",
        "cognito-idp:SetUICustomization",
        "cognito-idp:SetUserPoolMfaConfig",
        "cognito-idp:StartUserImportJob",
        "cognito-idp:StopUserImportJob",
        "cognito-idp:TagResource",
        "cognito-idp:UntagResource",
        "cognito-idp:UpdateAuthEventFeedback",
        "cognito-idp:UpdateGroup",
        "cognito-idp:UpdateIdentityProvider",
        "cognito-idp:UpdateManagedLoginBranding",
        "cognito-idp:UpdateResourceServer",
        "cognito-idp:UpdateUserPool",
        "cognito-idp:UpdateUserPoolClient",
        "cognito-idp:UpdateUserPoolDomain"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cognito-idp:userpool"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cognito-idp:userpool"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cognito-idp:AssociateWebACL",
         "cognito-idp:ListResourcesForWebACL"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cognito-idp:AssociateWebACL",
        "cognito-idp:ListResourcesForWebACL"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cognito-idp:webacl"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cognito-idp:webacl"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cognito-sync:BulkPublish",
         "cognito-sync:DescribeIdentityPoolUsage",
         "cognito-sync:GetBulkPublishDetails",
         "cognito-sync:GetCognitoEvents",
         "cognito-sync:GetIdentityPoolConfiguration",
         "cognito-sync:ListIdentityPoolUsage",
         "cognito-sync:SetCognitoEvents",
         "cognito-sync:SetIdentityPoolConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cognito-sync:BulkPublish",
        "cognito-sync:DescribeIdentityPoolUsage",
        "cognito-sync:GetBulkPublishDetails",
        "cognito-sync:GetCognitoEvents",
        "cognito-sync:GetIdentityPoolConfiguration",
        "cognito-sync:ListIdentityPoolUsage",
        "cognito-sync:SetCognitoEvents",
        "cognito-sync:SetIdentityPoolConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cognito-sync:identitypool"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cognito-sync:identitypool"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cognito-sync:DeleteDataset",
         "cognito-sync:DescribeDataset",
         "cognito-sync:ListDatasets",
         "cognito-sync:ListRecords",
         "cognito-sync:SetDatasetConfiguration",
         "cognito-sync:SubscribeToDataset",
         "cognito-sync:UnsubscribeFromDataset",
         "cognito-sync:UpdateRecords"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cognito-sync:DeleteDataset",
        "cognito-sync:DescribeDataset",
        "cognito-sync:ListDatasets",
        "cognito-sync:ListRecords",
        "cognito-sync:SetDatasetConfiguration",
        "cognito-sync:SubscribeToDataset",
        "cognito-sync:UnsubscribeFromDataset",
        "cognito-sync:UpdateRecords"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cognito-sync:dataset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cognito-sync:dataset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cognito-sync:DescribeIdentityUsage",
         "cognito-sync:RegisterDevice"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cognito-sync:DescribeIdentityUsage",
        "cognito-sync:RegisterDevice"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cognito-sync:identity"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cognito-sync:identity"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "comprehend:ClassifyDocument",
         "comprehend:CreateEndpoint",
         "comprehend:DeleteEndpoint",
         "comprehend:DescribeEndpoint",
         "comprehend:ListTagsForResource",
         "comprehend:TagResource",
         "comprehend:UntagResource",
         "comprehend:UpdateEndpoint"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "comprehend:ClassifyDocument",
        "comprehend:CreateEndpoint",
        "comprehend:DeleteEndpoint",
        "comprehend:DescribeEndpoint",
        "comprehend:ListTagsForResource",
        "comprehend:TagResource",
        "comprehend:UntagResource",
        "comprehend:UpdateEndpoint"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/comprehend:document-classifier-endpoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/comprehend:document-classifier-endpoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "comprehend:CreateDataset",
         "comprehend:CreateEndpoint",
         "comprehend:CreateFlywheel",
         "comprehend:DeleteFlywheel",
         "comprehend:DescribeFlywheel",
         "comprehend:DescribeFlywheelIteration",
         "comprehend:ListDatasets",
         "comprehend:ListFlywheelIterationHistory",
         "comprehend:ListTagsForResource",
         "comprehend:StartDocumentClassificationJob",
         "comprehend:StartEntitiesDetectionJob",
         "comprehend:StartFlywheelIteration",
         "comprehend:TagResource",
         "comprehend:UntagResource",
         "comprehend:UpdateEndpoint",
         "comprehend:UpdateFlywheel"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "comprehend:CreateDataset",
        "comprehend:CreateEndpoint",
        "comprehend:CreateFlywheel",
        "comprehend:DeleteFlywheel",
        "comprehend:DescribeFlywheel",
        "comprehend:DescribeFlywheelIteration",
        "comprehend:ListDatasets",
        "comprehend:ListFlywheelIterationHistory",
        "comprehend:ListTagsForResource",
        "comprehend:StartDocumentClassificationJob",
        "comprehend:StartEntitiesDetectionJob",
        "comprehend:StartFlywheelIteration",
        "comprehend:TagResource",
        "comprehend:UntagResource",
        "comprehend:UpdateEndpoint",
        "comprehend:UpdateFlywheel"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/comprehend:flywheel"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/comprehend:flywheel"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "comprehend:CreateDocumentClassifier",
         "comprehend:CreateEndpoint",
         "comprehend:CreateFlywheel",
         "comprehend:DeleteDocumentClassifier",
         "comprehend:DeleteResourcePolicy",
         "comprehend:DescribeDocumentClassifier",
         "comprehend:DescribeResourcePolicy",
         "comprehend:ImportModel",
         "comprehend:ListTagsForResource",
         "comprehend:PutResourcePolicy",
         "comprehend:StartDocumentClassificationJob",
         "comprehend:StopTrainingDocumentClassifier",
         "comprehend:TagResource",
         "comprehend:UntagResource",
         "comprehend:UpdateFlywheel"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "comprehend:CreateDocumentClassifier",
        "comprehend:CreateEndpoint",
        "comprehend:CreateFlywheel",
        "comprehend:DeleteDocumentClassifier",
        "comprehend:DeleteResourcePolicy",
        "comprehend:DescribeDocumentClassifier",
        "comprehend:DescribeResourcePolicy",
        "comprehend:ImportModel",
        "comprehend:ListTagsForResource",
        "comprehend:PutResourcePolicy",
        "comprehend:StartDocumentClassificationJob",
        "comprehend:StopTrainingDocumentClassifier",
        "comprehend:TagResource",
        "comprehend:UntagResource",
        "comprehend:UpdateFlywheel"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/comprehend:document-classifier"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/comprehend:document-classifier"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "comprehend:CreateEndpoint",
         "comprehend:CreateEntityRecognizer",
         "comprehend:CreateFlywheel",
         "comprehend:DeleteEntityRecognizer",
         "comprehend:DeleteResourcePolicy",
         "comprehend:DescribeEntityRecognizer",
         "comprehend:DescribeResourcePolicy",
         "comprehend:ImportModel",
         "comprehend:ListTagsForResource",
         "comprehend:PutResourcePolicy",
         "comprehend:StartEntitiesDetectionJob",
         "comprehend:StopTrainingEntityRecognizer",
         "comprehend:TagResource",
         "comprehend:UntagResource",
         "comprehend:UpdateFlywheel"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "comprehend:CreateEndpoint",
        "comprehend:CreateEntityRecognizer",
        "comprehend:CreateFlywheel",
        "comprehend:DeleteEntityRecognizer",
        "comprehend:DeleteResourcePolicy",
        "comprehend:DescribeEntityRecognizer",
        "comprehend:DescribeResourcePolicy",
        "comprehend:ImportModel",
        "comprehend:ListTagsForResource",
        "comprehend:PutResourcePolicy",
        "comprehend:StartEntitiesDetectionJob",
        "comprehend:StopTrainingEntityRecognizer",
        "comprehend:TagResource",
        "comprehend:UntagResource",
        "comprehend:UpdateFlywheel"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/comprehend:entity-recognizer"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/comprehend:entity-recognizer"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "comprehend:CreateEndpoint",
         "comprehend:DeleteEndpoint",
         "comprehend:DescribeEndpoint",
         "comprehend:DetectEntities",
         "comprehend:ListTagsForResource",
         "comprehend:TagResource",
         "comprehend:UntagResource",
         "comprehend:UpdateEndpoint"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "comprehend:CreateEndpoint",
        "comprehend:DeleteEndpoint",
        "comprehend:DescribeEndpoint",
        "comprehend:DetectEntities",
        "comprehend:ListTagsForResource",
        "comprehend:TagResource",
        "comprehend:UntagResource",
        "comprehend:UpdateEndpoint"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/comprehend:entity-recognizer-endpoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/comprehend:entity-recognizer-endpoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "comprehend:DescribeDataset",
         "comprehend:ListTagsForResource",
         "comprehend:TagResource",
         "comprehend:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "comprehend:DescribeDataset",
        "comprehend:ListTagsForResource",
        "comprehend:TagResource",
        "comprehend:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/comprehend:flywheel-dataset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/comprehend:flywheel-dataset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "comprehend:DescribeDocumentClassificationJob",
         "comprehend:ListTagsForResource",
         "comprehend:StartDocumentClassificationJob",
         "comprehend:TagResource",
         "comprehend:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "comprehend:DescribeDocumentClassificationJob",
        "comprehend:ListTagsForResource",
        "comprehend:StartDocumentClassificationJob",
        "comprehend:TagResource",
        "comprehend:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/comprehend:document-classification-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/comprehend:document-classification-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "comprehend:DescribeDominantLanguageDetectionJob",
         "comprehend:ListTagsForResource",
         "comprehend:StartDominantLanguageDetectionJob",
         "comprehend:StopDominantLanguageDetectionJob",
         "comprehend:TagResource",
         "comprehend:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "comprehend:DescribeDominantLanguageDetectionJob",
        "comprehend:ListTagsForResource",
        "comprehend:StartDominantLanguageDetectionJob",
        "comprehend:StopDominantLanguageDetectionJob",
        "comprehend:TagResource",
        "comprehend:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/comprehend:dominant-language-detection-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/comprehend:dominant-language-detection-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "comprehend:DescribeEntitiesDetectionJob",
         "comprehend:ListTagsForResource",
         "comprehend:StartEntitiesDetectionJob",
         "comprehend:StopEntitiesDetectionJob",
         "comprehend:TagResource",
         "comprehend:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "comprehend:DescribeEntitiesDetectionJob",
        "comprehend:ListTagsForResource",
        "comprehend:StartEntitiesDetectionJob",
        "comprehend:StopEntitiesDetectionJob",
        "comprehend:TagResource",
        "comprehend:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/comprehend:entities-detection-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/comprehend:entities-detection-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "comprehend:DescribeEventsDetectionJob",
         "comprehend:ListTagsForResource",
         "comprehend:StartEventsDetectionJob",
         "comprehend:StopEventsDetectionJob",
         "comprehend:TagResource",
         "comprehend:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "comprehend:DescribeEventsDetectionJob",
        "comprehend:ListTagsForResource",
        "comprehend:StartEventsDetectionJob",
        "comprehend:StopEventsDetectionJob",
        "comprehend:TagResource",
        "comprehend:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/comprehend:events-detection-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/comprehend:events-detection-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "comprehend:DescribeKeyPhrasesDetectionJob",
         "comprehend:ListTagsForResource",
         "comprehend:StartKeyPhrasesDetectionJob",
         "comprehend:StopKeyPhrasesDetectionJob",
         "comprehend:TagResource",
         "comprehend:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "comprehend:DescribeKeyPhrasesDetectionJob",
        "comprehend:ListTagsForResource",
        "comprehend:StartKeyPhrasesDetectionJob",
        "comprehend:StopKeyPhrasesDetectionJob",
        "comprehend:TagResource",
        "comprehend:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/comprehend:key-phrases-detection-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/comprehend:key-phrases-detection-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "comprehend:DescribePiiEntitiesDetectionJob",
         "comprehend:ListTagsForResource",
         "comprehend:StartPiiEntitiesDetectionJob",
         "comprehend:StopPiiEntitiesDetectionJob",
         "comprehend:TagResource",
         "comprehend:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "comprehend:DescribePiiEntitiesDetectionJob",
        "comprehend:ListTagsForResource",
        "comprehend:StartPiiEntitiesDetectionJob",
        "comprehend:StopPiiEntitiesDetectionJob",
        "comprehend:TagResource",
        "comprehend:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/comprehend:pii-entities-detection-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/comprehend:pii-entities-detection-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "comprehend:DescribeSentimentDetectionJob",
         "comprehend:ListTagsForResource",
         "comprehend:StartSentimentDetectionJob",
         "comprehend:StopSentimentDetectionJob",
         "comprehend:TagResource",
         "comprehend:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "comprehend:DescribeSentimentDetectionJob",
        "comprehend:ListTagsForResource",
        "comprehend:StartSentimentDetectionJob",
        "comprehend:StopSentimentDetectionJob",
        "comprehend:TagResource",
        "comprehend:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/comprehend:sentiment-detection-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/comprehend:sentiment-detection-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "comprehend:DescribeTargetedSentimentDetectionJob",
         "comprehend:ListTagsForResource",
         "comprehend:StartTargetedSentimentDetectionJob",
         "comprehend:StopTargetedSentimentDetectionJob",
         "comprehend:TagResource",
         "comprehend:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "comprehend:DescribeTargetedSentimentDetectionJob",
        "comprehend:ListTagsForResource",
        "comprehend:StartTargetedSentimentDetectionJob",
        "comprehend:StopTargetedSentimentDetectionJob",
        "comprehend:TagResource",
        "comprehend:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/comprehend:targeted-sentiment-detection-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/comprehend:targeted-sentiment-detection-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "comprehend:DescribeTopicsDetectionJob",
         "comprehend:ListTagsForResource",
         "comprehend:StartTopicsDetectionJob",
         "comprehend:TagResource",
         "comprehend:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "comprehend:DescribeTopicsDetectionJob",
        "comprehend:ListTagsForResource",
        "comprehend:StartTopicsDetectionJob",
        "comprehend:TagResource",
        "comprehend:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/comprehend:topics-detection-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/comprehend:topics-detection-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "config:AssociateResourceTypes",
         "config:DeleteConfigurationRecorder",
         "config:DeleteServiceLinkedConfigurationRecorder",
         "config:DescribeConfigurationRecorderStatus",
         "config:DescribeConfigurationRecorders",
         "config:DisassociateResourceTypes",
         "config:ListTagsForResource",
         "config:StartConfigurationRecorder",
         "config:StopConfigurationRecorder",
         "config:TagResource",
         "config:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "config:AssociateResourceTypes",
        "config:DeleteConfigurationRecorder",
        "config:DeleteServiceLinkedConfigurationRecorder",
        "config:DescribeConfigurationRecorderStatus",
        "config:DescribeConfigurationRecorders",
        "config:DisassociateResourceTypes",
        "config:ListTagsForResource",
        "config:StartConfigurationRecorder",
        "config:StopConfigurationRecorder",
        "config:TagResource",
        "config:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/config:ConfigurationRecorder"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/config:ConfigurationRecorder"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "config:BatchGetAggregateResourceConfig",
         "config:DeleteConfigurationAggregator",
         "config:DescribeAggregateComplianceByConfigRules",
         "config:DescribeAggregateComplianceByConformancePacks",
         "config:DescribeConfigurationAggregatorSourcesStatus",
         "config:GetAggregateComplianceDetailsByConfigRule",
         "config:GetAggregateConfigRuleComplianceSummary",
         "config:GetAggregateConformancePackComplianceSummary",
         "config:GetAggregateDiscoveredResourceCounts",
         "config:GetAggregateResourceConfig",
         "config:ListAggregateDiscoveredResources",
         "config:ListTagsForResource",
         "config:PutConfigurationAggregator",
         "config:SelectAggregateResourceConfig",
         "config:TagResource",
         "config:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "config:BatchGetAggregateResourceConfig",
        "config:DeleteConfigurationAggregator",
        "config:DescribeAggregateComplianceByConfigRules",
        "config:DescribeAggregateComplianceByConformancePacks",
        "config:DescribeConfigurationAggregatorSourcesStatus",
        "config:GetAggregateComplianceDetailsByConfigRule",
        "config:GetAggregateConfigRuleComplianceSummary",
        "config:GetAggregateConformancePackComplianceSummary",
        "config:GetAggregateDiscoveredResourceCounts",
        "config:GetAggregateResourceConfig",
        "config:ListAggregateDiscoveredResources",
        "config:ListTagsForResource",
        "config:PutConfigurationAggregator",
        "config:SelectAggregateResourceConfig",
        "config:TagResource",
        "config:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/config:ConfigurationAggregator"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/config:ConfigurationAggregator"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "config:DeleteAggregationAuthorization",
         "config:ListTagsForResource",
         "config:PutAggregationAuthorization",
         "config:TagResource",
         "config:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "config:DeleteAggregationAuthorization",
        "config:ListTagsForResource",
        "config:PutAggregationAuthorization",
        "config:TagResource",
        "config:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/config:AggregationAuthorization"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/config:AggregationAuthorization"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "config:DeleteConfigRule",
         "config:DeleteEvaluationResults",
         "config:GetComplianceDetailsByConfigRule",
         "config:GetCustomRulePolicy",
         "config:ListTagsForResource",
         "config:PutConfigRule",
         "config:PutExternalEvaluation",
         "config:StartConfigRulesEvaluation",
         "config:TagResource",
         "config:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "config:DeleteConfigRule",
        "config:DeleteEvaluationResults",
        "config:GetComplianceDetailsByConfigRule",
        "config:GetCustomRulePolicy",
        "config:ListTagsForResource",
        "config:PutConfigRule",
        "config:PutExternalEvaluation",
        "config:StartConfigRulesEvaluation",
        "config:TagResource",
        "config:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/config:ConfigRule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/config:ConfigRule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "config:DeleteConformancePack",
         "config:DescribeConformancePackCompliance",
         "config:GetConformancePackComplianceDetails",
         "config:GetConformancePackComplianceSummary",
         "config:ListTagsForResource",
         "config:PutConformancePack",
         "config:TagResource",
         "config:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "config:DeleteConformancePack",
        "config:DescribeConformancePackCompliance",
        "config:GetConformancePackComplianceDetails",
        "config:GetConformancePackComplianceSummary",
        "config:ListTagsForResource",
        "config:PutConformancePack",
        "config:TagResource",
        "config:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/config:ConformancePack"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/config:ConformancePack"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "config:DeleteOrganizationConfigRule",
         "config:GetOrganizationConfigRuleDetailedStatus",
         "config:GetOrganizationCustomRulePolicy",
         "config:ListTagsForResource",
         "config:PutOrganizationConfigRule",
         "config:TagResource",
         "config:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "config:DeleteOrganizationConfigRule",
        "config:GetOrganizationConfigRuleDetailedStatus",
        "config:GetOrganizationCustomRulePolicy",
        "config:ListTagsForResource",
        "config:PutOrganizationConfigRule",
        "config:TagResource",
        "config:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/config:OrganizationConfigRule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/config:OrganizationConfigRule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "config:DeleteOrganizationConformancePack",
         "config:GetOrganizationConformancePackDetailedStatus",
         "config:ListTagsForResource",
         "config:PutOrganizationConformancePack",
         "config:TagResource",
         "config:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "config:DeleteOrganizationConformancePack",
        "config:GetOrganizationConformancePackDetailedStatus",
        "config:ListTagsForResource",
        "config:PutOrganizationConformancePack",
        "config:TagResource",
        "config:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/config:OrganizationConformancePack"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/config:OrganizationConformancePack"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "config:DeleteRemediationConfiguration",
         "config:DescribeRemediationConfigurations",
         "config:DescribeRemediationExecutionStatus",
         "config:PutRemediationConfigurations"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "config:DeleteRemediationConfiguration",
        "config:DescribeRemediationConfigurations",
        "config:DescribeRemediationExecutionStatus",
        "config:PutRemediationConfigurations"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/config:RemediationConfiguration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/config:RemediationConfiguration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "config:DeleteStoredQuery",
         "config:GetStoredQuery",
         "config:ListTagsForResource",
         "config:PutStoredQuery",
         "config:TagResource",
         "config:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "config:DeleteStoredQuery",
        "config:GetStoredQuery",
        "config:ListTagsForResource",
        "config:PutStoredQuery",
        "config:TagResource",
        "config:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/config:StoredQuery"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/config:StoredQuery"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:ActivateEvaluationForm",
         "connect:CreateEvaluationForm",
         "connect:DeactivateEvaluationForm",
         "connect:DeleteEvaluationForm",
         "connect:DescribeEvaluationForm",
         "connect:ListEvaluationFormVersions",
         "connect:ListTagsForResource",
         "connect:StartContactEvaluation",
         "connect:TagResource",
         "connect:UntagResource",
         "connect:UpdateEvaluationForm"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:ActivateEvaluationForm",
        "connect:CreateEvaluationForm",
        "connect:DeactivateEvaluationForm",
        "connect:DeleteEvaluationForm",
        "connect:DescribeEvaluationForm",
        "connect:ListEvaluationFormVersions",
        "connect:ListTagsForResource",
        "connect:StartContactEvaluation",
        "connect:TagResource",
        "connect:UntagResource",
        "connect:UpdateEvaluationForm"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:evaluation-form"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:evaluation-form"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:AdminGetEmergencyAccessToken",
         "connect:AssociateAnalyticsDataSet",
         "connect:AssociateApprovedOrigin",
         "connect:AssociateBot",
         "connect:AssociateCustomerProfilesDomain",
         "connect:AssociateDefaultVocabulary",
         "connect:AssociateInstanceStorageConfig",
         "connect:AssociateLambdaFunction",
         "connect:AssociateLexBot",
         "connect:AssociateSecurityKey",
         "connect:AssociateTrafficDistributionGroupUser",
         "connect:AssociateUserProficiencies",
         "connect:BatchAssociateAnalyticsDataSet",
         "connect:BatchDisassociateAnalyticsDataSet",
         "connect:BatchPutContact",
         "connect:ClaimPhoneNumber",
         "connect:CreateContact",
         "connect:CreateEmailAddress",
         "connect:CreateHoursOfOperationOverride",
         "connect:CreateIntegrationAssociation",
         "connect:CreateParticipant",
         "connect:CreatePersistentContactAssociation",
         "connect:CreatePredefinedAttribute",
         "connect:CreatePushNotificationRegistration",
         "connect:CreateTrafficDistributionGroup",
         "connect:CreateUseCase",
         "connect:DeleteHoursOfOperationOverride",
         "connect:DeleteInstance",
         "connect:DeleteIntegrationAssociation",
         "connect:DeletePredefinedAttribute",
         "connect:DeletePushNotificationRegistration",
         "connect:DeleteUseCase",
         "connect:DescribeForecastingPlanningSchedulingIntegration",
         "connect:DescribeHoursOfOperationOverride",
         "connect:DescribeInstance",
         "connect:DescribeInstanceAttribute",
         "connect:DescribeInstanceStorageConfig",
         "connect:DescribePredefinedAttribute",
         "connect:DescribeUserHierarchyStructure",
         "connect:DisassociateAnalyticsDataSet",
         "connect:DisassociateApprovedOrigin",
         "connect:DisassociateBot",
         "connect:DisassociateCustomerProfilesDomain",
         "connect:DisassociateInstanceStorageConfig",
         "connect:DisassociateLambdaFunction",
         "connect:DisassociateLexBot",
         "connect:DisassociateSecurityKey",
         "connect:DisassociateTrafficDistributionGroupUser",
         "connect:DisassociateUserProficiencies",
         "connect:GetEffectiveHoursOfOperations",
         "connect:GetFederationToken",
         "connect:ImportPhoneNumber",
         "connect:ListAnalyticsDataAssociations",
         "connect:ListApprovedOrigins",
         "connect:ListAuthenticationProfiles",
         "connect:ListBots",
         "connect:ListContactEvaluations",
         "connect:ListContactFlowModules",
         "connect:ListDefaultVocabularies",
         "connect:ListEvaluationForms",
         "connect:ListFlowAssociations",
         "connect:ListHoursOfOperationOverrides",
         "connect:ListHoursOfOperations",
         "connect:ListInstanceAttributes",
         "connect:ListInstanceStorageConfigs",
         "connect:ListIntegrationAssociations",
         "connect:ListLambdaFunctions",
         "connect:ListLexBots",
         "connect:ListPredefinedAttributes",
         "connect:ListPrompts",
         "connect:ListRoutingProfiles",
         "connect:ListRules",
         "connect:ListSecurityKeys",
         "connect:ListSecurityProfiles",
         "connect:ListTaskTemplates",
         "connect:ListUseCases",
         "connect:ListUserHierarchyGroups",
         "connect:ListUserProficiencies",
         "connect:ListUsers",
         "connect:ListViews",
         "connect:MonitorContact",
         "connect:PauseContact",
         "connect:PutUserStatus",
         "connect:ReplicateInstance",
         "connect:ResumeContact",
         "connect:SearchAgentStatuses",
         "connect:SearchContactFlowModules",
         "connect:SearchContactFlows",
         "connect:SearchContacts",
         "connect:SearchEmailAddresses",
         "connect:SearchHoursOfOperationOverrides",
         "connect:SearchHoursOfOperations",
         "connect:SearchPredefinedAttributes",
         "connect:SearchPrompts",
         "connect:SearchQueues",
         "connect:SearchQuickConnects",
         "connect:SearchResourceTags",
         "connect:SearchRoutingProfiles",
         "connect:SearchSecurityProfiles",
         "connect:SearchUserHierarchyGroups",
         "connect:SearchUsers",
         "connect:SendOutboundEmail",
         "connect:StartContactStreaming",
         "connect:StartEmailContact",
         "connect:StartForecastingPlanningSchedulingIntegration",
         "connect:StartOutboundChatContact",
         "connect:StartOutboundEmailContact",
         "connect:StartScreenSharing",
         "connect:StopContactStreaming",
         "connect:StopForecastingPlanningSchedulingIntegration",
         "connect:TagResource",
         "connect:TransferContact",
         "connect:UntagResource",
         "connect:UpdateHoursOfOperationOverride",
         "connect:UpdateInstanceAttribute",
         "connect:UpdateInstanceStorageConfig",
         "connect:UpdateParticipantAuthentication",
         "connect:UpdateParticipantRoleConfig",
         "connect:UpdatePhoneNumber",
         "connect:UpdatePredefinedAttribute",
         "connect:UpdateUserHierarchyStructure",
         "connect:UpdateUserProficiencies"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:AdminGetEmergencyAccessToken",
        "connect:AssociateAnalyticsDataSet",
        "connect:AssociateApprovedOrigin",
        "connect:AssociateBot",
        "connect:AssociateCustomerProfilesDomain",
        "connect:AssociateDefaultVocabulary",
        "connect:AssociateInstanceStorageConfig",
        "connect:AssociateLambdaFunction",
        "connect:AssociateLexBot",
        "connect:AssociateSecurityKey",
        "connect:AssociateTrafficDistributionGroupUser",
        "connect:AssociateUserProficiencies",
        "connect:BatchAssociateAnalyticsDataSet",
        "connect:BatchDisassociateAnalyticsDataSet",
        "connect:BatchPutContact",
        "connect:ClaimPhoneNumber",
        "connect:CreateContact",
        "connect:CreateEmailAddress",
        "connect:CreateHoursOfOperationOverride",
        "connect:CreateIntegrationAssociation",
        "connect:CreateParticipant",
        "connect:CreatePersistentContactAssociation",
        "connect:CreatePredefinedAttribute",
        "connect:CreatePushNotificationRegistration",
        "connect:CreateTrafficDistributionGroup",
        "connect:CreateUseCase",
        "connect:DeleteHoursOfOperationOverride",
        "connect:DeleteInstance",
        "connect:DeleteIntegrationAssociation",
        "connect:DeletePredefinedAttribute",
        "connect:DeletePushNotificationRegistration",
        "connect:DeleteUseCase",
        "connect:DescribeForecastingPlanningSchedulingIntegration",
        "connect:DescribeHoursOfOperationOverride",
        "connect:DescribeInstance",
        "connect:DescribeInstanceAttribute",
        "connect:DescribeInstanceStorageConfig",
        "connect:DescribePredefinedAttribute",
        "connect:DescribeUserHierarchyStructure",
        "connect:DisassociateAnalyticsDataSet",
        "connect:DisassociateApprovedOrigin",
        "connect:DisassociateBot",
        "connect:DisassociateCustomerProfilesDomain",
        "connect:DisassociateInstanceStorageConfig",
        "connect:DisassociateLambdaFunction",
        "connect:DisassociateLexBot",
        "connect:DisassociateSecurityKey",
        "connect:DisassociateTrafficDistributionGroupUser",
        "connect:DisassociateUserProficiencies",
        "connect:GetEffectiveHoursOfOperations",
        "connect:GetFederationToken",
        "connect:ImportPhoneNumber",
        "connect:ListAnalyticsDataAssociations",
        "connect:ListApprovedOrigins",
        "connect:ListAuthenticationProfiles",
        "connect:ListBots",
        "connect:ListContactEvaluations",
        "connect:ListContactFlowModules",
        "connect:ListDefaultVocabularies",
        "connect:ListEvaluationForms",
        "connect:ListFlowAssociations",
        "connect:ListHoursOfOperationOverrides",
        "connect:ListHoursOfOperations",
        "connect:ListInstanceAttributes",
        "connect:ListInstanceStorageConfigs",
        "connect:ListIntegrationAssociations",
        "connect:ListLambdaFunctions",
        "connect:ListLexBots",
        "connect:ListPredefinedAttributes",
        "connect:ListPrompts",
        "connect:ListRoutingProfiles",
        "connect:ListRules",
        "connect:ListSecurityKeys",
        "connect:ListSecurityProfiles",
        "connect:ListTaskTemplates",
        "connect:ListUseCases",
        "connect:ListUserHierarchyGroups",
        "connect:ListUserProficiencies",
        "connect:ListUsers",
        "connect:ListViews",
        "connect:MonitorContact",
        "connect:PauseContact",
        "connect:PutUserStatus",
        "connect:ReplicateInstance",
        "connect:ResumeContact",
        "connect:SearchAgentStatuses",
        "connect:SearchContactFlowModules",
        "connect:SearchContactFlows",
        "connect:SearchContacts",
        "connect:SearchEmailAddresses",
        "connect:SearchHoursOfOperationOverrides",
        "connect:SearchHoursOfOperations",
        "connect:SearchPredefinedAttributes",
        "connect:SearchPrompts",
        "connect:SearchQueues",
        "connect:SearchQuickConnects",
        "connect:SearchResourceTags",
        "connect:SearchRoutingProfiles",
        "connect:SearchSecurityProfiles",
        "connect:SearchUserHierarchyGroups",
        "connect:SearchUsers",
        "connect:SendOutboundEmail",
        "connect:StartContactStreaming",
        "connect:StartEmailContact",
        "connect:StartForecastingPlanningSchedulingIntegration",
        "connect:StartOutboundChatContact",
        "connect:StartOutboundEmailContact",
        "connect:StartScreenSharing",
        "connect:StopContactStreaming",
        "connect:StopForecastingPlanningSchedulingIntegration",
        "connect:TagResource",
        "connect:TransferContact",
        "connect:UntagResource",
        "connect:UpdateHoursOfOperationOverride",
        "connect:UpdateInstanceAttribute",
        "connect:UpdateInstanceStorageConfig",
        "connect:UpdateParticipantAuthentication",
        "connect:UpdateParticipantRoleConfig",
        "connect:UpdatePhoneNumber",
        "connect:UpdatePredefinedAttribute",
        "connect:UpdateUserHierarchyStructure",
        "connect:UpdateUserProficiencies"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:instance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:instance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:AssociateFlow",
         "connect:AssociatePhoneNumberContactFlow",
         "connect:CreateContactFlow",
         "connect:CreateContactFlowVersion",
         "connect:CreateQueue",
         "connect:CreateQuickConnect",
         "connect:DeleteContactFlow",
         "connect:DeleteContactFlowVersion",
         "connect:DescribeContactFlow",
         "connect:ListContactFlowVersions",
         "connect:ListTagsForResource",
         "connect:PauseContact",
         "connect:ResumeContact",
         "connect:StartChatContact",
         "connect:StartEmailContact",
         "connect:StartOutboundChatContact",
         "connect:StartOutboundEmailContact",
         "connect:StartTaskContact",
         "connect:StartWebRTCContact",
         "connect:TagResource",
         "connect:TransferContact",
         "connect:UntagResource",
         "connect:UpdateContactFlowContent",
         "connect:UpdateContactFlowMetadata",
         "connect:UpdateContactFlowName",
         "connect:UpdateQueueOutboundCallerConfig",
         "connect:UpdateQuickConnectConfig"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:AssociateFlow",
        "connect:AssociatePhoneNumberContactFlow",
        "connect:CreateContactFlow",
        "connect:CreateContactFlowVersion",
        "connect:CreateQueue",
        "connect:CreateQuickConnect",
        "connect:DeleteContactFlow",
        "connect:DeleteContactFlowVersion",
        "connect:DescribeContactFlow",
        "connect:ListContactFlowVersions",
        "connect:ListTagsForResource",
        "connect:PauseContact",
        "connect:ResumeContact",
        "connect:StartChatContact",
        "connect:StartEmailContact",
        "connect:StartOutboundChatContact",
        "connect:StartOutboundEmailContact",
        "connect:StartTaskContact",
        "connect:StartWebRTCContact",
        "connect:TagResource",
        "connect:TransferContact",
        "connect:UntagResource",
        "connect:UpdateContactFlowContent",
        "connect:UpdateContactFlowMetadata",
        "connect:UpdateContactFlowName",
        "connect:UpdateQueueOutboundCallerConfig",
        "connect:UpdateQuickConnectConfig"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:contact-flow"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:contact-flow"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:AssociateFlow",
         "connect:BatchGetFlowAssociation",
         "connect:ClaimPhoneNumber",
         "connect:DisassociateFlow",
         "connect:GetFlowAssociation",
         "connect:ImportPhoneNumber",
         "connect:ListPhoneNumbersV2",
         "connect:ListTagsForResource",
         "connect:SearchAvailablePhoneNumbers",
         "connect:TagResource",
         "connect:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:AssociateFlow",
        "connect:BatchGetFlowAssociation",
        "connect:ClaimPhoneNumber",
        "connect:DisassociateFlow",
        "connect:GetFlowAssociation",
        "connect:ImportPhoneNumber",
        "connect:ListPhoneNumbersV2",
        "connect:ListTagsForResource",
        "connect:SearchAvailablePhoneNumbers",
        "connect:TagResource",
        "connect:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:wildcard-phone-number"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:wildcard-phone-number"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:AssociatePhoneNumberContactFlow",
         "connect:CreateQueue",
         "connect:DescribePhoneNumber",
         "connect:DisassociatePhoneNumberContactFlow",
         "connect:ListTagsForResource",
         "connect:ReleasePhoneNumber",
         "connect:StartOutboundChatContact",
         "connect:TagResource",
         "connect:UntagResource",
         "connect:UpdatePhoneNumber",
         "connect:UpdatePhoneNumberMetadata",
         "connect:UpdateQueueOutboundCallerConfig"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:AssociatePhoneNumberContactFlow",
        "connect:CreateQueue",
        "connect:DescribePhoneNumber",
        "connect:DisassociatePhoneNumberContactFlow",
        "connect:ListTagsForResource",
        "connect:ReleasePhoneNumber",
        "connect:StartOutboundChatContact",
        "connect:TagResource",
        "connect:UntagResource",
        "connect:UpdatePhoneNumber",
        "connect:UpdatePhoneNumberMetadata",
        "connect:UpdateQueueOutboundCallerConfig"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:phone-number"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:phone-number"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:AssociateQueueQuickConnects",
         "connect:AssociateRoutingProfileQueues",
         "connect:BatchPutContact",
         "connect:CreateQueue",
         "connect:CreateQuickConnect",
         "connect:CreateRoutingProfile",
         "connect:DeleteQueue",
         "connect:DescribeQueue",
         "connect:DisassociateQueueQuickConnects",
         "connect:GetCurrentMetricData",
         "connect:GetCurrentUserData",
         "connect:GetMetricData",
         "connect:GetMetricDataV2",
         "connect:ListQueueQuickConnects",
         "connect:ListTagsForResource",
         "connect:TagResource",
         "connect:UntagResource",
         "connect:UpdateQueueHoursOfOperation",
         "connect:UpdateQueueMaxContacts",
         "connect:UpdateQueueName",
         "connect:UpdateQueueOutboundCallerConfig",
         "connect:UpdateQueueOutboundEmailConfig",
         "connect:UpdateQueueStatus",
         "connect:UpdateQuickConnectConfig",
         "connect:UpdateRoutingProfileDefaultOutboundQueue"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:AssociateQueueQuickConnects",
        "connect:AssociateRoutingProfileQueues",
        "connect:BatchPutContact",
        "connect:CreateQueue",
        "connect:CreateQuickConnect",
        "connect:CreateRoutingProfile",
        "connect:DeleteQueue",
        "connect:DescribeQueue",
        "connect:DisassociateQueueQuickConnects",
        "connect:GetCurrentMetricData",
        "connect:GetCurrentUserData",
        "connect:GetMetricData",
        "connect:GetMetricDataV2",
        "connect:ListQueueQuickConnects",
        "connect:ListTagsForResource",
        "connect:TagResource",
        "connect:UntagResource",
        "connect:UpdateQueueHoursOfOperation",
        "connect:UpdateQueueMaxContacts",
        "connect:UpdateQueueName",
        "connect:UpdateQueueOutboundCallerConfig",
        "connect:UpdateQueueOutboundEmailConfig",
        "connect:UpdateQueueStatus",
        "connect:UpdateQuickConnectConfig",
        "connect:UpdateRoutingProfileDefaultOutboundQueue"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:queue"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:queue"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:AssociateQueueQuickConnects",
         "connect:CreateQueue",
         "connect:CreateQuickConnect",
         "connect:DeleteQuickConnect",
         "connect:DescribeQuickConnect",
         "connect:DisassociateQueueQuickConnects",
         "connect:ListTagsForResource",
         "connect:StartTaskContact",
         "connect:TagResource",
         "connect:UntagResource",
         "connect:UpdateQuickConnectConfig",
         "connect:UpdateQuickConnectName"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:AssociateQueueQuickConnects",
        "connect:CreateQueue",
        "connect:CreateQuickConnect",
        "connect:DeleteQuickConnect",
        "connect:DescribeQuickConnect",
        "connect:DisassociateQueueQuickConnects",
        "connect:ListTagsForResource",
        "connect:StartTaskContact",
        "connect:TagResource",
        "connect:UntagResource",
        "connect:UpdateQuickConnectConfig",
        "connect:UpdateQuickConnectName"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:quick-connect"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:quick-connect"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:AssociateRoutingProfileQueues",
         "connect:CreateRoutingProfile",
         "connect:CreateUser",
         "connect:DeleteRoutingProfile",
         "connect:DescribeRoutingProfile",
         "connect:DisassociateRoutingProfileQueues",
         "connect:GetCurrentMetricData",
         "connect:GetCurrentUserData",
         "connect:GetMetricDataV2",
         "connect:ListRoutingProfileQueues",
         "connect:ListTagsForResource",
         "connect:TagResource",
         "connect:UntagResource",
         "connect:UpdateRoutingProfileAgentAvailabilityTimer",
         "connect:UpdateRoutingProfileConcurrency",
         "connect:UpdateRoutingProfileDefaultOutboundQueue",
         "connect:UpdateRoutingProfileName",
         "connect:UpdateRoutingProfileQueues",
         "connect:UpdateUserRoutingProfile"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:AssociateRoutingProfileQueues",
        "connect:CreateRoutingProfile",
        "connect:CreateUser",
        "connect:DeleteRoutingProfile",
        "connect:DescribeRoutingProfile",
        "connect:DisassociateRoutingProfileQueues",
        "connect:GetCurrentMetricData",
        "connect:GetCurrentUserData",
        "connect:GetMetricDataV2",
        "connect:ListRoutingProfileQueues",
        "connect:ListTagsForResource",
        "connect:TagResource",
        "connect:UntagResource",
        "connect:UpdateRoutingProfileAgentAvailabilityTimer",
        "connect:UpdateRoutingProfileConcurrency",
        "connect:UpdateRoutingProfileDefaultOutboundQueue",
        "connect:UpdateRoutingProfileName",
        "connect:UpdateRoutingProfileQueues",
        "connect:UpdateUserRoutingProfile"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:routing-profile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:routing-profile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:AssociateTrafficDistributionGroupUser",
         "connect:ClaimPhoneNumber",
         "connect:CreateTrafficDistributionGroup",
         "connect:DeleteTrafficDistributionGroup",
         "connect:DescribeTrafficDistributionGroup",
         "connect:DisassociateTrafficDistributionGroupUser",
         "connect:GetTrafficDistribution",
         "connect:ListTagsForResource",
         "connect:ListTrafficDistributionGroupUsers",
         "connect:ListTrafficDistributionGroups",
         "connect:TagResource",
         "connect:UntagResource",
         "connect:UpdatePhoneNumber",
         "connect:UpdateTrafficDistribution"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:AssociateTrafficDistributionGroupUser",
        "connect:ClaimPhoneNumber",
        "connect:CreateTrafficDistributionGroup",
        "connect:DeleteTrafficDistributionGroup",
        "connect:DescribeTrafficDistributionGroup",
        "connect:DisassociateTrafficDistributionGroupUser",
        "connect:GetTrafficDistribution",
        "connect:ListTagsForResource",
        "connect:ListTrafficDistributionGroupUsers",
        "connect:ListTrafficDistributionGroups",
        "connect:TagResource",
        "connect:UntagResource",
        "connect:UpdatePhoneNumber",
        "connect:UpdateTrafficDistribution"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:traffic-distribution-group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:traffic-distribution-group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:AssociateTrafficDistributionGroupUser",
         "connect:AssociateUserProficiencies",
         "connect:CreateContact",
         "connect:CreateQuickConnect",
         "connect:CreateUser",
         "connect:DeleteUser",
         "connect:DescribeUser",
         "connect:DisassociateTrafficDistributionGroupUser",
         "connect:DisassociateUserProficiencies",
         "connect:DismissUserContact",
         "connect:GetCurrentUserData",
         "connect:GetMetricDataV2",
         "connect:ListTagsForResource",
         "connect:ListUserProficiencies",
         "connect:MonitorContact",
         "connect:PutUserStatus",
         "connect:TagResource",
         "connect:UntagResource",
         "connect:UpdateQuickConnectConfig",
         "connect:UpdateUserHierarchy",
         "connect:UpdateUserIdentityInfo",
         "connect:UpdateUserPhoneConfig",
         "connect:UpdateUserProficiencies",
         "connect:UpdateUserRoutingProfile",
         "connect:UpdateUserSecurityProfiles"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:AssociateTrafficDistributionGroupUser",
        "connect:AssociateUserProficiencies",
        "connect:CreateContact",
        "connect:CreateQuickConnect",
        "connect:CreateUser",
        "connect:DeleteUser",
        "connect:DescribeUser",
        "connect:DisassociateTrafficDistributionGroupUser",
        "connect:DisassociateUserProficiencies",
        "connect:DismissUserContact",
        "connect:GetCurrentUserData",
        "connect:GetMetricDataV2",
        "connect:ListTagsForResource",
        "connect:ListUserProficiencies",
        "connect:MonitorContact",
        "connect:PutUserStatus",
        "connect:TagResource",
        "connect:UntagResource",
        "connect:UpdateQuickConnectConfig",
        "connect:UpdateUserHierarchy",
        "connect:UpdateUserIdentityInfo",
        "connect:UpdateUserPhoneConfig",
        "connect:UpdateUserProficiencies",
        "connect:UpdateUserRoutingProfile",
        "connect:UpdateUserSecurityProfiles"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:user"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:user"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:BatchGetAttachedFileMetadata",
         "connect:CompleteAttachedFileUpload",
         "connect:DeleteAttachedFile",
         "connect:GetAttachedFile",
         "connect:StartAttachedFileUpload"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:BatchGetAttachedFileMetadata",
        "connect:CompleteAttachedFileUpload",
        "connect:DeleteAttachedFile",
        "connect:GetAttachedFile",
        "connect:StartAttachedFileUpload"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:attached-file"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:attached-file"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:CreateAgentStatus",
         "connect:DescribeAgentStatus",
         "connect:ListTagsForResource",
         "connect:PutUserStatus",
         "connect:TagResource",
         "connect:UntagResource",
         "connect:UpdateAgentStatus"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:CreateAgentStatus",
        "connect:DescribeAgentStatus",
        "connect:ListTagsForResource",
        "connect:PutUserStatus",
        "connect:TagResource",
        "connect:UntagResource",
        "connect:UpdateAgentStatus"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:agent-status"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:agent-status"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:CreateAuthenticationProfile",
         "connect:DescribeAuthenticationProfile",
         "connect:UpdateAuthenticationProfile"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:CreateAuthenticationProfile",
        "connect:DescribeAuthenticationProfile",
        "connect:UpdateAuthenticationProfile"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:authentication-profile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:authentication-profile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:CreateContact",
         "connect:CreateParticipant",
         "connect:CreatePersistentContactAssociation",
         "connect:DescribeContact",
         "connect:GetContactAttributes",
         "connect:ListAssociatedContacts",
         "connect:ListContactReferences",
         "connect:ListRealtimeContactAnalysisSegments",
         "connect:ListRealtimeContactAnalysisSegmentsV2",
         "connect:MonitorContact",
         "connect:PauseContact",
         "connect:ResumeContact",
         "connect:ResumeContactRecording",
         "connect:StartChatContact",
         "connect:StartContactEvaluation",
         "connect:StartContactRecording",
         "connect:StartOutboundChatContact",
         "connect:StartOutboundChatContact",
         "connect:StartOutboundVoiceContact",
         "connect:StartScreenSharing",
         "connect:StartTaskContact",
         "connect:StopContact",
         "connect:StopContactRecording",
         "connect:SuspendContactRecording",
         "connect:TagContact",
         "connect:TransferContact",
         "connect:UntagContact",
         "connect:UpdateContact",
         "connect:UpdateContactAttributes",
         "connect:UpdateContactRoutingData",
         "connect:UpdateContactSchedule",
         "connect:UpdateParticipantRoleConfig"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:CreateContact",
        "connect:CreateParticipant",
        "connect:CreatePersistentContactAssociation",
        "connect:DescribeContact",
        "connect:GetContactAttributes",
        "connect:ListAssociatedContacts",
        "connect:ListContactReferences",
        "connect:ListRealtimeContactAnalysisSegments",
        "connect:ListRealtimeContactAnalysisSegmentsV2",
        "connect:MonitorContact",
        "connect:PauseContact",
        "connect:ResumeContact",
        "connect:ResumeContactRecording",
        "connect:StartChatContact",
        "connect:StartContactEvaluation",
        "connect:StartContactRecording",
        "connect:StartOutboundChatContact",
        "connect:StartOutboundChatContact",
        "connect:StartOutboundVoiceContact",
        "connect:StartScreenSharing",
        "connect:StartTaskContact",
        "connect:StopContact",
        "connect:StopContactRecording",
        "connect:SuspendContactRecording",
        "connect:TagContact",
        "connect:TransferContact",
        "connect:UntagContact",
        "connect:UpdateContact",
        "connect:UpdateContactAttributes",
        "connect:UpdateContactRoutingData",
        "connect:UpdateContactSchedule",
        "connect:UpdateParticipantRoleConfig"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:contact"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:contact"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:CreateContactFlowModule",
         "connect:DeleteContactFlowModule",
         "connect:DescribeContactFlowModule",
         "connect:ListTagsForResource",
         "connect:TagResource",
         "connect:UntagResource",
         "connect:UpdateContactFlowModuleContent",
         "connect:UpdateContactFlowModuleMetadata"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:CreateContactFlowModule",
        "connect:DeleteContactFlowModule",
        "connect:DescribeContactFlowModule",
        "connect:ListTagsForResource",
        "connect:TagResource",
        "connect:UntagResource",
        "connect:UpdateContactFlowModuleContent",
        "connect:UpdateContactFlowModuleMetadata"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:contact-flow-module"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:contact-flow-module"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:CreateHoursOfOperation",
         "connect:CreateHoursOfOperationOverride",
         "connect:CreateQueue",
         "connect:DeleteHoursOfOperation",
         "connect:DeleteHoursOfOperationOverride",
         "connect:DescribeHoursOfOperation",
         "connect:DescribeHoursOfOperationOverride",
         "connect:GetEffectiveHoursOfOperations",
         "connect:ListHoursOfOperationOverrides",
         "connect:ListTagsForResource",
         "connect:SearchHoursOfOperationOverrides",
         "connect:TagResource",
         "connect:UntagResource",
         "connect:UpdateHoursOfOperation",
         "connect:UpdateHoursOfOperationOverride",
         "connect:UpdateQueueHoursOfOperation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:CreateHoursOfOperation",
        "connect:CreateHoursOfOperationOverride",
        "connect:CreateQueue",
        "connect:DeleteHoursOfOperation",
        "connect:DeleteHoursOfOperationOverride",
        "connect:DescribeHoursOfOperation",
        "connect:DescribeHoursOfOperationOverride",
        "connect:GetEffectiveHoursOfOperations",
        "connect:ListHoursOfOperationOverrides",
        "connect:ListTagsForResource",
        "connect:SearchHoursOfOperationOverrides",
        "connect:TagResource",
        "connect:UntagResource",
        "connect:UpdateHoursOfOperation",
        "connect:UpdateHoursOfOperationOverride",
        "connect:UpdateQueueHoursOfOperation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:hours-of-operation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:hours-of-operation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:CreateIntegrationAssociation",
         "connect:CreateUseCase",
         "connect:DeleteIntegrationAssociation",
         "connect:ListTagsForResource",
         "connect:TagResource",
         "connect:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:CreateIntegrationAssociation",
        "connect:CreateUseCase",
        "connect:DeleteIntegrationAssociation",
        "connect:ListTagsForResource",
        "connect:TagResource",
        "connect:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:integration-association"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:integration-association"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:CreatePrompt",
         "connect:DeletePrompt",
         "connect:DescribePrompt",
         "connect:GetPromptFile",
         "connect:ListTagsForResource",
         "connect:TagResource",
         "connect:UntagResource",
         "connect:UpdatePrompt"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:CreatePrompt",
        "connect:DeletePrompt",
        "connect:DescribePrompt",
        "connect:GetPromptFile",
        "connect:ListTagsForResource",
        "connect:TagResource",
        "connect:UntagResource",
        "connect:UpdatePrompt"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:prompt"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:prompt"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:CreateRule",
         "connect:DeleteRule",
         "connect:DescribeRule",
         "connect:ListTagsForResource",
         "connect:TagResource",
         "connect:UntagResource",
         "connect:UpdateRule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:CreateRule",
        "connect:DeleteRule",
        "connect:DescribeRule",
        "connect:ListTagsForResource",
        "connect:TagResource",
        "connect:UntagResource",
        "connect:UpdateRule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:rule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:rule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:CreateSecurityProfile",
         "connect:CreateUser",
         "connect:DeleteSecurityProfile",
         "connect:DescribeSecurityProfile",
         "connect:ListSecurityProfileApplications",
         "connect:ListSecurityProfilePermissions",
         "connect:ListTagsForResource",
         "connect:TagResource",
         "connect:UntagResource",
         "connect:UpdateSecurityProfile",
         "connect:UpdateUserSecurityProfiles"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:CreateSecurityProfile",
        "connect:CreateUser",
        "connect:DeleteSecurityProfile",
        "connect:DescribeSecurityProfile",
        "connect:ListSecurityProfileApplications",
        "connect:ListSecurityProfilePermissions",
        "connect:ListTagsForResource",
        "connect:TagResource",
        "connect:UntagResource",
        "connect:UpdateSecurityProfile",
        "connect:UpdateUserSecurityProfiles"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:security-profile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:security-profile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:CreateTaskTemplate",
         "connect:DeleteTaskTemplate",
         "connect:GetTaskTemplate",
         "connect:StartTaskContact",
         "connect:TagResource",
         "connect:UntagResource",
         "connect:UpdateTaskTemplate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:CreateTaskTemplate",
        "connect:DeleteTaskTemplate",
        "connect:GetTaskTemplate",
        "connect:StartTaskContact",
        "connect:TagResource",
        "connect:UntagResource",
        "connect:UpdateTaskTemplate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:task-template"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:task-template"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:CreateUseCase",
         "connect:DeleteUseCase",
         "connect:ListTagsForResource",
         "connect:TagResource",
         "connect:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:CreateUseCase",
        "connect:DeleteUseCase",
        "connect:ListTagsForResource",
        "connect:TagResource",
        "connect:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:use-case"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:use-case"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:CreateUser",
         "connect:CreateUserHierarchyGroup",
         "connect:DeleteUserHierarchyGroup",
         "connect:DescribeUserHierarchyGroup",
         "connect:GetCurrentUserData",
         "connect:GetMetricDataV2",
         "connect:ListTagsForResource",
         "connect:TagResource",
         "connect:UntagResource",
         "connect:UpdateUserHierarchy",
         "connect:UpdateUserHierarchyGroupName"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:CreateUser",
        "connect:CreateUserHierarchyGroup",
        "connect:DeleteUserHierarchyGroup",
        "connect:DescribeUserHierarchyGroup",
        "connect:GetCurrentUserData",
        "connect:GetMetricDataV2",
        "connect:ListTagsForResource",
        "connect:TagResource",
        "connect:UntagResource",
        "connect:UpdateUserHierarchy",
        "connect:UpdateUserHierarchyGroupName"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:hierarchy-group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:hierarchy-group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:CreateView",
         "connect:CreateViewVersion",
         "connect:DeleteView",
         "connect:DescribeView",
         "connect:ListViewVersions",
         "connect:TagResource",
         "connect:UntagResource",
         "connect:UpdateViewContent",
         "connect:UpdateViewMetadata"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:CreateView",
        "connect:CreateViewVersion",
        "connect:DeleteView",
        "connect:DescribeView",
        "connect:ListViewVersions",
        "connect:TagResource",
        "connect:UntagResource",
        "connect:UpdateViewContent",
        "connect:UpdateViewMetadata"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:customer-managed-view"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:customer-managed-view"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:CreateVocabulary",
         "connect:DeleteVocabulary",
         "connect:DescribeVocabulary",
         "connect:SearchVocabularies",
         "connect:TagResource",
         "connect:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:CreateVocabulary",
        "connect:DeleteVocabulary",
        "connect:DescribeVocabulary",
        "connect:SearchVocabularies",
        "connect:TagResource",
        "connect:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:vocabulary"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:vocabulary"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:DeleteContactEvaluation",
         "connect:DescribeContactEvaluation",
         "connect:ListTagsForResource",
         "connect:StartContactEvaluation",
         "connect:SubmitContactEvaluation",
         "connect:TagResource",
         "connect:UntagResource",
         "connect:UpdateContactEvaluation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:DeleteContactEvaluation",
        "connect:DescribeContactEvaluation",
        "connect:ListTagsForResource",
        "connect:StartContactEvaluation",
        "connect:SubmitContactEvaluation",
        "connect:TagResource",
        "connect:UntagResource",
        "connect:UpdateContactEvaluation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:contact-evaluation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:contact-evaluation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:DeleteEmailAddress",
         "connect:DescribeEmailAddress",
         "connect:UpdateEmailAddressMetadata"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:DeleteEmailAddress",
        "connect:DescribeEmailAddress",
        "connect:UpdateEmailAddressMetadata"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:email-address"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:email-address"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:DeleteViewVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:DeleteViewVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:customer-managed-view-version"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:customer-managed-view-version"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:DescribeView",
         "connect:ListViewVersions"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:DescribeView",
        "connect:ListViewVersions"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:aws-managed-view"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:aws-managed-view"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:DescribeView"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:DescribeView"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:qualified-aws-managed-view"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:qualified-aws-managed-view"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:DescribeView"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:DescribeView"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:qualified-customer-managed-view"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:qualified-customer-managed-view"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:ListAgentStatuses"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:ListAgentStatuses"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:wildcard-agent-status"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:wildcard-agent-status"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:ListContactFlows"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:ListContactFlows"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:wildcard-contact-flow"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:wildcard-contact-flow"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:ListPhoneNumbers"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:ListPhoneNumbers"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:wildcard-legacy-phone-number"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:wildcard-legacy-phone-number"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:ListQueues"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:ListQueues"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:wildcard-queue"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:wildcard-queue"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect:ListQuickConnects"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect:ListQuickConnects"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect:wildcard-quick-connect"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect:wildcard-quick-connect"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "connect-campaigns:CreateCampaign",
         "connect-campaigns:DeleteCampaign",
         "connect-campaigns:DeleteCampaignChannelSubtypeConfig",
         "connect-campaigns:DeleteCampaignCommunicationLimits",
         "connect-campaigns:DeleteCampaignCommunicationTime",
         "connect-campaigns:DescribeCampaign",
         "connect-campaigns:GetCampaignState",
         "connect-campaigns:GetCampaignStateBatch",
         "connect-campaigns:ListTagsForResource",
         "connect-campaigns:PauseCampaign",
         "connect-campaigns:PutDialRequestBatch",
         "connect-campaigns:PutOutboundRequestBatch",
         "connect-campaigns:PutProfileOutboundRequestBatch",
         "connect-campaigns:ResumeCampaign",
         "connect-campaigns:StartCampaign",
         "connect-campaigns:StopCampaign",
         "connect-campaigns:TagResource",
         "connect-campaigns:UntagResource",
         "connect-campaigns:UpdateCampaignChannelSubtypeConfig",
         "connect-campaigns:UpdateCampaignCommunicationLimits",
         "connect-campaigns:UpdateCampaignCommunicationTime",
         "connect-campaigns:UpdateCampaignDialerConfig",
         "connect-campaigns:UpdateCampaignFlowAssociation",
         "connect-campaigns:UpdateCampaignName",
         "connect-campaigns:UpdateCampaignOutboundCallConfig",
         "connect-campaigns:UpdateCampaignSchedule",
         "connect-campaigns:UpdateCampaignSource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "connect-campaigns:CreateCampaign",
        "connect-campaigns:DeleteCampaign",
        "connect-campaigns:DeleteCampaignChannelSubtypeConfig",
        "connect-campaigns:DeleteCampaignCommunicationLimits",
        "connect-campaigns:DeleteCampaignCommunicationTime",
        "connect-campaigns:DescribeCampaign",
        "connect-campaigns:GetCampaignState",
        "connect-campaigns:GetCampaignStateBatch",
        "connect-campaigns:ListTagsForResource",
        "connect-campaigns:PauseCampaign",
        "connect-campaigns:PutDialRequestBatch",
        "connect-campaigns:PutOutboundRequestBatch",
        "connect-campaigns:PutProfileOutboundRequestBatch",
        "connect-campaigns:ResumeCampaign",
        "connect-campaigns:StartCampaign",
        "connect-campaigns:StopCampaign",
        "connect-campaigns:TagResource",
        "connect-campaigns:UntagResource",
        "connect-campaigns:UpdateCampaignChannelSubtypeConfig",
        "connect-campaigns:UpdateCampaignCommunicationLimits",
        "connect-campaigns:UpdateCampaignCommunicationTime",
        "connect-campaigns:UpdateCampaignDialerConfig",
        "connect-campaigns:UpdateCampaignFlowAssociation",
        "connect-campaigns:UpdateCampaignName",
        "connect-campaigns:UpdateCampaignOutboundCallConfig",
        "connect-campaigns:UpdateCampaignSchedule",
        "connect-campaigns:UpdateCampaignSource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/connect-campaigns:campaign"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/connect-campaigns:campaign"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "consoleapp:GetDeviceIdentity"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "consoleapp:GetDeviceIdentity"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/consoleapp:DeviceIdentity"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/consoleapp:DeviceIdentity"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "controlcatalog:GetControl",
         "controlcatalog:ListControls"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "controlcatalog:GetControl",
        "controlcatalog:ListControls"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/controlcatalog:control"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/controlcatalog:control"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "controltower:DeleteLandingZone",
         "controltower:GetLandingZone",
         "controltower:ListTagsForResource",
         "controltower:ResetLandingZone",
         "controltower:TagResource",
         "controltower:UntagResource",
         "controltower:UpdateLandingZone"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "controltower:DeleteLandingZone",
        "controltower:GetLandingZone",
        "controltower:ListTagsForResource",
        "controltower:ResetLandingZone",
        "controltower:TagResource",
        "controltower:UntagResource",
        "controltower:UpdateLandingZone"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/controltower:LandingZone"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/controltower:LandingZone"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "controltower:DisableBaseline",
         "controltower:GetEnabledBaseline",
         "controltower:ListTagsForResource",
         "controltower:ResetEnabledBaseline",
         "controltower:TagResource",
         "controltower:UntagResource",
         "controltower:UpdateEnabledBaseline"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "controltower:DisableBaseline",
        "controltower:GetEnabledBaseline",
        "controltower:ListTagsForResource",
        "controltower:ResetEnabledBaseline",
        "controltower:TagResource",
        "controltower:UntagResource",
        "controltower:UpdateEnabledBaseline"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/controltower:EnabledBaseline"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/controltower:EnabledBaseline"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "controltower:DisableControl",
         "controltower:EnableControl",
         "controltower:GetEnabledControl",
         "controltower:ListTagsForResource",
         "controltower:ResetEnabledControl",
         "controltower:TagResource",
         "controltower:UntagResource",
         "controltower:UpdateEnabledControl"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "controltower:DisableControl",
        "controltower:EnableControl",
        "controltower:GetEnabledControl",
        "controltower:ListTagsForResource",
        "controltower:ResetEnabledControl",
        "controltower:TagResource",
        "controltower:UntagResource",
        "controltower:UpdateEnabledControl"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/controltower:EnabledControl"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/controltower:EnabledControl"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "controltower:GetBaseline"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "controltower:GetBaseline"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/controltower:Baseline"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/controltower:Baseline"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "cur:DeleteReportDefinition",
         "cur:ListTagsForResource",
         "cur:ModifyReportDefinition",
         "cur:PutReportDefinition",
         "cur:TagResource",
         "cur:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "cur:DeleteReportDefinition",
        "cur:ListTagsForResource",
        "cur:ModifyReportDefinition",
        "cur:PutReportDefinition",
        "cur:TagResource",
        "cur:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/cur:cur"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/cur:cur"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "databrew:BatchDeleteRecipeVersion",
         "databrew:DeleteRecipeVersion",
         "databrew:DescribeRecipe",
         "databrew:ListRecipeVersions",
         "databrew:ListTagsForResource",
         "databrew:PublishRecipe",
         "databrew:TagResource",
         "databrew:UntagResource",
         "databrew:UpdateRecipe"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "databrew:BatchDeleteRecipeVersion",
        "databrew:DeleteRecipeVersion",
        "databrew:DescribeRecipe",
        "databrew:ListRecipeVersions",
        "databrew:ListTagsForResource",
        "databrew:PublishRecipe",
        "databrew:TagResource",
        "databrew:UntagResource",
        "databrew:UpdateRecipe"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/databrew:Recipe"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/databrew:Recipe"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "databrew:DeleteDataset",
         "databrew:DescribeDataset",
         "databrew:ListTagsForResource",
         "databrew:TagResource",
         "databrew:UntagResource",
         "databrew:UpdateDataset"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "databrew:DeleteDataset",
        "databrew:DescribeDataset",
        "databrew:ListTagsForResource",
        "databrew:TagResource",
        "databrew:UntagResource",
        "databrew:UpdateDataset"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/databrew:Dataset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/databrew:Dataset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "databrew:DeleteJob",
         "databrew:DescribeJob",
         "databrew:DescribeJobRun",
         "databrew:ListJobRuns",
         "databrew:ListTagsForResource",
         "databrew:StartJobRun",
         "databrew:StopJobRun",
         "databrew:TagResource",
         "databrew:UntagResource",
         "databrew:UpdateProfileJob",
         "databrew:UpdateRecipeJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "databrew:DeleteJob",
        "databrew:DescribeJob",
        "databrew:DescribeJobRun",
        "databrew:ListJobRuns",
        "databrew:ListTagsForResource",
        "databrew:StartJobRun",
        "databrew:StopJobRun",
        "databrew:TagResource",
        "databrew:UntagResource",
        "databrew:UpdateProfileJob",
        "databrew:UpdateRecipeJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/databrew:Job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/databrew:Job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "databrew:DeleteProject",
         "databrew:DescribeProject",
         "databrew:ListTagsForResource",
         "databrew:SendProjectSessionAction",
         "databrew:StartProjectSession",
         "databrew:TagResource",
         "databrew:UntagResource",
         "databrew:UpdateProject"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "databrew:DeleteProject",
        "databrew:DescribeProject",
        "databrew:ListTagsForResource",
        "databrew:SendProjectSessionAction",
        "databrew:StartProjectSession",
        "databrew:TagResource",
        "databrew:UntagResource",
        "databrew:UpdateProject"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/databrew:Project"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/databrew:Project"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "databrew:DeleteRuleset",
         "databrew:DescribeRuleset",
         "databrew:ListTagsForResource",
         "databrew:TagResource",
         "databrew:UntagResource",
         "databrew:UpdateRuleset"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "databrew:DeleteRuleset",
        "databrew:DescribeRuleset",
        "databrew:ListTagsForResource",
        "databrew:TagResource",
        "databrew:UntagResource",
        "databrew:UpdateRuleset"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/databrew:Ruleset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/databrew:Ruleset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "databrew:DeleteSchedule",
         "databrew:DescribeSchedule",
         "databrew:ListTagsForResource",
         "databrew:TagResource",
         "databrew:UntagResource",
         "databrew:UpdateSchedule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "databrew:DeleteSchedule",
        "databrew:DescribeSchedule",
        "databrew:ListTagsForResource",
        "databrew:TagResource",
        "databrew:UntagResource",
        "databrew:UpdateSchedule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/databrew:Schedule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/databrew:Schedule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dataexchange:AcceptDataGrant",
         "dataexchange:DeleteDataGrant",
         "dataexchange:GetDataGrant",
         "dataexchange:GetReceivedDataGrant",
         "dataexchange:ListTagsForResource",
         "dataexchange:TagResource",
         "dataexchange:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dataexchange:AcceptDataGrant",
        "dataexchange:DeleteDataGrant",
        "dataexchange:GetDataGrant",
        "dataexchange:GetReceivedDataGrant",
        "dataexchange:ListTagsForResource",
        "dataexchange:TagResource",
        "dataexchange:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dataexchange:data-grants"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dataexchange:data-grants"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dataexchange:CancelJob",
         "dataexchange:GetJob",
         "dataexchange:StartJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dataexchange:CancelJob",
        "dataexchange:GetJob",
        "dataexchange:StartJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dataexchange:jobs"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dataexchange:jobs"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dataexchange:CreateAsset",
         "dataexchange:DeleteRevision",
         "dataexchange:GetRevision",
         "dataexchange:ListRevisionAssets",
         "dataexchange:ListTagsForResource",
         "dataexchange:RevokeRevision",
         "dataexchange:TagResource",
         "dataexchange:UntagResource",
         "dataexchange:UpdateRevision"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dataexchange:CreateAsset",
        "dataexchange:DeleteRevision",
        "dataexchange:GetRevision",
        "dataexchange:ListRevisionAssets",
        "dataexchange:ListTagsForResource",
        "dataexchange:RevokeRevision",
        "dataexchange:TagResource",
        "dataexchange:UntagResource",
        "dataexchange:UpdateRevision"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dataexchange:revisions"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dataexchange:revisions"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dataexchange:CreateRevision",
         "dataexchange:DeleteDataSet",
         "dataexchange:GetDataSet",
         "dataexchange:ListDataSetRevisions",
         "dataexchange:ListTagsForResource",
         "dataexchange:PublishDataSet",
         "dataexchange:PublishToDataGrant",
         "dataexchange:SendDataSetNotification",
         "dataexchange:TagResource",
         "dataexchange:UntagResource",
         "dataexchange:UpdateDataSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dataexchange:CreateRevision",
        "dataexchange:DeleteDataSet",
        "dataexchange:GetDataSet",
        "dataexchange:ListDataSetRevisions",
        "dataexchange:ListTagsForResource",
        "dataexchange:PublishDataSet",
        "dataexchange:PublishToDataGrant",
        "dataexchange:SendDataSetNotification",
        "dataexchange:TagResource",
        "dataexchange:UntagResource",
        "dataexchange:UpdateDataSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dataexchange:data-sets"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dataexchange:data-sets"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dataexchange:DeleteAsset",
         "dataexchange:GetAsset",
         "dataexchange:SendApiAsset",
         "dataexchange:UpdateAsset"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dataexchange:DeleteAsset",
        "dataexchange:GetAsset",
        "dataexchange:SendApiAsset",
        "dataexchange:UpdateAsset"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dataexchange:assets"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dataexchange:assets"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dataexchange:DeleteDataSet",
         "dataexchange:GetDataSet",
         "dataexchange:ListDataSetRevisions"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dataexchange:DeleteDataSet",
        "dataexchange:GetDataSet",
        "dataexchange:ListDataSetRevisions"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dataexchange:entitled-data-sets"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dataexchange:entitled-data-sets"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dataexchange:DeleteEventAction",
         "dataexchange:GetEventAction",
         "dataexchange:UpdateEventAction"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dataexchange:DeleteEventAction",
        "dataexchange:GetEventAction",
        "dataexchange:UpdateEventAction"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dataexchange:event-actions"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dataexchange:event-actions"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dataexchange:GetAsset",
         "dataexchange:SendApiAsset"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dataexchange:GetAsset",
        "dataexchange:SendApiAsset"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dataexchange:entitled-assets"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dataexchange:entitled-assets"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dataexchange:GetRevision",
         "dataexchange:ListRevisionAssets"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dataexchange:GetRevision",
        "dataexchange:ListRevisionAssets"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dataexchange:entitled-revisions"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dataexchange:entitled-revisions"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "datapipeline:ActivatePipeline",
         "datapipeline:AddTags",
         "datapipeline:DeactivatePipeline",
         "datapipeline:DeletePipeline",
         "datapipeline:DescribeObjects",
         "datapipeline:DescribePipelines",
         "datapipeline:EvaluateExpression",
         "datapipeline:GetPipelineDefinition",
         "datapipeline:PutPipelineDefinition",
         "datapipeline:QueryObjects",
         "datapipeline:RemoveTags",
         "datapipeline:ReportTaskProgress",
         "datapipeline:SetStatus",
         "datapipeline:SetTaskStatus",
         "datapipeline:ValidatePipelineDefinition"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "datapipeline:ActivatePipeline",
        "datapipeline:AddTags",
        "datapipeline:DeactivatePipeline",
        "datapipeline:DeletePipeline",
        "datapipeline:DescribeObjects",
        "datapipeline:DescribePipelines",
        "datapipeline:EvaluateExpression",
        "datapipeline:GetPipelineDefinition",
        "datapipeline:PutPipelineDefinition",
        "datapipeline:QueryObjects",
        "datapipeline:RemoveTags",
        "datapipeline:ReportTaskProgress",
        "datapipeline:SetStatus",
        "datapipeline:SetTaskStatus",
        "datapipeline:ValidatePipelineDefinition"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/datapipeline:pipeline"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/datapipeline:pipeline"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "datasync:AddStorageSystem",
         "datasync:CreateTask",
         "datasync:DeleteAgent",
         "datasync:DescribeAgent",
         "datasync:ListTagsForResource",
         "datasync:TagResource",
         "datasync:UntagResource",
         "datasync:UpdateAgent"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "datasync:AddStorageSystem",
        "datasync:CreateTask",
        "datasync:DeleteAgent",
        "datasync:DescribeAgent",
        "datasync:ListTagsForResource",
        "datasync:TagResource",
        "datasync:UntagResource",
        "datasync:UpdateAgent"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/datasync:agent"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/datasync:agent"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "datasync:CancelTaskExecution",
         "datasync:DescribeTaskExecution",
         "datasync:ListTagsForResource",
         "datasync:TagResource",
         "datasync:UntagResource",
         "datasync:UpdateTaskExecution"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "datasync:CancelTaskExecution",
        "datasync:DescribeTaskExecution",
        "datasync:ListTagsForResource",
        "datasync:TagResource",
        "datasync:UntagResource",
        "datasync:UpdateTaskExecution"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/datasync:taskexecution"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/datasync:taskexecution"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "datasync:CreateTask",
         "datasync:DeleteLocation",
         "datasync:DescribeLocationAzureBlob",
         "datasync:DescribeLocationEfs",
         "datasync:DescribeLocationFsxLustre",
         "datasync:DescribeLocationFsxOntap",
         "datasync:DescribeLocationFsxOpenZfs",
         "datasync:DescribeLocationFsxWindows",
         "datasync:DescribeLocationHdfs",
         "datasync:DescribeLocationNfs",
         "datasync:DescribeLocationObjectStorage",
         "datasync:DescribeLocationS3",
         "datasync:DescribeLocationSmb",
         "datasync:ListTagsForResource",
         "datasync:TagResource",
         "datasync:UntagResource",
         "datasync:UpdateLocationAzureBlob",
         "datasync:UpdateLocationEfs",
         "datasync:UpdateLocationFsxLustre",
         "datasync:UpdateLocationFsxOntap",
         "datasync:UpdateLocationFsxOpenZfs",
         "datasync:UpdateLocationFsxWindows",
         "datasync:UpdateLocationHdfs",
         "datasync:UpdateLocationNfs",
         "datasync:UpdateLocationObjectStorage",
         "datasync:UpdateLocationS3",
         "datasync:UpdateLocationSmb"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "datasync:CreateTask",
        "datasync:DeleteLocation",
        "datasync:DescribeLocationAzureBlob",
        "datasync:DescribeLocationEfs",
        "datasync:DescribeLocationFsxLustre",
        "datasync:DescribeLocationFsxOntap",
        "datasync:DescribeLocationFsxOpenZfs",
        "datasync:DescribeLocationFsxWindows",
        "datasync:DescribeLocationHdfs",
        "datasync:DescribeLocationNfs",
        "datasync:DescribeLocationObjectStorage",
        "datasync:DescribeLocationS3",
        "datasync:DescribeLocationSmb",
        "datasync:ListTagsForResource",
        "datasync:TagResource",
        "datasync:UntagResource",
        "datasync:UpdateLocationAzureBlob",
        "datasync:UpdateLocationEfs",
        "datasync:UpdateLocationFsxLustre",
        "datasync:UpdateLocationFsxOntap",
        "datasync:UpdateLocationFsxOpenZfs",
        "datasync:UpdateLocationFsxWindows",
        "datasync:UpdateLocationHdfs",
        "datasync:UpdateLocationNfs",
        "datasync:UpdateLocationObjectStorage",
        "datasync:UpdateLocationS3",
        "datasync:UpdateLocationSmb"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/datasync:location"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/datasync:location"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "datasync:DeleteTask",
         "datasync:DescribeTask",
         "datasync:ListTagsForResource",
         "datasync:StartTaskExecution",
         "datasync:TagResource",
         "datasync:UntagResource",
         "datasync:UpdateTask"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "datasync:DeleteTask",
        "datasync:DescribeTask",
        "datasync:ListTagsForResource",
        "datasync:StartTaskExecution",
        "datasync:TagResource",
        "datasync:UntagResource",
        "datasync:UpdateTask"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/datasync:task"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/datasync:task"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "datasync:DescribeDiscoveryJob",
         "datasync:DescribeStorageSystemResourceMetrics",
         "datasync:DescribeStorageSystemResources",
         "datasync:GenerateRecommendations",
         "datasync:ListTagsForResource",
         "datasync:StopDiscoveryJob",
         "datasync:TagResource",
         "datasync:UntagResource",
         "datasync:UpdateDiscoveryJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "datasync:DescribeDiscoveryJob",
        "datasync:DescribeStorageSystemResourceMetrics",
        "datasync:DescribeStorageSystemResources",
        "datasync:GenerateRecommendations",
        "datasync:ListTagsForResource",
        "datasync:StopDiscoveryJob",
        "datasync:TagResource",
        "datasync:UntagResource",
        "datasync:UpdateDiscoveryJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/datasync:discoveryjob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/datasync:discoveryjob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "datasync:DescribeStorageSystem",
         "datasync:ListTagsForResource",
         "datasync:RemoveStorageSystem",
         "datasync:StartDiscoveryJob",
         "datasync:TagResource",
         "datasync:UntagResource",
         "datasync:UpdateStorageSystem"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "datasync:DescribeStorageSystem",
        "datasync:ListTagsForResource",
        "datasync:RemoveStorageSystem",
        "datasync:StartDiscoveryJob",
        "datasync:TagResource",
        "datasync:UntagResource",
        "datasync:UpdateStorageSystem"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/datasync:storagesystem"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/datasync:storagesystem"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "datazone:BatchDeleteLinkedTypes",
         "datazone:BatchPutLinkedTypes",
         "datazone:DeleteDomain",
         "datazone:GetDomain",
         "datazone:ListLinkedTypes",
         "datazone:ListTagsForResource",
         "datazone:TagResource",
         "datazone:UntagResource",
         "datazone:UpdateDomain"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "datazone:BatchDeleteLinkedTypes",
        "datazone:BatchPutLinkedTypes",
        "datazone:DeleteDomain",
        "datazone:GetDomain",
        "datazone:ListLinkedTypes",
        "datazone:ListTagsForResource",
        "datazone:TagResource",
        "datazone:UntagResource",
        "datazone:UpdateDomain"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/datazone:domain"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/datazone:domain"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dax:BatchGetItem",
         "dax:BatchWriteItem",
         "dax:ConditionCheckItem",
         "dax:CreateCluster",
         "dax:DecreaseReplicationFactor",
         "dax:DeleteCluster",
         "dax:DeleteItem",
         "dax:DescribeClusters",
         "dax:GetItem",
         "dax:IncreaseReplicationFactor",
         "dax:ListTags",
         "dax:PutItem",
         "dax:Query",
         "dax:RebootNode",
         "dax:Scan",
         "dax:TagResource",
         "dax:UntagResource",
         "dax:UpdateCluster",
         "dax:UpdateItem"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dax:BatchGetItem",
        "dax:BatchWriteItem",
        "dax:ConditionCheckItem",
        "dax:CreateCluster",
        "dax:DecreaseReplicationFactor",
        "dax:DeleteCluster",
        "dax:DeleteItem",
        "dax:DescribeClusters",
        "dax:GetItem",
        "dax:IncreaseReplicationFactor",
        "dax:ListTags",
        "dax:PutItem",
        "dax:Query",
        "dax:RebootNode",
        "dax:Scan",
        "dax:TagResource",
        "dax:UntagResource",
        "dax:UpdateCluster",
        "dax:UpdateItem"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dax:application"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dax:application"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "deadline:AssociateMemberToFarm",
         "deadline:CreateFarm",
         "deadline:CreateLimit",
         "deadline:CreateQueueLimitAssociation",
         "deadline:CreateStorageProfile",
         "deadline:DeleteFarm",
         "deadline:DeleteLimit",
         "deadline:DeleteQueueLimitAssociation",
         "deadline:DeleteStorageProfile",
         "deadline:DisassociateMemberFromFarm",
         "deadline:GetFarm",
         "deadline:GetLimit",
         "deadline:GetQueueLimitAssociation",
         "deadline:GetSessionsStatisticsAggregation",
         "deadline:GetStorageProfile",
         "deadline:ListFarmMembers",
         "deadline:ListFarms",
         "deadline:ListLimits",
         "deadline:ListQueueFleetAssociations",
         "deadline:ListQueueLimitAssociations",
         "deadline:ListStorageProfiles",
         "deadline:ListTagsForResource",
         "deadline:TagResource",
         "deadline:UntagResource",
         "deadline:UpdateFarm",
         "deadline:UpdateLimit",
         "deadline:UpdateQueueLimitAssociation",
         "deadline:UpdateStorageProfile"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "deadline:AssociateMemberToFarm",
        "deadline:CreateFarm",
        "deadline:CreateLimit",
        "deadline:CreateQueueLimitAssociation",
        "deadline:CreateStorageProfile",
        "deadline:DeleteFarm",
        "deadline:DeleteLimit",
        "deadline:DeleteQueueLimitAssociation",
        "deadline:DeleteStorageProfile",
        "deadline:DisassociateMemberFromFarm",
        "deadline:GetFarm",
        "deadline:GetLimit",
        "deadline:GetQueueLimitAssociation",
        "deadline:GetSessionsStatisticsAggregation",
        "deadline:GetStorageProfile",
        "deadline:ListFarmMembers",
        "deadline:ListFarms",
        "deadline:ListLimits",
        "deadline:ListQueueFleetAssociations",
        "deadline:ListQueueLimitAssociations",
        "deadline:ListStorageProfiles",
        "deadline:ListTagsForResource",
        "deadline:TagResource",
        "deadline:UntagResource",
        "deadline:UpdateFarm",
        "deadline:UpdateLimit",
        "deadline:UpdateQueueLimitAssociation",
        "deadline:UpdateStorageProfile"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/deadline:farm"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/deadline:farm"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "deadline:AssociateMemberToFleet",
         "deadline:AssumeFleetRoleForRead",
         "deadline:CreateFleet",
         "deadline:CreateQueueFleetAssociation",
         "deadline:DeleteFleet",
         "deadline:DeleteQueueFleetAssociation",
         "deadline:DisassociateMemberFromFleet",
         "deadline:GetFleet",
         "deadline:GetQueueFleetAssociation",
         "deadline:GetSessionsStatisticsAggregation",
         "deadline:ListFleetMembers",
         "deadline:ListFleets",
         "deadline:ListQueueFleetAssociations",
         "deadline:ListTagsForResource",
         "deadline:SearchWorkers",
         "deadline:StartSessionsStatisticsAggregation",
         "deadline:TagResource",
         "deadline:UntagResource",
         "deadline:UpdateFleet",
         "deadline:UpdateQueueFleetAssociation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "deadline:AssociateMemberToFleet",
        "deadline:AssumeFleetRoleForRead",
        "deadline:CreateFleet",
        "deadline:CreateQueueFleetAssociation",
        "deadline:DeleteFleet",
        "deadline:DeleteQueueFleetAssociation",
        "deadline:DisassociateMemberFromFleet",
        "deadline:GetFleet",
        "deadline:GetQueueFleetAssociation",
        "deadline:GetSessionsStatisticsAggregation",
        "deadline:ListFleetMembers",
        "deadline:ListFleets",
        "deadline:ListQueueFleetAssociations",
        "deadline:ListTagsForResource",
        "deadline:SearchWorkers",
        "deadline:StartSessionsStatisticsAggregation",
        "deadline:TagResource",
        "deadline:UntagResource",
        "deadline:UpdateFleet",
        "deadline:UpdateQueueFleetAssociation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/deadline:fleet"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/deadline:fleet"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "deadline:AssociateMemberToJob",
         "deadline:CopyJobTemplate",
         "deadline:CreateJob",
         "deadline:DisassociateMemberFromJob",
         "deadline:GetJob",
         "deadline:GetJobTemplate",
         "deadline:GetSession",
         "deadline:GetSessionAction",
         "deadline:GetStep",
         "deadline:GetTask",
         "deadline:ListJobMembers",
         "deadline:ListJobParameterDefinitions",
         "deadline:ListJobs",
         "deadline:ListSessionActions",
         "deadline:ListSessions",
         "deadline:ListStepConsumers",
         "deadline:ListStepDependencies",
         "deadline:ListSteps",
         "deadline:ListTasks",
         "deadline:SearchSteps",
         "deadline:SearchTasks",
         "deadline:UpdateJob",
         "deadline:UpdateSession",
         "deadline:UpdateStep",
         "deadline:UpdateTask"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "deadline:AssociateMemberToJob",
        "deadline:CopyJobTemplate",
        "deadline:CreateJob",
        "deadline:DisassociateMemberFromJob",
        "deadline:GetJob",
        "deadline:GetJobTemplate",
        "deadline:GetSession",
        "deadline:GetSessionAction",
        "deadline:GetStep",
        "deadline:GetTask",
        "deadline:ListJobMembers",
        "deadline:ListJobParameterDefinitions",
        "deadline:ListJobs",
        "deadline:ListSessionActions",
        "deadline:ListSessions",
        "deadline:ListStepConsumers",
        "deadline:ListStepDependencies",
        "deadline:ListSteps",
        "deadline:ListTasks",
        "deadline:SearchSteps",
        "deadline:SearchTasks",
        "deadline:UpdateJob",
        "deadline:UpdateSession",
        "deadline:UpdateStep",
        "deadline:UpdateTask"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/deadline:job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/deadline:job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "deadline:AssociateMemberToQueue",
         "deadline:AssumeQueueRoleForRead",
         "deadline:AssumeQueueRoleForUser",
         "deadline:AssumeQueueRoleForWorker",
         "deadline:CreateQueue",
         "deadline:CreateQueueEnvironment",
         "deadline:CreateQueueFleetAssociation",
         "deadline:CreateQueueLimitAssociation",
         "deadline:DeleteQueue",
         "deadline:DeleteQueueEnvironment",
         "deadline:DeleteQueueFleetAssociation",
         "deadline:DeleteQueueLimitAssociation",
         "deadline:DisassociateMemberFromQueue",
         "deadline:GetQueue",
         "deadline:GetQueueEnvironment",
         "deadline:GetQueueFleetAssociation",
         "deadline:GetQueueLimitAssociation",
         "deadline:GetSessionsStatisticsAggregation",
         "deadline:GetStorageProfileForQueue",
         "deadline:ListQueueEnvironments",
         "deadline:ListQueueFleetAssociations",
         "deadline:ListQueueLimitAssociations",
         "deadline:ListQueueMembers",
         "deadline:ListQueues",
         "deadline:ListStorageProfilesForQueue",
         "deadline:ListTagsForResource",
         "deadline:SearchJobs",
         "deadline:SearchSteps",
         "deadline:SearchTasks",
         "deadline:StartSessionsStatisticsAggregation",
         "deadline:TagResource",
         "deadline:UntagResource",
         "deadline:UpdateQueue",
         "deadline:UpdateQueueEnvironment",
         "deadline:UpdateQueueFleetAssociation",
         "deadline:UpdateQueueLimitAssociation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "deadline:AssociateMemberToQueue",
        "deadline:AssumeQueueRoleForRead",
        "deadline:AssumeQueueRoleForUser",
        "deadline:AssumeQueueRoleForWorker",
        "deadline:CreateQueue",
        "deadline:CreateQueueEnvironment",
        "deadline:CreateQueueFleetAssociation",
        "deadline:CreateQueueLimitAssociation",
        "deadline:DeleteQueue",
        "deadline:DeleteQueueEnvironment",
        "deadline:DeleteQueueFleetAssociation",
        "deadline:DeleteQueueLimitAssociation",
        "deadline:DisassociateMemberFromQueue",
        "deadline:GetQueue",
        "deadline:GetQueueEnvironment",
        "deadline:GetQueueFleetAssociation",
        "deadline:GetQueueLimitAssociation",
        "deadline:GetSessionsStatisticsAggregation",
        "deadline:GetStorageProfileForQueue",
        "deadline:ListQueueEnvironments",
        "deadline:ListQueueFleetAssociations",
        "deadline:ListQueueLimitAssociations",
        "deadline:ListQueueMembers",
        "deadline:ListQueues",
        "deadline:ListStorageProfilesForQueue",
        "deadline:ListTagsForResource",
        "deadline:SearchJobs",
        "deadline:SearchSteps",
        "deadline:SearchTasks",
        "deadline:StartSessionsStatisticsAggregation",
        "deadline:TagResource",
        "deadline:UntagResource",
        "deadline:UpdateQueue",
        "deadline:UpdateQueueEnvironment",
        "deadline:UpdateQueueFleetAssociation",
        "deadline:UpdateQueueLimitAssociation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/deadline:queue"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/deadline:queue"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "deadline:AssumeFleetRoleForWorker",
         "deadline:AssumeQueueRoleForWorker",
         "deadline:BatchGetJobEntity",
         "deadline:CreateWorker",
         "deadline:DeleteWorker",
         "deadline:GetWorker",
         "deadline:ListSessionsForWorker",
         "deadline:ListWorkers",
         "deadline:UpdateWorker",
         "deadline:UpdateWorkerSchedule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "deadline:AssumeFleetRoleForWorker",
        "deadline:AssumeQueueRoleForWorker",
        "deadline:BatchGetJobEntity",
        "deadline:CreateWorker",
        "deadline:DeleteWorker",
        "deadline:GetWorker",
        "deadline:ListSessionsForWorker",
        "deadline:ListWorkers",
        "deadline:UpdateWorker",
        "deadline:UpdateWorkerSchedule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/deadline:worker"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/deadline:worker"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "deadline:CreateBudget",
         "deadline:DeleteBudget",
         "deadline:GetBudget",
         "deadline:ListBudgets",
         "deadline:UpdateBudget"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "deadline:CreateBudget",
        "deadline:DeleteBudget",
        "deadline:GetBudget",
        "deadline:ListBudgets",
        "deadline:UpdateBudget"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/deadline:budget"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/deadline:budget"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "deadline:CreateLicenseEndpoint",
         "deadline:DeleteLicenseEndpoint",
         "deadline:GetLicenseEndpoint",
         "deadline:ListLicenseEndpoints",
         "deadline:ListTagsForResource",
         "deadline:TagResource",
         "deadline:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "deadline:CreateLicenseEndpoint",
        "deadline:DeleteLicenseEndpoint",
        "deadline:GetLicenseEndpoint",
        "deadline:ListLicenseEndpoints",
        "deadline:ListTagsForResource",
        "deadline:TagResource",
        "deadline:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/deadline:license-endpoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/deadline:license-endpoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "deadline:CreateMonitor",
         "deadline:DeleteMonitor",
         "deadline:GetApplicationVersion",
         "deadline:GetMonitor",
         "deadline:ListMonitors",
         "deadline:UpdateMonitor"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "deadline:CreateMonitor",
        "deadline:DeleteMonitor",
        "deadline:GetApplicationVersion",
        "deadline:GetMonitor",
        "deadline:ListMonitors",
        "deadline:UpdateMonitor"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/deadline:monitor"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/deadline:monitor"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "deadline:DeleteMeteredProduct",
         "deadline:ListMeteredProducts",
         "deadline:PutMeteredProduct"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "deadline:DeleteMeteredProduct",
        "deadline:ListMeteredProducts",
        "deadline:PutMeteredProduct"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/deadline:metered-product"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/deadline:metered-product"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "deepcomposer:CreateAudio"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "deepcomposer:CreateAudio"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/deepcomposer:audio"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/deepcomposer:audio"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "deepcomposer:CreateComposition",
         "deepcomposer:DeleteComposition",
         "deepcomposer:GetComposition",
         "deepcomposer:ListCompositions",
         "deepcomposer:ListTagsForResource",
         "deepcomposer:TagResource",
         "deepcomposer:UntagResource",
         "deepcomposer:UpdateComposition"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "deepcomposer:CreateComposition",
        "deepcomposer:DeleteComposition",
        "deepcomposer:GetComposition",
        "deepcomposer:ListCompositions",
        "deepcomposer:ListTagsForResource",
        "deepcomposer:TagResource",
        "deepcomposer:UntagResource",
        "deepcomposer:UpdateComposition"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/deepcomposer:composition"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/deepcomposer:composition"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "deepcomposer:CreateModel",
         "deepcomposer:DeleteModel",
         "deepcomposer:GetModel",
         "deepcomposer:GetSampleModel",
         "deepcomposer:ListModels",
         "deepcomposer:ListSampleModels",
         "deepcomposer:ListTagsForResource",
         "deepcomposer:ListTrainingTopics",
         "deepcomposer:TagResource",
         "deepcomposer:UntagResource",
         "deepcomposer:UpdateModel"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "deepcomposer:CreateModel",
        "deepcomposer:DeleteModel",
        "deepcomposer:GetModel",
        "deepcomposer:GetSampleModel",
        "deepcomposer:ListModels",
        "deepcomposer:ListSampleModels",
        "deepcomposer:ListTagsForResource",
        "deepcomposer:ListTrainingTopics",
        "deepcomposer:TagResource",
        "deepcomposer:UntagResource",
        "deepcomposer:UpdateModel"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/deepcomposer:model"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/deepcomposer:model"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "deeplens:BatchGetDevice",
         "deeplens:DeployProject",
         "deeplens:DeregisterDevice",
         "deeplens:GetDevice",
         "deeplens:RemoveProject"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "deeplens:BatchGetDevice",
        "deeplens:DeployProject",
        "deeplens:DeregisterDevice",
        "deeplens:GetDevice",
        "deeplens:RemoveProject"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/deeplens:device"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/deeplens:device"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "deeplens:BatchGetModel",
         "deeplens:DeleteModel",
         "deeplens:GetModel"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "deeplens:BatchGetModel",
        "deeplens:DeleteModel",
        "deeplens:GetModel"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/deeplens:model"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/deeplens:model"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "deeplens:BatchGetProject",
         "deeplens:DeleteProject",
         "deeplens:DeployProject",
         "deeplens:GetProject",
         "deeplens:UpdateProject"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "deeplens:BatchGetProject",
        "deeplens:DeleteProject",
        "deeplens:DeployProject",
        "deeplens:GetProject",
        "deeplens:UpdateProject"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/deeplens:project"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/deeplens:project"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "deepracer:AddLeaderboardAccessPermission",
         "deepracer:CreateLeaderboardAccessToken",
         "deepracer:CreateLeaderboardSubmission",
         "deepracer:DeleteLeaderboard",
         "deepracer:EditLeaderboard",
         "deepracer:GetLatestUserSubmission",
         "deepracer:GetLeaderboard",
         "deepracer:GetPrivateLeaderboard",
         "deepracer:GetRankedUserSubmission",
         "deepracer:ListLeaderboardEvaluations",
         "deepracer:ListLeaderboardSubmissions",
         "deepracer:ListPrivateLeaderboardParticipants",
         "deepracer:ListTagsForResource",
         "deepracer:PerformLeaderboardOperation",
         "deepracer:RemoveLeaderboardAccessPermission",
         "deepracer:TagResource",
         "deepracer:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "deepracer:AddLeaderboardAccessPermission",
        "deepracer:CreateLeaderboardAccessToken",
        "deepracer:CreateLeaderboardSubmission",
        "deepracer:DeleteLeaderboard",
        "deepracer:EditLeaderboard",
        "deepracer:GetLatestUserSubmission",
        "deepracer:GetLeaderboard",
        "deepracer:GetPrivateLeaderboard",
        "deepracer:GetRankedUserSubmission",
        "deepracer:ListLeaderboardEvaluations",
        "deepracer:ListLeaderboardSubmissions",
        "deepracer:ListPrivateLeaderboardParticipants",
        "deepracer:ListTagsForResource",
        "deepracer:PerformLeaderboardOperation",
        "deepracer:RemoveLeaderboardAccessPermission",
        "deepracer:TagResource",
        "deepracer:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/deepracer:leaderboard"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/deepracer:leaderboard"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "deepracer:CloneReinforcementLearningModel",
         "deepracer:CreateLeaderboardSubmission",
         "deepracer:DeleteModel",
         "deepracer:GetAssetUrl",
         "deepracer:GetModel",
         "deepracer:ListEvaluations",
         "deepracer:ListTagsForResource",
         "deepracer:ListTrainingJobs",
         "deepracer:StartEvaluation",
         "deepracer:StopTrainingReinforcementLearningModel",
         "deepracer:TagResource",
         "deepracer:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "deepracer:CloneReinforcementLearningModel",
        "deepracer:CreateLeaderboardSubmission",
        "deepracer:DeleteModel",
        "deepracer:GetAssetUrl",
        "deepracer:GetModel",
        "deepracer:ListEvaluations",
        "deepracer:ListTagsForResource",
        "deepracer:ListTrainingJobs",
        "deepracer:StartEvaluation",
        "deepracer:StopTrainingReinforcementLearningModel",
        "deepracer:TagResource",
        "deepracer:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/deepracer:reinforcement_learning_model"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/deepracer:reinforcement_learning_model"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "deepracer:CloneReinforcementLearningModel",
         "deepracer:CreateReinforcementLearningModel",
         "deepracer:GetTrack",
         "deepracer:StartEvaluation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "deepracer:CloneReinforcementLearningModel",
        "deepracer:CreateReinforcementLearningModel",
        "deepracer:GetTrack",
        "deepracer:StartEvaluation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/deepracer:track"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/deepracer:track"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "deepracer:GetCar",
         "deepracer:ListTagsForResource",
         "deepracer:TagResource",
         "deepracer:UntagResource",
         "deepracer:UpdateCar"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "deepracer:GetCar",
        "deepracer:ListTagsForResource",
        "deepracer:TagResource",
        "deepracer:UntagResource",
        "deepracer:UpdateCar"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/deepracer:car"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/deepracer:car"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "deepracer:GetEvaluation",
         "deepracer:ListTagsForResource",
         "deepracer:StopEvaluation",
         "deepracer:TagResource",
         "deepracer:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "deepracer:GetEvaluation",
        "deepracer:ListTagsForResource",
        "deepracer:StopEvaluation",
        "deepracer:TagResource",
        "deepracer:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/deepracer:evaluation_job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/deepracer:evaluation_job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "deepracer:GetTrainingJob",
         "deepracer:ListTagsForResource",
         "deepracer:TagResource",
         "deepracer:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "deepracer:GetTrainingJob",
        "deepracer:ListTagsForResource",
        "deepracer:TagResource",
        "deepracer:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/deepracer:training_job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/deepracer:training_job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "deepracer:ListTagsForResource",
         "deepracer:TagResource",
         "deepracer:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "deepracer:ListTagsForResource",
        "deepracer:TagResource",
        "deepracer:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/deepracer:leaderboard_evaluation_job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/deepracer:leaderboard_evaluation_job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "detective:AcceptInvitation",
         "detective:BatchGetGraphMemberDatasources",
         "detective:CreateMembers",
         "detective:DeleteGraph",
         "detective:DeleteMembers",
         "detective:DescribeOrganizationConfiguration",
         "detective:DisassociateMembership",
         "detective:GetFreeTrialEligibility",
         "detective:GetGraphIngestState",
         "detective:GetInvestigation",
         "detective:GetMembers",
         "detective:GetUsageInformation",
         "detective:InvokeAssistant",
         "detective:ListDatasourcePackages",
         "detective:ListHighDegreeEntities",
         "detective:ListIndicators",
         "detective:ListInvestigations",
         "detective:ListMembers",
         "detective:ListTagsForResource",
         "detective:RejectInvitation",
         "detective:SearchGraph",
         "detective:StartInvestigation",
         "detective:StartMonitoringMember",
         "detective:TagResource",
         "detective:UntagResource",
         "detective:UpdateDatasourcePackages",
         "detective:UpdateInvestigationState",
         "detective:UpdateOrganizationConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "detective:AcceptInvitation",
        "detective:BatchGetGraphMemberDatasources",
        "detective:CreateMembers",
        "detective:DeleteGraph",
        "detective:DeleteMembers",
        "detective:DescribeOrganizationConfiguration",
        "detective:DisassociateMembership",
        "detective:GetFreeTrialEligibility",
        "detective:GetGraphIngestState",
        "detective:GetInvestigation",
        "detective:GetMembers",
        "detective:GetUsageInformation",
        "detective:InvokeAssistant",
        "detective:ListDatasourcePackages",
        "detective:ListHighDegreeEntities",
        "detective:ListIndicators",
        "detective:ListInvestigations",
        "detective:ListMembers",
        "detective:ListTagsForResource",
        "detective:RejectInvitation",
        "detective:SearchGraph",
        "detective:StartInvestigation",
        "detective:StartMonitoringMember",
        "detective:TagResource",
        "detective:UntagResource",
        "detective:UpdateDatasourcePackages",
        "detective:UpdateInvestigationState",
        "detective:UpdateOrganizationConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/detective:Graph"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/detective:Graph"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "devicefarm:CreateDevicePool",
         "devicefarm:CreateNetworkProfile",
         "devicefarm:CreateRemoteAccessSession",
         "devicefarm:CreateUpload",
         "devicefarm:DeleteProject",
         "devicefarm:GetProject",
         "devicefarm:ListDevicePools",
         "devicefarm:ListNetworkProfiles",
         "devicefarm:ListRemoteAccessSessions",
         "devicefarm:ListRuns",
         "devicefarm:ListTagsForResource",
         "devicefarm:ListUploads",
         "devicefarm:ScheduleRun",
         "devicefarm:TagResource",
         "devicefarm:UntagResource",
         "devicefarm:UpdateProject"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "devicefarm:CreateDevicePool",
        "devicefarm:CreateNetworkProfile",
        "devicefarm:CreateRemoteAccessSession",
        "devicefarm:CreateUpload",
        "devicefarm:DeleteProject",
        "devicefarm:GetProject",
        "devicefarm:ListDevicePools",
        "devicefarm:ListNetworkProfiles",
        "devicefarm:ListRemoteAccessSessions",
        "devicefarm:ListRuns",
        "devicefarm:ListTagsForResource",
        "devicefarm:ListUploads",
        "devicefarm:ScheduleRun",
        "devicefarm:TagResource",
        "devicefarm:UntagResource",
        "devicefarm:UpdateProject"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/devicefarm:project"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/devicefarm:project"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "devicefarm:CreateRemoteAccessSession",
         "devicefarm:GetDevice",
         "devicefarm:ListTagsForResource",
         "devicefarm:TagResource",
         "devicefarm:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "devicefarm:CreateRemoteAccessSession",
        "devicefarm:GetDevice",
        "devicefarm:ListTagsForResource",
        "devicefarm:TagResource",
        "devicefarm:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/devicefarm:device"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/devicefarm:device"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "devicefarm:CreateRemoteAccessSession",
         "devicefarm:GetDeviceInstance",
         "devicefarm:ListTagsForResource",
         "devicefarm:TagResource",
         "devicefarm:UntagResource",
         "devicefarm:UpdateDeviceInstance"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "devicefarm:CreateRemoteAccessSession",
        "devicefarm:GetDeviceInstance",
        "devicefarm:ListTagsForResource",
        "devicefarm:TagResource",
        "devicefarm:UntagResource",
        "devicefarm:UpdateDeviceInstance"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/devicefarm:deviceinstance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/devicefarm:deviceinstance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "devicefarm:CreateRemoteAccessSession",
         "devicefarm:DeleteUpload",
         "devicefarm:GetDevicePoolCompatibility",
         "devicefarm:GetUpload",
         "devicefarm:InstallToRemoteAccessSession",
         "devicefarm:ScheduleRun",
         "devicefarm:UpdateUpload"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "devicefarm:CreateRemoteAccessSession",
        "devicefarm:DeleteUpload",
        "devicefarm:GetDevicePoolCompatibility",
        "devicefarm:GetUpload",
        "devicefarm:InstallToRemoteAccessSession",
        "devicefarm:ScheduleRun",
        "devicefarm:UpdateUpload"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/devicefarm:upload"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/devicefarm:upload"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "devicefarm:CreateTestGridUrl",
         "devicefarm:DeleteTestGridProject",
         "devicefarm:GetTestGridProject",
         "devicefarm:GetTestGridSession",
         "devicefarm:ListTagsForResource",
         "devicefarm:ListTestGridSessions",
         "devicefarm:TagResource",
         "devicefarm:UntagResource",
         "devicefarm:UpdateTestGridProject"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "devicefarm:CreateTestGridUrl",
        "devicefarm:DeleteTestGridProject",
        "devicefarm:GetTestGridProject",
        "devicefarm:GetTestGridSession",
        "devicefarm:ListTagsForResource",
        "devicefarm:ListTestGridSessions",
        "devicefarm:TagResource",
        "devicefarm:UntagResource",
        "devicefarm:UpdateTestGridProject"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/devicefarm:testgrid-project"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/devicefarm:testgrid-project"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "devicefarm:DeleteDevicePool",
         "devicefarm:GetDevicePool",
         "devicefarm:GetDevicePoolCompatibility",
         "devicefarm:ListTagsForResource",
         "devicefarm:ScheduleRun",
         "devicefarm:TagResource",
         "devicefarm:UntagResource",
         "devicefarm:UpdateDevicePool"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "devicefarm:DeleteDevicePool",
        "devicefarm:GetDevicePool",
        "devicefarm:GetDevicePoolCompatibility",
        "devicefarm:ListTagsForResource",
        "devicefarm:ScheduleRun",
        "devicefarm:TagResource",
        "devicefarm:UntagResource",
        "devicefarm:UpdateDevicePool"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/devicefarm:devicepool"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/devicefarm:devicepool"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "devicefarm:DeleteInstanceProfile",
         "devicefarm:GetInstanceProfile",
         "devicefarm:ListTagsForResource",
         "devicefarm:TagResource",
         "devicefarm:UntagResource",
         "devicefarm:UpdateDeviceInstance",
         "devicefarm:UpdateInstanceProfile"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "devicefarm:DeleteInstanceProfile",
        "devicefarm:GetInstanceProfile",
        "devicefarm:ListTagsForResource",
        "devicefarm:TagResource",
        "devicefarm:UntagResource",
        "devicefarm:UpdateDeviceInstance",
        "devicefarm:UpdateInstanceProfile"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/devicefarm:instanceprofile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/devicefarm:instanceprofile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "devicefarm:DeleteNetworkProfile",
         "devicefarm:GetNetworkProfile",
         "devicefarm:ListTagsForResource",
         "devicefarm:TagResource",
         "devicefarm:UntagResource",
         "devicefarm:UpdateNetworkProfile"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "devicefarm:DeleteNetworkProfile",
        "devicefarm:GetNetworkProfile",
        "devicefarm:ListTagsForResource",
        "devicefarm:TagResource",
        "devicefarm:UntagResource",
        "devicefarm:UpdateNetworkProfile"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/devicefarm:networkprofile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/devicefarm:networkprofile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "devicefarm:DeleteRemoteAccessSession",
         "devicefarm:GetRemoteAccessSession",
         "devicefarm:InstallToRemoteAccessSession",
         "devicefarm:ListTagsForResource",
         "devicefarm:StopRemoteAccessSession",
         "devicefarm:TagResource",
         "devicefarm:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "devicefarm:DeleteRemoteAccessSession",
        "devicefarm:GetRemoteAccessSession",
        "devicefarm:InstallToRemoteAccessSession",
        "devicefarm:ListTagsForResource",
        "devicefarm:StopRemoteAccessSession",
        "devicefarm:TagResource",
        "devicefarm:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/devicefarm:session"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/devicefarm:session"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "devicefarm:DeleteRun",
         "devicefarm:GetRun",
         "devicefarm:ListArtifacts",
         "devicefarm:ListJobs",
         "devicefarm:ListTagsForResource",
         "devicefarm:ListUniqueProblems",
         "devicefarm:StopRun",
         "devicefarm:TagResource",
         "devicefarm:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "devicefarm:DeleteRun",
        "devicefarm:GetRun",
        "devicefarm:ListArtifacts",
        "devicefarm:ListJobs",
        "devicefarm:ListTagsForResource",
        "devicefarm:ListUniqueProblems",
        "devicefarm:StopRun",
        "devicefarm:TagResource",
        "devicefarm:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/devicefarm:run"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/devicefarm:run"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "devicefarm:DeleteVPCEConfiguration",
         "devicefarm:GetVPCEConfiguration",
         "devicefarm:ListTagsForResource",
         "devicefarm:TagResource",
         "devicefarm:UntagResource",
         "devicefarm:UpdateVPCEConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "devicefarm:DeleteVPCEConfiguration",
        "devicefarm:GetVPCEConfiguration",
        "devicefarm:ListTagsForResource",
        "devicefarm:TagResource",
        "devicefarm:UntagResource",
        "devicefarm:UpdateVPCEConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/devicefarm:vpceconfiguration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/devicefarm:vpceconfiguration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "devicefarm:GetJob",
         "devicefarm:ListArtifacts",
         "devicefarm:ListSamples",
         "devicefarm:ListSuites",
         "devicefarm:StopJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "devicefarm:GetJob",
        "devicefarm:ListArtifacts",
        "devicefarm:ListSamples",
        "devicefarm:ListSuites",
        "devicefarm:StopJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/devicefarm:job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/devicefarm:job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "devicefarm:GetSuite",
         "devicefarm:ListArtifacts",
         "devicefarm:ListTests"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "devicefarm:GetSuite",
        "devicefarm:ListArtifacts",
        "devicefarm:ListTests"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/devicefarm:suite"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/devicefarm:suite"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "devicefarm:GetTest",
         "devicefarm:ListArtifacts"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "devicefarm:GetTest",
        "devicefarm:ListArtifacts"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/devicefarm:test"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/devicefarm:test"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "devicefarm:GetTestGridSession",
         "devicefarm:ListTagsForResource",
         "devicefarm:ListTestGridSessionActions",
         "devicefarm:ListTestGridSessionArtifacts",
         "devicefarm:TagResource",
         "devicefarm:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "devicefarm:GetTestGridSession",
        "devicefarm:ListTagsForResource",
        "devicefarm:ListTestGridSessionActions",
        "devicefarm:ListTestGridSessionArtifacts",
        "devicefarm:TagResource",
        "devicefarm:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/devicefarm:testgrid-session"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/devicefarm:testgrid-session"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "devops-guru:AddNotificationChannel",
         "devops-guru:RemoveNotificationChannel"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "devops-guru:AddNotificationChannel",
        "devops-guru:RemoveNotificationChannel"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/devops-guru:topic"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/devops-guru:topic"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "directconnect:AcceptDirectConnectGatewayAssociationProposal",
         "directconnect:CreateDirectConnectGatewayAssociation",
         "directconnect:CreateDirectConnectGatewayAssociationProposal",
         "directconnect:DeleteDirectConnectGateway",
         "directconnect:DeleteDirectConnectGatewayAssociation",
         "directconnect:DescribeDirectConnectGatewayAssociationProposals",
         "directconnect:DescribeDirectConnectGatewayAssociations",
         "directconnect:DescribeDirectConnectGatewayAttachments",
         "directconnect:DescribeDirectConnectGateways",
         "directconnect:UpdateDirectConnectGateway"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "directconnect:AcceptDirectConnectGatewayAssociationProposal",
        "directconnect:CreateDirectConnectGatewayAssociation",
        "directconnect:CreateDirectConnectGatewayAssociationProposal",
        "directconnect:DeleteDirectConnectGateway",
        "directconnect:DeleteDirectConnectGatewayAssociation",
        "directconnect:DescribeDirectConnectGatewayAssociationProposals",
        "directconnect:DescribeDirectConnectGatewayAssociations",
        "directconnect:DescribeDirectConnectGatewayAttachments",
        "directconnect:DescribeDirectConnectGateways",
        "directconnect:UpdateDirectConnectGateway"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/directconnect:dx-gateway"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/directconnect:dx-gateway"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "directconnect:AllocateConnectionOnInterconnect",
         "directconnect:AllocateHostedConnection",
         "directconnect:AllocatePrivateVirtualInterface",
         "directconnect:AllocatePublicVirtualInterface",
         "directconnect:AllocateTransitVirtualInterface",
         "directconnect:AssociateConnectionWithLag",
         "directconnect:AssociateHostedConnection",
         "directconnect:AssociateHostedConnection",
         "directconnect:AssociateMacSecKey",
         "directconnect:AssociateVirtualInterface",
         "directconnect:ConfirmConnection",
         "directconnect:CreateLag",
         "directconnect:CreatePrivateVirtualInterface",
         "directconnect:CreatePublicVirtualInterface",
         "directconnect:CreateTransitVirtualInterface",
         "directconnect:DeleteConnection",
         "directconnect:DeleteInterconnect",
         "directconnect:DescribeConnectionLoa",
         "directconnect:DescribeConnections",
         "directconnect:DescribeConnectionsOnInterconnect",
         "directconnect:DescribeHostedConnections",
         "directconnect:DescribeInterconnectLoa",
         "directconnect:DescribeInterconnects",
         "directconnect:DescribeLoa",
         "directconnect:DescribeTags",
         "directconnect:DescribeVirtualInterfaces",
         "directconnect:DisassociateConnectionFromLag",
         "directconnect:DisassociateMacSecKey",
         "directconnect:TagResource",
         "directconnect:UntagResource",
         "directconnect:UpdateConnection"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "directconnect:AllocateConnectionOnInterconnect",
        "directconnect:AllocateHostedConnection",
        "directconnect:AllocatePrivateVirtualInterface",
        "directconnect:AllocatePublicVirtualInterface",
        "directconnect:AllocateTransitVirtualInterface",
        "directconnect:AssociateConnectionWithLag",
        "directconnect:AssociateHostedConnection",
        "directconnect:AssociateHostedConnection",
        "directconnect:AssociateMacSecKey",
        "directconnect:AssociateVirtualInterface",
        "directconnect:ConfirmConnection",
        "directconnect:CreateLag",
        "directconnect:CreatePrivateVirtualInterface",
        "directconnect:CreatePublicVirtualInterface",
        "directconnect:CreateTransitVirtualInterface",
        "directconnect:DeleteConnection",
        "directconnect:DeleteInterconnect",
        "directconnect:DescribeConnectionLoa",
        "directconnect:DescribeConnections",
        "directconnect:DescribeConnectionsOnInterconnect",
        "directconnect:DescribeHostedConnections",
        "directconnect:DescribeInterconnectLoa",
        "directconnect:DescribeInterconnects",
        "directconnect:DescribeLoa",
        "directconnect:DescribeTags",
        "directconnect:DescribeVirtualInterfaces",
        "directconnect:DisassociateConnectionFromLag",
        "directconnect:DisassociateMacSecKey",
        "directconnect:TagResource",
        "directconnect:UntagResource",
        "directconnect:UpdateConnection"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/directconnect:dxcon"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/directconnect:dxcon"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "directconnect:AllocateHostedConnection",
         "directconnect:AllocatePrivateVirtualInterface",
         "directconnect:AllocatePublicVirtualInterface",
         "directconnect:AllocateTransitVirtualInterface",
         "directconnect:AssociateConnectionWithLag",
         "directconnect:AssociateHostedConnection",
         "directconnect:AssociateMacSecKey",
         "directconnect:AssociateVirtualInterface",
         "directconnect:CreateConnection",
         "directconnect:CreateInterconnect",
         "directconnect:CreatePrivateVirtualInterface",
         "directconnect:CreatePublicVirtualInterface",
         "directconnect:CreateTransitVirtualInterface",
         "directconnect:DeleteLag",
         "directconnect:DescribeHostedConnections",
         "directconnect:DescribeLags",
         "directconnect:DescribeLoa",
         "directconnect:DescribeTags",
         "directconnect:DescribeVirtualInterfaces",
         "directconnect:DisassociateConnectionFromLag",
         "directconnect:DisassociateMacSecKey",
         "directconnect:TagResource",
         "directconnect:UntagResource",
         "directconnect:UpdateLag"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "directconnect:AllocateHostedConnection",
        "directconnect:AllocatePrivateVirtualInterface",
        "directconnect:AllocatePublicVirtualInterface",
        "directconnect:AllocateTransitVirtualInterface",
        "directconnect:AssociateConnectionWithLag",
        "directconnect:AssociateHostedConnection",
        "directconnect:AssociateMacSecKey",
        "directconnect:AssociateVirtualInterface",
        "directconnect:CreateConnection",
        "directconnect:CreateInterconnect",
        "directconnect:CreatePrivateVirtualInterface",
        "directconnect:CreatePublicVirtualInterface",
        "directconnect:CreateTransitVirtualInterface",
        "directconnect:DeleteLag",
        "directconnect:DescribeHostedConnections",
        "directconnect:DescribeLags",
        "directconnect:DescribeLoa",
        "directconnect:DescribeTags",
        "directconnect:DescribeVirtualInterfaces",
        "directconnect:DisassociateConnectionFromLag",
        "directconnect:DisassociateMacSecKey",
        "directconnect:TagResource",
        "directconnect:UntagResource",
        "directconnect:UpdateLag"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/directconnect:dxlag"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/directconnect:dxlag"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "directconnect:AssociateVirtualInterface",
         "directconnect:ConfirmPrivateVirtualInterface",
         "directconnect:ConfirmPublicVirtualInterface",
         "directconnect:ConfirmTransitVirtualInterface",
         "directconnect:CreateBGPPeer",
         "directconnect:DeleteBGPPeer",
         "directconnect:DeleteVirtualInterface",
         "directconnect:DescribeRouterConfiguration",
         "directconnect:DescribeTags",
         "directconnect:DescribeVirtualInterfaces",
         "directconnect:ListVirtualInterfaceTestHistory",
         "directconnect:StartBgpFailoverTest",
         "directconnect:StopBgpFailoverTest",
         "directconnect:TagResource",
         "directconnect:UntagResource",
         "directconnect:UpdateVirtualInterfaceAttributes"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "directconnect:AssociateVirtualInterface",
        "directconnect:ConfirmPrivateVirtualInterface",
        "directconnect:ConfirmPublicVirtualInterface",
        "directconnect:ConfirmTransitVirtualInterface",
        "directconnect:CreateBGPPeer",
        "directconnect:DeleteBGPPeer",
        "directconnect:DeleteVirtualInterface",
        "directconnect:DescribeRouterConfiguration",
        "directconnect:DescribeTags",
        "directconnect:DescribeVirtualInterfaces",
        "directconnect:ListVirtualInterfaceTestHistory",
        "directconnect:StartBgpFailoverTest",
        "directconnect:StopBgpFailoverTest",
        "directconnect:TagResource",
        "directconnect:UntagResource",
        "directconnect:UpdateVirtualInterfaceAttributes"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/directconnect:dxvif"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/directconnect:dxvif"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dlm:DeleteLifecyclePolicy",
         "dlm:GetLifecyclePolicy",
         "dlm:ListTagsForResource",
         "dlm:TagResource",
         "dlm:UntagResource",
         "dlm:UpdateLifecyclePolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dlm:DeleteLifecyclePolicy",
        "dlm:GetLifecyclePolicy",
        "dlm:ListTagsForResource",
        "dlm:TagResource",
        "dlm:UntagResource",
        "dlm:UpdateLifecyclePolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dlm:policy"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dlm:policy"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dms:AddTagsToResource",
         "dms:DeleteCertificate",
         "dms:ListTagsForResource",
         "dms:ModifyEndpoint",
         "dms:RemoveTagsFromResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dms:AddTagsToResource",
        "dms:DeleteCertificate",
        "dms:ListTagsForResource",
        "dms:ModifyEndpoint",
        "dms:RemoveTagsFromResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dms:Certificate"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dms:Certificate"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dms:AddTagsToResource",
         "dms:DeleteDataMigration",
         "dms:ListTagsForResource",
         "dms:ModifyDataMigration",
         "dms:RemoveTagsFromResource",
         "dms:StartDataMigration",
         "dms:StopDataMigration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dms:AddTagsToResource",
        "dms:DeleteDataMigration",
        "dms:ListTagsForResource",
        "dms:ModifyDataMigration",
        "dms:RemoveTagsFromResource",
        "dms:StartDataMigration",
        "dms:StopDataMigration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dms:DataMigration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dms:DataMigration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dms:AddTagsToResource",
         "dms:CreateMigrationProject",
         "dms:DeleteDataProvider",
         "dms:DescribeDataProviders",
         "dms:DescribeMigrationProjects",
         "dms:ListDataProviders",
         "dms:ListMigrationProjects",
         "dms:ListTagsForResource",
         "dms:ModifyDataProvider",
         "dms:RemoveTagsFromResource",
         "dms:UpdateDataProvider"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dms:AddTagsToResource",
        "dms:CreateMigrationProject",
        "dms:DeleteDataProvider",
        "dms:DescribeDataProviders",
        "dms:DescribeMigrationProjects",
        "dms:ListDataProviders",
        "dms:ListMigrationProjects",
        "dms:ListTagsForResource",
        "dms:ModifyDataProvider",
        "dms:RemoveTagsFromResource",
        "dms:UpdateDataProvider"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dms:DataProvider"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dms:DataProvider"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dms:AddTagsToResource",
         "dms:CreateReplicationConfig",
         "dms:CreateReplicationTask",
         "dms:DeleteConnection",
         "dms:DeleteEndpoint",
         "dms:DescribeRefreshSchemasStatus",
         "dms:DescribeSchemas",
         "dms:ListTagsForResource",
         "dms:ModifyEndpoint",
         "dms:RefreshSchemas",
         "dms:RemoveTagsFromResource",
         "dms:TestConnection"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dms:AddTagsToResource",
        "dms:CreateReplicationConfig",
        "dms:CreateReplicationTask",
        "dms:DeleteConnection",
        "dms:DeleteEndpoint",
        "dms:DescribeRefreshSchemasStatus",
        "dms:DescribeSchemas",
        "dms:ListTagsForResource",
        "dms:ModifyEndpoint",
        "dms:RefreshSchemas",
        "dms:RemoveTagsFromResource",
        "dms:TestConnection"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dms:Endpoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dms:Endpoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dms:AddTagsToResource",
         "dms:DeleteEventSubscription",
         "dms:ListTagsForResource",
         "dms:RemoveTagsFromResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dms:AddTagsToResource",
        "dms:DeleteEventSubscription",
        "dms:ListTagsForResource",
        "dms:RemoveTagsFromResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dms:EventSubscription"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dms:EventSubscription"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dms:AddTagsToResource",
         "dms:CreateMigrationProject",
         "dms:DeleteInstanceProfile",
         "dms:DescribeInstanceProfiles",
         "dms:DescribeMigrationProjects",
         "dms:ListInstanceProfiles",
         "dms:ListMigrationProjects",
         "dms:ListTagsForResource",
         "dms:ModifyInstanceProfile",
         "dms:RemoveTagsFromResource",
         "dms:UpdateInstanceProfile"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dms:AddTagsToResource",
        "dms:CreateMigrationProject",
        "dms:DeleteInstanceProfile",
        "dms:DescribeInstanceProfiles",
        "dms:DescribeMigrationProjects",
        "dms:ListInstanceProfiles",
        "dms:ListMigrationProjects",
        "dms:ListTagsForResource",
        "dms:ModifyInstanceProfile",
        "dms:RemoveTagsFromResource",
        "dms:UpdateInstanceProfile"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dms:InstanceProfile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dms:InstanceProfile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dms:AddTagsToResource",
         "dms:AssociateExtensionPack",
         "dms:CancelMetadataModelAssessment",
         "dms:CancelMetadataModelConversion",
         "dms:CancelMetadataModelExport",
         "dms:CreateDataMigration",
         "dms:DeleteMigrationProject",
         "dms:DescribeConversionConfiguration",
         "dms:DescribeExtensionPackAssociations",
         "dms:DescribeMetadataModelAssessments",
         "dms:DescribeMetadataModelConversions",
         "dms:DescribeMetadataModelExportsAsScript",
         "dms:DescribeMetadataModelExportsToTarget",
         "dms:DescribeMetadataModelImports",
         "dms:DescribeMigrationProjects",
         "dms:DisassociateExtensionPack",
         "dms:ExportMetadataModelAssessment",
         "dms:GetMetadataModel",
         "dms:ListExtensionPacks",
         "dms:ListMetadataModelAssessmentActionItems",
         "dms:ListMetadataModelAssessments",
         "dms:ListMetadataModelConversions",
         "dms:ListMetadataModelExports",
         "dms:ListMigrationProjects",
         "dms:ListTagsForResource",
         "dms:ModifyConversionConfiguration",
         "dms:ModifyMigrationProject",
         "dms:RemoveTagsFromResource",
         "dms:StartExtensionPackAssociation",
         "dms:StartMetadataModelAssessment",
         "dms:StartMetadataModelConversion",
         "dms:StartMetadataModelExportAsScript",
         "dms:StartMetadataModelExportAsScripts",
         "dms:StartMetadataModelExportToTarget",
         "dms:StartMetadataModelImport",
         "dms:UpdateConversionConfiguration",
         "dms:UpdateMigrationProject"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dms:AddTagsToResource",
        "dms:AssociateExtensionPack",
        "dms:CancelMetadataModelAssessment",
        "dms:CancelMetadataModelConversion",
        "dms:CancelMetadataModelExport",
        "dms:CreateDataMigration",
        "dms:DeleteMigrationProject",
        "dms:DescribeConversionConfiguration",
        "dms:DescribeExtensionPackAssociations",
        "dms:DescribeMetadataModelAssessments",
        "dms:DescribeMetadataModelConversions",
        "dms:DescribeMetadataModelExportsAsScript",
        "dms:DescribeMetadataModelExportsToTarget",
        "dms:DescribeMetadataModelImports",
        "dms:DescribeMigrationProjects",
        "dms:DisassociateExtensionPack",
        "dms:ExportMetadataModelAssessment",
        "dms:GetMetadataModel",
        "dms:ListExtensionPacks",
        "dms:ListMetadataModelAssessmentActionItems",
        "dms:ListMetadataModelAssessments",
        "dms:ListMetadataModelConversions",
        "dms:ListMetadataModelExports",
        "dms:ListMigrationProjects",
        "dms:ListTagsForResource",
        "dms:ModifyConversionConfiguration",
        "dms:ModifyMigrationProject",
        "dms:RemoveTagsFromResource",
        "dms:StartExtensionPackAssociation",
        "dms:StartMetadataModelAssessment",
        "dms:StartMetadataModelConversion",
        "dms:StartMetadataModelExportAsScript",
        "dms:StartMetadataModelExportAsScripts",
        "dms:StartMetadataModelExportToTarget",
        "dms:StartMetadataModelImport",
        "dms:UpdateConversionConfiguration",
        "dms:UpdateMigrationProject"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dms:MigrationProject"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dms:MigrationProject"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dms:AddTagsToResource",
         "dms:DeleteReplicationConfig",
         "dms:DescribeReplicationTableStatistics",
         "dms:ListTagsForResource",
         "dms:ModifyReplicationConfig",
         "dms:ReloadReplicationTables",
         "dms:RemoveTagsFromResource",
         "dms:StartReplication",
         "dms:StopReplication"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dms:AddTagsToResource",
        "dms:DeleteReplicationConfig",
        "dms:DescribeReplicationTableStatistics",
        "dms:ListTagsForResource",
        "dms:ModifyReplicationConfig",
        "dms:ReloadReplicationTables",
        "dms:RemoveTagsFromResource",
        "dms:StartReplication",
        "dms:StopReplication"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dms:ReplicationConfig"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dms:ReplicationConfig"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dms:AddTagsToResource",
         "dms:ApplyPendingMaintenanceAction",
         "dms:CreateReplicationTask",
         "dms:DeleteConnection",
         "dms:DeleteReplicationInstance",
         "dms:DescribeApplicableIndividualAssessments",
         "dms:DescribeReplicationInstanceTaskLogs",
         "dms:DescribeReplicationTaskAssessmentRuns",
         "dms:ListTagsForResource",
         "dms:ModifyReplicationInstance",
         "dms:MoveReplicationTask",
         "dms:RebootReplicationInstance",
         "dms:RefreshSchemas",
         "dms:RemoveTagsFromResource",
         "dms:TestConnection"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dms:AddTagsToResource",
        "dms:ApplyPendingMaintenanceAction",
        "dms:CreateReplicationTask",
        "dms:DeleteConnection",
        "dms:DeleteReplicationInstance",
        "dms:DescribeApplicableIndividualAssessments",
        "dms:DescribeReplicationInstanceTaskLogs",
        "dms:DescribeReplicationTaskAssessmentRuns",
        "dms:ListTagsForResource",
        "dms:ModifyReplicationInstance",
        "dms:MoveReplicationTask",
        "dms:RebootReplicationInstance",
        "dms:RefreshSchemas",
        "dms:RemoveTagsFromResource",
        "dms:TestConnection"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dms:ReplicationInstance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dms:ReplicationInstance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dms:AddTagsToResource",
         "dms:DeleteReplicationSubnetGroup",
         "dms:ListTagsForResource",
         "dms:RemoveTagsFromResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dms:AddTagsToResource",
        "dms:DeleteReplicationSubnetGroup",
        "dms:ListTagsForResource",
        "dms:RemoveTagsFromResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dms:ReplicationSubnetGroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dms:ReplicationSubnetGroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dms:AddTagsToResource",
         "dms:DeleteReplicationTask",
         "dms:DescribeApplicableIndividualAssessments",
         "dms:DescribeReplicationTaskAssessmentResults",
         "dms:DescribeReplicationTaskAssessmentRuns",
         "dms:DescribeReplicationTaskIndividualAssessments",
         "dms:DescribeTableStatistics",
         "dms:ListTagsForResource",
         "dms:ModifyReplicationTask",
         "dms:MoveReplicationTask",
         "dms:ReloadTables",
         "dms:RemoveTagsFromResource",
         "dms:StartReplicationTask",
         "dms:StartReplicationTaskAssessment",
         "dms:StartReplicationTaskAssessmentRun",
         "dms:StopReplicationTask"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dms:AddTagsToResource",
        "dms:DeleteReplicationTask",
        "dms:DescribeApplicableIndividualAssessments",
        "dms:DescribeReplicationTaskAssessmentResults",
        "dms:DescribeReplicationTaskAssessmentRuns",
        "dms:DescribeReplicationTaskIndividualAssessments",
        "dms:DescribeTableStatistics",
        "dms:ListTagsForResource",
        "dms:ModifyReplicationTask",
        "dms:MoveReplicationTask",
        "dms:ReloadTables",
        "dms:RemoveTagsFromResource",
        "dms:StartReplicationTask",
        "dms:StartReplicationTaskAssessment",
        "dms:StartReplicationTaskAssessmentRun",
        "dms:StopReplicationTask"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dms:ReplicationTask"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dms:ReplicationTask"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dms:AddTagsToResource",
         "dms:CancelReplicationTaskAssessmentRun",
         "dms:DeleteReplicationTaskAssessmentRun",
         "dms:DescribeReplicationTaskAssessmentRuns",
         "dms:DescribeReplicationTaskIndividualAssessments",
         "dms:ListTagsForResource",
         "dms:RemoveTagsFromResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dms:AddTagsToResource",
        "dms:CancelReplicationTaskAssessmentRun",
        "dms:DeleteReplicationTaskAssessmentRun",
        "dms:DescribeReplicationTaskAssessmentRuns",
        "dms:DescribeReplicationTaskIndividualAssessments",
        "dms:ListTagsForResource",
        "dms:RemoveTagsFromResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dms:ReplicationTaskAssessmentRun"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dms:ReplicationTaskAssessmentRun"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dms:AddTagsToResource",
         "dms:ListTagsForResource",
         "dms:RemoveTagsFromResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dms:AddTagsToResource",
        "dms:ListTagsForResource",
        "dms:RemoveTagsFromResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dms:ReplicationTaskIndividualAssessment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dms:ReplicationTaskIndividualAssessment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "docdb-elastic:ApplyPendingMaintenanceAction",
         "docdb-elastic:CreateClusterSnapshot",
         "docdb-elastic:DeleteCluster",
         "docdb-elastic:GetCluster",
         "docdb-elastic:GetPendingMaintenanceAction",
         "docdb-elastic:ListTagsForResource",
         "docdb-elastic:RestoreClusterFromSnapshot",
         "docdb-elastic:StartCluster",
         "docdb-elastic:StopCluster",
         "docdb-elastic:TagResource",
         "docdb-elastic:UntagResource",
         "docdb-elastic:UpdateCluster"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "docdb-elastic:ApplyPendingMaintenanceAction",
        "docdb-elastic:CreateClusterSnapshot",
        "docdb-elastic:DeleteCluster",
        "docdb-elastic:GetCluster",
        "docdb-elastic:GetPendingMaintenanceAction",
        "docdb-elastic:ListTagsForResource",
        "docdb-elastic:RestoreClusterFromSnapshot",
        "docdb-elastic:StartCluster",
        "docdb-elastic:StopCluster",
        "docdb-elastic:TagResource",
        "docdb-elastic:UntagResource",
        "docdb-elastic:UpdateCluster"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/docdb-elastic:cluster"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/docdb-elastic:cluster"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "docdb-elastic:CopyClusterSnapshot",
         "docdb-elastic:CreateClusterSnapshot",
         "docdb-elastic:DeleteClusterSnapshot",
         "docdb-elastic:GetClusterSnapshot",
         "docdb-elastic:ListTagsForResource",
         "docdb-elastic:RestoreClusterFromSnapshot",
         "docdb-elastic:TagResource",
         "docdb-elastic:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "docdb-elastic:CopyClusterSnapshot",
        "docdb-elastic:CreateClusterSnapshot",
        "docdb-elastic:DeleteClusterSnapshot",
        "docdb-elastic:GetClusterSnapshot",
        "docdb-elastic:ListTagsForResource",
        "docdb-elastic:RestoreClusterFromSnapshot",
        "docdb-elastic:TagResource",
        "docdb-elastic:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/docdb-elastic:cluster-snapshot"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/docdb-elastic:cluster-snapshot"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "drs:AssociateFailbackClientToRecoveryInstanceForDrs",
         "drs:BatchCreateVolumeSnapshotGroupForDrs",
         "drs:DeleteRecoveryInstance",
         "drs:DisconnectRecoveryInstance",
         "drs:GetAgentCommandForDrs",
         "drs:GetAgentConfirmedResumeInfoForDrs",
         "drs:GetAgentReplicationInfoForDrs",
         "drs:GetAgentRuntimeConfigurationForDrs",
         "drs:GetAgentSnapshotCreditsForDrs",
         "drs:GetFailbackCommandForDrs",
         "drs:GetFailbackLaunchRequestedForDrs",
         "drs:GetFailbackReplicationConfiguration",
         "drs:GetSuggestedFailbackClientDeviceMappingForDrs",
         "drs:IssueAgentCertificateForDrs",
         "drs:NotifyAgentAuthenticationForDrs",
         "drs:NotifyAgentConnectedForDrs",
         "drs:NotifyAgentDisconnectedForDrs",
         "drs:NotifyAgentReplicationProgressForDrs",
         "drs:NotifyConsistencyAttainedForDrs",
         "drs:NotifyReplicationServerAuthenticationForDrs",
         "drs:ReverseReplication",
         "drs:SendAgentLogsForDrs",
         "drs:SendAgentMetricsForDrs",
         "drs:StartFailbackLaunch",
         "drs:StopFailback",
         "drs:TagResource",
         "drs:TerminateRecoveryInstances",
         "drs:UntagResource",
         "drs:UpdateAgentBacklogForDrs",
         "drs:UpdateAgentConversionInfoForDrs",
         "drs:UpdateAgentReplicationInfoForDrs",
         "drs:UpdateAgentReplicationProcessStateForDrs",
         "drs:UpdateAgentSourcePropertiesForDrs",
         "drs:UpdateFailbackClientDeviceMappingForDrs",
         "drs:UpdateFailbackClientLastSeenForDrs",
         "drs:UpdateFailbackReplicationConfiguration",
         "drs:UpdateReplicationCertificateForDrs"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "drs:AssociateFailbackClientToRecoveryInstanceForDrs",
        "drs:BatchCreateVolumeSnapshotGroupForDrs",
        "drs:DeleteRecoveryInstance",
        "drs:DisconnectRecoveryInstance",
        "drs:GetAgentCommandForDrs",
        "drs:GetAgentConfirmedResumeInfoForDrs",
        "drs:GetAgentReplicationInfoForDrs",
        "drs:GetAgentRuntimeConfigurationForDrs",
        "drs:GetAgentSnapshotCreditsForDrs",
        "drs:GetFailbackCommandForDrs",
        "drs:GetFailbackLaunchRequestedForDrs",
        "drs:GetFailbackReplicationConfiguration",
        "drs:GetSuggestedFailbackClientDeviceMappingForDrs",
        "drs:IssueAgentCertificateForDrs",
        "drs:NotifyAgentAuthenticationForDrs",
        "drs:NotifyAgentConnectedForDrs",
        "drs:NotifyAgentDisconnectedForDrs",
        "drs:NotifyAgentReplicationProgressForDrs",
        "drs:NotifyConsistencyAttainedForDrs",
        "drs:NotifyReplicationServerAuthenticationForDrs",
        "drs:ReverseReplication",
        "drs:SendAgentLogsForDrs",
        "drs:SendAgentMetricsForDrs",
        "drs:StartFailbackLaunch",
        "drs:StopFailback",
        "drs:TagResource",
        "drs:TerminateRecoveryInstances",
        "drs:UntagResource",
        "drs:UpdateAgentBacklogForDrs",
        "drs:UpdateAgentConversionInfoForDrs",
        "drs:UpdateAgentReplicationInfoForDrs",
        "drs:UpdateAgentReplicationProcessStateForDrs",
        "drs:UpdateAgentSourcePropertiesForDrs",
        "drs:UpdateFailbackClientDeviceMappingForDrs",
        "drs:UpdateFailbackClientLastSeenForDrs",
        "drs:UpdateFailbackReplicationConfiguration",
        "drs:UpdateReplicationCertificateForDrs"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/drs:RecoveryInstanceResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/drs:RecoveryInstanceResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "drs:AssociateSourceNetworkStack",
         "drs:DeleteSourceNetwork",
         "drs:ExportSourceNetworkCfnTemplate",
         "drs:StartSourceNetworkRecovery",
         "drs:StartSourceNetworkReplication",
         "drs:StopSourceNetworkReplication",
         "drs:TagResource",
         "drs:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "drs:AssociateSourceNetworkStack",
        "drs:DeleteSourceNetwork",
        "drs:ExportSourceNetworkCfnTemplate",
        "drs:StartSourceNetworkRecovery",
        "drs:StartSourceNetworkReplication",
        "drs:StopSourceNetworkReplication",
        "drs:TagResource",
        "drs:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/drs:SourceNetworkResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/drs:SourceNetworkResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "drs:BatchCreateVolumeSnapshotGroupForDrs",
         "drs:CreateConvertedSnapshotForDrs",
         "drs:CreateRecoveryInstanceForDrs",
         "drs:DeleteLaunchAction",
         "drs:DeleteSourceServer",
         "drs:DescribeRecoverySnapshots",
         "drs:DisconnectSourceServer",
         "drs:GetAgentCommandForDrs",
         "drs:GetAgentConfirmedResumeInfoForDrs",
         "drs:GetAgentReplicationInfoForDrs",
         "drs:GetAgentRuntimeConfigurationForDrs",
         "drs:GetAgentSnapshotCreditsForDrs",
         "drs:GetLaunchConfiguration",
         "drs:GetReplicationConfiguration",
         "drs:IssueAgentCertificateForDrs",
         "drs:ListLaunchActions",
         "drs:NotifyAgentAuthenticationForDrs",
         "drs:NotifyAgentConnectedForDrs",
         "drs:NotifyAgentDisconnectedForDrs",
         "drs:NotifyAgentReplicationProgressForDrs",
         "drs:NotifyVolumeEventForDrs",
         "drs:PutLaunchAction",
         "drs:RetryDataReplication",
         "drs:SendAgentLogsForDrs",
         "drs:SendAgentMetricsForDrs",
         "drs:SendVolumeStatsForDrs",
         "drs:StartRecovery",
         "drs:StartReplication",
         "drs:StopReplication",
         "drs:TagResource",
         "drs:UntagResource",
         "drs:UpdateAgentBacklogForDrs",
         "drs:UpdateAgentConversionInfoForDrs",
         "drs:UpdateAgentReplicationInfoForDrs",
         "drs:UpdateAgentReplicationProcessStateForDrs",
         "drs:UpdateAgentSourcePropertiesForDrs",
         "drs:UpdateLaunchConfiguration",
         "drs:UpdateReplicationConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "drs:BatchCreateVolumeSnapshotGroupForDrs",
        "drs:CreateConvertedSnapshotForDrs",
        "drs:CreateRecoveryInstanceForDrs",
        "drs:DeleteLaunchAction",
        "drs:DeleteSourceServer",
        "drs:DescribeRecoverySnapshots",
        "drs:DisconnectSourceServer",
        "drs:GetAgentCommandForDrs",
        "drs:GetAgentConfirmedResumeInfoForDrs",
        "drs:GetAgentReplicationInfoForDrs",
        "drs:GetAgentRuntimeConfigurationForDrs",
        "drs:GetAgentSnapshotCreditsForDrs",
        "drs:GetLaunchConfiguration",
        "drs:GetReplicationConfiguration",
        "drs:IssueAgentCertificateForDrs",
        "drs:ListLaunchActions",
        "drs:NotifyAgentAuthenticationForDrs",
        "drs:NotifyAgentConnectedForDrs",
        "drs:NotifyAgentDisconnectedForDrs",
        "drs:NotifyAgentReplicationProgressForDrs",
        "drs:NotifyVolumeEventForDrs",
        "drs:PutLaunchAction",
        "drs:RetryDataReplication",
        "drs:SendAgentLogsForDrs",
        "drs:SendAgentMetricsForDrs",
        "drs:SendVolumeStatsForDrs",
        "drs:StartRecovery",
        "drs:StartReplication",
        "drs:StopReplication",
        "drs:TagResource",
        "drs:UntagResource",
        "drs:UpdateAgentBacklogForDrs",
        "drs:UpdateAgentConversionInfoForDrs",
        "drs:UpdateAgentReplicationInfoForDrs",
        "drs:UpdateAgentReplicationProcessStateForDrs",
        "drs:UpdateAgentSourcePropertiesForDrs",
        "drs:UpdateLaunchConfiguration",
        "drs:UpdateReplicationConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/drs:SourceServerResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/drs:SourceServerResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "drs:DeleteJob",
         "drs:DescribeJobLogItems",
         "drs:TagResource",
         "drs:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "drs:DeleteJob",
        "drs:DescribeJobLogItems",
        "drs:TagResource",
        "drs:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/drs:JobResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/drs:JobResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "drs:DeleteLaunchAction",
         "drs:DeleteLaunchConfigurationTemplate",
         "drs:ListLaunchActions",
         "drs:PutLaunchAction",
         "drs:TagResource",
         "drs:UntagResource",
         "drs:UpdateLaunchConfigurationTemplate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "drs:DeleteLaunchAction",
        "drs:DeleteLaunchConfigurationTemplate",
        "drs:ListLaunchActions",
        "drs:PutLaunchAction",
        "drs:TagResource",
        "drs:UntagResource",
        "drs:UpdateLaunchConfigurationTemplate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/drs:LaunchConfigurationTemplateResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/drs:LaunchConfigurationTemplateResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "drs:DeleteReplicationConfigurationTemplate",
         "drs:TagResource",
         "drs:UntagResource",
         "drs:UpdateReplicationConfigurationTemplate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "drs:DeleteReplicationConfigurationTemplate",
        "drs:TagResource",
        "drs:UntagResource",
        "drs:UpdateReplicationConfigurationTemplate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/drs:ReplicationConfigurationTemplateResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/drs:ReplicationConfigurationTemplateResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ds:AcceptSharedDirectory",
         "ds:AccessDSData",
         "ds:AddIpRoutes",
         "ds:AddRegion",
         "ds:AddTagsToResource",
         "ds:AuthorizeApplication",
         "ds:CancelSchemaExtension",
         "ds:CreateAlias",
         "ds:CreateComputer",
         "ds:CreateConditionalForwarder",
         "ds:CreateLogSubscription",
         "ds:CreateSnapshot",
         "ds:CreateTrust",
         "ds:DeleteConditionalForwarder",
         "ds:DeleteDirectory",
         "ds:DeleteLogSubscription",
         "ds:DeleteSnapshot",
         "ds:DeleteTrust",
         "ds:DeregisterCertificate",
         "ds:DeregisterEventTopic",
         "ds:DescribeCertificate",
         "ds:DescribeClientAuthenticationSettings",
         "ds:DescribeConditionalForwarders",
         "ds:DescribeDirectoryDataAccess",
         "ds:DescribeDomainControllers",
         "ds:DescribeEventTopics",
         "ds:DescribeLDAPSSettings",
         "ds:DescribeRegions",
         "ds:DescribeSettings",
         "ds:DescribeSharedDirectories",
         "ds:DescribeUpdateDirectory",
         "ds:DisableClientAuthentication",
         "ds:DisableDirectoryDataAccess",
         "ds:DisableLDAPS",
         "ds:DisableRadius",
         "ds:DisableRoleAccess",
         "ds:DisableSso",
         "ds:EnableClientAuthentication",
         "ds:EnableDirectoryDataAccess",
         "ds:EnableLDAPS",
         "ds:EnableRadius",
         "ds:EnableRoleAccess",
         "ds:EnableSso",
         "ds:GetAuthorizedApplicationDetails",
         "ds:GetSnapshotLimits",
         "ds:ListAuthorizedApplications",
         "ds:ListCertificates",
         "ds:ListIpRoutes",
         "ds:ListSchemaExtensions",
         "ds:ListTagsForResource",
         "ds:RegisterCertificate",
         "ds:RegisterEventTopic",
         "ds:RejectSharedDirectory",
         "ds:RemoveIpRoutes",
         "ds:RemoveRegion",
         "ds:RemoveTagsFromResource",
         "ds:ResetUserPassword",
         "ds:RestoreFromSnapshot",
         "ds:ShareDirectory",
         "ds:StartSchemaExtension",
         "ds:UnauthorizeApplication",
         "ds:UnshareDirectory",
         "ds:UpdateAuthorizedApplication",
         "ds:UpdateConditionalForwarder",
         "ds:UpdateDirectory",
         "ds:UpdateDirectorySetup",
         "ds:UpdateNumberOfDomainControllers",
         "ds:UpdateRadius",
         "ds:UpdateSettings",
         "ds:UpdateTrust",
         "ds:VerifyTrust"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ds:AcceptSharedDirectory",
        "ds:AccessDSData",
        "ds:AddIpRoutes",
        "ds:AddRegion",
        "ds:AddTagsToResource",
        "ds:AuthorizeApplication",
        "ds:CancelSchemaExtension",
        "ds:CreateAlias",
        "ds:CreateComputer",
        "ds:CreateConditionalForwarder",
        "ds:CreateLogSubscription",
        "ds:CreateSnapshot",
        "ds:CreateTrust",
        "ds:DeleteConditionalForwarder",
        "ds:DeleteDirectory",
        "ds:DeleteLogSubscription",
        "ds:DeleteSnapshot",
        "ds:DeleteTrust",
        "ds:DeregisterCertificate",
        "ds:DeregisterEventTopic",
        "ds:DescribeCertificate",
        "ds:DescribeClientAuthenticationSettings",
        "ds:DescribeConditionalForwarders",
        "ds:DescribeDirectoryDataAccess",
        "ds:DescribeDomainControllers",
        "ds:DescribeEventTopics",
        "ds:DescribeLDAPSSettings",
        "ds:DescribeRegions",
        "ds:DescribeSettings",
        "ds:DescribeSharedDirectories",
        "ds:DescribeUpdateDirectory",
        "ds:DisableClientAuthentication",
        "ds:DisableDirectoryDataAccess",
        "ds:DisableLDAPS",
        "ds:DisableRadius",
        "ds:DisableRoleAccess",
        "ds:DisableSso",
        "ds:EnableClientAuthentication",
        "ds:EnableDirectoryDataAccess",
        "ds:EnableLDAPS",
        "ds:EnableRadius",
        "ds:EnableRoleAccess",
        "ds:EnableSso",
        "ds:GetAuthorizedApplicationDetails",
        "ds:GetSnapshotLimits",
        "ds:ListAuthorizedApplications",
        "ds:ListCertificates",
        "ds:ListIpRoutes",
        "ds:ListSchemaExtensions",
        "ds:ListTagsForResource",
        "ds:RegisterCertificate",
        "ds:RegisterEventTopic",
        "ds:RejectSharedDirectory",
        "ds:RemoveIpRoutes",
        "ds:RemoveRegion",
        "ds:RemoveTagsFromResource",
        "ds:ResetUserPassword",
        "ds:RestoreFromSnapshot",
        "ds:ShareDirectory",
        "ds:StartSchemaExtension",
        "ds:UnauthorizeApplication",
        "ds:UnshareDirectory",
        "ds:UpdateAuthorizedApplication",
        "ds:UpdateConditionalForwarder",
        "ds:UpdateDirectory",
        "ds:UpdateDirectorySetup",
        "ds:UpdateNumberOfDomainControllers",
        "ds:UpdateRadius",
        "ds:UpdateSettings",
        "ds:UpdateTrust",
        "ds:VerifyTrust"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ds:directory"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ds:directory"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ds-data:AddGroupMember",
         "ds-data:CreateGroup",
         "ds-data:CreateUser",
         "ds-data:DeleteGroup",
         "ds-data:DeleteUser",
         "ds-data:DescribeGroup",
         "ds-data:DescribeUser",
         "ds-data:DisableUser",
         "ds-data:ListGroupMembers",
         "ds-data:ListGroups",
         "ds-data:ListGroupsForMember",
         "ds-data:ListUsers",
         "ds-data:RemoveGroupMember",
         "ds-data:SearchGroups",
         "ds-data:SearchUsers",
         "ds-data:UpdateGroup",
         "ds-data:UpdateUser"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ds-data:AddGroupMember",
        "ds-data:CreateGroup",
        "ds-data:CreateUser",
        "ds-data:DeleteGroup",
        "ds-data:DeleteUser",
        "ds-data:DescribeGroup",
        "ds-data:DescribeUser",
        "ds-data:DisableUser",
        "ds-data:ListGroupMembers",
        "ds-data:ListGroups",
        "ds-data:ListGroupsForMember",
        "ds-data:ListUsers",
        "ds-data:RemoveGroupMember",
        "ds-data:SearchGroups",
        "ds-data:SearchUsers",
        "ds-data:UpdateGroup",
        "ds-data:UpdateUser"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ds-data:directory"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ds-data:directory"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dsql:CreateCluster",
         "dsql:CreateMultiRegionClusters",
         "dsql:DbConnect",
         "dsql:DbConnectAdmin",
         "dsql:DeleteCluster",
         "dsql:DeleteMultiRegionClusters",
         "dsql:GetCluster",
         "dsql:ListTagsForResource",
         "dsql:TagResource",
         "dsql:UntagResource",
         "dsql:UpdateCluster"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dsql:CreateCluster",
        "dsql:CreateMultiRegionClusters",
        "dsql:DbConnect",
        "dsql:DbConnectAdmin",
        "dsql:DeleteCluster",
        "dsql:DeleteMultiRegionClusters",
        "dsql:GetCluster",
        "dsql:ListTagsForResource",
        "dsql:TagResource",
        "dsql:UntagResource",
        "dsql:UpdateCluster"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dsql:Cluster"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dsql:Cluster"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dynamodb:BatchGetItem",
         "dynamodb:BatchWriteItem",
         "dynamodb:ConditionCheckItem",
         "dynamodb:CreateBackup",
         "dynamodb:CreateGlobalTable",
         "dynamodb:CreateTable",
         "dynamodb:CreateTableReplica",
         "dynamodb:DeleteItem",
         "dynamodb:DeleteResourcePolicy",
         "dynamodb:DeleteTable",
         "dynamodb:DeleteTableReplica",
         "dynamodb:DescribeContinuousBackups",
         "dynamodb:DescribeContributorInsights",
         "dynamodb:DescribeKinesisStreamingDestination",
         "dynamodb:DescribeTable",
         "dynamodb:DescribeTableReplicaAutoScaling",
         "dynamodb:DescribeTimeToLive",
         "dynamodb:DisableKinesisStreamingDestination",
         "dynamodb:EnableKinesisStreamingDestination",
         "dynamodb:ExportTableToPointInTime",
         "dynamodb:GetItem",
         "dynamodb:GetResourcePolicy",
         "dynamodb:ImportTable",
         "dynamodb:ListTagsOfResource",
         "dynamodb:PartiQLDelete",
         "dynamodb:PartiQLInsert",
         "dynamodb:PartiQLSelect",
         "dynamodb:PartiQLUpdate",
         "dynamodb:PutItem",
         "dynamodb:PutResourcePolicy",
         "dynamodb:Query",
         "dynamodb:RestoreTableFromAwsBackup",
         "dynamodb:RestoreTableFromBackup",
         "dynamodb:RestoreTableToPointInTime",
         "dynamodb:Scan",
         "dynamodb:StartAwsBackupJob",
         "dynamodb:TagResource",
         "dynamodb:UntagResource",
         "dynamodb:UpdateContinuousBackups",
         "dynamodb:UpdateContributorInsights",
         "dynamodb:UpdateGlobalTable",
         "dynamodb:UpdateGlobalTableSettings",
         "dynamodb:UpdateGlobalTableVersion",
         "dynamodb:UpdateItem",
         "dynamodb:UpdateKinesisStreamingDestination",
         "dynamodb:UpdateTable",
         "dynamodb:UpdateTableReplicaAutoScaling",
         "dynamodb:UpdateTimeToLive"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dynamodb:BatchGetItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:ConditionCheckItem",
        "dynamodb:CreateBackup",
        "dynamodb:CreateGlobalTable",
        "dynamodb:CreateTable",
        "dynamodb:CreateTableReplica",
        "dynamodb:DeleteItem",
        "dynamodb:DeleteResourcePolicy",
        "dynamodb:DeleteTable",
        "dynamodb:DeleteTableReplica",
        "dynamodb:DescribeContinuousBackups",
        "dynamodb:DescribeContributorInsights",
        "dynamodb:DescribeKinesisStreamingDestination",
        "dynamodb:DescribeTable",
        "dynamodb:DescribeTableReplicaAutoScaling",
        "dynamodb:DescribeTimeToLive",
        "dynamodb:DisableKinesisStreamingDestination",
        "dynamodb:EnableKinesisStreamingDestination",
        "dynamodb:ExportTableToPointInTime",
        "dynamodb:GetItem",
        "dynamodb:GetResourcePolicy",
        "dynamodb:ImportTable",
        "dynamodb:ListTagsOfResource",
        "dynamodb:PartiQLDelete",
        "dynamodb:PartiQLInsert",
        "dynamodb:PartiQLSelect",
        "dynamodb:PartiQLUpdate",
        "dynamodb:PutItem",
        "dynamodb:PutResourcePolicy",
        "dynamodb:Query",
        "dynamodb:RestoreTableFromAwsBackup",
        "dynamodb:RestoreTableFromBackup",
        "dynamodb:RestoreTableToPointInTime",
        "dynamodb:Scan",
        "dynamodb:StartAwsBackupJob",
        "dynamodb:TagResource",
        "dynamodb:UntagResource",
        "dynamodb:UpdateContinuousBackups",
        "dynamodb:UpdateContributorInsights",
        "dynamodb:UpdateGlobalTable",
        "dynamodb:UpdateGlobalTableSettings",
        "dynamodb:UpdateGlobalTableVersion",
        "dynamodb:UpdateItem",
        "dynamodb:UpdateKinesisStreamingDestination",
        "dynamodb:UpdateTable",
        "dynamodb:UpdateTableReplicaAutoScaling",
        "dynamodb:UpdateTimeToLive"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dynamodb:table"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dynamodb:table"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dynamodb:CreateGlobalTable",
         "dynamodb:DescribeGlobalTable",
         "dynamodb:DescribeGlobalTableSettings",
         "dynamodb:UpdateGlobalTable",
         "dynamodb:UpdateGlobalTableSettings",
         "dynamodb:UpdateGlobalTableVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dynamodb:CreateGlobalTable",
        "dynamodb:DescribeGlobalTable",
        "dynamodb:DescribeGlobalTableSettings",
        "dynamodb:UpdateGlobalTable",
        "dynamodb:UpdateGlobalTableSettings",
        "dynamodb:UpdateGlobalTableVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dynamodb:global-table"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dynamodb:global-table"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dynamodb:DeleteBackup",
         "dynamodb:DescribeBackup",
         "dynamodb:RestoreTableFromBackup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dynamodb:DeleteBackup",
        "dynamodb:DescribeBackup",
        "dynamodb:RestoreTableFromBackup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dynamodb:backup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dynamodb:backup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dynamodb:DeleteResourcePolicy",
         "dynamodb:DescribeStream",
         "dynamodb:GetRecords",
         "dynamodb:GetResourcePolicy",
         "dynamodb:GetShardIterator",
         "dynamodb:PutResourcePolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dynamodb:DeleteResourcePolicy",
        "dynamodb:DescribeStream",
        "dynamodb:GetRecords",
        "dynamodb:GetResourcePolicy",
        "dynamodb:GetShardIterator",
        "dynamodb:PutResourcePolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dynamodb:stream"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dynamodb:stream"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dynamodb:DescribeContributorInsights",
         "dynamodb:PartiQLSelect",
         "dynamodb:Query",
         "dynamodb:Scan",
         "dynamodb:UpdateContributorInsights"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dynamodb:DescribeContributorInsights",
        "dynamodb:PartiQLSelect",
        "dynamodb:Query",
        "dynamodb:Scan",
        "dynamodb:UpdateContributorInsights"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dynamodb:index"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dynamodb:index"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dynamodb:DescribeExport"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dynamodb:DescribeExport"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dynamodb:export"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dynamodb:export"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "dynamodb:DescribeImport"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "dynamodb:DescribeImport"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/dynamodb:import"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/dynamodb:import"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ebs:CompleteSnapshot",
         "ebs:GetSnapshotBlock",
         "ebs:ListChangedBlocks",
         "ebs:ListSnapshotBlocks",
         "ebs:PutSnapshotBlock",
         "ebs:StartSnapshot"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ebs:CompleteSnapshot",
        "ebs:GetSnapshotBlock",
        "ebs:ListChangedBlocks",
        "ebs:ListSnapshotBlocks",
        "ebs:PutSnapshotBlock",
        "ebs:StartSnapshot"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ebs:snapshot"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ebs:snapshot"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AcceptAddressTransfer",
         "ec2:AllocateAddress",
         "ec2:AssociateAddress",
         "ec2:AssociateNatGatewayAddress",
         "ec2:CreateNatGateway",
         "ec2:CreateTags",
         "ec2:DeleteTags",
         "ec2:DisableAddressTransfer",
         "ec2:DisassociateAddress",
         "ec2:DisassociateNatGatewayAddress",
         "ec2:EnableAddressTransfer",
         "ec2:ModifyAddressAttribute",
         "ec2:ReleaseAddress",
         "ec2:ResetAddressAttribute"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AcceptAddressTransfer",
        "ec2:AllocateAddress",
        "ec2:AssociateAddress",
        "ec2:AssociateNatGatewayAddress",
        "ec2:CreateNatGateway",
        "ec2:CreateTags",
        "ec2:DeleteTags",
        "ec2:DisableAddressTransfer",
        "ec2:DisassociateAddress",
        "ec2:DisassociateNatGatewayAddress",
        "ec2:EnableAddressTransfer",
        "ec2:ModifyAddressAttribute",
        "ec2:ReleaseAddress",
        "ec2:ResetAddressAttribute"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:elastic-ip"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:elastic-ip"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AcceptCapacityReservationBillingOwnership",
         "ec2:AssociateCapacityReservationBillingOwner",
         "ec2:CancelCapacityReservation",
         "ec2:CreateCapacityReservation",
         "ec2:CreateCapacityReservationBySplitting",
         "ec2:CreateTags",
         "ec2:DeleteTags",
         "ec2:DescribeCapacityBlockExtensionHistory",
         "ec2:DescribeCapacityBlockExtensionOfferings",
         "ec2:DisassociateCapacityReservationBillingOwner",
         "ec2:GetCapacityReservationUsage",
         "ec2:GetGroupsForCapacityReservation",
         "ec2:ModifyCapacityReservation",
         "ec2:ModifyInstanceCapacityReservationAttributes",
         "ec2:MoveCapacityReservationInstances",
         "ec2:PurchaseCapacityBlock",
         "ec2:PurchaseCapacityBlockExtension",
         "ec2:RejectCapacityReservationBillingOwnership",
         "ec2:RunInstances"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AcceptCapacityReservationBillingOwnership",
        "ec2:AssociateCapacityReservationBillingOwner",
        "ec2:CancelCapacityReservation",
        "ec2:CreateCapacityReservation",
        "ec2:CreateCapacityReservationBySplitting",
        "ec2:CreateTags",
        "ec2:DeleteTags",
        "ec2:DescribeCapacityBlockExtensionHistory",
        "ec2:DescribeCapacityBlockExtensionOfferings",
        "ec2:DisassociateCapacityReservationBillingOwner",
        "ec2:GetCapacityReservationUsage",
        "ec2:GetGroupsForCapacityReservation",
        "ec2:ModifyCapacityReservation",
        "ec2:ModifyInstanceCapacityReservationAttributes",
        "ec2:MoveCapacityReservationInstances",
        "ec2:PurchaseCapacityBlock",
        "ec2:PurchaseCapacityBlockExtension",
        "ec2:RejectCapacityReservationBillingOwnership",
        "ec2:RunInstances"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:capacity-reservation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:capacity-reservation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AcceptTransitGatewayMulticastDomainAssociations",
         "ec2:AcceptTransitGatewayPeeringAttachment",
         "ec2:AcceptTransitGatewayVpcAttachment",
         "ec2:AssociateTransitGatewayMulticastDomain",
         "ec2:AssociateTransitGatewayPolicyTable",
         "ec2:AssociateTransitGatewayRouteTable",
         "ec2:CreateFlowLogs",
         "ec2:CreateTags",
         "ec2:CreateTransitGatewayConnect",
         "ec2:CreateTransitGatewayConnectPeer",
         "ec2:CreateTransitGatewayPeeringAttachment",
         "ec2:CreateTransitGatewayPrefixListReference",
         "ec2:CreateTransitGatewayRoute",
         "ec2:CreateTransitGatewayRouteTableAnnouncement",
         "ec2:CreateTransitGatewayVpcAttachment",
         "ec2:CreateVpnConnection",
         "ec2:DeleteTags",
         "ec2:DeleteTransitGatewayConnect",
         "ec2:DeleteTransitGatewayPeeringAttachment",
         "ec2:DeleteTransitGatewayVpcAttachment",
         "ec2:DisableTransitGatewayRouteTablePropagation",
         "ec2:DisassociateTransitGatewayMulticastDomain",
         "ec2:DisassociateTransitGatewayPolicyTable",
         "ec2:DisassociateTransitGatewayRouteTable",
         "ec2:EnableTransitGatewayRouteTablePropagation",
         "ec2:ModifyTransitGatewayPrefixListReference",
         "ec2:ModifyTransitGatewayVpcAttachment",
         "ec2:RejectTransitGatewayMulticastDomainAssociations",
         "ec2:RejectTransitGatewayPeeringAttachment",
         "ec2:RejectTransitGatewayVpcAttachment",
         "ec2:ReplaceTransitGatewayRoute"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AcceptTransitGatewayMulticastDomainAssociations",
        "ec2:AcceptTransitGatewayPeeringAttachment",
        "ec2:AcceptTransitGatewayVpcAttachment",
        "ec2:AssociateTransitGatewayMulticastDomain",
        "ec2:AssociateTransitGatewayPolicyTable",
        "ec2:AssociateTransitGatewayRouteTable",
        "ec2:CreateFlowLogs",
        "ec2:CreateTags",
        "ec2:CreateTransitGatewayConnect",
        "ec2:CreateTransitGatewayConnectPeer",
        "ec2:CreateTransitGatewayPeeringAttachment",
        "ec2:CreateTransitGatewayPrefixListReference",
        "ec2:CreateTransitGatewayRoute",
        "ec2:CreateTransitGatewayRouteTableAnnouncement",
        "ec2:CreateTransitGatewayVpcAttachment",
        "ec2:CreateVpnConnection",
        "ec2:DeleteTags",
        "ec2:DeleteTransitGatewayConnect",
        "ec2:DeleteTransitGatewayPeeringAttachment",
        "ec2:DeleteTransitGatewayVpcAttachment",
        "ec2:DisableTransitGatewayRouteTablePropagation",
        "ec2:DisassociateTransitGatewayMulticastDomain",
        "ec2:DisassociateTransitGatewayPolicyTable",
        "ec2:DisassociateTransitGatewayRouteTable",
        "ec2:EnableTransitGatewayRouteTablePropagation",
        "ec2:ModifyTransitGatewayPrefixListReference",
        "ec2:ModifyTransitGatewayVpcAttachment",
        "ec2:RejectTransitGatewayMulticastDomainAssociations",
        "ec2:RejectTransitGatewayPeeringAttachment",
        "ec2:RejectTransitGatewayVpcAttachment",
        "ec2:ReplaceTransitGatewayRoute"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:transit-gateway-attachment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:transit-gateway-attachment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AcceptTransitGatewayMulticastDomainAssociations",
         "ec2:AssociateTransitGatewayMulticastDomain",
         "ec2:CreateTags",
         "ec2:CreateTransitGatewayMulticastDomain",
         "ec2:DeleteTags",
         "ec2:DeleteTransitGatewayMulticastDomain",
         "ec2:DeregisterTransitGatewayMulticastGroupMembers",
         "ec2:DeregisterTransitGatewayMulticastGroupSources",
         "ec2:DisassociateTransitGatewayMulticastDomain",
         "ec2:GetTransitGatewayMulticastDomainAssociations",
         "ec2:RegisterTransitGatewayMulticastGroupMembers",
         "ec2:RegisterTransitGatewayMulticastGroupSources",
         "ec2:RejectTransitGatewayMulticastDomainAssociations",
         "ec2:SearchTransitGatewayMulticastGroups"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AcceptTransitGatewayMulticastDomainAssociations",
        "ec2:AssociateTransitGatewayMulticastDomain",
        "ec2:CreateTags",
        "ec2:CreateTransitGatewayMulticastDomain",
        "ec2:DeleteTags",
        "ec2:DeleteTransitGatewayMulticastDomain",
        "ec2:DeregisterTransitGatewayMulticastGroupMembers",
        "ec2:DeregisterTransitGatewayMulticastGroupSources",
        "ec2:DisassociateTransitGatewayMulticastDomain",
        "ec2:GetTransitGatewayMulticastDomainAssociations",
        "ec2:RegisterTransitGatewayMulticastGroupMembers",
        "ec2:RegisterTransitGatewayMulticastGroupSources",
        "ec2:RejectTransitGatewayMulticastDomainAssociations",
        "ec2:SearchTransitGatewayMulticastGroups"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:transit-gateway-multicast-domain"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:transit-gateway-multicast-domain"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AcceptVpcEndpointConnections",
         "ec2:CreateNetworkInsightsPath",
         "ec2:CreateTags",
         "ec2:CreateVpcEndpointConnectionNotification",
         "ec2:CreateVpcEndpointServiceConfiguration",
         "ec2:DeleteTags",
         "ec2:DeleteVpcEndpointConnectionNotifications",
         "ec2:DeleteVpcEndpointServiceConfigurations",
         "ec2:DescribeVpcEndpointServicePermissions",
         "ec2:ModifyVpcEndpointConnectionNotification",
         "ec2:ModifyVpcEndpointServiceConfiguration",
         "ec2:ModifyVpcEndpointServicePayerResponsibility",
         "ec2:ModifyVpcEndpointServicePermissions",
         "ec2:RejectVpcEndpointConnections",
         "ec2:StartVpcEndpointServicePrivateDnsVerification"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AcceptVpcEndpointConnections",
        "ec2:CreateNetworkInsightsPath",
        "ec2:CreateTags",
        "ec2:CreateVpcEndpointConnectionNotification",
        "ec2:CreateVpcEndpointServiceConfiguration",
        "ec2:DeleteTags",
        "ec2:DeleteVpcEndpointConnectionNotifications",
        "ec2:DeleteVpcEndpointServiceConfigurations",
        "ec2:DescribeVpcEndpointServicePermissions",
        "ec2:ModifyVpcEndpointConnectionNotification",
        "ec2:ModifyVpcEndpointServiceConfiguration",
        "ec2:ModifyVpcEndpointServicePayerResponsibility",
        "ec2:ModifyVpcEndpointServicePermissions",
        "ec2:RejectVpcEndpointConnections",
        "ec2:StartVpcEndpointServicePrivateDnsVerification"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:vpc-endpoint-service"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:vpc-endpoint-service"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AcceptVpcPeeringConnection",
         "ec2:ApplySecurityGroupsToClientVpnTargetNetwork",
         "ec2:AssociateDhcpOptions",
         "ec2:AssociateSecurityGroupVpc",
         "ec2:AssociateVpcCidrBlock",
         "ec2:AttachClassicLinkVpc",
         "ec2:AttachInternetGateway",
         "ec2:AttachVpnGateway",
         "ec2:CreateCarrierGateway",
         "ec2:CreateClientVpnEndpoint",
         "ec2:CreateEgressOnlyInternetGateway",
         "ec2:CreateFlowLogs",
         "ec2:CreateLocalGatewayRouteTableVpcAssociation",
         "ec2:CreateNetworkAcl",
         "ec2:CreateRouteTable",
         "ec2:CreateSecurityGroup",
         "ec2:CreateSubnet",
         "ec2:CreateTags",
         "ec2:CreateTransitGatewayVpcAttachment",
         "ec2:CreateVpc",
         "ec2:CreateVpcBlockPublicAccessExclusion",
         "ec2:CreateVpcEndpoint",
         "ec2:CreateVpcPeeringConnection",
         "ec2:DeleteTags",
         "ec2:DeleteVpc",
         "ec2:DescribeVpcAttribute",
         "ec2:DetachClassicLinkVpc",
         "ec2:DetachInternetGateway",
         "ec2:DetachVpnGateway",
         "ec2:DisableVpcClassicLink",
         "ec2:DisableVpcClassicLinkDnsSupport",
         "ec2:DisassociateSecurityGroupVpc",
         "ec2:DisassociateVpcCidrBlock",
         "ec2:EnableVpcClassicLink",
         "ec2:EnableVpcClassicLinkDnsSupport",
         "ec2:GetSecurityGroupsForVpc",
         "ec2:ModifyClientVpnEndpoint",
         "ec2:ModifyVpcAttribute",
         "ec2:ModifyVpcTenancy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AcceptVpcPeeringConnection",
        "ec2:ApplySecurityGroupsToClientVpnTargetNetwork",
        "ec2:AssociateDhcpOptions",
        "ec2:AssociateSecurityGroupVpc",
        "ec2:AssociateVpcCidrBlock",
        "ec2:AttachClassicLinkVpc",
        "ec2:AttachInternetGateway",
        "ec2:AttachVpnGateway",
        "ec2:CreateCarrierGateway",
        "ec2:CreateClientVpnEndpoint",
        "ec2:CreateEgressOnlyInternetGateway",
        "ec2:CreateFlowLogs",
        "ec2:CreateLocalGatewayRouteTableVpcAssociation",
        "ec2:CreateNetworkAcl",
        "ec2:CreateRouteTable",
        "ec2:CreateSecurityGroup",
        "ec2:CreateSubnet",
        "ec2:CreateTags",
        "ec2:CreateTransitGatewayVpcAttachment",
        "ec2:CreateVpc",
        "ec2:CreateVpcBlockPublicAccessExclusion",
        "ec2:CreateVpcEndpoint",
        "ec2:CreateVpcPeeringConnection",
        "ec2:DeleteTags",
        "ec2:DeleteVpc",
        "ec2:DescribeVpcAttribute",
        "ec2:DetachClassicLinkVpc",
        "ec2:DetachInternetGateway",
        "ec2:DetachVpnGateway",
        "ec2:DisableVpcClassicLink",
        "ec2:DisableVpcClassicLinkDnsSupport",
        "ec2:DisassociateSecurityGroupVpc",
        "ec2:DisassociateVpcCidrBlock",
        "ec2:EnableVpcClassicLink",
        "ec2:EnableVpcClassicLinkDnsSupport",
        "ec2:GetSecurityGroupsForVpc",
        "ec2:ModifyClientVpnEndpoint",
        "ec2:ModifyVpcAttribute",
        "ec2:ModifyVpcTenancy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:vpc"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:vpc"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AcceptVpcPeeringConnection",
         "ec2:CreateNetworkInsightsPath",
         "ec2:CreateTags",
         "ec2:CreateVpcPeeringConnection",
         "ec2:DeleteTags",
         "ec2:DeleteVpcPeeringConnection",
         "ec2:ModifyVpcPeeringConnectionOptions",
         "ec2:RejectVpcPeeringConnection"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AcceptVpcPeeringConnection",
        "ec2:CreateNetworkInsightsPath",
        "ec2:CreateTags",
        "ec2:CreateVpcPeeringConnection",
        "ec2:DeleteTags",
        "ec2:DeleteVpcPeeringConnection",
        "ec2:ModifyVpcPeeringConnectionOptions",
        "ec2:RejectVpcPeeringConnection"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:vpc-peering-connection"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:vpc-peering-connection"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AllocateAddress",
         "ec2:AllocateIpamPoolCidr",
         "ec2:AssociateSubnetCidrBlock",
         "ec2:AssociateVpcCidrBlock",
         "ec2:CreateIpamPool",
         "ec2:CreateSubnet",
         "ec2:CreateTags",
         "ec2:CreateVpc",
         "ec2:DeleteIpamPool",
         "ec2:DeleteResourcePolicy",
         "ec2:DeleteTags",
         "ec2:DeprovisionIpamPoolCidr",
         "ec2:GetIpamPoolAllocations",
         "ec2:GetIpamPoolCidrs",
         "ec2:GetIpamResourceCidrs",
         "ec2:GetResourcePolicy",
         "ec2:ImportByoipCidrToIpam",
         "ec2:ModifyIpamPool",
         "ec2:MoveByoipCidrToIpam",
         "ec2:ProvisionIpamPoolCidr",
         "ec2:ProvisionPublicIpv4PoolCidr",
         "ec2:PutResourcePolicy",
         "ec2:ReleaseIpamPoolAllocation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AllocateAddress",
        "ec2:AllocateIpamPoolCidr",
        "ec2:AssociateSubnetCidrBlock",
        "ec2:AssociateVpcCidrBlock",
        "ec2:CreateIpamPool",
        "ec2:CreateSubnet",
        "ec2:CreateTags",
        "ec2:CreateVpc",
        "ec2:DeleteIpamPool",
        "ec2:DeleteResourcePolicy",
        "ec2:DeleteTags",
        "ec2:DeprovisionIpamPoolCidr",
        "ec2:GetIpamPoolAllocations",
        "ec2:GetIpamPoolCidrs",
        "ec2:GetIpamResourceCidrs",
        "ec2:GetResourcePolicy",
        "ec2:ImportByoipCidrToIpam",
        "ec2:ModifyIpamPool",
        "ec2:MoveByoipCidrToIpam",
        "ec2:ProvisionIpamPoolCidr",
        "ec2:ProvisionPublicIpv4PoolCidr",
        "ec2:PutResourcePolicy",
        "ec2:ReleaseIpamPoolAllocation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:ipam-pool"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:ipam-pool"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AllocateAddress",
         "ec2:CreatePublicIpv4Pool",
         "ec2:CreateTags",
         "ec2:DeletePublicIpv4Pool",
         "ec2:DeleteTags",
         "ec2:DeprovisionPublicIpv4PoolCidr",
         "ec2:DisassociateRouteTable",
         "ec2:ProvisionPublicIpv4PoolCidr",
         "ec2:ReplaceRouteTableAssociation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AllocateAddress",
        "ec2:CreatePublicIpv4Pool",
        "ec2:CreateTags",
        "ec2:DeletePublicIpv4Pool",
        "ec2:DeleteTags",
        "ec2:DeprovisionPublicIpv4PoolCidr",
        "ec2:DisassociateRouteTable",
        "ec2:ProvisionPublicIpv4PoolCidr",
        "ec2:ReplaceRouteTableAssociation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:ipv4pool-ec2"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:ipv4pool-ec2"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AllocateHosts",
         "ec2:CreateTags",
         "ec2:DeleteTags",
         "ec2:ModifyHosts",
         "ec2:ModifyInstancePlacement",
         "ec2:PurchaseHostReservation",
         "ec2:ReleaseHosts"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AllocateHosts",
        "ec2:CreateTags",
        "ec2:DeleteTags",
        "ec2:ModifyHosts",
        "ec2:ModifyInstancePlacement",
        "ec2:PurchaseHostReservation",
        "ec2:ReleaseHosts"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:dedicated-host"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:dedicated-host"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:ApplySecurityGroupsToClientVpnTargetNetwork",
         "ec2:AssociateClientVpnTargetNetwork",
         "ec2:AuthorizeClientVpnIngress",
         "ec2:CreateClientVpnEndpoint",
         "ec2:CreateClientVpnRoute",
         "ec2:CreateTags",
         "ec2:DeleteClientVpnEndpoint",
         "ec2:DeleteClientVpnRoute",
         "ec2:DeleteTags",
         "ec2:DescribeClientVpnAuthorizationRules",
         "ec2:DescribeClientVpnConnections",
         "ec2:DescribeClientVpnEndpoints",
         "ec2:DescribeClientVpnRoutes",
         "ec2:DescribeClientVpnTargetNetworks",
         "ec2:DisassociateClientVpnTargetNetwork",
         "ec2:ExportClientVpnClientCertificateRevocationList",
         "ec2:ExportClientVpnClientConfiguration",
         "ec2:ImportClientVpnClientCertificateRevocationList",
         "ec2:ModifyClientVpnEndpoint",
         "ec2:RevokeClientVpnIngress",
         "ec2:TerminateClientVpnConnections"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:ApplySecurityGroupsToClientVpnTargetNetwork",
        "ec2:AssociateClientVpnTargetNetwork",
        "ec2:AuthorizeClientVpnIngress",
        "ec2:CreateClientVpnEndpoint",
        "ec2:CreateClientVpnRoute",
        "ec2:CreateTags",
        "ec2:DeleteClientVpnEndpoint",
        "ec2:DeleteClientVpnRoute",
        "ec2:DeleteTags",
        "ec2:DescribeClientVpnAuthorizationRules",
        "ec2:DescribeClientVpnConnections",
        "ec2:DescribeClientVpnEndpoints",
        "ec2:DescribeClientVpnRoutes",
        "ec2:DescribeClientVpnTargetNetworks",
        "ec2:DisassociateClientVpnTargetNetwork",
        "ec2:ExportClientVpnClientCertificateRevocationList",
        "ec2:ExportClientVpnClientConfiguration",
        "ec2:ImportClientVpnClientCertificateRevocationList",
        "ec2:ModifyClientVpnEndpoint",
        "ec2:RevokeClientVpnIngress",
        "ec2:TerminateClientVpnConnections"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:client-vpn-endpoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:client-vpn-endpoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:ApplySecurityGroupsToClientVpnTargetNetwork",
         "ec2:AssociateSecurityGroupVpc",
         "ec2:AttachClassicLinkVpc",
         "ec2:AuthorizeSecurityGroupEgress",
         "ec2:AuthorizeSecurityGroupIngress",
         "ec2:CreateClientVpnEndpoint",
         "ec2:CreateInstanceConnectEndpoint",
         "ec2:CreateNetworkInterface",
         "ec2:CreateSecurityGroup",
         "ec2:CreateTags",
         "ec2:CreateVerifiedAccessEndpoint",
         "ec2:CreateVpcEndpoint",
         "ec2:DeleteSecurityGroup",
         "ec2:DeleteTags",
         "ec2:DescribeSecurityGroupReferences",
         "ec2:DisassociateSecurityGroupVpc",
         "ec2:ImportInstance",
         "ec2:ModifyClientVpnEndpoint",
         "ec2:ModifyInstanceAttribute",
         "ec2:ModifyNetworkInterfaceAttribute",
         "ec2:ModifySecurityGroupRules",
         "ec2:ModifyVpcEndpoint",
         "ec2:RequestSpotFleet",
         "ec2:RequestSpotInstances",
         "ec2:RevokeSecurityGroupEgress",
         "ec2:RevokeSecurityGroupIngress",
         "ec2:RunInstances",
         "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
         "ec2:UpdateSecurityGroupRuleDescriptionsIngress"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:ApplySecurityGroupsToClientVpnTargetNetwork",
        "ec2:AssociateSecurityGroupVpc",
        "ec2:AttachClassicLinkVpc",
        "ec2:AuthorizeSecurityGroupEgress",
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CreateClientVpnEndpoint",
        "ec2:CreateInstanceConnectEndpoint",
        "ec2:CreateNetworkInterface",
        "ec2:CreateSecurityGroup",
        "ec2:CreateTags",
        "ec2:CreateVerifiedAccessEndpoint",
        "ec2:CreateVpcEndpoint",
        "ec2:DeleteSecurityGroup",
        "ec2:DeleteTags",
        "ec2:DescribeSecurityGroupReferences",
        "ec2:DisassociateSecurityGroupVpc",
        "ec2:ImportInstance",
        "ec2:ModifyClientVpnEndpoint",
        "ec2:ModifyInstanceAttribute",
        "ec2:ModifyNetworkInterfaceAttribute",
        "ec2:ModifySecurityGroupRules",
        "ec2:ModifyVpcEndpoint",
        "ec2:RequestSpotFleet",
        "ec2:RequestSpotInstances",
        "ec2:RevokeSecurityGroupEgress",
        "ec2:RevokeSecurityGroupIngress",
        "ec2:RunInstances",
        "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
        "ec2:UpdateSecurityGroupRuleDescriptionsIngress"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:security-group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:security-group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AssignIpv6Addresses",
         "ec2:AssignPrivateIpAddresses",
         "ec2:AssociateAddress",
         "ec2:AttachNetworkInterface",
         "ec2:CreateFlowLogs",
         "ec2:CreateLocalGatewayRoute",
         "ec2:CreateNetworkInsightsPath",
         "ec2:CreateNetworkInterface",
         "ec2:CreateNetworkInterfacePermission",
         "ec2:CreateTags",
         "ec2:CreateTrafficMirrorSession",
         "ec2:CreateTrafficMirrorTarget",
         "ec2:CreateVerifiedAccessEndpoint",
         "ec2:DeleteNetworkInterface",
         "ec2:DeleteNetworkInterfacePermission",
         "ec2:DeleteTags",
         "ec2:DeregisterTransitGatewayMulticastGroupMembers",
         "ec2:DeregisterTransitGatewayMulticastGroupSources",
         "ec2:DetachNetworkInterface",
         "ec2:DisassociateAddress",
         "ec2:DisassociateNatGatewayAddress",
         "ec2:ModifyLocalGatewayRoute",
         "ec2:ModifyNetworkInterfaceAttribute",
         "ec2:RegisterTransitGatewayMulticastGroupMembers",
         "ec2:RegisterTransitGatewayMulticastGroupSources",
         "ec2:RequestSpotInstances",
         "ec2:ResetNetworkInterfaceAttribute",
         "ec2:RunInstances",
         "ec2:UnassignIpv6Addresses",
         "ec2:UnassignPrivateIpAddresses"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AssignIpv6Addresses",
        "ec2:AssignPrivateIpAddresses",
        "ec2:AssociateAddress",
        "ec2:AttachNetworkInterface",
        "ec2:CreateFlowLogs",
        "ec2:CreateLocalGatewayRoute",
        "ec2:CreateNetworkInsightsPath",
        "ec2:CreateNetworkInterface",
        "ec2:CreateNetworkInterfacePermission",
        "ec2:CreateTags",
        "ec2:CreateTrafficMirrorSession",
        "ec2:CreateTrafficMirrorTarget",
        "ec2:CreateVerifiedAccessEndpoint",
        "ec2:DeleteNetworkInterface",
        "ec2:DeleteNetworkInterfacePermission",
        "ec2:DeleteTags",
        "ec2:DeregisterTransitGatewayMulticastGroupMembers",
        "ec2:DeregisterTransitGatewayMulticastGroupSources",
        "ec2:DetachNetworkInterface",
        "ec2:DisassociateAddress",
        "ec2:DisassociateNatGatewayAddress",
        "ec2:ModifyLocalGatewayRoute",
        "ec2:ModifyNetworkInterfaceAttribute",
        "ec2:RegisterTransitGatewayMulticastGroupMembers",
        "ec2:RegisterTransitGatewayMulticastGroupSources",
        "ec2:RequestSpotInstances",
        "ec2:ResetNetworkInterfaceAttribute",
        "ec2:RunInstances",
        "ec2:UnassignIpv6Addresses",
        "ec2:UnassignPrivateIpAddresses"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:network-interface"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:network-interface"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AssignPrivateNatGatewayAddress",
         "ec2:AssociateNatGatewayAddress",
         "ec2:CreateNatGateway",
         "ec2:CreateTags",
         "ec2:DeleteNatGateway",
         "ec2:DeleteTags",
         "ec2:DisassociateNatGatewayAddress",
         "ec2:UnassignPrivateNatGatewayAddress"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AssignPrivateNatGatewayAddress",
        "ec2:AssociateNatGatewayAddress",
        "ec2:CreateNatGateway",
        "ec2:CreateTags",
        "ec2:DeleteNatGateway",
        "ec2:DeleteTags",
        "ec2:DisassociateNatGatewayAddress",
        "ec2:UnassignPrivateNatGatewayAddress"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:natgateway"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:natgateway"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AssociateAddress",
         "ec2:AssociateIamInstanceProfile",
         "ec2:AttachClassicLinkVpc",
         "ec2:AttachNetworkInterface",
         "ec2:AttachVolume",
         "ec2:CreateFleet",
         "ec2:CreateImage",
         "ec2:CreateInstanceExportTask",
         "ec2:CreateNetworkInsightsPath",
         "ec2:CreateReplaceRootVolumeTask",
         "ec2:CreateSnapshots",
         "ec2:CreateTags",
         "ec2:DeleteTags",
         "ec2:DescribeInstanceAttribute",
         "ec2:DetachClassicLinkVpc",
         "ec2:DetachNetworkInterface",
         "ec2:DetachVolume",
         "ec2:DisassociateIamInstanceProfile",
         "ec2:GetConsoleOutput",
         "ec2:GetConsoleScreenshot",
         "ec2:GetInstanceTpmEkPub",
         "ec2:GetInstanceUefiData",
         "ec2:GetLaunchTemplateData",
         "ec2:GetPasswordData",
         "ec2:ImportInstance",
         "ec2:ModifyInstanceAttribute",
         "ec2:ModifyInstanceCapacityReservationAttributes",
         "ec2:ModifyInstanceCpuOptions",
         "ec2:ModifyInstanceCreditSpecification",
         "ec2:ModifyInstanceEventStartTime",
         "ec2:ModifyInstanceMaintenanceOptions",
         "ec2:ModifyInstanceMetadataOptions",
         "ec2:ModifyInstanceNetworkPerformanceOptions",
         "ec2:ModifyInstancePlacement",
         "ec2:ModifyNetworkInterfaceAttribute",
         "ec2:ModifyPrivateDnsNameOptions",
         "ec2:MonitorInstances",
         "ec2:PauseVolumeIO",
         "ec2:RebootInstances",
         "ec2:ReplaceIamInstanceProfileAssociation",
         "ec2:ReportInstanceStatus",
         "ec2:ResetInstanceAttribute",
         "ec2:RunInstances",
         "ec2:SendDiagnosticInterrupt",
         "ec2:SendSpotInstanceInterruptions",
         "ec2:StartInstances",
         "ec2:StopInstances",
         "ec2:TerminateInstances",
         "ec2:UnmonitorInstances"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AssociateAddress",
        "ec2:AssociateIamInstanceProfile",
        "ec2:AttachClassicLinkVpc",
        "ec2:AttachNetworkInterface",
        "ec2:AttachVolume",
        "ec2:CreateFleet",
        "ec2:CreateImage",
        "ec2:CreateInstanceExportTask",
        "ec2:CreateNetworkInsightsPath",
        "ec2:CreateReplaceRootVolumeTask",
        "ec2:CreateSnapshots",
        "ec2:CreateTags",
        "ec2:DeleteTags",
        "ec2:DescribeInstanceAttribute",
        "ec2:DetachClassicLinkVpc",
        "ec2:DetachNetworkInterface",
        "ec2:DetachVolume",
        "ec2:DisassociateIamInstanceProfile",
        "ec2:GetConsoleOutput",
        "ec2:GetConsoleScreenshot",
        "ec2:GetInstanceTpmEkPub",
        "ec2:GetInstanceUefiData",
        "ec2:GetLaunchTemplateData",
        "ec2:GetPasswordData",
        "ec2:ImportInstance",
        "ec2:ModifyInstanceAttribute",
        "ec2:ModifyInstanceCapacityReservationAttributes",
        "ec2:ModifyInstanceCpuOptions",
        "ec2:ModifyInstanceCreditSpecification",
        "ec2:ModifyInstanceEventStartTime",
        "ec2:ModifyInstanceMaintenanceOptions",
        "ec2:ModifyInstanceMetadataOptions",
        "ec2:ModifyInstanceNetworkPerformanceOptions",
        "ec2:ModifyInstancePlacement",
        "ec2:ModifyNetworkInterfaceAttribute",
        "ec2:ModifyPrivateDnsNameOptions",
        "ec2:MonitorInstances",
        "ec2:PauseVolumeIO",
        "ec2:RebootInstances",
        "ec2:ReplaceIamInstanceProfileAssociation",
        "ec2:ReportInstanceStatus",
        "ec2:ResetInstanceAttribute",
        "ec2:RunInstances",
        "ec2:SendDiagnosticInterrupt",
        "ec2:SendSpotInstanceInterruptions",
        "ec2:StartInstances",
        "ec2:StopInstances",
        "ec2:TerminateInstances",
        "ec2:UnmonitorInstances"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:instance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:instance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AssociateClientVpnTargetNetwork",
         "ec2:AssociateRouteTable",
         "ec2:AssociateSubnetCidrBlock",
         "ec2:AssociateTransitGatewayMulticastDomain",
         "ec2:CreateClientVpnRoute",
         "ec2:CreateFleet",
         "ec2:CreateFlowLogs",
         "ec2:CreateInstanceConnectEndpoint",
         "ec2:CreateNatGateway",
         "ec2:CreateNetworkInterface",
         "ec2:CreateSubnet",
         "ec2:CreateTags",
         "ec2:CreateTransitGatewayVpcAttachment",
         "ec2:CreateVerifiedAccessEndpoint",
         "ec2:CreateVpcBlockPublicAccessExclusion",
         "ec2:CreateVpcEndpoint",
         "ec2:DeleteClientVpnRoute",
         "ec2:DeleteSubnet",
         "ec2:DeleteTags",
         "ec2:DisassociateRouteTable",
         "ec2:DisassociateSubnetCidrBlock",
         "ec2:DisassociateTransitGatewayMulticastDomain",
         "ec2:ImportInstance",
         "ec2:ModifyFleet",
         "ec2:ModifySpotFleetRequest",
         "ec2:ModifySubnetAttribute",
         "ec2:ModifyTransitGatewayVpcAttachment",
         "ec2:ModifyVerifiedAccessEndpoint",
         "ec2:ModifyVpcEndpoint",
         "ec2:ReplaceNetworkAclAssociation",
         "ec2:ReplaceRouteTableAssociation",
         "ec2:RequestSpotFleet",
         "ec2:RequestSpotInstances",
         "ec2:RunInstances"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AssociateClientVpnTargetNetwork",
        "ec2:AssociateRouteTable",
        "ec2:AssociateSubnetCidrBlock",
        "ec2:AssociateTransitGatewayMulticastDomain",
        "ec2:CreateClientVpnRoute",
        "ec2:CreateFleet",
        "ec2:CreateFlowLogs",
        "ec2:CreateInstanceConnectEndpoint",
        "ec2:CreateNatGateway",
        "ec2:CreateNetworkInterface",
        "ec2:CreateSubnet",
        "ec2:CreateTags",
        "ec2:CreateTransitGatewayVpcAttachment",
        "ec2:CreateVerifiedAccessEndpoint",
        "ec2:CreateVpcBlockPublicAccessExclusion",
        "ec2:CreateVpcEndpoint",
        "ec2:DeleteClientVpnRoute",
        "ec2:DeleteSubnet",
        "ec2:DeleteTags",
        "ec2:DisassociateRouteTable",
        "ec2:DisassociateSubnetCidrBlock",
        "ec2:DisassociateTransitGatewayMulticastDomain",
        "ec2:ImportInstance",
        "ec2:ModifyFleet",
        "ec2:ModifySpotFleetRequest",
        "ec2:ModifySubnetAttribute",
        "ec2:ModifyTransitGatewayVpcAttachment",
        "ec2:ModifyVerifiedAccessEndpoint",
        "ec2:ModifyVpcEndpoint",
        "ec2:ReplaceNetworkAclAssociation",
        "ec2:ReplaceRouteTableAssociation",
        "ec2:RequestSpotFleet",
        "ec2:RequestSpotInstances",
        "ec2:RunInstances"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:subnet"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:subnet"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AssociateDhcpOptions",
         "ec2:CreateDhcpOptions",
         "ec2:CreateTags",
         "ec2:DeleteDhcpOptions",
         "ec2:DeleteTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AssociateDhcpOptions",
        "ec2:CreateDhcpOptions",
        "ec2:CreateTags",
        "ec2:DeleteDhcpOptions",
        "ec2:DeleteTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:dhcp-options"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:dhcp-options"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AssociateEnclaveCertificateIamRole",
         "ec2:DisassociateEnclaveCertificateIamRole",
         "ec2:GetAssociatedEnclaveCertificateIamRoles"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AssociateEnclaveCertificateIamRole",
        "ec2:DisassociateEnclaveCertificateIamRole",
        "ec2:GetAssociatedEnclaveCertificateIamRoles"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:certificate"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:certificate"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AssociateEnclaveCertificateIamRole",
         "ec2:DisassociateEnclaveCertificateIamRole"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AssociateEnclaveCertificateIamRole",
        "ec2:DisassociateEnclaveCertificateIamRole"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:role"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:role"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AssociateInstanceEventWindow",
         "ec2:CreateInstanceEventWindow",
         "ec2:CreateTags",
         "ec2:DeleteInstanceEventWindow",
         "ec2:DeleteTags",
         "ec2:DisassociateInstanceEventWindow",
         "ec2:ModifyInstanceEventWindow"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AssociateInstanceEventWindow",
        "ec2:CreateInstanceEventWindow",
        "ec2:CreateTags",
        "ec2:DeleteInstanceEventWindow",
        "ec2:DeleteTags",
        "ec2:DisassociateInstanceEventWindow",
        "ec2:ModifyInstanceEventWindow"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:instance-event-window"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:instance-event-window"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AssociateIpamResourceDiscovery",
         "ec2:CreateIpam",
         "ec2:CreateIpamExternalResourceVerificationToken",
         "ec2:CreateIpamScope",
         "ec2:CreateTags",
         "ec2:DeleteIpam",
         "ec2:DeleteTags",
         "ec2:DeprovisionIpamByoasn",
         "ec2:ModifyIpam",
         "ec2:ProvisionIpamByoasn"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AssociateIpamResourceDiscovery",
        "ec2:CreateIpam",
        "ec2:CreateIpamExternalResourceVerificationToken",
        "ec2:CreateIpamScope",
        "ec2:CreateTags",
        "ec2:DeleteIpam",
        "ec2:DeleteTags",
        "ec2:DeprovisionIpamByoasn",
        "ec2:ModifyIpam",
        "ec2:ProvisionIpamByoasn"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:ipam"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:ipam"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AssociateIpamResourceDiscovery",
         "ec2:CreateIpamResourceDiscovery",
         "ec2:CreateTags",
         "ec2:DeleteIpamResourceDiscovery",
         "ec2:DeleteTags",
         "ec2:GetIpamDiscoveredAccounts",
         "ec2:GetIpamDiscoveredPublicAddresses",
         "ec2:GetIpamDiscoveredResourceCidrs",
         "ec2:ModifyIpamResourceDiscovery"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AssociateIpamResourceDiscovery",
        "ec2:CreateIpamResourceDiscovery",
        "ec2:CreateTags",
        "ec2:DeleteIpamResourceDiscovery",
        "ec2:DeleteTags",
        "ec2:GetIpamDiscoveredAccounts",
        "ec2:GetIpamDiscoveredPublicAddresses",
        "ec2:GetIpamDiscoveredResourceCidrs",
        "ec2:ModifyIpamResourceDiscovery"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:ipam-resource-discovery"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:ipam-resource-discovery"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AssociateIpamResourceDiscovery",
         "ec2:CreateTags",
         "ec2:DeleteTags",
         "ec2:DisassociateIpamResourceDiscovery"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AssociateIpamResourceDiscovery",
        "ec2:CreateTags",
        "ec2:DeleteTags",
        "ec2:DisassociateIpamResourceDiscovery"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:ipam-resource-discovery-association"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:ipam-resource-discovery-association"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AssociateRouteTable",
         "ec2:AttachInternetGateway",
         "ec2:CreateInternetGateway",
         "ec2:CreateNetworkInsightsPath",
         "ec2:CreateTags",
         "ec2:DeleteInternetGateway",
         "ec2:DeleteTags",
         "ec2:DetachInternetGateway",
         "ec2:DisassociateRouteTable",
         "ec2:ReplaceRouteTableAssociation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AssociateRouteTable",
        "ec2:AttachInternetGateway",
        "ec2:CreateInternetGateway",
        "ec2:CreateNetworkInsightsPath",
        "ec2:CreateTags",
        "ec2:DeleteInternetGateway",
        "ec2:DeleteTags",
        "ec2:DetachInternetGateway",
        "ec2:DisassociateRouteTable",
        "ec2:ReplaceRouteTableAssociation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:internet-gateway"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:internet-gateway"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AssociateRouteTable",
         "ec2:CreateRoute",
         "ec2:CreateRouteTable",
         "ec2:CreateTags",
         "ec2:CreateVpcEndpoint",
         "ec2:DeleteRoute",
         "ec2:DeleteRouteTable",
         "ec2:DeleteTags",
         "ec2:DisableVgwRoutePropagation",
         "ec2:DisassociateRouteTable",
         "ec2:EnableVgwRoutePropagation",
         "ec2:ModifyVpcEndpoint",
         "ec2:ReplaceRoute",
         "ec2:ReplaceRouteTableAssociation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AssociateRouteTable",
        "ec2:CreateRoute",
        "ec2:CreateRouteTable",
        "ec2:CreateTags",
        "ec2:CreateVpcEndpoint",
        "ec2:DeleteRoute",
        "ec2:DeleteRouteTable",
        "ec2:DeleteTags",
        "ec2:DisableVgwRoutePropagation",
        "ec2:DisassociateRouteTable",
        "ec2:EnableVgwRoutePropagation",
        "ec2:ModifyVpcEndpoint",
        "ec2:ReplaceRoute",
        "ec2:ReplaceRouteTableAssociation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:route-table"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:route-table"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AssociateRouteTable",
         "ec2:AttachVpnGateway",
         "ec2:CreateNetworkInsightsPath",
         "ec2:CreateTags",
         "ec2:CreateVpnConnection",
         "ec2:CreateVpnGateway",
         "ec2:DeleteTags",
         "ec2:DeleteVpnGateway",
         "ec2:DetachVpnGateway",
         "ec2:DisableVgwRoutePropagation",
         "ec2:DisassociateRouteTable",
         "ec2:EnableVgwRoutePropagation",
         "ec2:ReplaceRouteTableAssociation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AssociateRouteTable",
        "ec2:AttachVpnGateway",
        "ec2:CreateNetworkInsightsPath",
        "ec2:CreateTags",
        "ec2:CreateVpnConnection",
        "ec2:CreateVpnGateway",
        "ec2:DeleteTags",
        "ec2:DeleteVpnGateway",
        "ec2:DetachVpnGateway",
        "ec2:DisableVgwRoutePropagation",
        "ec2:DisassociateRouteTable",
        "ec2:EnableVgwRoutePropagation",
        "ec2:ReplaceRouteTableAssociation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:vpn-gateway"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:vpn-gateway"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AssociateTransitGatewayPolicyTable",
         "ec2:CreateTags",
         "ec2:CreateTransitGatewayPolicyTable",
         "ec2:DeleteTags",
         "ec2:DeleteTransitGatewayPolicyTable",
         "ec2:DisassociateTransitGatewayPolicyTable",
         "ec2:GetTransitGatewayPolicyTableAssociations",
         "ec2:GetTransitGatewayPolicyTableEntries"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AssociateTransitGatewayPolicyTable",
        "ec2:CreateTags",
        "ec2:CreateTransitGatewayPolicyTable",
        "ec2:DeleteTags",
        "ec2:DeleteTransitGatewayPolicyTable",
        "ec2:DisassociateTransitGatewayPolicyTable",
        "ec2:GetTransitGatewayPolicyTableAssociations",
        "ec2:GetTransitGatewayPolicyTableEntries"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:transit-gateway-policy-table"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:transit-gateway-policy-table"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AssociateTransitGatewayRouteTable",
         "ec2:CreateTags",
         "ec2:CreateTransitGatewayPrefixListReference",
         "ec2:CreateTransitGatewayRoute",
         "ec2:CreateTransitGatewayRouteTable",
         "ec2:CreateTransitGatewayRouteTableAnnouncement",
         "ec2:DeleteTags",
         "ec2:DeleteTransitGatewayPrefixListReference",
         "ec2:DeleteTransitGatewayRoute",
         "ec2:DeleteTransitGatewayRouteTable",
         "ec2:DisableTransitGatewayRouteTablePropagation",
         "ec2:DisassociateTransitGatewayRouteTable",
         "ec2:EnableTransitGatewayRouteTablePropagation",
         "ec2:ModifyTransitGateway",
         "ec2:ModifyTransitGatewayPrefixListReference",
         "ec2:ReplaceTransitGatewayRoute",
         "ec2:SearchTransitGatewayRoutes"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AssociateTransitGatewayRouteTable",
        "ec2:CreateTags",
        "ec2:CreateTransitGatewayPrefixListReference",
        "ec2:CreateTransitGatewayRoute",
        "ec2:CreateTransitGatewayRouteTable",
        "ec2:CreateTransitGatewayRouteTableAnnouncement",
        "ec2:DeleteTags",
        "ec2:DeleteTransitGatewayPrefixListReference",
        "ec2:DeleteTransitGatewayRoute",
        "ec2:DeleteTransitGatewayRouteTable",
        "ec2:DisableTransitGatewayRouteTablePropagation",
        "ec2:DisassociateTransitGatewayRouteTable",
        "ec2:EnableTransitGatewayRouteTablePropagation",
        "ec2:ModifyTransitGateway",
        "ec2:ModifyTransitGatewayPrefixListReference",
        "ec2:ReplaceTransitGatewayRoute",
        "ec2:SearchTransitGatewayRoutes"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:transit-gateway-route-table"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:transit-gateway-route-table"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AssociateVerifiedAccessInstanceWebAcl",
         "ec2:AttachVerifiedAccessTrustProvider",
         "ec2:CreateTags",
         "ec2:CreateVerifiedAccessGroup",
         "ec2:CreateVerifiedAccessInstance",
         "ec2:DeleteTags",
         "ec2:DeleteVerifiedAccessInstance",
         "ec2:DetachVerifiedAccessTrustProvider",
         "ec2:DisassociateVerifiedAccessInstanceWebAcl",
         "ec2:ExportVerifiedAccessInstanceClientConfiguration",
         "ec2:GetVerifiedAccessInstanceWebAcl",
         "ec2:ModifyVerifiedAccessGroup",
         "ec2:ModifyVerifiedAccessInstance",
         "ec2:ModifyVerifiedAccessInstanceLoggingConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AssociateVerifiedAccessInstanceWebAcl",
        "ec2:AttachVerifiedAccessTrustProvider",
        "ec2:CreateTags",
        "ec2:CreateVerifiedAccessGroup",
        "ec2:CreateVerifiedAccessInstance",
        "ec2:DeleteTags",
        "ec2:DeleteVerifiedAccessInstance",
        "ec2:DetachVerifiedAccessTrustProvider",
        "ec2:DisassociateVerifiedAccessInstanceWebAcl",
        "ec2:ExportVerifiedAccessInstanceClientConfiguration",
        "ec2:GetVerifiedAccessInstanceWebAcl",
        "ec2:ModifyVerifiedAccessGroup",
        "ec2:ModifyVerifiedAccessInstance",
        "ec2:ModifyVerifiedAccessInstanceLoggingConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:verified-access-instance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:verified-access-instance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AssociateVpcCidrBlock",
         "ec2:CreateTags",
         "ec2:CreateVpc",
         "ec2:DeleteTags",
         "ec2:DisassociateRouteTable",
         "ec2:ReplaceRouteTableAssociation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AssociateVpcCidrBlock",
        "ec2:CreateTags",
        "ec2:CreateVpc",
        "ec2:DeleteTags",
        "ec2:DisassociateRouteTable",
        "ec2:ReplaceRouteTableAssociation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:ipv6pool-ec2"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:ipv6pool-ec2"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AttachVerifiedAccessTrustProvider",
         "ec2:CreateTags",
         "ec2:CreateVerifiedAccessTrustProvider",
         "ec2:DeleteTags",
         "ec2:DeleteVerifiedAccessTrustProvider",
         "ec2:DetachVerifiedAccessTrustProvider",
         "ec2:ModifyVerifiedAccessTrustProvider"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AttachVerifiedAccessTrustProvider",
        "ec2:CreateTags",
        "ec2:CreateVerifiedAccessTrustProvider",
        "ec2:DeleteTags",
        "ec2:DeleteVerifiedAccessTrustProvider",
        "ec2:DetachVerifiedAccessTrustProvider",
        "ec2:ModifyVerifiedAccessTrustProvider"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:verified-access-trust-provider"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:verified-access-trust-provider"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AttachVolume",
         "ec2:CreateFleet",
         "ec2:CreateReplaceRootVolumeTask",
         "ec2:CreateSnapshot",
         "ec2:CreateSnapshots",
         "ec2:CreateTags",
         "ec2:CreateVolume",
         "ec2:DeleteTags",
         "ec2:DeleteVolume",
         "ec2:DescribeVolumeAttribute",
         "ec2:DetachVolume",
         "ec2:EnableVolumeIO",
         "ec2:ImportInstance",
         "ec2:ImportVolume",
         "ec2:ModifyInstanceAttribute",
         "ec2:ModifyVolume",
         "ec2:ModifyVolumeAttribute",
         "ec2:PauseVolumeIO",
         "ec2:RunInstances"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AttachVolume",
        "ec2:CreateFleet",
        "ec2:CreateReplaceRootVolumeTask",
        "ec2:CreateSnapshot",
        "ec2:CreateSnapshots",
        "ec2:CreateTags",
        "ec2:CreateVolume",
        "ec2:DeleteTags",
        "ec2:DeleteVolume",
        "ec2:DescribeVolumeAttribute",
        "ec2:DetachVolume",
        "ec2:EnableVolumeIO",
        "ec2:ImportInstance",
        "ec2:ImportVolume",
        "ec2:ModifyInstanceAttribute",
        "ec2:ModifyVolume",
        "ec2:ModifyVolumeAttribute",
        "ec2:PauseVolumeIO",
        "ec2:RunInstances"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:volume"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:volume"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:AuthorizeSecurityGroupEgress",
         "ec2:AuthorizeSecurityGroupIngress",
         "ec2:CreateTags",
         "ec2:DeleteTags",
         "ec2:ModifySecurityGroupRules"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:AuthorizeSecurityGroupEgress",
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CreateTags",
        "ec2:DeleteTags",
        "ec2:ModifySecurityGroupRules"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:security-group-rule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:security-group-rule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CancelCapacityReservationFleets",
         "ec2:CreateCapacityReservationFleet",
         "ec2:CreateTags",
         "ec2:DeleteTags",
         "ec2:ModifyCapacityReservationFleet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CancelCapacityReservationFleets",
        "ec2:CreateCapacityReservationFleet",
        "ec2:CreateTags",
        "ec2:DeleteTags",
        "ec2:ModifyCapacityReservationFleet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:capacity-reservation-fleet"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:capacity-reservation-fleet"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CancelDeclarativePoliciesReport",
         "ec2:CreateTags",
         "ec2:DeleteTags",
         "ec2:GetDeclarativePoliciesReportSummary"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CancelDeclarativePoliciesReport",
        "ec2:CreateTags",
        "ec2:DeleteTags",
        "ec2:GetDeclarativePoliciesReportSummary"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:declarative-policies-report"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:declarative-policies-report"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CancelExportTask",
         "ec2:CreateTags",
         "ec2:DeleteTags",
         "ec2:ExportImage"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CancelExportTask",
        "ec2:CreateTags",
        "ec2:DeleteTags",
        "ec2:ExportImage"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:export-image-task"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:export-image-task"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CancelExportTask",
         "ec2:CreateInstanceExportTask",
         "ec2:CreateTags",
         "ec2:DeleteTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CancelExportTask",
        "ec2:CreateInstanceExportTask",
        "ec2:CreateTags",
        "ec2:DeleteTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:export-instance-task"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:export-instance-task"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CancelImageLaunchPermission",
         "ec2:CopyImage",
         "ec2:CreateFleet",
         "ec2:CreateImage",
         "ec2:CreateReplaceRootVolumeTask",
         "ec2:CreateRestoreImageTask",
         "ec2:CreateStoreImageTask",
         "ec2:CreateTags",
         "ec2:DeleteTags",
         "ec2:DeregisterImage",
         "ec2:DescribeImageAttribute",
         "ec2:DisableFastLaunch",
         "ec2:DisableImage",
         "ec2:DisableImageDeprecation",
         "ec2:DisableImageDeregistrationProtection",
         "ec2:EnableFastLaunch",
         "ec2:EnableImage",
         "ec2:EnableImageDeprecation",
         "ec2:EnableImageDeregistrationProtection",
         "ec2:ExportImage",
         "ec2:ImportImage",
         "ec2:ModifyFleet",
         "ec2:ModifyImageAttribute",
         "ec2:RegisterImage",
         "ec2:RequestSpotFleet",
         "ec2:RequestSpotInstances",
         "ec2:ResetImageAttribute",
         "ec2:RestoreImageFromRecycleBin",
         "ec2:RunInstances"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CancelImageLaunchPermission",
        "ec2:CopyImage",
        "ec2:CreateFleet",
        "ec2:CreateImage",
        "ec2:CreateReplaceRootVolumeTask",
        "ec2:CreateRestoreImageTask",
        "ec2:CreateStoreImageTask",
        "ec2:CreateTags",
        "ec2:DeleteTags",
        "ec2:DeregisterImage",
        "ec2:DescribeImageAttribute",
        "ec2:DisableFastLaunch",
        "ec2:DisableImage",
        "ec2:DisableImageDeprecation",
        "ec2:DisableImageDeregistrationProtection",
        "ec2:EnableFastLaunch",
        "ec2:EnableImage",
        "ec2:EnableImageDeprecation",
        "ec2:EnableImageDeregistrationProtection",
        "ec2:ExportImage",
        "ec2:ImportImage",
        "ec2:ModifyFleet",
        "ec2:ModifyImageAttribute",
        "ec2:RegisterImage",
        "ec2:RequestSpotFleet",
        "ec2:RequestSpotInstances",
        "ec2:ResetImageAttribute",
        "ec2:RestoreImageFromRecycleBin",
        "ec2:RunInstances"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:image"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:image"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CancelImportTask",
         "ec2:CreateTags",
         "ec2:DeleteTags",
         "ec2:ImportImage"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CancelImportTask",
        "ec2:CreateTags",
        "ec2:DeleteTags",
        "ec2:ImportImage"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:import-image-task"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:import-image-task"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CancelImportTask",
         "ec2:CreateTags",
         "ec2:DeleteTags",
         "ec2:ImportSnapshot"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CancelImportTask",
        "ec2:CreateTags",
        "ec2:DeleteTags",
        "ec2:ImportSnapshot"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:import-snapshot-task"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:import-snapshot-task"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CancelSpotFleetRequests",
         "ec2:CreateTags",
         "ec2:DeleteTags",
         "ec2:DescribeSpotFleetInstances",
         "ec2:DescribeSpotFleetRequestHistory",
         "ec2:ModifySpotFleetRequest",
         "ec2:RequestSpotFleet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CancelSpotFleetRequests",
        "ec2:CreateTags",
        "ec2:DeleteTags",
        "ec2:DescribeSpotFleetInstances",
        "ec2:DescribeSpotFleetRequestHistory",
        "ec2:ModifySpotFleetRequest",
        "ec2:RequestSpotFleet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:spot-fleet-request"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:spot-fleet-request"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CancelSpotInstanceRequests",
         "ec2:CreateTags",
         "ec2:DeleteTags",
         "ec2:RequestSpotInstances"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CancelSpotInstanceRequests",
        "ec2:CreateTags",
        "ec2:DeleteTags",
        "ec2:RequestSpotInstances"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:spot-instances-request"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:spot-instances-request"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CopyFpgaImage",
         "ec2:CreateFpgaImage",
         "ec2:CreateTags",
         "ec2:DeleteFpgaImage",
         "ec2:DeleteTags",
         "ec2:DescribeFpgaImageAttribute",
         "ec2:ModifyFpgaImageAttribute",
         "ec2:ResetFpgaImageAttribute"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CopyFpgaImage",
        "ec2:CreateFpgaImage",
        "ec2:CreateTags",
        "ec2:DeleteFpgaImage",
        "ec2:DeleteTags",
        "ec2:DescribeFpgaImageAttribute",
        "ec2:ModifyFpgaImageAttribute",
        "ec2:ResetFpgaImageAttribute"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:fpga-image"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:fpga-image"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CopyImage",
         "ec2:CopySnapshot",
         "ec2:CreateImage",
         "ec2:CreateReplaceRootVolumeTask",
         "ec2:CreateSnapshot",
         "ec2:CreateSnapshots",
         "ec2:CreateTags",
         "ec2:CreateVolume",
         "ec2:DeleteSnapshot",
         "ec2:DeleteTags",
         "ec2:DescribeSnapshotAttribute",
         "ec2:DisableFastSnapshotRestores",
         "ec2:EnableFastSnapshotRestores",
         "ec2:ImportImage",
         "ec2:ImportSnapshot",
         "ec2:LockSnapshot",
         "ec2:ModifySnapshotAttribute",
         "ec2:ModifySnapshotTier",
         "ec2:RegisterImage",
         "ec2:RequestSpotFleet",
         "ec2:RequestSpotInstances",
         "ec2:ResetSnapshotAttribute",
         "ec2:RestoreSnapshotFromRecycleBin",
         "ec2:RestoreSnapshotTier",
         "ec2:RunInstances",
         "ec2:UnlockSnapshot"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CopyImage",
        "ec2:CopySnapshot",
        "ec2:CreateImage",
        "ec2:CreateReplaceRootVolumeTask",
        "ec2:CreateSnapshot",
        "ec2:CreateSnapshots",
        "ec2:CreateTags",
        "ec2:CreateVolume",
        "ec2:DeleteSnapshot",
        "ec2:DeleteTags",
        "ec2:DescribeSnapshotAttribute",
        "ec2:DisableFastSnapshotRestores",
        "ec2:EnableFastSnapshotRestores",
        "ec2:ImportImage",
        "ec2:ImportSnapshot",
        "ec2:LockSnapshot",
        "ec2:ModifySnapshotAttribute",
        "ec2:ModifySnapshotTier",
        "ec2:RegisterImage",
        "ec2:RequestSpotFleet",
        "ec2:RequestSpotInstances",
        "ec2:ResetSnapshotAttribute",
        "ec2:RestoreSnapshotFromRecycleBin",
        "ec2:RestoreSnapshotTier",
        "ec2:RunInstances",
        "ec2:UnlockSnapshot"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:snapshot"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:snapshot"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateCarrierGateway",
         "ec2:CreateTags",
         "ec2:DeleteCarrierGateway",
         "ec2:DeleteTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateCarrierGateway",
        "ec2:CreateTags",
        "ec2:DeleteCarrierGateway",
        "ec2:DeleteTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:carrier-gateway"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:carrier-gateway"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateCoipCidr",
         "ec2:CreateCoipPool",
         "ec2:CreateCoipPoolPermission",
         "ec2:CreateTags",
         "ec2:DeleteCoipCidr",
         "ec2:DeleteCoipPool",
         "ec2:DeleteCoipPoolPermission",
         "ec2:DeleteTags",
         "ec2:GetCoipPoolUsage"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateCoipCidr",
        "ec2:CreateCoipPool",
        "ec2:CreateCoipPoolPermission",
        "ec2:CreateTags",
        "ec2:DeleteCoipCidr",
        "ec2:DeleteCoipPool",
        "ec2:DeleteCoipPoolPermission",
        "ec2:DeleteTags",
        "ec2:GetCoipPoolUsage"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:coip-pool"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:coip-pool"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateCoipPool",
         "ec2:CreateLocalGatewayRoute",
         "ec2:CreateLocalGatewayRouteTable",
         "ec2:CreateLocalGatewayRouteTablePermission",
         "ec2:CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation",
         "ec2:CreateLocalGatewayRouteTableVpcAssociation",
         "ec2:CreateTags",
         "ec2:DeleteLocalGatewayRoute",
         "ec2:DeleteLocalGatewayRouteTable",
         "ec2:DeleteLocalGatewayRouteTablePermission",
         "ec2:DeleteTags",
         "ec2:ModifyLocalGatewayRoute",
         "ec2:SearchLocalGatewayRoutes"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateCoipPool",
        "ec2:CreateLocalGatewayRoute",
        "ec2:CreateLocalGatewayRouteTable",
        "ec2:CreateLocalGatewayRouteTablePermission",
        "ec2:CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation",
        "ec2:CreateLocalGatewayRouteTableVpcAssociation",
        "ec2:CreateTags",
        "ec2:DeleteLocalGatewayRoute",
        "ec2:DeleteLocalGatewayRouteTable",
        "ec2:DeleteLocalGatewayRouteTablePermission",
        "ec2:DeleteTags",
        "ec2:ModifyLocalGatewayRoute",
        "ec2:SearchLocalGatewayRoutes"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:local-gateway-route-table"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:local-gateway-route-table"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateCustomerGateway",
         "ec2:CreateTags",
         "ec2:CreateVpnConnection",
         "ec2:DeleteCustomerGateway",
         "ec2:DeleteTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateCustomerGateway",
        "ec2:CreateTags",
        "ec2:CreateVpnConnection",
        "ec2:DeleteCustomerGateway",
        "ec2:DeleteTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:customer-gateway"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:customer-gateway"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateEgressOnlyInternetGateway",
         "ec2:CreateTags",
         "ec2:DeleteEgressOnlyInternetGateway",
         "ec2:DeleteTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateEgressOnlyInternetGateway",
        "ec2:CreateTags",
        "ec2:DeleteEgressOnlyInternetGateway",
        "ec2:DeleteTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:egress-only-internet-gateway"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:egress-only-internet-gateway"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateFleet",
         "ec2:CreateTags",
         "ec2:DeleteFleets",
         "ec2:DeleteTags",
         "ec2:DescribeFleetHistory",
         "ec2:DescribeFleetInstances",
         "ec2:ModifyFleet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateFleet",
        "ec2:CreateTags",
        "ec2:DeleteFleets",
        "ec2:DeleteTags",
        "ec2:DescribeFleetHistory",
        "ec2:DescribeFleetInstances",
        "ec2:ModifyFleet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:fleet"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:fleet"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateFleet",
         "ec2:CreateLaunchTemplate",
         "ec2:CreateLaunchTemplateVersion",
         "ec2:CreateTags",
         "ec2:DeleteLaunchTemplate",
         "ec2:DeleteLaunchTemplateVersions",
         "ec2:DeleteTags",
         "ec2:EnableFastLaunch",
         "ec2:ModifyFleet",
         "ec2:ModifyLaunchTemplate",
         "ec2:ModifySpotFleetRequest",
         "ec2:RequestSpotFleet",
         "ec2:RunInstances"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateFleet",
        "ec2:CreateLaunchTemplate",
        "ec2:CreateLaunchTemplateVersion",
        "ec2:CreateTags",
        "ec2:DeleteLaunchTemplate",
        "ec2:DeleteLaunchTemplateVersions",
        "ec2:DeleteTags",
        "ec2:EnableFastLaunch",
        "ec2:ModifyFleet",
        "ec2:ModifyLaunchTemplate",
        "ec2:ModifySpotFleetRequest",
        "ec2:RequestSpotFleet",
        "ec2:RunInstances"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:launch-template"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:launch-template"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateFleet",
         "ec2:CreatePlacementGroup",
         "ec2:CreateTags",
         "ec2:DeletePlacementGroup",
         "ec2:DeleteResourcePolicy",
         "ec2:DeleteTags",
         "ec2:GetResourcePolicy",
         "ec2:ModifyInstancePlacement",
         "ec2:PutResourcePolicy",
         "ec2:RequestSpotFleet",
         "ec2:RequestSpotInstances",
         "ec2:RunInstances"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateFleet",
        "ec2:CreatePlacementGroup",
        "ec2:CreateTags",
        "ec2:DeletePlacementGroup",
        "ec2:DeleteResourcePolicy",
        "ec2:DeleteTags",
        "ec2:GetResourcePolicy",
        "ec2:ModifyInstancePlacement",
        "ec2:PutResourcePolicy",
        "ec2:RequestSpotFleet",
        "ec2:RequestSpotInstances",
        "ec2:RunInstances"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:placement-group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:placement-group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateFlowLogs",
         "ec2:CreateNetworkInsightsPath",
         "ec2:CreateTags",
         "ec2:CreateTransitGateway",
         "ec2:CreateTransitGatewayMulticastDomain",
         "ec2:CreateTransitGatewayPeeringAttachment",
         "ec2:CreateTransitGatewayPolicyTable",
         "ec2:CreateTransitGatewayRouteTable",
         "ec2:CreateTransitGatewayVpcAttachment",
         "ec2:CreateVpnConnection",
         "ec2:DeleteTags",
         "ec2:DeleteTransitGateway",
         "ec2:ModifyTransitGateway"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateFlowLogs",
        "ec2:CreateNetworkInsightsPath",
        "ec2:CreateTags",
        "ec2:CreateTransitGateway",
        "ec2:CreateTransitGatewayMulticastDomain",
        "ec2:CreateTransitGatewayPeeringAttachment",
        "ec2:CreateTransitGatewayPolicyTable",
        "ec2:CreateTransitGatewayRouteTable",
        "ec2:CreateTransitGatewayVpcAttachment",
        "ec2:CreateVpnConnection",
        "ec2:DeleteTags",
        "ec2:DeleteTransitGateway",
        "ec2:ModifyTransitGateway"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:transit-gateway"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:transit-gateway"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateFlowLogs",
         "ec2:CreateTags",
         "ec2:DeleteFlowLogs",
         "ec2:DeleteTags",
         "ec2:GetFlowLogsIntegrationTemplate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateFlowLogs",
        "ec2:CreateTags",
        "ec2:DeleteFlowLogs",
        "ec2:DeleteTags",
        "ec2:GetFlowLogsIntegrationTemplate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:vpc-flow-log"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:vpc-flow-log"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateInstanceConnectEndpoint",
         "ec2:CreateTags",
         "ec2:DeleteInstanceConnectEndpoint",
         "ec2:DeleteTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateInstanceConnectEndpoint",
        "ec2:CreateTags",
        "ec2:DeleteInstanceConnectEndpoint",
        "ec2:DeleteTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:instance-connect-endpoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:instance-connect-endpoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateIpamExternalResourceVerificationToken",
         "ec2:CreateTags",
         "ec2:DeleteIpamExternalResourceVerificationToken",
         "ec2:DeleteTags",
         "ec2:ProvisionIpamPoolCidr"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateIpamExternalResourceVerificationToken",
        "ec2:CreateTags",
        "ec2:DeleteIpamExternalResourceVerificationToken",
        "ec2:DeleteTags",
        "ec2:ProvisionIpamPoolCidr"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:ipam-external-resource-verification-token"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:ipam-external-resource-verification-token"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateIpamPool",
         "ec2:CreateIpamScope",
         "ec2:CreateTags",
         "ec2:DeleteIpamScope",
         "ec2:DeleteTags",
         "ec2:GetIpamAddressHistory",
         "ec2:GetIpamResourceCidrs",
         "ec2:ModifyIpamResourceCidr",
         "ec2:ModifyIpamScope"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateIpamPool",
        "ec2:CreateIpamScope",
        "ec2:CreateTags",
        "ec2:DeleteIpamScope",
        "ec2:DeleteTags",
        "ec2:GetIpamAddressHistory",
        "ec2:GetIpamResourceCidrs",
        "ec2:ModifyIpamResourceCidr",
        "ec2:ModifyIpamScope"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:ipam-scope"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:ipam-scope"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateKeyPair",
         "ec2:CreateTags",
         "ec2:DeleteKeyPair",
         "ec2:DeleteTags",
         "ec2:ImportKeyPair",
         "ec2:RequestSpotFleet",
         "ec2:RequestSpotInstances",
         "ec2:RunInstances"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateKeyPair",
        "ec2:CreateTags",
        "ec2:DeleteKeyPair",
        "ec2:DeleteTags",
        "ec2:ImportKeyPair",
        "ec2:RequestSpotFleet",
        "ec2:RequestSpotInstances",
        "ec2:RunInstances"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:key-pair"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:key-pair"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateLocalGatewayRoute",
         "ec2:CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation",
         "ec2:CreateTags",
         "ec2:DeleteTags",
         "ec2:ModifyLocalGatewayRoute"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateLocalGatewayRoute",
        "ec2:CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation",
        "ec2:CreateTags",
        "ec2:DeleteTags",
        "ec2:ModifyLocalGatewayRoute"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:local-gateway-virtual-interface-group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:local-gateway-virtual-interface-group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateLocalGatewayRoute",
         "ec2:CreateManagedPrefixList",
         "ec2:CreateTags",
         "ec2:CreateTransitGatewayPrefixListReference",
         "ec2:DeleteLocalGatewayRoute",
         "ec2:DeleteManagedPrefixList",
         "ec2:DeleteTags",
         "ec2:DeleteTransitGatewayPrefixListReference",
         "ec2:GetManagedPrefixListAssociations",
         "ec2:GetManagedPrefixListEntries",
         "ec2:ModifyLocalGatewayRoute",
         "ec2:ModifyManagedPrefixList",
         "ec2:ModifySecurityGroupRules",
         "ec2:ModifyTransitGatewayPrefixListReference",
         "ec2:RestoreManagedPrefixListVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateLocalGatewayRoute",
        "ec2:CreateManagedPrefixList",
        "ec2:CreateTags",
        "ec2:CreateTransitGatewayPrefixListReference",
        "ec2:DeleteLocalGatewayRoute",
        "ec2:DeleteManagedPrefixList",
        "ec2:DeleteTags",
        "ec2:DeleteTransitGatewayPrefixListReference",
        "ec2:GetManagedPrefixListAssociations",
        "ec2:GetManagedPrefixListEntries",
        "ec2:ModifyLocalGatewayRoute",
        "ec2:ModifyManagedPrefixList",
        "ec2:ModifySecurityGroupRules",
        "ec2:ModifyTransitGatewayPrefixListReference",
        "ec2:RestoreManagedPrefixListVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:prefix-list"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:prefix-list"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateLocalGatewayRouteTable",
         "ec2:CreateTags",
         "ec2:DeleteTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateLocalGatewayRouteTable",
        "ec2:CreateTags",
        "ec2:DeleteTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:local-gateway"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:local-gateway"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation",
         "ec2:CreateTags",
         "ec2:DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation",
         "ec2:DeleteTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation",
        "ec2:CreateTags",
        "ec2:DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation",
        "ec2:DeleteTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:local-gateway-route-table-virtual-interface-group-association"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:local-gateway-route-table-virtual-interface-group-association"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateLocalGatewayRouteTableVpcAssociation",
         "ec2:CreateTags",
         "ec2:DeleteLocalGatewayRouteTableVpcAssociation",
         "ec2:DeleteTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateLocalGatewayRouteTableVpcAssociation",
        "ec2:CreateTags",
        "ec2:DeleteLocalGatewayRouteTableVpcAssociation",
        "ec2:DeleteTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:local-gateway-route-table-vpc-association"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:local-gateway-route-table-vpc-association"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateNetworkAcl",
         "ec2:CreateNetworkAclEntry",
         "ec2:CreateTags",
         "ec2:DeleteNetworkAcl",
         "ec2:DeleteNetworkAclEntry",
         "ec2:DeleteTags",
         "ec2:ReplaceNetworkAclAssociation",
         "ec2:ReplaceNetworkAclEntry"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateNetworkAcl",
        "ec2:CreateNetworkAclEntry",
        "ec2:CreateTags",
        "ec2:DeleteNetworkAcl",
        "ec2:DeleteNetworkAclEntry",
        "ec2:DeleteTags",
        "ec2:ReplaceNetworkAclAssociation",
        "ec2:ReplaceNetworkAclEntry"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:network-acl"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:network-acl"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateNetworkInsightsAccessScope",
         "ec2:CreateTags",
         "ec2:DeleteNetworkInsightsAccessScope",
         "ec2:DeleteTags",
         "ec2:GetNetworkInsightsAccessScopeContent",
         "ec2:StartNetworkInsightsAccessScopeAnalysis"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateNetworkInsightsAccessScope",
        "ec2:CreateTags",
        "ec2:DeleteNetworkInsightsAccessScope",
        "ec2:DeleteTags",
        "ec2:GetNetworkInsightsAccessScopeContent",
        "ec2:StartNetworkInsightsAccessScopeAnalysis"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:network-insights-access-scope"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:network-insights-access-scope"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateNetworkInsightsPath",
         "ec2:CreateTags",
         "ec2:DeleteNetworkInsightsPath",
         "ec2:DeleteTags",
         "ec2:StartNetworkInsightsAnalysis"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateNetworkInsightsPath",
        "ec2:CreateTags",
        "ec2:DeleteNetworkInsightsPath",
        "ec2:DeleteTags",
        "ec2:StartNetworkInsightsAnalysis"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:network-insights-path"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:network-insights-path"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateNetworkInsightsPath",
         "ec2:CreateTags",
         "ec2:CreateTrafficMirrorTarget",
         "ec2:CreateVpcEndpoint",
         "ec2:CreateVpcEndpointConnectionNotification",
         "ec2:DeleteTags",
         "ec2:DeleteVpcEndpointConnectionNotifications",
         "ec2:DeleteVpcEndpoints",
         "ec2:DescribeVpcEndpointAssociations",
         "ec2:ModifyVpcEndpoint",
         "ec2:ModifyVpcEndpointConnectionNotification"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateNetworkInsightsPath",
        "ec2:CreateTags",
        "ec2:CreateTrafficMirrorTarget",
        "ec2:CreateVpcEndpoint",
        "ec2:CreateVpcEndpointConnectionNotification",
        "ec2:DeleteTags",
        "ec2:DeleteVpcEndpointConnectionNotifications",
        "ec2:DeleteVpcEndpoints",
        "ec2:DescribeVpcEndpointAssociations",
        "ec2:ModifyVpcEndpoint",
        "ec2:ModifyVpcEndpointConnectionNotification"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:vpc-endpoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:vpc-endpoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateReplaceRootVolumeTask",
         "ec2:CreateTags",
         "ec2:DeleteTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateReplaceRootVolumeTask",
        "ec2:CreateTags",
        "ec2:DeleteTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:replace-root-volume-task"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:replace-root-volume-task"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateTags",
         "ec2:DeleteTags",
         "ec2:RunInstances"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateTags",
        "ec2:DeleteTags",
        "ec2:RunInstances"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:elastic-gpu"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:elastic-gpu"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateTags",
         "ec2:DeleteTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateTags",
        "ec2:DeleteTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:host-reservation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:host-reservation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateTags",
         "ec2:DeleteTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateTags",
        "ec2:DeleteTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:local-gateway-virtual-interface"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:local-gateway-virtual-interface"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateTags",
         "ec2:DeleteNetworkInsightsAccessScopeAnalysis",
         "ec2:DeleteTags",
         "ec2:GetNetworkInsightsAccessScopeAnalysisFindings",
         "ec2:StartNetworkInsightsAccessScopeAnalysis"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateTags",
        "ec2:DeleteNetworkInsightsAccessScopeAnalysis",
        "ec2:DeleteTags",
        "ec2:GetNetworkInsightsAccessScopeAnalysisFindings",
        "ec2:StartNetworkInsightsAccessScopeAnalysis"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:network-insights-access-scope-analysis"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:network-insights-access-scope-analysis"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateTags",
         "ec2:DeleteNetworkInsightsAnalysis",
         "ec2:DeleteTags",
         "ec2:StartNetworkInsightsAnalysis"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateTags",
        "ec2:DeleteNetworkInsightsAnalysis",
        "ec2:DeleteTags",
        "ec2:StartNetworkInsightsAnalysis"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:network-insights-analysis"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:network-insights-analysis"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateTags",
         "ec2:DeleteTags",
         "ec2:ModifyReservedInstances"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateTags",
        "ec2:DeleteTags",
        "ec2:ModifyReservedInstances"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:reserved-instances"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:reserved-instances"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateTags",
         "ec2:DeleteTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateTags",
        "ec2:DeleteTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:subnet-cidr-reservation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:subnet-cidr-reservation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateTags",
         "ec2:CreateTrafficMirrorFilter",
         "ec2:CreateTrafficMirrorFilterRule",
         "ec2:CreateTrafficMirrorSession",
         "ec2:DeleteTags",
         "ec2:DeleteTrafficMirrorFilter",
         "ec2:DeleteTrafficMirrorFilterRule",
         "ec2:ModifyTrafficMirrorFilterNetworkServices",
         "ec2:ModifyTrafficMirrorFilterRule",
         "ec2:ModifyTrafficMirrorSession"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateTags",
        "ec2:CreateTrafficMirrorFilter",
        "ec2:CreateTrafficMirrorFilterRule",
        "ec2:CreateTrafficMirrorSession",
        "ec2:DeleteTags",
        "ec2:DeleteTrafficMirrorFilter",
        "ec2:DeleteTrafficMirrorFilterRule",
        "ec2:ModifyTrafficMirrorFilterNetworkServices",
        "ec2:ModifyTrafficMirrorFilterRule",
        "ec2:ModifyTrafficMirrorSession"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:traffic-mirror-filter"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:traffic-mirror-filter"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateTags",
         "ec2:CreateTrafficMirrorFilterRule",
         "ec2:DeleteTags",
         "ec2:DeleteTrafficMirrorFilterRule",
         "ec2:ModifyTrafficMirrorFilterRule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateTags",
        "ec2:CreateTrafficMirrorFilterRule",
        "ec2:DeleteTags",
        "ec2:DeleteTrafficMirrorFilterRule",
        "ec2:ModifyTrafficMirrorFilterRule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:traffic-mirror-filter-rule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:traffic-mirror-filter-rule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateTags",
         "ec2:CreateTrafficMirrorSession",
         "ec2:DeleteTags",
         "ec2:DeleteTrafficMirrorSession",
         "ec2:ModifyTrafficMirrorSession"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateTags",
        "ec2:CreateTrafficMirrorSession",
        "ec2:DeleteTags",
        "ec2:DeleteTrafficMirrorSession",
        "ec2:ModifyTrafficMirrorSession"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:traffic-mirror-session"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:traffic-mirror-session"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateTags",
         "ec2:CreateTrafficMirrorSession",
         "ec2:CreateTrafficMirrorTarget",
         "ec2:DeleteTags",
         "ec2:DeleteTrafficMirrorTarget",
         "ec2:ModifyTrafficMirrorSession"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateTags",
        "ec2:CreateTrafficMirrorSession",
        "ec2:CreateTrafficMirrorTarget",
        "ec2:DeleteTags",
        "ec2:DeleteTrafficMirrorTarget",
        "ec2:ModifyTrafficMirrorSession"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:traffic-mirror-target"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:traffic-mirror-target"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateTags",
         "ec2:CreateTransitGatewayConnectPeer",
         "ec2:DeleteTags",
         "ec2:DeleteTransitGatewayConnectPeer"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateTags",
        "ec2:CreateTransitGatewayConnectPeer",
        "ec2:DeleteTags",
        "ec2:DeleteTransitGatewayConnectPeer"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:transit-gateway-connect-peer"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:transit-gateway-connect-peer"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateTags",
         "ec2:CreateTransitGatewayRouteTableAnnouncement",
         "ec2:DeleteTags",
         "ec2:DeleteTransitGatewayRouteTableAnnouncement",
         "ec2:DisableTransitGatewayRouteTablePropagation",
         "ec2:EnableTransitGatewayRouteTablePropagation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateTags",
        "ec2:CreateTransitGatewayRouteTableAnnouncement",
        "ec2:DeleteTags",
        "ec2:DeleteTransitGatewayRouteTableAnnouncement",
        "ec2:DisableTransitGatewayRouteTablePropagation",
        "ec2:EnableTransitGatewayRouteTablePropagation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:transit-gateway-route-table-announcement"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:transit-gateway-route-table-announcement"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateTags",
         "ec2:CreateVerifiedAccessEndpoint",
         "ec2:DeleteTags",
         "ec2:DeleteVerifiedAccessEndpoint",
         "ec2:GetVerifiedAccessEndpointPolicy",
         "ec2:GetVerifiedAccessEndpointTargets",
         "ec2:ModifyVerifiedAccessEndpoint",
         "ec2:ModifyVerifiedAccessEndpointPolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateTags",
        "ec2:CreateVerifiedAccessEndpoint",
        "ec2:DeleteTags",
        "ec2:DeleteVerifiedAccessEndpoint",
        "ec2:GetVerifiedAccessEndpointPolicy",
        "ec2:GetVerifiedAccessEndpointTargets",
        "ec2:ModifyVerifiedAccessEndpoint",
        "ec2:ModifyVerifiedAccessEndpointPolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:verified-access-endpoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:verified-access-endpoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateTags",
         "ec2:DeleteTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateTags",
        "ec2:DeleteTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:verified-access-endpoint-target"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:verified-access-endpoint-target"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateTags",
         "ec2:CreateVerifiedAccessEndpoint",
         "ec2:CreateVerifiedAccessGroup",
         "ec2:DeleteResourcePolicy",
         "ec2:DeleteTags",
         "ec2:DeleteVerifiedAccessGroup",
         "ec2:GetResourcePolicy",
         "ec2:GetVerifiedAccessGroupPolicy",
         "ec2:ModifyVerifiedAccessEndpoint",
         "ec2:ModifyVerifiedAccessGroup",
         "ec2:ModifyVerifiedAccessGroupPolicy",
         "ec2:PutResourcePolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateTags",
        "ec2:CreateVerifiedAccessEndpoint",
        "ec2:CreateVerifiedAccessGroup",
        "ec2:DeleteResourcePolicy",
        "ec2:DeleteTags",
        "ec2:DeleteVerifiedAccessGroup",
        "ec2:GetResourcePolicy",
        "ec2:GetVerifiedAccessGroupPolicy",
        "ec2:ModifyVerifiedAccessEndpoint",
        "ec2:ModifyVerifiedAccessGroup",
        "ec2:ModifyVerifiedAccessGroupPolicy",
        "ec2:PutResourcePolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:verified-access-group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:verified-access-group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateTags",
         "ec2:DeleteTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateTags",
        "ec2:DeleteTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:verified-access-policy"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:verified-access-policy"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateTags",
         "ec2:CreateVpcBlockPublicAccessExclusion",
         "ec2:DeleteTags",
         "ec2:DeleteVpcBlockPublicAccessExclusion",
         "ec2:ModifyVpcBlockPublicAccessExclusion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateTags",
        "ec2:CreateVpcBlockPublicAccessExclusion",
        "ec2:DeleteTags",
        "ec2:DeleteVpcBlockPublicAccessExclusion",
        "ec2:ModifyVpcBlockPublicAccessExclusion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:vpc-block-public-access-exclusion"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:vpc-block-public-access-exclusion"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateTags",
         "ec2:DeleteTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateTags",
        "ec2:DeleteTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:vpc-endpoint-connection"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:vpc-endpoint-connection"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateTags",
         "ec2:DeleteTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateTags",
        "ec2:DeleteTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:vpc-endpoint-service-permission"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:vpc-endpoint-service-permission"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:CreateTags",
         "ec2:CreateVpnConnection",
         "ec2:CreateVpnConnectionRoute",
         "ec2:DeleteTags",
         "ec2:DeleteVpnConnection",
         "ec2:DeleteVpnConnectionRoute",
         "ec2:GetVpnConnectionDeviceSampleConfiguration",
         "ec2:GetVpnTunnelReplacementStatus",
         "ec2:ModifyVpnConnection",
         "ec2:ModifyVpnConnectionOptions",
         "ec2:ModifyVpnTunnelCertificate",
         "ec2:ModifyVpnTunnelOptions",
         "ec2:ReplaceVpnTunnel"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:CreateTags",
        "ec2:CreateVpnConnection",
        "ec2:CreateVpnConnectionRoute",
        "ec2:DeleteTags",
        "ec2:DeleteVpnConnection",
        "ec2:DeleteVpnConnectionRoute",
        "ec2:GetVpnConnectionDeviceSampleConfiguration",
        "ec2:GetVpnTunnelReplacementStatus",
        "ec2:ModifyVpnConnection",
        "ec2:ModifyVpnConnectionOptions",
        "ec2:ModifyVpnTunnelCertificate",
        "ec2:ModifyVpnTunnelOptions",
        "ec2:ReplaceVpnTunnel"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:vpn-connection"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:vpn-connection"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:GetVpnConnectionDeviceSampleConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:GetVpnConnectionDeviceSampleConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:vpn-connection-device-type"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:vpn-connection-device-type"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:RunInstances"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:RunInstances"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:elastic-inference"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:elastic-inference"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:RunInstances"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:RunInstances"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2:RunInstances",
         "ec2:StartInstances"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2:RunInstances",
        "ec2:StartInstances"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2:license-configuration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2:license-configuration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2-instance-connect:OpenTunnel",
         "ec2-instance-connect:OpenTunnel"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2-instance-connect:OpenTunnel",
        "ec2-instance-connect:OpenTunnel"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2-instance-connect:instance-connect-endpoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2-instance-connect:instance-connect-endpoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ec2-instance-connect:SendSSHPublicKey",
         "ec2-instance-connect:SendSerialConsoleSSHPublicKey"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ec2-instance-connect:SendSSHPublicKey",
        "ec2-instance-connect:SendSerialConsoleSSHPublicKey"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ec2-instance-connect:instance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ec2-instance-connect:instance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ecr:BatchCheckLayerAvailability",
         "ecr:BatchDeleteImage",
         "ecr:BatchGetImage",
         "ecr:BatchGetRepositoryScanningConfiguration",
         "ecr:CompleteLayerUpload",
         "ecr:CreateRepository",
         "ecr:DeleteLifecyclePolicy",
         "ecr:DeleteRepository",
         "ecr:DeleteRepositoryPolicy",
         "ecr:DescribeImageReplicationStatus",
         "ecr:DescribeImageScanFindings",
         "ecr:DescribeImages",
         "ecr:DescribeRepositories",
         "ecr:GetDownloadUrlForLayer",
         "ecr:GetLifecyclePolicy",
         "ecr:GetLifecyclePolicyPreview",
         "ecr:GetRepositoryPolicy",
         "ecr:InitiateLayerUpload",
         "ecr:ListImages",
         "ecr:ListTagsForResource",
         "ecr:PutImage",
         "ecr:PutImageScanningConfiguration",
         "ecr:PutImageTagMutability",
         "ecr:PutLifecyclePolicy",
         "ecr:ReplicateImage",
         "ecr:SetRepositoryPolicy",
         "ecr:StartImageScan",
         "ecr:StartLifecyclePolicyPreview",
         "ecr:TagResource",
         "ecr:UntagResource",
         "ecr:UploadLayerPart"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:BatchDeleteImage",
        "ecr:BatchGetImage",
        "ecr:BatchGetRepositoryScanningConfiguration",
        "ecr:CompleteLayerUpload",
        "ecr:CreateRepository",
        "ecr:DeleteLifecyclePolicy",
        "ecr:DeleteRepository",
        "ecr:DeleteRepositoryPolicy",
        "ecr:DescribeImageReplicationStatus",
        "ecr:DescribeImageScanFindings",
        "ecr:DescribeImages",
        "ecr:DescribeRepositories",
        "ecr:GetDownloadUrlForLayer",
        "ecr:GetLifecyclePolicy",
        "ecr:GetLifecyclePolicyPreview",
        "ecr:GetRepositoryPolicy",
        "ecr:InitiateLayerUpload",
        "ecr:ListImages",
        "ecr:ListTagsForResource",
        "ecr:PutImage",
        "ecr:PutImageScanningConfiguration",
        "ecr:PutImageTagMutability",
        "ecr:PutLifecyclePolicy",
        "ecr:ReplicateImage",
        "ecr:SetRepositoryPolicy",
        "ecr:StartImageScan",
        "ecr:StartLifecyclePolicyPreview",
        "ecr:TagResource",
        "ecr:UntagResource",
        "ecr:UploadLayerPart"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ecr:repository"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ecr:repository"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ecr-public:BatchCheckLayerAvailability",
         "ecr-public:BatchDeleteImage",
         "ecr-public:CompleteLayerUpload",
         "ecr-public:CreateRepository",
         "ecr-public:DeleteRepository",
         "ecr-public:DeleteRepositoryPolicy",
         "ecr-public:DescribeImageTags",
         "ecr-public:DescribeImages",
         "ecr-public:DescribeRepositories",
         "ecr-public:GetRepositoryCatalogData",
         "ecr-public:GetRepositoryPolicy",
         "ecr-public:InitiateLayerUpload",
         "ecr-public:ListTagsForResource",
         "ecr-public:PutImage",
         "ecr-public:PutRepositoryCatalogData",
         "ecr-public:SetRepositoryPolicy",
         "ecr-public:TagResource",
         "ecr-public:UntagResource",
         "ecr-public:UploadLayerPart"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ecr-public:BatchCheckLayerAvailability",
        "ecr-public:BatchDeleteImage",
        "ecr-public:CompleteLayerUpload",
        "ecr-public:CreateRepository",
        "ecr-public:DeleteRepository",
        "ecr-public:DeleteRepositoryPolicy",
        "ecr-public:DescribeImageTags",
        "ecr-public:DescribeImages",
        "ecr-public:DescribeRepositories",
        "ecr-public:GetRepositoryCatalogData",
        "ecr-public:GetRepositoryPolicy",
        "ecr-public:InitiateLayerUpload",
        "ecr-public:ListTagsForResource",
        "ecr-public:PutImage",
        "ecr-public:PutRepositoryCatalogData",
        "ecr-public:SetRepositoryPolicy",
        "ecr-public:TagResource",
        "ecr-public:UntagResource",
        "ecr-public:UploadLayerPart"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ecr-public:repository"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ecr-public:repository"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ecr-public:DescribeRegistries",
         "ecr-public:GetRegistryCatalogData",
         "ecr-public:PutRegistryCatalogData"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ecr-public:DescribeRegistries",
        "ecr-public:GetRegistryCatalogData",
        "ecr-public:PutRegistryCatalogData"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ecr-public:registry"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ecr-public:registry"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ecs:CreateCluster",
         "ecs:DeleteCluster",
         "ecs:DeregisterContainerInstance",
         "ecs:DescribeClusters",
         "ecs:ExecuteCommand",
         "ecs:ListAttributes",
         "ecs:ListContainerInstances",
         "ecs:ListTagsForResource",
         "ecs:PutClusterCapacityProviders",
         "ecs:RegisterContainerInstance",
         "ecs:SubmitAttachmentStateChanges",
         "ecs:SubmitContainerStateChange",
         "ecs:SubmitTaskStateChange",
         "ecs:TagResource",
         "ecs:UntagResource",
         "ecs:UpdateCluster",
         "ecs:UpdateClusterSettings"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ecs:CreateCluster",
        "ecs:DeleteCluster",
        "ecs:DeregisterContainerInstance",
        "ecs:DescribeClusters",
        "ecs:ExecuteCommand",
        "ecs:ListAttributes",
        "ecs:ListContainerInstances",
        "ecs:ListTagsForResource",
        "ecs:PutClusterCapacityProviders",
        "ecs:RegisterContainerInstance",
        "ecs:SubmitAttachmentStateChanges",
        "ecs:SubmitContainerStateChange",
        "ecs:SubmitTaskStateChange",
        "ecs:TagResource",
        "ecs:UntagResource",
        "ecs:UpdateCluster",
        "ecs:UpdateClusterSettings"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ecs:cluster"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ecs:cluster"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ecs:CreateService",
         "ecs:DeleteService",
         "ecs:DescribeServiceDeployments",
         "ecs:DescribeServiceRevisions",
         "ecs:DescribeServices",
         "ecs:ListServiceDeployments",
         "ecs:ListTagsForResource",
         "ecs:TagResource",
         "ecs:UntagResource",
         "ecs:UpdateService",
         "ecs:UpdateServicePrimaryTaskSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ecs:CreateService",
        "ecs:DeleteService",
        "ecs:DescribeServiceDeployments",
        "ecs:DescribeServiceRevisions",
        "ecs:DescribeServices",
        "ecs:ListServiceDeployments",
        "ecs:ListTagsForResource",
        "ecs:TagResource",
        "ecs:UntagResource",
        "ecs:UpdateService",
        "ecs:UpdateServicePrimaryTaskSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ecs:service"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ecs:service"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ecs:DeleteAttributes",
         "ecs:DescribeContainerInstances",
         "ecs:ListTagsForResource",
         "ecs:ListTasks",
         "ecs:Poll",
         "ecs:PutAttributes",
         "ecs:StartTelemetrySession",
         "ecs:TagResource",
         "ecs:UntagResource",
         "ecs:UpdateContainerAgent",
         "ecs:UpdateContainerInstancesState"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ecs:DeleteAttributes",
        "ecs:DescribeContainerInstances",
        "ecs:ListTagsForResource",
        "ecs:ListTasks",
        "ecs:Poll",
        "ecs:PutAttributes",
        "ecs:StartTelemetrySession",
        "ecs:TagResource",
        "ecs:UntagResource",
        "ecs:UpdateContainerAgent",
        "ecs:UpdateContainerInstancesState"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ecs:container-instance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ecs:container-instance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ecs:DeleteCapacityProvider",
         "ecs:DescribeCapacityProviders",
         "ecs:ListTagsForResource",
         "ecs:TagResource",
         "ecs:UntagResource",
         "ecs:UpdateCapacityProvider"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ecs:DeleteCapacityProvider",
        "ecs:DescribeCapacityProviders",
        "ecs:ListTagsForResource",
        "ecs:TagResource",
        "ecs:UntagResource",
        "ecs:UpdateCapacityProvider"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ecs:capacity-provider"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ecs:capacity-provider"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ecs:DeleteTaskDefinitions",
         "ecs:ListTagsForResource",
         "ecs:RegisterTaskDefinition",
         "ecs:RunTask",
         "ecs:StartTask",
         "ecs:TagResource",
         "ecs:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ecs:DeleteTaskDefinitions",
        "ecs:ListTagsForResource",
        "ecs:RegisterTaskDefinition",
        "ecs:RunTask",
        "ecs:StartTask",
        "ecs:TagResource",
        "ecs:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ecs:task-definition"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ecs:task-definition"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ecs:DeleteTaskSet",
         "ecs:DescribeTaskSets",
         "ecs:ListTagsForResource",
         "ecs:TagResource",
         "ecs:UntagResource",
         "ecs:UpdateTaskSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ecs:DeleteTaskSet",
        "ecs:DescribeTaskSets",
        "ecs:ListTagsForResource",
        "ecs:TagResource",
        "ecs:UntagResource",
        "ecs:UpdateTaskSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ecs:task-set"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ecs:task-set"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ecs:DescribeServiceDeployments"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ecs:DescribeServiceDeployments"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ecs:service-deployment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ecs:service-deployment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ecs:DescribeServiceRevisions"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ecs:DescribeServiceRevisions"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ecs:service-revision"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ecs:service-revision"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ecs:DescribeTasks",
         "ecs:ExecuteCommand",
         "ecs:GetTaskProtection",
         "ecs:ListTagsForResource",
         "ecs:StopTask",
         "ecs:TagResource",
         "ecs:UntagResource",
         "ecs:UpdateTaskProtection"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ecs:DescribeTasks",
        "ecs:ExecuteCommand",
        "ecs:GetTaskProtection",
        "ecs:ListTagsForResource",
        "ecs:StopTask",
        "ecs:TagResource",
        "ecs:UntagResource",
        "ecs:UpdateTaskProtection"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ecs:task"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ecs:task"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "eks:AccessKubernetesApi",
         "eks:AssociateEncryptionConfig",
         "eks:AssociateIdentityProviderConfig",
         "eks:CreateAccessEntry",
         "eks:CreateAddon",
         "eks:CreateFargateProfile",
         "eks:CreateNodegroup",
         "eks:CreatePodIdentityAssociation",
         "eks:DeleteCluster",
         "eks:DeregisterCluster",
         "eks:DescribeCluster",
         "eks:DescribeInsight",
         "eks:DescribeUpdate",
         "eks:ListAccessEntries",
         "eks:ListAddons",
         "eks:ListFargateProfiles",
         "eks:ListIdentityProviderConfigs",
         "eks:ListInsights",
         "eks:ListNodegroups",
         "eks:ListPodIdentityAssociations",
         "eks:ListTagsForResource",
         "eks:ListUpdates",
         "eks:TagResource",
         "eks:UntagResource",
         "eks:UpdateClusterConfig",
         "eks:UpdateClusterVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "eks:AccessKubernetesApi",
        "eks:AssociateEncryptionConfig",
        "eks:AssociateIdentityProviderConfig",
        "eks:CreateAccessEntry",
        "eks:CreateAddon",
        "eks:CreateFargateProfile",
        "eks:CreateNodegroup",
        "eks:CreatePodIdentityAssociation",
        "eks:DeleteCluster",
        "eks:DeregisterCluster",
        "eks:DescribeCluster",
        "eks:DescribeInsight",
        "eks:DescribeUpdate",
        "eks:ListAccessEntries",
        "eks:ListAddons",
        "eks:ListFargateProfiles",
        "eks:ListIdentityProviderConfigs",
        "eks:ListInsights",
        "eks:ListNodegroups",
        "eks:ListPodIdentityAssociations",
        "eks:ListTagsForResource",
        "eks:ListUpdates",
        "eks:TagResource",
        "eks:UntagResource",
        "eks:UpdateClusterConfig",
        "eks:UpdateClusterVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/eks:cluster"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/eks:cluster"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "eks:AssociateAccessPolicy",
         "eks:DeleteAccessEntry",
         "eks:DescribeAccessEntry",
         "eks:DisassociateAccessPolicy",
         "eks:ListAssociatedAccessPolicies",
         "eks:TagResource",
         "eks:UntagResource",
         "eks:UpdateAccessEntry"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "eks:AssociateAccessPolicy",
        "eks:DeleteAccessEntry",
        "eks:DescribeAccessEntry",
        "eks:DisassociateAccessPolicy",
        "eks:ListAssociatedAccessPolicies",
        "eks:TagResource",
        "eks:UntagResource",
        "eks:UpdateAccessEntry"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/eks:access-entry"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/eks:access-entry"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "eks:CreateAddon",
         "eks:DeleteAddon",
         "eks:DeletePodIdentityAssociation",
         "eks:DescribePodIdentityAssociation",
         "eks:TagResource",
         "eks:UntagResource",
         "eks:UpdateAddon",
         "eks:UpdatePodIdentityAssociation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "eks:CreateAddon",
        "eks:DeleteAddon",
        "eks:DeletePodIdentityAssociation",
        "eks:DescribePodIdentityAssociation",
        "eks:TagResource",
        "eks:UntagResource",
        "eks:UpdateAddon",
        "eks:UpdatePodIdentityAssociation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/eks:podidentityassociation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/eks:podidentityassociation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "eks:DeleteAddon",
         "eks:DescribeAddon",
         "eks:DescribeUpdate",
         "eks:ListTagsForResource",
         "eks:ListUpdates",
         "eks:TagResource",
         "eks:UntagResource",
         "eks:UpdateAddon"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "eks:DeleteAddon",
        "eks:DescribeAddon",
        "eks:DescribeUpdate",
        "eks:ListTagsForResource",
        "eks:ListUpdates",
        "eks:TagResource",
        "eks:UntagResource",
        "eks:UpdateAddon"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/eks:addon"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/eks:addon"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "eks:DeleteEksAnywhereSubscription",
         "eks:DescribeEksAnywhereSubscription",
         "eks:ListTagsForResource",
         "eks:TagResource",
         "eks:UntagResource",
         "eks:UpdateEksAnywhereSubscription"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "eks:DeleteEksAnywhereSubscription",
        "eks:DescribeEksAnywhereSubscription",
        "eks:ListTagsForResource",
        "eks:TagResource",
        "eks:UntagResource",
        "eks:UpdateEksAnywhereSubscription"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/eks:eks-anywhere-subscription"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/eks:eks-anywhere-subscription"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "eks:DeleteFargateProfile",
         "eks:DescribeFargateProfile",
         "eks:ListTagsForResource",
         "eks:TagResource",
         "eks:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "eks:DeleteFargateProfile",
        "eks:DescribeFargateProfile",
        "eks:ListTagsForResource",
        "eks:TagResource",
        "eks:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/eks:fargateprofile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/eks:fargateprofile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "eks:DeleteNodegroup",
         "eks:DescribeNodegroup",
         "eks:DescribeUpdate",
         "eks:ListTagsForResource",
         "eks:ListUpdates",
         "eks:TagResource",
         "eks:UntagResource",
         "eks:UpdateNodegroupConfig",
         "eks:UpdateNodegroupVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "eks:DeleteNodegroup",
        "eks:DescribeNodegroup",
        "eks:DescribeUpdate",
        "eks:ListTagsForResource",
        "eks:ListUpdates",
        "eks:TagResource",
        "eks:UntagResource",
        "eks:UpdateNodegroupConfig",
        "eks:UpdateNodegroupVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/eks:nodegroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/eks:nodegroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "eks:DescribeIdentityProviderConfig",
         "eks:DisassociateIdentityProviderConfig",
         "eks:ListTagsForResource",
         "eks:TagResource",
         "eks:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "eks:DescribeIdentityProviderConfig",
        "eks:DisassociateIdentityProviderConfig",
        "eks:ListTagsForResource",
        "eks:TagResource",
        "eks:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/eks:identityproviderconfig"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/eks:identityproviderconfig"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "eks-auth:AssumeRoleForPodIdentity"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "eks-auth:AssumeRoleForPodIdentity"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/eks-auth:cluster"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/eks-auth:cluster"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticache:AddTagsToResource",
         "elasticache:BatchApplyUpdateAction",
         "elasticache:BatchStopUpdateAction",
         "elasticache:CompleteMigration",
         "elasticache:CreateCacheCluster",
         "elasticache:CreateReplicationGroup",
         "elasticache:CreateSnapshot",
         "elasticache:DeleteCacheCluster",
         "elasticache:DescribeCacheClusters",
         "elasticache:DescribeUpdateActions",
         "elasticache:ListAllowedNodeTypeModifications",
         "elasticache:ListTagsForResource",
         "elasticache:ModifyCacheCluster",
         "elasticache:RebootCacheCluster",
         "elasticache:RemoveTagsFromResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticache:AddTagsToResource",
        "elasticache:BatchApplyUpdateAction",
        "elasticache:BatchStopUpdateAction",
        "elasticache:CompleteMigration",
        "elasticache:CreateCacheCluster",
        "elasticache:CreateReplicationGroup",
        "elasticache:CreateSnapshot",
        "elasticache:DeleteCacheCluster",
        "elasticache:DescribeCacheClusters",
        "elasticache:DescribeUpdateActions",
        "elasticache:ListAllowedNodeTypeModifications",
        "elasticache:ListTagsForResource",
        "elasticache:ModifyCacheCluster",
        "elasticache:RebootCacheCluster",
        "elasticache:RemoveTagsFromResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticache:cluster"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticache:cluster"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticache:AddTagsToResource",
         "elasticache:CreateCacheCluster",
         "elasticache:CreateCacheParameterGroup",
         "elasticache:CreateReplicationGroup",
         "elasticache:DeleteCacheParameterGroup",
         "elasticache:DescribeCacheParameterGroups",
         "elasticache:DescribeCacheParameters",
         "elasticache:ListTagsForResource",
         "elasticache:ModifyCacheCluster",
         "elasticache:ModifyCacheParameterGroup",
         "elasticache:ModifyReplicationGroup",
         "elasticache:RemoveTagsFromResource",
         "elasticache:ResetCacheParameterGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticache:AddTagsToResource",
        "elasticache:CreateCacheCluster",
        "elasticache:CreateCacheParameterGroup",
        "elasticache:CreateReplicationGroup",
        "elasticache:DeleteCacheParameterGroup",
        "elasticache:DescribeCacheParameterGroups",
        "elasticache:DescribeCacheParameters",
        "elasticache:ListTagsForResource",
        "elasticache:ModifyCacheCluster",
        "elasticache:ModifyCacheParameterGroup",
        "elasticache:ModifyReplicationGroup",
        "elasticache:RemoveTagsFromResource",
        "elasticache:ResetCacheParameterGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticache:parametergroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticache:parametergroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticache:AddTagsToResource",
         "elasticache:BatchApplyUpdateAction",
         "elasticache:BatchStopUpdateAction",
         "elasticache:CompleteMigration",
         "elasticache:Connect",
         "elasticache:CreateCacheCluster",
         "elasticache:CreateGlobalReplicationGroup",
         "elasticache:CreateReplicationGroup",
         "elasticache:CreateSnapshot",
         "elasticache:DecreaseReplicaCount",
         "elasticache:DeleteReplicationGroup",
         "elasticache:DescribeReplicationGroups",
         "elasticache:DescribeUpdateActions",
         "elasticache:IncreaseReplicaCount",
         "elasticache:InterruptClusterAzPower",
         "elasticache:ListAllowedNodeTypeModifications",
         "elasticache:ListTagsForResource",
         "elasticache:ModifyReplicationGroup",
         "elasticache:ModifyReplicationGroupShardConfiguration",
         "elasticache:RemoveTagsFromResource",
         "elasticache:StartMigration",
         "elasticache:TestFailover",
         "elasticache:TestMigration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticache:AddTagsToResource",
        "elasticache:BatchApplyUpdateAction",
        "elasticache:BatchStopUpdateAction",
        "elasticache:CompleteMigration",
        "elasticache:Connect",
        "elasticache:CreateCacheCluster",
        "elasticache:CreateGlobalReplicationGroup",
        "elasticache:CreateReplicationGroup",
        "elasticache:CreateSnapshot",
        "elasticache:DecreaseReplicaCount",
        "elasticache:DeleteReplicationGroup",
        "elasticache:DescribeReplicationGroups",
        "elasticache:DescribeUpdateActions",
        "elasticache:IncreaseReplicaCount",
        "elasticache:InterruptClusterAzPower",
        "elasticache:ListAllowedNodeTypeModifications",
        "elasticache:ListTagsForResource",
        "elasticache:ModifyReplicationGroup",
        "elasticache:ModifyReplicationGroupShardConfiguration",
        "elasticache:RemoveTagsFromResource",
        "elasticache:StartMigration",
        "elasticache:TestFailover",
        "elasticache:TestMigration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticache:replicationgroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticache:replicationgroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticache:AddTagsToResource",
         "elasticache:DescribeReservedCacheNodes",
         "elasticache:ListTagsForResource",
         "elasticache:PurchaseReservedCacheNodesOffering",
         "elasticache:RemoveTagsFromResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticache:AddTagsToResource",
        "elasticache:DescribeReservedCacheNodes",
        "elasticache:ListTagsForResource",
        "elasticache:PurchaseReservedCacheNodesOffering",
        "elasticache:RemoveTagsFromResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticache:reserved-instance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticache:reserved-instance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticache:AddTagsToResource",
         "elasticache:AuthorizeCacheSecurityGroupIngress",
         "elasticache:CreateCacheCluster",
         "elasticache:CreateCacheSecurityGroup",
         "elasticache:CreateReplicationGroup",
         "elasticache:DeleteCacheSecurityGroup",
         "elasticache:DescribeCacheSecurityGroups",
         "elasticache:ListTagsForResource",
         "elasticache:ModifyCacheCluster",
         "elasticache:ModifyReplicationGroup",
         "elasticache:RemoveTagsFromResource",
         "elasticache:RevokeCacheSecurityGroupIngress"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticache:AddTagsToResource",
        "elasticache:AuthorizeCacheSecurityGroupIngress",
        "elasticache:CreateCacheCluster",
        "elasticache:CreateCacheSecurityGroup",
        "elasticache:CreateReplicationGroup",
        "elasticache:DeleteCacheSecurityGroup",
        "elasticache:DescribeCacheSecurityGroups",
        "elasticache:ListTagsForResource",
        "elasticache:ModifyCacheCluster",
        "elasticache:ModifyReplicationGroup",
        "elasticache:RemoveTagsFromResource",
        "elasticache:RevokeCacheSecurityGroupIngress"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticache:securitygroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticache:securitygroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticache:AddTagsToResource",
         "elasticache:Connect",
         "elasticache:CreateServerlessCache",
         "elasticache:CreateServerlessCacheSnapshot",
         "elasticache:DeleteServerlessCache",
         "elasticache:DescribeServerlessCacheSnapshots",
         "elasticache:DescribeServerlessCaches",
         "elasticache:ListTagsForResource",
         "elasticache:ModifyServerlessCache",
         "elasticache:RemoveTagsFromResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticache:AddTagsToResource",
        "elasticache:Connect",
        "elasticache:CreateServerlessCache",
        "elasticache:CreateServerlessCacheSnapshot",
        "elasticache:DeleteServerlessCache",
        "elasticache:DescribeServerlessCacheSnapshots",
        "elasticache:DescribeServerlessCaches",
        "elasticache:ListTagsForResource",
        "elasticache:ModifyServerlessCache",
        "elasticache:RemoveTagsFromResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticache:serverlesscache"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticache:serverlesscache"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticache:AddTagsToResource",
         "elasticache:CopyServerlessCacheSnapshot",
         "elasticache:CreateServerlessCache",
         "elasticache:CreateServerlessCacheSnapshot",
         "elasticache:DeleteServerlessCache",
         "elasticache:DeleteServerlessCacheSnapshot",
         "elasticache:DescribeServerlessCacheSnapshots",
         "elasticache:ExportServerlessCacheSnapshot",
         "elasticache:ListTagsForResource",
         "elasticache:RemoveTagsFromResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticache:AddTagsToResource",
        "elasticache:CopyServerlessCacheSnapshot",
        "elasticache:CreateServerlessCache",
        "elasticache:CreateServerlessCacheSnapshot",
        "elasticache:DeleteServerlessCache",
        "elasticache:DeleteServerlessCacheSnapshot",
        "elasticache:DescribeServerlessCacheSnapshots",
        "elasticache:ExportServerlessCacheSnapshot",
        "elasticache:ListTagsForResource",
        "elasticache:RemoveTagsFromResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticache:serverlesscachesnapshot"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticache:serverlesscachesnapshot"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticache:AddTagsToResource",
         "elasticache:CopySnapshot",
         "elasticache:CreateCacheCluster",
         "elasticache:CreateReplicationGroup",
         "elasticache:CreateServerlessCache",
         "elasticache:CreateSnapshot",
         "elasticache:DeleteCacheCluster",
         "elasticache:DeleteReplicationGroup",
         "elasticache:DeleteSnapshot",
         "elasticache:DescribeSnapshots",
         "elasticache:ListTagsForResource",
         "elasticache:RemoveTagsFromResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticache:AddTagsToResource",
        "elasticache:CopySnapshot",
        "elasticache:CreateCacheCluster",
        "elasticache:CreateReplicationGroup",
        "elasticache:CreateServerlessCache",
        "elasticache:CreateSnapshot",
        "elasticache:DeleteCacheCluster",
        "elasticache:DeleteReplicationGroup",
        "elasticache:DeleteSnapshot",
        "elasticache:DescribeSnapshots",
        "elasticache:ListTagsForResource",
        "elasticache:RemoveTagsFromResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticache:snapshot"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticache:snapshot"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticache:AddTagsToResource",
         "elasticache:CreateCacheCluster",
         "elasticache:CreateCacheSubnetGroup",
         "elasticache:CreateReplicationGroup",
         "elasticache:DeleteCacheSubnetGroup",
         "elasticache:DescribeCacheSubnetGroups",
         "elasticache:ListTagsForResource",
         "elasticache:ModifyCacheSubnetGroup",
         "elasticache:RemoveTagsFromResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticache:AddTagsToResource",
        "elasticache:CreateCacheCluster",
        "elasticache:CreateCacheSubnetGroup",
        "elasticache:CreateReplicationGroup",
        "elasticache:DeleteCacheSubnetGroup",
        "elasticache:DescribeCacheSubnetGroups",
        "elasticache:ListTagsForResource",
        "elasticache:ModifyCacheSubnetGroup",
        "elasticache:RemoveTagsFromResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticache:subnetgroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticache:subnetgroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticache:AddTagsToResource",
         "elasticache:Connect",
         "elasticache:CreateUser",
         "elasticache:CreateUserGroup",
         "elasticache:DeleteUser",
         "elasticache:DescribeUsers",
         "elasticache:ListTagsForResource",
         "elasticache:ModifyUser",
         "elasticache:ModifyUserGroup",
         "elasticache:RemoveTagsFromResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticache:AddTagsToResource",
        "elasticache:Connect",
        "elasticache:CreateUser",
        "elasticache:CreateUserGroup",
        "elasticache:DeleteUser",
        "elasticache:DescribeUsers",
        "elasticache:ListTagsForResource",
        "elasticache:ModifyUser",
        "elasticache:ModifyUserGroup",
        "elasticache:RemoveTagsFromResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticache:user"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticache:user"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticache:AddTagsToResource",
         "elasticache:CreateReplicationGroup",
         "elasticache:CreateServerlessCache",
         "elasticache:CreateUserGroup",
         "elasticache:DeleteUserGroup",
         "elasticache:DescribeUserGroups",
         "elasticache:ListTagsForResource",
         "elasticache:ModifyReplicationGroup",
         "elasticache:ModifyServerlessCache",
         "elasticache:ModifyUserGroup",
         "elasticache:RemoveTagsFromResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticache:AddTagsToResource",
        "elasticache:CreateReplicationGroup",
        "elasticache:CreateServerlessCache",
        "elasticache:CreateUserGroup",
        "elasticache:DeleteUserGroup",
        "elasticache:DescribeUserGroups",
        "elasticache:ListTagsForResource",
        "elasticache:ModifyReplicationGroup",
        "elasticache:ModifyServerlessCache",
        "elasticache:ModifyUserGroup",
        "elasticache:RemoveTagsFromResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticache:usergroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticache:usergroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticache:CreateGlobalReplicationGroup",
         "elasticache:CreateReplicationGroup",
         "elasticache:DecreaseNodeGroupsInGlobalReplicationGroup",
         "elasticache:DeleteGlobalReplicationGroup",
         "elasticache:DescribeGlobalReplicationGroups",
         "elasticache:DisassociateGlobalReplicationGroup",
         "elasticache:FailoverGlobalReplicationGroup",
         "elasticache:IncreaseNodeGroupsInGlobalReplicationGroup",
         "elasticache:ModifyGlobalReplicationGroup",
         "elasticache:RebalanceSlotsInGlobalReplicationGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticache:CreateGlobalReplicationGroup",
        "elasticache:CreateReplicationGroup",
        "elasticache:DecreaseNodeGroupsInGlobalReplicationGroup",
        "elasticache:DeleteGlobalReplicationGroup",
        "elasticache:DescribeGlobalReplicationGroups",
        "elasticache:DisassociateGlobalReplicationGroup",
        "elasticache:FailoverGlobalReplicationGroup",
        "elasticache:IncreaseNodeGroupsInGlobalReplicationGroup",
        "elasticache:ModifyGlobalReplicationGroup",
        "elasticache:RebalanceSlotsInGlobalReplicationGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticache:globalreplicationgroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticache:globalreplicationgroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticbeanstalk:AbortEnvironmentUpdate",
         "elasticbeanstalk:AddTags",
         "elasticbeanstalk:ApplyEnvironmentManagedAction",
         "elasticbeanstalk:AssociateEnvironmentOperationsRole",
         "elasticbeanstalk:CreateEnvironment",
         "elasticbeanstalk:DeleteEnvironmentConfiguration",
         "elasticbeanstalk:DescribeConfigurationOptions",
         "elasticbeanstalk:DescribeConfigurationSettings",
         "elasticbeanstalk:DescribeEnvironmentHealth",
         "elasticbeanstalk:DescribeEnvironmentManagedActionHistory",
         "elasticbeanstalk:DescribeEnvironmentManagedActions",
         "elasticbeanstalk:DescribeEnvironmentResources",
         "elasticbeanstalk:DescribeEnvironments",
         "elasticbeanstalk:DescribeEvents",
         "elasticbeanstalk:DescribeInstancesHealth",
         "elasticbeanstalk:DisassociateEnvironmentOperationsRole",
         "elasticbeanstalk:ListTagsForResource",
         "elasticbeanstalk:PutInstanceStatistics",
         "elasticbeanstalk:RebuildEnvironment",
         "elasticbeanstalk:RemoveTags",
         "elasticbeanstalk:RequestEnvironmentInfo",
         "elasticbeanstalk:RestartAppServer",
         "elasticbeanstalk:RetrieveEnvironmentInfo",
         "elasticbeanstalk:SwapEnvironmentCNAMEs",
         "elasticbeanstalk:TerminateEnvironment",
         "elasticbeanstalk:UpdateEnvironment",
         "elasticbeanstalk:UpdateTagsForResource",
         "elasticbeanstalk:ValidateConfigurationSettings"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticbeanstalk:AbortEnvironmentUpdate",
        "elasticbeanstalk:AddTags",
        "elasticbeanstalk:ApplyEnvironmentManagedAction",
        "elasticbeanstalk:AssociateEnvironmentOperationsRole",
        "elasticbeanstalk:CreateEnvironment",
        "elasticbeanstalk:DeleteEnvironmentConfiguration",
        "elasticbeanstalk:DescribeConfigurationOptions",
        "elasticbeanstalk:DescribeConfigurationSettings",
        "elasticbeanstalk:DescribeEnvironmentHealth",
        "elasticbeanstalk:DescribeEnvironmentManagedActionHistory",
        "elasticbeanstalk:DescribeEnvironmentManagedActions",
        "elasticbeanstalk:DescribeEnvironmentResources",
        "elasticbeanstalk:DescribeEnvironments",
        "elasticbeanstalk:DescribeEvents",
        "elasticbeanstalk:DescribeInstancesHealth",
        "elasticbeanstalk:DisassociateEnvironmentOperationsRole",
        "elasticbeanstalk:ListTagsForResource",
        "elasticbeanstalk:PutInstanceStatistics",
        "elasticbeanstalk:RebuildEnvironment",
        "elasticbeanstalk:RemoveTags",
        "elasticbeanstalk:RequestEnvironmentInfo",
        "elasticbeanstalk:RestartAppServer",
        "elasticbeanstalk:RetrieveEnvironmentInfo",
        "elasticbeanstalk:SwapEnvironmentCNAMEs",
        "elasticbeanstalk:TerminateEnvironment",
        "elasticbeanstalk:UpdateEnvironment",
        "elasticbeanstalk:UpdateTagsForResource",
        "elasticbeanstalk:ValidateConfigurationSettings"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticbeanstalk:environment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticbeanstalk:environment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticbeanstalk:AddTags",
         "elasticbeanstalk:ComposeEnvironments",
         "elasticbeanstalk:CreateApplication",
         "elasticbeanstalk:CreateApplicationVersion",
         "elasticbeanstalk:DeleteApplication",
         "elasticbeanstalk:DescribeApplications",
         "elasticbeanstalk:DescribeEvents",
         "elasticbeanstalk:ListTagsForResource",
         "elasticbeanstalk:PutInstanceStatistics",
         "elasticbeanstalk:RemoveTags",
         "elasticbeanstalk:UpdateApplication",
         "elasticbeanstalk:UpdateApplicationResourceLifecycle",
         "elasticbeanstalk:UpdateTagsForResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticbeanstalk:AddTags",
        "elasticbeanstalk:ComposeEnvironments",
        "elasticbeanstalk:CreateApplication",
        "elasticbeanstalk:CreateApplicationVersion",
        "elasticbeanstalk:DeleteApplication",
        "elasticbeanstalk:DescribeApplications",
        "elasticbeanstalk:DescribeEvents",
        "elasticbeanstalk:ListTagsForResource",
        "elasticbeanstalk:PutInstanceStatistics",
        "elasticbeanstalk:RemoveTags",
        "elasticbeanstalk:UpdateApplication",
        "elasticbeanstalk:UpdateApplicationResourceLifecycle",
        "elasticbeanstalk:UpdateTagsForResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticbeanstalk:application"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticbeanstalk:application"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticbeanstalk:AddTags",
         "elasticbeanstalk:ComposeEnvironments",
         "elasticbeanstalk:CreateApplicationVersion",
         "elasticbeanstalk:DeleteApplicationVersion",
         "elasticbeanstalk:DescribeApplicationVersions",
         "elasticbeanstalk:DescribeEvents",
         "elasticbeanstalk:ListTagsForResource",
         "elasticbeanstalk:RemoveTags",
         "elasticbeanstalk:UpdateApplicationVersion",
         "elasticbeanstalk:UpdateTagsForResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticbeanstalk:AddTags",
        "elasticbeanstalk:ComposeEnvironments",
        "elasticbeanstalk:CreateApplicationVersion",
        "elasticbeanstalk:DeleteApplicationVersion",
        "elasticbeanstalk:DescribeApplicationVersions",
        "elasticbeanstalk:DescribeEvents",
        "elasticbeanstalk:ListTagsForResource",
        "elasticbeanstalk:RemoveTags",
        "elasticbeanstalk:UpdateApplicationVersion",
        "elasticbeanstalk:UpdateTagsForResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticbeanstalk:applicationversion"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticbeanstalk:applicationversion"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticbeanstalk:AddTags",
         "elasticbeanstalk:CreateConfigurationTemplate",
         "elasticbeanstalk:DeleteConfigurationTemplate",
         "elasticbeanstalk:DescribeConfigurationOptions",
         "elasticbeanstalk:DescribeConfigurationSettings",
         "elasticbeanstalk:DescribeEvents",
         "elasticbeanstalk:ListTagsForResource",
         "elasticbeanstalk:RemoveTags",
         "elasticbeanstalk:UpdateConfigurationTemplate",
         "elasticbeanstalk:UpdateTagsForResource",
         "elasticbeanstalk:ValidateConfigurationSettings"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticbeanstalk:AddTags",
        "elasticbeanstalk:CreateConfigurationTemplate",
        "elasticbeanstalk:DeleteConfigurationTemplate",
        "elasticbeanstalk:DescribeConfigurationOptions",
        "elasticbeanstalk:DescribeConfigurationSettings",
        "elasticbeanstalk:DescribeEvents",
        "elasticbeanstalk:ListTagsForResource",
        "elasticbeanstalk:RemoveTags",
        "elasticbeanstalk:UpdateConfigurationTemplate",
        "elasticbeanstalk:UpdateTagsForResource",
        "elasticbeanstalk:ValidateConfigurationSettings"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticbeanstalk:configurationtemplate"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticbeanstalk:configurationtemplate"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticbeanstalk:AddTags",
         "elasticbeanstalk:CreatePlatformVersion",
         "elasticbeanstalk:DeletePlatformVersion",
         "elasticbeanstalk:DescribePlatformVersion",
         "elasticbeanstalk:ListPlatformVersions",
         "elasticbeanstalk:ListTagsForResource",
         "elasticbeanstalk:RemoveTags",
         "elasticbeanstalk:UpdateTagsForResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticbeanstalk:AddTags",
        "elasticbeanstalk:CreatePlatformVersion",
        "elasticbeanstalk:DeletePlatformVersion",
        "elasticbeanstalk:DescribePlatformVersion",
        "elasticbeanstalk:ListPlatformVersions",
        "elasticbeanstalk:ListTagsForResource",
        "elasticbeanstalk:RemoveTags",
        "elasticbeanstalk:UpdateTagsForResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticbeanstalk:platform"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticbeanstalk:platform"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticbeanstalk:DescribeConfigurationOptions",
         "elasticbeanstalk:ListAvailableSolutionStacks"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticbeanstalk:DescribeConfigurationOptions",
        "elasticbeanstalk:ListAvailableSolutionStacks"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticbeanstalk:solutionstack"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticbeanstalk:solutionstack"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticfilesystem:Backup",
         "elasticfilesystem:ClientMount",
         "elasticfilesystem:ClientRootAccess",
         "elasticfilesystem:ClientWrite",
         "elasticfilesystem:CreateAccessPoint",
         "elasticfilesystem:CreateMountTarget",
         "elasticfilesystem:CreateReplicationConfiguration",
         "elasticfilesystem:CreateTags",
         "elasticfilesystem:DeleteFileSystem",
         "elasticfilesystem:DeleteFileSystemPolicy",
         "elasticfilesystem:DeleteMountTarget",
         "elasticfilesystem:DeleteReplicationConfiguration",
         "elasticfilesystem:DeleteTags",
         "elasticfilesystem:DescribeAccessPoints",
         "elasticfilesystem:DescribeBackupPolicy",
         "elasticfilesystem:DescribeFileSystemPolicy",
         "elasticfilesystem:DescribeFileSystems",
         "elasticfilesystem:DescribeLifecycleConfiguration",
         "elasticfilesystem:DescribeMountTargetSecurityGroups",
         "elasticfilesystem:DescribeMountTargets",
         "elasticfilesystem:DescribeReplicationConfigurations",
         "elasticfilesystem:DescribeTags",
         "elasticfilesystem:ListTagsForResource",
         "elasticfilesystem:ModifyMountTargetSecurityGroups",
         "elasticfilesystem:PutBackupPolicy",
         "elasticfilesystem:PutFileSystemPolicy",
         "elasticfilesystem:PutLifecycleConfiguration",
         "elasticfilesystem:ReplicationRead",
         "elasticfilesystem:ReplicationWrite",
         "elasticfilesystem:Restore",
         "elasticfilesystem:TagResource",
         "elasticfilesystem:UntagResource",
         "elasticfilesystem:UpdateFileSystem",
         "elasticfilesystem:UpdateFileSystemProtection"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticfilesystem:Backup",
        "elasticfilesystem:ClientMount",
        "elasticfilesystem:ClientRootAccess",
        "elasticfilesystem:ClientWrite",
        "elasticfilesystem:CreateAccessPoint",
        "elasticfilesystem:CreateMountTarget",
        "elasticfilesystem:CreateReplicationConfiguration",
        "elasticfilesystem:CreateTags",
        "elasticfilesystem:DeleteFileSystem",
        "elasticfilesystem:DeleteFileSystemPolicy",
        "elasticfilesystem:DeleteMountTarget",
        "elasticfilesystem:DeleteReplicationConfiguration",
        "elasticfilesystem:DeleteTags",
        "elasticfilesystem:DescribeAccessPoints",
        "elasticfilesystem:DescribeBackupPolicy",
        "elasticfilesystem:DescribeFileSystemPolicy",
        "elasticfilesystem:DescribeFileSystems",
        "elasticfilesystem:DescribeLifecycleConfiguration",
        "elasticfilesystem:DescribeMountTargetSecurityGroups",
        "elasticfilesystem:DescribeMountTargets",
        "elasticfilesystem:DescribeReplicationConfigurations",
        "elasticfilesystem:DescribeTags",
        "elasticfilesystem:ListTagsForResource",
        "elasticfilesystem:ModifyMountTargetSecurityGroups",
        "elasticfilesystem:PutBackupPolicy",
        "elasticfilesystem:PutFileSystemPolicy",
        "elasticfilesystem:PutLifecycleConfiguration",
        "elasticfilesystem:ReplicationRead",
        "elasticfilesystem:ReplicationWrite",
        "elasticfilesystem:Restore",
        "elasticfilesystem:TagResource",
        "elasticfilesystem:UntagResource",
        "elasticfilesystem:UpdateFileSystem",
        "elasticfilesystem:UpdateFileSystemProtection"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticfilesystem:file-system"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticfilesystem:file-system"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticfilesystem:DeleteAccessPoint",
         "elasticfilesystem:DescribeAccessPoints",
         "elasticfilesystem:DescribeMountTargets",
         "elasticfilesystem:ListTagsForResource",
         "elasticfilesystem:TagResource",
         "elasticfilesystem:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticfilesystem:DeleteAccessPoint",
        "elasticfilesystem:DescribeAccessPoints",
        "elasticfilesystem:DescribeMountTargets",
        "elasticfilesystem:ListTagsForResource",
        "elasticfilesystem:TagResource",
        "elasticfilesystem:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticfilesystem:access-point"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticfilesystem:access-point"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticloadbalancing:AddListenerCertificates",
         "elasticloadbalancing:AddTags",
         "elasticloadbalancing:CreateRule",
         "elasticloadbalancing:DeleteListener",
         "elasticloadbalancing:ModifyListener",
         "elasticloadbalancing:ModifyListenerAttributes",
         "elasticloadbalancing:RemoveListenerCertificates",
         "elasticloadbalancing:RemoveTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticloadbalancing:AddListenerCertificates",
        "elasticloadbalancing:AddTags",
        "elasticloadbalancing:CreateRule",
        "elasticloadbalancing:DeleteListener",
        "elasticloadbalancing:ModifyListener",
        "elasticloadbalancing:ModifyListenerAttributes",
        "elasticloadbalancing:RemoveListenerCertificates",
        "elasticloadbalancing:RemoveTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticloadbalancing:listener/app"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticloadbalancing:listener/app"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticloadbalancing:AddListenerCertificates",
         "elasticloadbalancing:AddTags",
         "elasticloadbalancing:CreateRule",
         "elasticloadbalancing:DeleteListener",
         "elasticloadbalancing:ModifyListener",
         "elasticloadbalancing:ModifyListenerAttributes",
         "elasticloadbalancing:RemoveListenerCertificates",
         "elasticloadbalancing:RemoveTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticloadbalancing:AddListenerCertificates",
        "elasticloadbalancing:AddTags",
        "elasticloadbalancing:CreateRule",
        "elasticloadbalancing:DeleteListener",
        "elasticloadbalancing:ModifyListener",
        "elasticloadbalancing:ModifyListenerAttributes",
        "elasticloadbalancing:RemoveListenerCertificates",
        "elasticloadbalancing:RemoveTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticloadbalancing:listener/net"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticloadbalancing:listener/net"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticloadbalancing:AddTags",
         "elasticloadbalancing:DeleteRule",
         "elasticloadbalancing:ModifyRule",
         "elasticloadbalancing:RemoveTags",
         "elasticloadbalancing:SetRulePriorities"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticloadbalancing:AddTags",
        "elasticloadbalancing:DeleteRule",
        "elasticloadbalancing:ModifyRule",
        "elasticloadbalancing:RemoveTags",
        "elasticloadbalancing:SetRulePriorities"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticloadbalancing:listener-rule/app"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticloadbalancing:listener-rule/app"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticloadbalancing:AddTags",
         "elasticloadbalancing:DeleteRule",
         "elasticloadbalancing:ModifyRule",
         "elasticloadbalancing:RemoveTags",
         "elasticloadbalancing:SetRulePriorities"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticloadbalancing:AddTags",
        "elasticloadbalancing:DeleteRule",
        "elasticloadbalancing:ModifyRule",
        "elasticloadbalancing:RemoveTags",
        "elasticloadbalancing:SetRulePriorities"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticloadbalancing:listener-rule/net"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticloadbalancing:listener-rule/net"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticloadbalancing:AddTags",
         "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
         "elasticloadbalancing:AttachLoadBalancerToSubnets",
         "elasticloadbalancing:ConfigureHealthCheck",
         "elasticloadbalancing:CreateAppCookieStickinessPolicy",
         "elasticloadbalancing:CreateLBCookieStickinessPolicy",
         "elasticloadbalancing:CreateLoadBalancer",
         "elasticloadbalancing:CreateLoadBalancerListeners",
         "elasticloadbalancing:CreateLoadBalancerPolicy",
         "elasticloadbalancing:DeleteLoadBalancer",
         "elasticloadbalancing:DeleteLoadBalancerListeners",
         "elasticloadbalancing:DeleteLoadBalancerPolicy",
         "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
         "elasticloadbalancing:DetachLoadBalancerFromSubnets",
         "elasticloadbalancing:DisableAvailabilityZonesForLoadBalancer",
         "elasticloadbalancing:EnableAvailabilityZonesForLoadBalancer",
         "elasticloadbalancing:ModifyLoadBalancerAttributes",
         "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
         "elasticloadbalancing:RemoveTags",
         "elasticloadbalancing:SetLoadBalancerListenerSSLCertificate",
         "elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer",
         "elasticloadbalancing:SetLoadBalancerPoliciesOfListener"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticloadbalancing:AddTags",
        "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
        "elasticloadbalancing:AttachLoadBalancerToSubnets",
        "elasticloadbalancing:ConfigureHealthCheck",
        "elasticloadbalancing:CreateAppCookieStickinessPolicy",
        "elasticloadbalancing:CreateLBCookieStickinessPolicy",
        "elasticloadbalancing:CreateLoadBalancer",
        "elasticloadbalancing:CreateLoadBalancerListeners",
        "elasticloadbalancing:CreateLoadBalancerPolicy",
        "elasticloadbalancing:DeleteLoadBalancer",
        "elasticloadbalancing:DeleteLoadBalancerListeners",
        "elasticloadbalancing:DeleteLoadBalancerPolicy",
        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
        "elasticloadbalancing:DetachLoadBalancerFromSubnets",
        "elasticloadbalancing:DisableAvailabilityZonesForLoadBalancer",
        "elasticloadbalancing:EnableAvailabilityZonesForLoadBalancer",
        "elasticloadbalancing:ModifyLoadBalancerAttributes",
        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
        "elasticloadbalancing:RemoveTags",
        "elasticloadbalancing:SetLoadBalancerListenerSSLCertificate",
        "elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer",
        "elasticloadbalancing:SetLoadBalancerPoliciesOfListener"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticloadbalancing:loadbalancer"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticloadbalancing:loadbalancer"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticloadbalancing:AddTags",
         "elasticloadbalancing:CreateListener",
         "elasticloadbalancing:CreateLoadBalancer",
         "elasticloadbalancing:DeleteLoadBalancer",
         "elasticloadbalancing:ModifyCapacityReservation",
         "elasticloadbalancing:ModifyIpPools",
         "elasticloadbalancing:ModifyLoadBalancerAttributes",
         "elasticloadbalancing:RemoveTags",
         "elasticloadbalancing:SetIpAddressType",
         "elasticloadbalancing:SetSecurityGroups",
         "elasticloadbalancing:SetSubnets"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticloadbalancing:AddTags",
        "elasticloadbalancing:CreateListener",
        "elasticloadbalancing:CreateLoadBalancer",
        "elasticloadbalancing:DeleteLoadBalancer",
        "elasticloadbalancing:ModifyCapacityReservation",
        "elasticloadbalancing:ModifyIpPools",
        "elasticloadbalancing:ModifyLoadBalancerAttributes",
        "elasticloadbalancing:RemoveTags",
        "elasticloadbalancing:SetIpAddressType",
        "elasticloadbalancing:SetSecurityGroups",
        "elasticloadbalancing:SetSubnets"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticloadbalancing:loadbalancer/app/"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticloadbalancing:loadbalancer/app/"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticloadbalancing:AddTags",
         "elasticloadbalancing:CreateListener",
         "elasticloadbalancing:CreateLoadBalancer",
         "elasticloadbalancing:DeleteLoadBalancer",
         "elasticloadbalancing:ModifyCapacityReservation",
         "elasticloadbalancing:ModifyLoadBalancerAttributes",
         "elasticloadbalancing:RemoveTags",
         "elasticloadbalancing:SetIpAddressType",
         "elasticloadbalancing:SetSecurityGroups",
         "elasticloadbalancing:SetSubnets"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticloadbalancing:AddTags",
        "elasticloadbalancing:CreateListener",
        "elasticloadbalancing:CreateLoadBalancer",
        "elasticloadbalancing:DeleteLoadBalancer",
        "elasticloadbalancing:ModifyCapacityReservation",
        "elasticloadbalancing:ModifyLoadBalancerAttributes",
        "elasticloadbalancing:RemoveTags",
        "elasticloadbalancing:SetIpAddressType",
        "elasticloadbalancing:SetSecurityGroups",
        "elasticloadbalancing:SetSubnets"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticloadbalancing:loadbalancer/net/"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticloadbalancing:loadbalancer/net/"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticloadbalancing:AddTags",
         "elasticloadbalancing:CreateTargetGroup",
         "elasticloadbalancing:DeleteTargetGroup",
         "elasticloadbalancing:DeregisterTargets",
         "elasticloadbalancing:ModifyTargetGroup",
         "elasticloadbalancing:ModifyTargetGroupAttributes",
         "elasticloadbalancing:RegisterTargets",
         "elasticloadbalancing:RemoveTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticloadbalancing:AddTags",
        "elasticloadbalancing:CreateTargetGroup",
        "elasticloadbalancing:DeleteTargetGroup",
        "elasticloadbalancing:DeregisterTargets",
        "elasticloadbalancing:ModifyTargetGroup",
        "elasticloadbalancing:ModifyTargetGroupAttributes",
        "elasticloadbalancing:RegisterTargets",
        "elasticloadbalancing:RemoveTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticloadbalancing:targetgroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticloadbalancing:targetgroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticloadbalancing:AddTags",
         "elasticloadbalancing:AddTrustStoreRevocations",
         "elasticloadbalancing:CreateTrustStore",
         "elasticloadbalancing:DeleteSharedTrustStoreAssociation",
         "elasticloadbalancing:DeleteTrustStore",
         "elasticloadbalancing:GetResourcePolicy",
         "elasticloadbalancing:GetTrustStoreCaCertificatesBundle",
         "elasticloadbalancing:GetTrustStoreRevocationContent",
         "elasticloadbalancing:ModifyTrustStore",
         "elasticloadbalancing:RemoveTags",
         "elasticloadbalancing:RemoveTrustStoreRevocations"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticloadbalancing:AddTags",
        "elasticloadbalancing:AddTrustStoreRevocations",
        "elasticloadbalancing:CreateTrustStore",
        "elasticloadbalancing:DeleteSharedTrustStoreAssociation",
        "elasticloadbalancing:DeleteTrustStore",
        "elasticloadbalancing:GetResourcePolicy",
        "elasticloadbalancing:GetTrustStoreCaCertificatesBundle",
        "elasticloadbalancing:GetTrustStoreRevocationContent",
        "elasticloadbalancing:ModifyTrustStore",
        "elasticloadbalancing:RemoveTags",
        "elasticloadbalancing:RemoveTrustStoreRevocations"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticloadbalancing:truststore"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticloadbalancing:truststore"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticmapreduce:AddInstanceFleet",
         "elasticmapreduce:AddInstanceGroups",
         "elasticmapreduce:AddJobFlowSteps",
         "elasticmapreduce:AddTags",
         "elasticmapreduce:CancelSteps",
         "elasticmapreduce:CreateEditor",
         "elasticmapreduce:CreatePersistentAppUI",
         "elasticmapreduce:DescribeCluster",
         "elasticmapreduce:DescribeJobFlows",
         "elasticmapreduce:DescribePersistentAppUI",
         "elasticmapreduce:DescribeStep",
         "elasticmapreduce:GetAutoTerminationPolicy",
         "elasticmapreduce:GetClusterSessionCredentials",
         "elasticmapreduce:GetManagedScalingPolicy",
         "elasticmapreduce:GetOnClusterAppUIPresignedURL",
         "elasticmapreduce:GetPersistentAppUIPresignedURL",
         "elasticmapreduce:ListBootstrapActions",
         "elasticmapreduce:ListInstanceFleets",
         "elasticmapreduce:ListInstanceGroups",
         "elasticmapreduce:ListInstances",
         "elasticmapreduce:ListSteps",
         "elasticmapreduce:ModifyCluster",
         "elasticmapreduce:ModifyInstanceFleet",
         "elasticmapreduce:ModifyInstanceGroups",
         "elasticmapreduce:OpenEditorInConsole",
         "elasticmapreduce:PutAutoScalingPolicy",
         "elasticmapreduce:PutAutoTerminationPolicy",
         "elasticmapreduce:PutManagedScalingPolicy",
         "elasticmapreduce:RemoveAutoScalingPolicy",
         "elasticmapreduce:RemoveAutoTerminationPolicy",
         "elasticmapreduce:RemoveManagedScalingPolicy",
         "elasticmapreduce:RemoveTags",
         "elasticmapreduce:SetKeepJobFlowAliveWhenNoSteps",
         "elasticmapreduce:SetTerminationProtection",
         "elasticmapreduce:SetUnhealthyNodeReplacement",
         "elasticmapreduce:SetVisibleToAllUsers",
         "elasticmapreduce:StartEditor",
         "elasticmapreduce:StartNotebookExecution",
         "elasticmapreduce:TerminateJobFlows"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticmapreduce:AddInstanceFleet",
        "elasticmapreduce:AddInstanceGroups",
        "elasticmapreduce:AddJobFlowSteps",
        "elasticmapreduce:AddTags",
        "elasticmapreduce:CancelSteps",
        "elasticmapreduce:CreateEditor",
        "elasticmapreduce:CreatePersistentAppUI",
        "elasticmapreduce:DescribeCluster",
        "elasticmapreduce:DescribeJobFlows",
        "elasticmapreduce:DescribePersistentAppUI",
        "elasticmapreduce:DescribeStep",
        "elasticmapreduce:GetAutoTerminationPolicy",
        "elasticmapreduce:GetClusterSessionCredentials",
        "elasticmapreduce:GetManagedScalingPolicy",
        "elasticmapreduce:GetOnClusterAppUIPresignedURL",
        "elasticmapreduce:GetPersistentAppUIPresignedURL",
        "elasticmapreduce:ListBootstrapActions",
        "elasticmapreduce:ListInstanceFleets",
        "elasticmapreduce:ListInstanceGroups",
        "elasticmapreduce:ListInstances",
        "elasticmapreduce:ListSteps",
        "elasticmapreduce:ModifyCluster",
        "elasticmapreduce:ModifyInstanceFleet",
        "elasticmapreduce:ModifyInstanceGroups",
        "elasticmapreduce:OpenEditorInConsole",
        "elasticmapreduce:PutAutoScalingPolicy",
        "elasticmapreduce:PutAutoTerminationPolicy",
        "elasticmapreduce:PutManagedScalingPolicy",
        "elasticmapreduce:RemoveAutoScalingPolicy",
        "elasticmapreduce:RemoveAutoTerminationPolicy",
        "elasticmapreduce:RemoveManagedScalingPolicy",
        "elasticmapreduce:RemoveTags",
        "elasticmapreduce:SetKeepJobFlowAliveWhenNoSteps",
        "elasticmapreduce:SetTerminationProtection",
        "elasticmapreduce:SetUnhealthyNodeReplacement",
        "elasticmapreduce:SetVisibleToAllUsers",
        "elasticmapreduce:StartEditor",
        "elasticmapreduce:StartNotebookExecution",
        "elasticmapreduce:TerminateJobFlows"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticmapreduce:cluster"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticmapreduce:cluster"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticmapreduce:AddTags",
         "elasticmapreduce:AttachEditor",
         "elasticmapreduce:DeleteEditor",
         "elasticmapreduce:DeleteWorkspaceAccess",
         "elasticmapreduce:DescribeEditor",
         "elasticmapreduce:DetachEditor",
         "elasticmapreduce:ListWorkspaceAccessIdentities",
         "elasticmapreduce:OpenEditorInConsole",
         "elasticmapreduce:PutWorkspaceAccess",
         "elasticmapreduce:RemoveTags",
         "elasticmapreduce:StartEditor",
         "elasticmapreduce:StartNotebookExecution",
         "elasticmapreduce:StopEditor",
         "elasticmapreduce:UpdateEditor"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticmapreduce:AddTags",
        "elasticmapreduce:AttachEditor",
        "elasticmapreduce:DeleteEditor",
        "elasticmapreduce:DeleteWorkspaceAccess",
        "elasticmapreduce:DescribeEditor",
        "elasticmapreduce:DetachEditor",
        "elasticmapreduce:ListWorkspaceAccessIdentities",
        "elasticmapreduce:OpenEditorInConsole",
        "elasticmapreduce:PutWorkspaceAccess",
        "elasticmapreduce:RemoveTags",
        "elasticmapreduce:StartEditor",
        "elasticmapreduce:StartNotebookExecution",
        "elasticmapreduce:StopEditor",
        "elasticmapreduce:UpdateEditor"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticmapreduce:editor"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticmapreduce:editor"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticmapreduce:AddTags",
         "elasticmapreduce:DescribeNotebookExecution",
         "elasticmapreduce:RemoveTags",
         "elasticmapreduce:StopNotebookExecution"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticmapreduce:AddTags",
        "elasticmapreduce:DescribeNotebookExecution",
        "elasticmapreduce:RemoveTags",
        "elasticmapreduce:StopNotebookExecution"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticmapreduce:notebook-execution"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticmapreduce:notebook-execution"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elasticmapreduce:AddTags",
         "elasticmapreduce:CreateStudioPresignedUrl",
         "elasticmapreduce:CreateStudioSessionMapping",
         "elasticmapreduce:DeleteStudio",
         "elasticmapreduce:DeleteStudioSessionMapping",
         "elasticmapreduce:DescribeStudio",
         "elasticmapreduce:GetStudioSessionMapping",
         "elasticmapreduce:RemoveTags",
         "elasticmapreduce:UpdateStudio",
         "elasticmapreduce:UpdateStudioSessionMapping"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elasticmapreduce:AddTags",
        "elasticmapreduce:CreateStudioPresignedUrl",
        "elasticmapreduce:CreateStudioSessionMapping",
        "elasticmapreduce:DeleteStudio",
        "elasticmapreduce:DeleteStudioSessionMapping",
        "elasticmapreduce:DescribeStudio",
        "elasticmapreduce:GetStudioSessionMapping",
        "elasticmapreduce:RemoveTags",
        "elasticmapreduce:UpdateStudio",
        "elasticmapreduce:UpdateStudioSessionMapping"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elasticmapreduce:studio"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elasticmapreduce:studio"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elastictranscoder:CancelJob",
         "elastictranscoder:ReadJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elastictranscoder:CancelJob",
        "elastictranscoder:ReadJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elastictranscoder:job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elastictranscoder:job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elastictranscoder:CreateJob",
         "elastictranscoder:DeletePipeline",
         "elastictranscoder:ListJobsByPipeline",
         "elastictranscoder:ReadPipeline",
         "elastictranscoder:UpdatePipeline",
         "elastictranscoder:UpdatePipelineNotifications",
         "elastictranscoder:UpdatePipelineStatus"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elastictranscoder:CreateJob",
        "elastictranscoder:DeletePipeline",
        "elastictranscoder:ListJobsByPipeline",
        "elastictranscoder:ReadPipeline",
        "elastictranscoder:UpdatePipeline",
        "elastictranscoder:UpdatePipelineNotifications",
        "elastictranscoder:UpdatePipelineStatus"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elastictranscoder:pipeline"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elastictranscoder:pipeline"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elastictranscoder:CreateJob",
         "elastictranscoder:DeletePreset",
         "elastictranscoder:ReadPreset"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elastictranscoder:CreateJob",
        "elastictranscoder:DeletePreset",
        "elastictranscoder:ReadPreset"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elastictranscoder:preset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elastictranscoder:preset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elemental-appliances-software:CreateQuote",
         "elemental-appliances-software:GetQuote",
         "elemental-appliances-software:UpdateQuote"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elemental-appliances-software:CreateQuote",
        "elemental-appliances-software:GetQuote",
        "elemental-appliances-software:UpdateQuote"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elemental-appliances-software:quote"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elemental-appliances-software:quote"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "elemental-support-cases:AddCaseComment",
         "elemental-support-cases:CompleteMultipartUpload",
         "elemental-support-cases:CreateS3CLIUploadCommand",
         "elemental-support-cases:CreateS3DownloadUrl",
         "elemental-support-cases:GetCase",
         "elemental-support-cases:ListTagsForCase",
         "elemental-support-cases:StartMultipartUpload",
         "elemental-support-cases:TagCase",
         "elemental-support-cases:UntagCase",
         "elemental-support-cases:UpdateCase",
         "elemental-support-cases:UpdateCaseStatus",
         "elemental-support-cases:UpdateMultipartUpload"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "elemental-support-cases:AddCaseComment",
        "elemental-support-cases:CompleteMultipartUpload",
        "elemental-support-cases:CreateS3CLIUploadCommand",
        "elemental-support-cases:CreateS3DownloadUrl",
        "elemental-support-cases:GetCase",
        "elemental-support-cases:ListTagsForCase",
        "elemental-support-cases:StartMultipartUpload",
        "elemental-support-cases:TagCase",
        "elemental-support-cases:UntagCase",
        "elemental-support-cases:UpdateCase",
        "elemental-support-cases:UpdateCaseStatus",
        "elemental-support-cases:UpdateMultipartUpload"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/elemental-support-cases:case"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/elemental-support-cases:case"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "emr-containers:CancelJobRun",
         "emr-containers:DescribeJobRun",
         "emr-containers:ListTagsForResource",
         "emr-containers:TagResource",
         "emr-containers:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "emr-containers:CancelJobRun",
        "emr-containers:DescribeJobRun",
        "emr-containers:ListTagsForResource",
        "emr-containers:TagResource",
        "emr-containers:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/emr-containers:jobRun"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/emr-containers:jobRun"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "emr-containers:CreateManagedEndpoint",
         "emr-containers:DeleteVirtualCluster",
         "emr-containers:DescribeVirtualCluster",
         "emr-containers:ListJobRuns",
         "emr-containers:ListManagedEndpoints",
         "emr-containers:ListTagsForResource",
         "emr-containers:StartJobRun",
         "emr-containers:TagResource",
         "emr-containers:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "emr-containers:CreateManagedEndpoint",
        "emr-containers:DeleteVirtualCluster",
        "emr-containers:DescribeVirtualCluster",
        "emr-containers:ListJobRuns",
        "emr-containers:ListManagedEndpoints",
        "emr-containers:ListTagsForResource",
        "emr-containers:StartJobRun",
        "emr-containers:TagResource",
        "emr-containers:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/emr-containers:virtualCluster"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/emr-containers:virtualCluster"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "emr-containers:DeleteJobTemplate",
         "emr-containers:DescribeJobTemplate",
         "emr-containers:ListTagsForResource",
         "emr-containers:TagResource",
         "emr-containers:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "emr-containers:DeleteJobTemplate",
        "emr-containers:DescribeJobTemplate",
        "emr-containers:ListTagsForResource",
        "emr-containers:TagResource",
        "emr-containers:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/emr-containers:jobTemplate"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/emr-containers:jobTemplate"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "emr-containers:DeleteManagedEndpoint",
         "emr-containers:DescribeManagedEndpoint",
         "emr-containers:GetManagedEndpointSessionCredentials",
         "emr-containers:ListTagsForResource",
         "emr-containers:TagResource",
         "emr-containers:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "emr-containers:DeleteManagedEndpoint",
        "emr-containers:DescribeManagedEndpoint",
        "emr-containers:GetManagedEndpointSessionCredentials",
        "emr-containers:ListTagsForResource",
        "emr-containers:TagResource",
        "emr-containers:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/emr-containers:managedEndpoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/emr-containers:managedEndpoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "emr-containers:DescribeSecurityConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "emr-containers:DescribeSecurityConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/emr-containers:securityConfiguration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/emr-containers:securityConfiguration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "emr-serverless:AccessInteractiveEndpoints",
         "emr-serverless:AccessLivyEndpoints",
         "emr-serverless:DeleteApplication",
         "emr-serverless:GetApplication",
         "emr-serverless:ListJobRuns",
         "emr-serverless:ListTagsForResource",
         "emr-serverless:StartApplication",
         "emr-serverless:StartJobRun",
         "emr-serverless:StopApplication",
         "emr-serverless:TagResource",
         "emr-serverless:UntagResource",
         "emr-serverless:UpdateApplication"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "emr-serverless:AccessInteractiveEndpoints",
        "emr-serverless:AccessLivyEndpoints",
        "emr-serverless:DeleteApplication",
        "emr-serverless:GetApplication",
        "emr-serverless:ListJobRuns",
        "emr-serverless:ListTagsForResource",
        "emr-serverless:StartApplication",
        "emr-serverless:StartJobRun",
        "emr-serverless:StopApplication",
        "emr-serverless:TagResource",
        "emr-serverless:UntagResource",
        "emr-serverless:UpdateApplication"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/emr-serverless:application"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/emr-serverless:application"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "emr-serverless:CancelJobRun",
         "emr-serverless:GetDashboardForJobRun",
         "emr-serverless:GetJobRun",
         "emr-serverless:ListJobRunAttempts",
         "emr-serverless:ListTagsForResource",
         "emr-serverless:TagResource",
         "emr-serverless:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "emr-serverless:CancelJobRun",
        "emr-serverless:GetDashboardForJobRun",
        "emr-serverless:GetJobRun",
        "emr-serverless:ListJobRunAttempts",
        "emr-serverless:ListTagsForResource",
        "emr-serverless:TagResource",
        "emr-serverless:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/emr-serverless:jobRun"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/emr-serverless:jobRun"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "entityresolution:BatchDeleteUniqueId",
         "entityresolution:DeleteMatchingWorkflow",
         "entityresolution:GetMatchId",
         "entityresolution:GetMatchingJob",
         "entityresolution:GetMatchingWorkflow",
         "entityresolution:ListMatchingJobs",
         "entityresolution:StartMatchingJob",
         "entityresolution:TagResource",
         "entityresolution:UntagResource",
         "entityresolution:UpdateMatchingWorkflow"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "entityresolution:BatchDeleteUniqueId",
        "entityresolution:DeleteMatchingWorkflow",
        "entityresolution:GetMatchId",
        "entityresolution:GetMatchingJob",
        "entityresolution:GetMatchingWorkflow",
        "entityresolution:ListMatchingJobs",
        "entityresolution:StartMatchingJob",
        "entityresolution:TagResource",
        "entityresolution:UntagResource",
        "entityresolution:UpdateMatchingWorkflow"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/entityresolution:MatchingWorkflow"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/entityresolution:MatchingWorkflow"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "entityresolution:DeleteIdMappingWorkflow",
         "entityresolution:GetIdMappingJob",
         "entityresolution:GetIdMappingWorkflow",
         "entityresolution:ListIdMappingJobs",
         "entityresolution:StartIdMappingJob",
         "entityresolution:TagResource",
         "entityresolution:UntagResource",
         "entityresolution:UpdateIdMappingWorkflow"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "entityresolution:DeleteIdMappingWorkflow",
        "entityresolution:GetIdMappingJob",
        "entityresolution:GetIdMappingWorkflow",
        "entityresolution:ListIdMappingJobs",
        "entityresolution:StartIdMappingJob",
        "entityresolution:TagResource",
        "entityresolution:UntagResource",
        "entityresolution:UpdateIdMappingWorkflow"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/entityresolution:IdMappingWorkflow"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/entityresolution:IdMappingWorkflow"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "entityresolution:DeleteIdNamespace",
         "entityresolution:GetIdNamespace",
         "entityresolution:TagResource",
         "entityresolution:UntagResource",
         "entityresolution:UpdateIdNamespace"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "entityresolution:DeleteIdNamespace",
        "entityresolution:GetIdNamespace",
        "entityresolution:TagResource",
        "entityresolution:UntagResource",
        "entityresolution:UpdateIdNamespace"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/entityresolution:IdNamespace"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/entityresolution:IdNamespace"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "entityresolution:DeleteSchemaMapping",
         "entityresolution:GetSchemaMapping",
         "entityresolution:TagResource",
         "entityresolution:UntagResource",
         "entityresolution:UpdateSchemaMapping"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "entityresolution:DeleteSchemaMapping",
        "entityresolution:GetSchemaMapping",
        "entityresolution:TagResource",
        "entityresolution:UntagResource",
        "entityresolution:UpdateSchemaMapping"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/entityresolution:SchemaMapping"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/entityresolution:SchemaMapping"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "entityresolution:GetProviderService",
         "entityresolution:ListProviderServices",
         "entityresolution:TagResource",
         "entityresolution:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "entityresolution:GetProviderService",
        "entityresolution:ListProviderServices",
        "entityresolution:TagResource",
        "entityresolution:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/entityresolution:ProviderService"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/entityresolution:ProviderService"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "es:AddDataSource",
         "es:AddTags",
         "es:AssociatePackage",
         "es:AssociatePackages",
         "es:CancelDomainConfigChange",
         "es:CancelElasticsearchServiceSoftwareUpdate",
         "es:CancelServiceSoftwareUpdate",
         "es:CreateDomain",
         "es:CreateElasticsearchDomain",
         "es:CreateOutboundConnection",
         "es:CreateOutboundCrossClusterSearchConnection",
         "es:DeleteDataSource",
         "es:DeleteDomain",
         "es:DeleteElasticsearchDomain",
         "es:DescribeDomain",
         "es:DescribeDomainAutoTunes",
         "es:DescribeDomainChangeProgress",
         "es:DescribeDomainConfig",
         "es:DescribeDomainHealth",
         "es:DescribeDomainNodes",
         "es:DescribeDomains",
         "es:DescribeDryRunProgress",
         "es:DescribeElasticsearchDomain",
         "es:DescribeElasticsearchDomainConfig",
         "es:DescribeElasticsearchDomains",
         "es:DissociatePackage",
         "es:DissociatePackages",
         "es:ESCrossClusterGet",
         "es:ESHttpDelete",
         "es:ESHttpGet",
         "es:ESHttpHead",
         "es:ESHttpPatch",
         "es:ESHttpPost",
         "es:ESHttpPut",
         "es:GetCompatibleElasticsearchVersions",
         "es:GetCompatibleVersions",
         "es:GetDataSource",
         "es:GetDomainMaintenanceStatus",
         "es:GetUpgradeHistory",
         "es:GetUpgradeStatus",
         "es:ListDataSources",
         "es:ListDomainMaintenances",
         "es:ListPackagesForDomain",
         "es:ListScheduledActions",
         "es:ListTags",
         "es:RemoveTags",
         "es:StartDomainMaintenance",
         "es:StartElasticsearchServiceSoftwareUpdate",
         "es:StartServiceSoftwareUpdate",
         "es:UpdateDataSource",
         "es:UpdateDomainConfig",
         "es:UpdateElasticsearchDomainConfig",
         "es:UpdateScheduledAction",
         "es:UpgradeDomain",
         "es:UpgradeElasticsearchDomain"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "es:AddDataSource",
        "es:AddTags",
        "es:AssociatePackage",
        "es:AssociatePackages",
        "es:CancelDomainConfigChange",
        "es:CancelElasticsearchServiceSoftwareUpdate",
        "es:CancelServiceSoftwareUpdate",
        "es:CreateDomain",
        "es:CreateElasticsearchDomain",
        "es:CreateOutboundConnection",
        "es:CreateOutboundCrossClusterSearchConnection",
        "es:DeleteDataSource",
        "es:DeleteDomain",
        "es:DeleteElasticsearchDomain",
        "es:DescribeDomain",
        "es:DescribeDomainAutoTunes",
        "es:DescribeDomainChangeProgress",
        "es:DescribeDomainConfig",
        "es:DescribeDomainHealth",
        "es:DescribeDomainNodes",
        "es:DescribeDomains",
        "es:DescribeDryRunProgress",
        "es:DescribeElasticsearchDomain",
        "es:DescribeElasticsearchDomainConfig",
        "es:DescribeElasticsearchDomains",
        "es:DissociatePackage",
        "es:DissociatePackages",
        "es:ESCrossClusterGet",
        "es:ESHttpDelete",
        "es:ESHttpGet",
        "es:ESHttpHead",
        "es:ESHttpPatch",
        "es:ESHttpPost",
        "es:ESHttpPut",
        "es:GetCompatibleElasticsearchVersions",
        "es:GetCompatibleVersions",
        "es:GetDataSource",
        "es:GetDomainMaintenanceStatus",
        "es:GetUpgradeHistory",
        "es:GetUpgradeStatus",
        "es:ListDataSources",
        "es:ListDomainMaintenances",
        "es:ListPackagesForDomain",
        "es:ListScheduledActions",
        "es:ListTags",
        "es:RemoveTags",
        "es:StartDomainMaintenance",
        "es:StartElasticsearchServiceSoftwareUpdate",
        "es:StartServiceSoftwareUpdate",
        "es:UpdateDataSource",
        "es:UpdateDomainConfig",
        "es:UpdateElasticsearchDomainConfig",
        "es:UpdateScheduledAction",
        "es:UpgradeDomain",
        "es:UpgradeElasticsearchDomain"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/es:domain"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/es:domain"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "es:AddDirectQueryDataSource",
         "es:AddTags",
         "es:DeleteDirectQueryDataSource",
         "es:GetDirectQueryDataSource",
         "es:ListDirectQueryDataSources",
         "es:ListTags",
         "es:RemoveTags",
         "es:UpdateDirectQueryDataSource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "es:AddDirectQueryDataSource",
        "es:AddTags",
        "es:DeleteDirectQueryDataSource",
        "es:GetDirectQueryDataSource",
        "es:ListDirectQueryDataSources",
        "es:ListTags",
        "es:RemoveTags",
        "es:UpdateDirectQueryDataSource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/es:datasource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/es:datasource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "es:AddTags",
         "es:DeleteApplication",
         "es:GetApplication",
         "es:ListApplications",
         "es:ListTags",
         "es:RemoveTags",
         "es:UpdateApplication"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "es:AddTags",
        "es:DeleteApplication",
        "es:GetApplication",
        "es:ListApplications",
        "es:ListTags",
        "es:RemoveTags",
        "es:UpdateApplication"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/es:application"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/es:application"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "events:ActivateEventSource",
         "events:CreatePartnerEventSource",
         "events:DeactivateEventSource",
         "events:DeletePartnerEventSource",
         "events:DescribeEventSource",
         "events:DescribePartnerEventSource",
         "events:ListPartnerEventSourceAccounts"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "events:ActivateEventSource",
        "events:CreatePartnerEventSource",
        "events:DeactivateEventSource",
        "events:DeletePartnerEventSource",
        "events:DescribeEventSource",
        "events:DescribePartnerEventSource",
        "events:ListPartnerEventSourceAccounts"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/events:event-source"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/events:event-source"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "events:CancelReplay",
         "events:DescribeReplay",
         "events:StartReplay"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "events:CancelReplay",
        "events:DescribeReplay",
        "events:StartReplay"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/events:replay"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/events:replay"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "events:CreateApiDestination",
         "events:DeleteApiDestination",
         "events:DescribeApiDestination",
         "events:InvokeApiDestination",
         "events:UpdateApiDestination"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "events:CreateApiDestination",
        "events:DeleteApiDestination",
        "events:DescribeApiDestination",
        "events:InvokeApiDestination",
        "events:UpdateApiDestination"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/events:api-destination"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/events:api-destination"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "events:CreateApiDestination",
         "events:CreateConnection",
         "events:DeauthorizeConnection",
         "events:DeleteConnection",
         "events:DescribeApiDestination",
         "events:DescribeConnection",
         "events:RetrieveConnectionCredentials",
         "events:UpdateConnection"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "events:CreateApiDestination",
        "events:CreateConnection",
        "events:DeauthorizeConnection",
        "events:DeleteConnection",
        "events:DescribeApiDestination",
        "events:DescribeConnection",
        "events:RetrieveConnectionCredentials",
        "events:UpdateConnection"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/events:connection"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/events:connection"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "events:CreateArchive",
         "events:DeleteArchive",
         "events:DescribeArchive",
         "events:StartReplay",
         "events:UpdateArchive"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "events:CreateArchive",
        "events:DeleteArchive",
        "events:DescribeArchive",
        "events:StartReplay",
        "events:UpdateArchive"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/events:archive"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/events:archive"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "events:CreateArchive",
         "events:CreateEventBus",
         "events:DeleteEventBus",
         "events:DescribeEventBus",
         "events:ListTagsForResource",
         "events:PutEvents",
         "events:StartReplay",
         "events:TagResource",
         "events:UntagResource",
         "events:UpdateEventBus"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "events:CreateArchive",
        "events:CreateEventBus",
        "events:DeleteEventBus",
        "events:DescribeEventBus",
        "events:ListTagsForResource",
        "events:PutEvents",
        "events:StartReplay",
        "events:TagResource",
        "events:UntagResource",
        "events:UpdateEventBus"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/events:event-bus"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/events:event-bus"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "events:CreateEndpoint",
         "events:DeleteEndpoint",
         "events:DescribeEndpoint",
         "events:UpdateEndpoint"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "events:CreateEndpoint",
        "events:DeleteEndpoint",
        "events:DescribeEndpoint",
        "events:UpdateEndpoint"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/events:endpoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/events:endpoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "events:DeleteRule",
         "events:DescribeRule",
         "events:DisableRule",
         "events:EnableRule",
         "events:ListTagsForResource",
         "events:ListTargetsByRule",
         "events:PutRule",
         "events:PutTargets",
         "events:RemoveTargets",
         "events:TagResource",
         "events:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "events:DeleteRule",
        "events:DescribeRule",
        "events:DisableRule",
        "events:EnableRule",
        "events:ListTagsForResource",
        "events:ListTargetsByRule",
        "events:PutRule",
        "events:PutTargets",
        "events:RemoveTargets",
        "events:TagResource",
        "events:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/events:rule-on-custom-event-bus"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/events:rule-on-custom-event-bus"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "events:DeleteRule",
         "events:DescribeRule",
         "events:DisableRule",
         "events:EnableRule",
         "events:ListTagsForResource",
         "events:ListTargetsByRule",
         "events:PutRule",
         "events:PutTargets",
         "events:RemoveTargets",
         "events:TagResource",
         "events:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "events:DeleteRule",
        "events:DescribeRule",
        "events:DisableRule",
        "events:EnableRule",
        "events:ListTagsForResource",
        "events:ListTargetsByRule",
        "events:PutRule",
        "events:PutTargets",
        "events:RemoveTargets",
        "events:TagResource",
        "events:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/events:rule-on-default-event-bus"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/events:rule-on-default-event-bus"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "evidently:BatchEvaluateFeature",
         "evidently:DeleteFeature",
         "evidently:EvaluateFeature",
         "evidently:GetFeature",
         "evidently:TagResource",
         "evidently:UntagResource",
         "evidently:UpdateFeature"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "evidently:BatchEvaluateFeature",
        "evidently:DeleteFeature",
        "evidently:EvaluateFeature",
        "evidently:GetFeature",
        "evidently:TagResource",
        "evidently:UntagResource",
        "evidently:UpdateFeature"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/evidently:Feature"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/evidently:Feature"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "evidently:DeleteExperiment",
         "evidently:GetExperiment",
         "evidently:GetExperimentResults",
         "evidently:StartExperiment",
         "evidently:StopExperiment",
         "evidently:TagResource",
         "evidently:UntagResource",
         "evidently:UpdateExperiment"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "evidently:DeleteExperiment",
        "evidently:GetExperiment",
        "evidently:GetExperimentResults",
        "evidently:StartExperiment",
        "evidently:StopExperiment",
        "evidently:TagResource",
        "evidently:UntagResource",
        "evidently:UpdateExperiment"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/evidently:Experiment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/evidently:Experiment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "evidently:DeleteLaunch",
         "evidently:GetLaunch",
         "evidently:StartLaunch",
         "evidently:StopLaunch",
         "evidently:TagResource",
         "evidently:UntagResource",
         "evidently:UpdateLaunch"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "evidently:DeleteLaunch",
        "evidently:GetLaunch",
        "evidently:StartLaunch",
        "evidently:StopLaunch",
        "evidently:TagResource",
        "evidently:UntagResource",
        "evidently:UpdateLaunch"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/evidently:Launch"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/evidently:Launch"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "evidently:DeleteProject",
         "evidently:GetProject",
         "evidently:PutProjectEvents",
         "evidently:TagResource",
         "evidently:UntagResource",
         "evidently:UpdateProject",
         "evidently:UpdateProjectDataDelivery"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "evidently:DeleteProject",
        "evidently:GetProject",
        "evidently:PutProjectEvents",
        "evidently:TagResource",
        "evidently:UntagResource",
        "evidently:UpdateProject",
        "evidently:UpdateProjectDataDelivery"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/evidently:Project"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/evidently:Project"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "evidently:DeleteSegment",
         "evidently:GetSegment",
         "evidently:TagResource",
         "evidently:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "evidently:DeleteSegment",
        "evidently:GetSegment",
        "evidently:TagResource",
        "evidently:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/evidently:Segment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/evidently:Segment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "execute-api:InvalidateCache",
         "execute-api:Invoke",
         "execute-api:ManageConnections"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "execute-api:InvalidateCache",
        "execute-api:Invoke",
        "execute-api:ManageConnections"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/execute-api:execute-api-general"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/execute-api:execute-api-general"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "execute-api:Invoke"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "execute-api:Invoke"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/execute-api:execute-api-domain"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/execute-api:execute-api-domain"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "finspace:ConnectKxCluster",
         "finspace:CreateKxCluster",
         "finspace:DeleteKxCluster",
         "finspace:DeleteKxClusterNode",
         "finspace:GetKxCluster",
         "finspace:GetKxConnectionString",
         "finspace:ListKxClusterNodes",
         "finspace:ListTagsForResource",
         "finspace:TagResource",
         "finspace:UntagResource",
         "finspace:UpdateKxClusterCodeConfiguration",
         "finspace:UpdateKxClusterDatabases"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "finspace:ConnectKxCluster",
        "finspace:CreateKxCluster",
        "finspace:DeleteKxCluster",
        "finspace:DeleteKxClusterNode",
        "finspace:GetKxCluster",
        "finspace:GetKxConnectionString",
        "finspace:ListKxClusterNodes",
        "finspace:ListTagsForResource",
        "finspace:TagResource",
        "finspace:UntagResource",
        "finspace:UpdateKxClusterCodeConfiguration",
        "finspace:UpdateKxClusterDatabases"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/finspace:kxCluster"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/finspace:kxCluster"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "finspace:CreateEnvironment",
         "finspace:CreateUser",
         "finspace:DeleteEnvironment",
         "finspace:GetEnvironment",
         "finspace:GetLoadSampleDataSetGroupIntoEnvironmentStatus",
         "finspace:GetUser",
         "finspace:ListEnvironments",
         "finspace:ListTagsForResource",
         "finspace:ListUsers",
         "finspace:LoadSampleDataSetGroupIntoEnvironment",
         "finspace:ResetUserPassword",
         "finspace:TagResource",
         "finspace:UntagResource",
         "finspace:UpdateEnvironment",
         "finspace:UpdateUser"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "finspace:CreateEnvironment",
        "finspace:CreateUser",
        "finspace:DeleteEnvironment",
        "finspace:GetEnvironment",
        "finspace:GetLoadSampleDataSetGroupIntoEnvironmentStatus",
        "finspace:GetUser",
        "finspace:ListEnvironments",
        "finspace:ListTagsForResource",
        "finspace:ListUsers",
        "finspace:LoadSampleDataSetGroupIntoEnvironment",
        "finspace:ResetUserPassword",
        "finspace:TagResource",
        "finspace:UntagResource",
        "finspace:UpdateEnvironment",
        "finspace:UpdateUser"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/finspace:environment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/finspace:environment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "finspace:CreateKxChangeset",
         "finspace:CreateKxDatabase",
         "finspace:DeleteKxDatabase",
         "finspace:GetKxChangeset",
         "finspace:GetKxDatabase",
         "finspace:ListKxChangesets",
         "finspace:ListKxDataviews",
         "finspace:ListTagsForResource",
         "finspace:MountKxDatabase",
         "finspace:TagResource",
         "finspace:UntagResource",
         "finspace:UpdateKxDatabase"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "finspace:CreateKxChangeset",
        "finspace:CreateKxDatabase",
        "finspace:DeleteKxDatabase",
        "finspace:GetKxChangeset",
        "finspace:GetKxDatabase",
        "finspace:ListKxChangesets",
        "finspace:ListKxDataviews",
        "finspace:ListTagsForResource",
        "finspace:MountKxDatabase",
        "finspace:TagResource",
        "finspace:UntagResource",
        "finspace:UpdateKxDatabase"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/finspace:kxDatabase"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/finspace:kxDatabase"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "finspace:CreateKxDataview",
         "finspace:DeleteKxDataview",
         "finspace:GetKxDataview",
         "finspace:ListTagsForResource",
         "finspace:TagResource",
         "finspace:UntagResource",
         "finspace:UpdateKxDataview"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "finspace:CreateKxDataview",
        "finspace:DeleteKxDataview",
        "finspace:GetKxDataview",
        "finspace:ListTagsForResource",
        "finspace:TagResource",
        "finspace:UntagResource",
        "finspace:UpdateKxDataview"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/finspace:kxDataview"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/finspace:kxDataview"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "finspace:CreateKxScalingGroup",
         "finspace:DeleteKxScalingGroup",
         "finspace:GetKxScalingGroup",
         "finspace:ListTagsForResource",
         "finspace:TagResource",
         "finspace:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "finspace:CreateKxScalingGroup",
        "finspace:DeleteKxScalingGroup",
        "finspace:GetKxScalingGroup",
        "finspace:ListTagsForResource",
        "finspace:TagResource",
        "finspace:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/finspace:kxScalingGroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/finspace:kxScalingGroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "finspace:CreateKxUser",
         "finspace:DeleteKxEnvironment",
         "finspace:GetKxEnvironment",
         "finspace:ListKxClusters",
         "finspace:ListKxDatabases",
         "finspace:ListKxScalingGroups",
         "finspace:ListKxUsers",
         "finspace:ListKxVolumes",
         "finspace:ListTagsForResource",
         "finspace:TagResource",
         "finspace:UntagResource",
         "finspace:UpdateKxEnvironment",
         "finspace:UpdateKxEnvironmentNetwork"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "finspace:CreateKxUser",
        "finspace:DeleteKxEnvironment",
        "finspace:GetKxEnvironment",
        "finspace:ListKxClusters",
        "finspace:ListKxDatabases",
        "finspace:ListKxScalingGroups",
        "finspace:ListKxUsers",
        "finspace:ListKxVolumes",
        "finspace:ListTagsForResource",
        "finspace:TagResource",
        "finspace:UntagResource",
        "finspace:UpdateKxEnvironment",
        "finspace:UpdateKxEnvironmentNetwork"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/finspace:kxEnvironment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/finspace:kxEnvironment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "finspace:CreateKxVolume",
         "finspace:DeleteKxVolume",
         "finspace:GetKxVolume",
         "finspace:ListTagsForResource",
         "finspace:TagResource",
         "finspace:UntagResource",
         "finspace:UpdateKxVolume"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "finspace:CreateKxVolume",
        "finspace:DeleteKxVolume",
        "finspace:GetKxVolume",
        "finspace:ListTagsForResource",
        "finspace:TagResource",
        "finspace:UntagResource",
        "finspace:UpdateKxVolume"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/finspace:kxVolume"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/finspace:kxVolume"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "finspace:CreateUser",
         "finspace:GetUser",
         "finspace:ListUsers",
         "finspace:ResetUserPassword",
         "finspace:UpdateUser"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "finspace:CreateUser",
        "finspace:GetUser",
        "finspace:ListUsers",
        "finspace:ResetUserPassword",
        "finspace:UpdateUser"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/finspace:user"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/finspace:user"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "finspace:DeleteKxUser",
         "finspace:GetKxUser",
         "finspace:ListTagsForResource",
         "finspace:TagResource",
         "finspace:UntagResource",
         "finspace:UpdateKxUser"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "finspace:DeleteKxUser",
        "finspace:GetKxUser",
        "finspace:ListTagsForResource",
        "finspace:TagResource",
        "finspace:UntagResource",
        "finspace:UpdateKxUser"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/finspace:kxUser"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/finspace:kxUser"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "finspace-api:GetProgrammaticAccessCredentials"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "finspace-api:GetProgrammaticAccessCredentials"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/finspace-api:credential"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/finspace-api:credential"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "firehose:CreateDeliveryStream",
         "firehose:DeleteDeliveryStream",
         "firehose:DescribeDeliveryStream",
         "firehose:ListTagsForDeliveryStream",
         "firehose:PutRecord",
         "firehose:PutRecordBatch",
         "firehose:StartDeliveryStreamEncryption",
         "firehose:StopDeliveryStreamEncryption",
         "firehose:TagDeliveryStream",
         "firehose:UntagDeliveryStream",
         "firehose:UpdateDestination"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "firehose:CreateDeliveryStream",
        "firehose:DeleteDeliveryStream",
        "firehose:DescribeDeliveryStream",
        "firehose:ListTagsForDeliveryStream",
        "firehose:PutRecord",
        "firehose:PutRecordBatch",
        "firehose:StartDeliveryStreamEncryption",
        "firehose:StopDeliveryStreamEncryption",
        "firehose:TagDeliveryStream",
        "firehose:UntagDeliveryStream",
        "firehose:UpdateDestination"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/firehose:deliverystream"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/firehose:deliverystream"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "fis:CreateExperimentTemplate",
         "fis:GetAction",
         "fis:ListTagsForResource",
         "fis:TagResource",
         "fis:UntagResource",
         "fis:UpdateExperimentTemplate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "fis:CreateExperimentTemplate",
        "fis:GetAction",
        "fis:ListTagsForResource",
        "fis:TagResource",
        "fis:UntagResource",
        "fis:UpdateExperimentTemplate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/fis:action"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/fis:action"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "fis:CreateExperimentTemplate",
         "fis:CreateTargetAccountConfiguration",
         "fis:DeleteExperimentTemplate",
         "fis:DeleteTargetAccountConfiguration",
         "fis:GetExperimentTemplate",
         "fis:GetTargetAccountConfiguration",
         "fis:ListTagsForResource",
         "fis:ListTargetAccountConfigurations",
         "fis:StartExperiment",
         "fis:TagResource",
         "fis:UntagResource",
         "fis:UpdateExperimentTemplate",
         "fis:UpdateTargetAccountConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "fis:CreateExperimentTemplate",
        "fis:CreateTargetAccountConfiguration",
        "fis:DeleteExperimentTemplate",
        "fis:DeleteTargetAccountConfiguration",
        "fis:GetExperimentTemplate",
        "fis:GetTargetAccountConfiguration",
        "fis:ListTagsForResource",
        "fis:ListTargetAccountConfigurations",
        "fis:StartExperiment",
        "fis:TagResource",
        "fis:UntagResource",
        "fis:UpdateExperimentTemplate",
        "fis:UpdateTargetAccountConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/fis:experiment-template"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/fis:experiment-template"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "fis:GetExperiment",
         "fis:GetExperimentTargetAccountConfiguration",
         "fis:InjectApiInternalError",
         "fis:InjectApiThrottleError",
         "fis:InjectApiUnavailableError",
         "fis:ListExperimentResolvedTargets",
         "fis:ListExperimentTargetAccountConfigurations",
         "fis:ListTagsForResource",
         "fis:StartExperiment",
         "fis:StopExperiment",
         "fis:TagResource",
         "fis:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "fis:GetExperiment",
        "fis:GetExperimentTargetAccountConfiguration",
        "fis:InjectApiInternalError",
        "fis:InjectApiThrottleError",
        "fis:InjectApiUnavailableError",
        "fis:ListExperimentResolvedTargets",
        "fis:ListExperimentTargetAccountConfigurations",
        "fis:ListTagsForResource",
        "fis:StartExperiment",
        "fis:StopExperiment",
        "fis:TagResource",
        "fis:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/fis:experiment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/fis:experiment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "fis:GetSafetyLever",
         "fis:UpdateSafetyLeverState"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "fis:GetSafetyLever",
        "fis:UpdateSafetyLeverState"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/fis:safety-lever"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/fis:safety-lever"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "fms:BatchAssociateResource",
         "fms:BatchDisassociateResource",
         "fms:DeleteResourceSet",
         "fms:GetResourceSet",
         "fms:ListResourceSetResources",
         "fms:PutResourceSet",
         "fms:TagResource",
         "fms:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "fms:BatchAssociateResource",
        "fms:BatchDisassociateResource",
        "fms:DeleteResourceSet",
        "fms:GetResourceSet",
        "fms:ListResourceSetResources",
        "fms:PutResourceSet",
        "fms:TagResource",
        "fms:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/fms:resource-set"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/fms:resource-set"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "fms:DeleteAppsList",
         "fms:GetAppsList",
         "fms:PutAppsList",
         "fms:TagResource",
         "fms:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "fms:DeleteAppsList",
        "fms:GetAppsList",
        "fms:PutAppsList",
        "fms:TagResource",
        "fms:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/fms:applications-list"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/fms:applications-list"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "fms:DeletePolicy",
         "fms:GetComplianceDetail",
         "fms:GetPolicy",
         "fms:GetProtectionStatus",
         "fms:GetViolationDetails",
         "fms:ListComplianceStatus",
         "fms:ListTagsForResource",
         "fms:PutPolicy",
         "fms:TagResource",
         "fms:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "fms:DeletePolicy",
        "fms:GetComplianceDetail",
        "fms:GetPolicy",
        "fms:GetProtectionStatus",
        "fms:GetViolationDetails",
        "fms:ListComplianceStatus",
        "fms:ListTagsForResource",
        "fms:PutPolicy",
        "fms:TagResource",
        "fms:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/fms:policy"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/fms:policy"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "fms:DeleteProtocolsList",
         "fms:GetProtocolsList",
         "fms:PutProtocolsList",
         "fms:TagResource",
         "fms:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "fms:DeleteProtocolsList",
        "fms:GetProtocolsList",
        "fms:PutProtocolsList",
        "fms:TagResource",
        "fms:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/fms:protocols-list"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/fms:protocols-list"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "forecast:CreateDataset",
         "forecast:DeleteDataset",
         "forecast:DeleteResourceTree",
         "forecast:DescribeDataset",
         "forecast:ListTagsForResource",
         "forecast:TagResource",
         "forecast:UntagResource",
         "forecast:UpdateDatasetGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "forecast:CreateDataset",
        "forecast:DeleteDataset",
        "forecast:DeleteResourceTree",
        "forecast:DescribeDataset",
        "forecast:ListTagsForResource",
        "forecast:TagResource",
        "forecast:UntagResource",
        "forecast:UpdateDatasetGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/forecast:dataset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/forecast:dataset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "forecast:CreateDatasetGroup",
         "forecast:CreatePredictor",
         "forecast:DeleteDatasetGroup",
         "forecast:DeleteResourceTree",
         "forecast:DescribeDatasetGroup",
         "forecast:ListTagsForResource",
         "forecast:TagResource",
         "forecast:UntagResource",
         "forecast:UpdateDatasetGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "forecast:CreateDatasetGroup",
        "forecast:CreatePredictor",
        "forecast:DeleteDatasetGroup",
        "forecast:DeleteResourceTree",
        "forecast:DescribeDatasetGroup",
        "forecast:ListTagsForResource",
        "forecast:TagResource",
        "forecast:UntagResource",
        "forecast:UpdateDatasetGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/forecast:datasetGroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/forecast:datasetGroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "forecast:CreateDatasetImportJob",
         "forecast:DeleteDatasetImportJob",
         "forecast:DeleteResourceTree",
         "forecast:DescribeDatasetImportJob",
         "forecast:ListTagsForResource",
         "forecast:StopResource",
         "forecast:TagResource",
         "forecast:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "forecast:CreateDatasetImportJob",
        "forecast:DeleteDatasetImportJob",
        "forecast:DeleteResourceTree",
        "forecast:DescribeDatasetImportJob",
        "forecast:ListTagsForResource",
        "forecast:StopResource",
        "forecast:TagResource",
        "forecast:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/forecast:datasetImportJob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/forecast:datasetImportJob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "forecast:CreateExplainability",
         "forecast:CreateForecastExportJob",
         "forecast:CreateWhatIfAnalysis",
         "forecast:DeleteForecast",
         "forecast:DeleteResourceTree",
         "forecast:DescribeForecast",
         "forecast:ListTagsForResource",
         "forecast:QueryForecast",
         "forecast:StopResource",
         "forecast:TagResource",
         "forecast:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "forecast:CreateExplainability",
        "forecast:CreateForecastExportJob",
        "forecast:CreateWhatIfAnalysis",
        "forecast:DeleteForecast",
        "forecast:DeleteResourceTree",
        "forecast:DescribeForecast",
        "forecast:ListTagsForResource",
        "forecast:QueryForecast",
        "forecast:StopResource",
        "forecast:TagResource",
        "forecast:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/forecast:forecast"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/forecast:forecast"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "forecast:CreateExplainabilityExport",
         "forecast:DeleteExplainability",
         "forecast:DeleteResourceTree",
         "forecast:DescribeExplainability",
         "forecast:ListTagsForResource",
         "forecast:StopResource",
         "forecast:TagResource",
         "forecast:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "forecast:CreateExplainabilityExport",
        "forecast:DeleteExplainability",
        "forecast:DeleteResourceTree",
        "forecast:DescribeExplainability",
        "forecast:ListTagsForResource",
        "forecast:StopResource",
        "forecast:TagResource",
        "forecast:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/forecast:explainability"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/forecast:explainability"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "forecast:CreateForecast",
         "forecast:CreateForecastEndpoint",
         "forecast:CreateMonitor",
         "forecast:CreatePredictorBacktestExportJob",
         "forecast:DeletePredictor",
         "forecast:DeleteResourceTree",
         "forecast:DescribeAutoPredictor",
         "forecast:DescribePredictor",
         "forecast:GetAccuracyMetrics",
         "forecast:ListTagsForResource",
         "forecast:StopResource",
         "forecast:TagResource",
         "forecast:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "forecast:CreateForecast",
        "forecast:CreateForecastEndpoint",
        "forecast:CreateMonitor",
        "forecast:CreatePredictorBacktestExportJob",
        "forecast:DeletePredictor",
        "forecast:DeleteResourceTree",
        "forecast:DescribeAutoPredictor",
        "forecast:DescribePredictor",
        "forecast:GetAccuracyMetrics",
        "forecast:ListTagsForResource",
        "forecast:StopResource",
        "forecast:TagResource",
        "forecast:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/forecast:predictor"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/forecast:predictor"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "forecast:CreateWhatIfForecast",
         "forecast:DeleteResourceTree",
         "forecast:DeleteWhatIfAnalysis",
         "forecast:DescribeWhatIfAnalysis",
         "forecast:ListTagsForResource",
         "forecast:StopResource",
         "forecast:TagResource",
         "forecast:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "forecast:CreateWhatIfForecast",
        "forecast:DeleteResourceTree",
        "forecast:DeleteWhatIfAnalysis",
        "forecast:DescribeWhatIfAnalysis",
        "forecast:ListTagsForResource",
        "forecast:StopResource",
        "forecast:TagResource",
        "forecast:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/forecast:whatIfAnalysis"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/forecast:whatIfAnalysis"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "forecast:CreateWhatIfForecastExport",
         "forecast:DeleteResourceTree",
         "forecast:DeleteWhatIfForecast",
         "forecast:DescribeWhatIfForecast",
         "forecast:ListTagsForResource",
         "forecast:QueryWhatIfForecast",
         "forecast:StopResource",
         "forecast:TagResource",
         "forecast:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "forecast:CreateWhatIfForecastExport",
        "forecast:DeleteResourceTree",
        "forecast:DeleteWhatIfForecast",
        "forecast:DescribeWhatIfForecast",
        "forecast:ListTagsForResource",
        "forecast:QueryWhatIfForecast",
        "forecast:StopResource",
        "forecast:TagResource",
        "forecast:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/forecast:whatIfForecast"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/forecast:whatIfForecast"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "forecast:DeleteExplainabilityExport",
         "forecast:DeleteResourceTree",
         "forecast:DescribeExplainabilityExport",
         "forecast:ListTagsForResource",
         "forecast:StopResource",
         "forecast:TagResource",
         "forecast:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "forecast:DeleteExplainabilityExport",
        "forecast:DeleteResourceTree",
        "forecast:DescribeExplainabilityExport",
        "forecast:ListTagsForResource",
        "forecast:StopResource",
        "forecast:TagResource",
        "forecast:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/forecast:explainabilityExport"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/forecast:explainabilityExport"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "forecast:DeleteForecastEndpoint",
         "forecast:DeleteResourceTree",
         "forecast:DescribeForecastEndpoint",
         "forecast:GetRecentForecastContext",
         "forecast:InvokeForecastEndpoint",
         "forecast:ListTagsForResource",
         "forecast:StopResource",
         "forecast:TagResource",
         "forecast:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "forecast:DeleteForecastEndpoint",
        "forecast:DeleteResourceTree",
        "forecast:DescribeForecastEndpoint",
        "forecast:GetRecentForecastContext",
        "forecast:InvokeForecastEndpoint",
        "forecast:ListTagsForResource",
        "forecast:StopResource",
        "forecast:TagResource",
        "forecast:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/forecast:endpoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/forecast:endpoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "forecast:DeleteForecastExportJob",
         "forecast:DeleteResourceTree",
         "forecast:DescribeForecastExportJob",
         "forecast:ListTagsForResource",
         "forecast:StopResource",
         "forecast:TagResource",
         "forecast:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "forecast:DeleteForecastExportJob",
        "forecast:DeleteResourceTree",
        "forecast:DescribeForecastExportJob",
        "forecast:ListTagsForResource",
        "forecast:StopResource",
        "forecast:TagResource",
        "forecast:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/forecast:forecastExport"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/forecast:forecastExport"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "forecast:DeleteMonitor",
         "forecast:DeleteResourceTree",
         "forecast:DescribeMonitor",
         "forecast:ListMonitorEvaluations",
         "forecast:ListTagsForResource",
         "forecast:ResumeResource",
         "forecast:StopResource",
         "forecast:TagResource",
         "forecast:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "forecast:DeleteMonitor",
        "forecast:DeleteResourceTree",
        "forecast:DescribeMonitor",
        "forecast:ListMonitorEvaluations",
        "forecast:ListTagsForResource",
        "forecast:ResumeResource",
        "forecast:StopResource",
        "forecast:TagResource",
        "forecast:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/forecast:monitor"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/forecast:monitor"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "forecast:DeletePredictorBacktestExportJob",
         "forecast:DeleteResourceTree",
         "forecast:DescribePredictorBacktestExportJob",
         "forecast:ListTagsForResource",
         "forecast:StopResource",
         "forecast:TagResource",
         "forecast:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "forecast:DeletePredictorBacktestExportJob",
        "forecast:DeleteResourceTree",
        "forecast:DescribePredictorBacktestExportJob",
        "forecast:ListTagsForResource",
        "forecast:StopResource",
        "forecast:TagResource",
        "forecast:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/forecast:predictorBacktestExportJob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/forecast:predictorBacktestExportJob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "forecast:DeleteResourceTree",
         "forecast:DeleteWhatIfForecastExport",
         "forecast:DescribeWhatIfForecastExport",
         "forecast:ListTagsForResource",
         "forecast:StopResource",
         "forecast:TagResource",
         "forecast:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "forecast:DeleteResourceTree",
        "forecast:DeleteWhatIfForecastExport",
        "forecast:DescribeWhatIfForecastExport",
        "forecast:ListTagsForResource",
        "forecast:StopResource",
        "forecast:TagResource",
        "forecast:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/forecast:whatIfForecastExport"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/forecast:whatIfForecastExport"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "frauddetector:BatchGetVariable",
         "frauddetector:DeleteVariable",
         "frauddetector:GetVariables",
         "frauddetector:ListTagsForResource",
         "frauddetector:TagResource",
         "frauddetector:TagResource",
         "frauddetector:UntagResource",
         "frauddetector:UntagResource",
         "frauddetector:UpdateVariable"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "frauddetector:BatchGetVariable",
        "frauddetector:DeleteVariable",
        "frauddetector:GetVariables",
        "frauddetector:ListTagsForResource",
        "frauddetector:TagResource",
        "frauddetector:TagResource",
        "frauddetector:UntagResource",
        "frauddetector:UntagResource",
        "frauddetector:UpdateVariable"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/frauddetector:variable"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/frauddetector:variable"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "frauddetector:CancelBatchImportJob",
         "frauddetector:CreateBatchImportJob",
         "frauddetector:DeleteBatchImportJob",
         "frauddetector:GetBatchImportJobValidationReport",
         "frauddetector:GetBatchImportJobs",
         "frauddetector:ListTagsForResource",
         "frauddetector:TagResource",
         "frauddetector:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "frauddetector:CancelBatchImportJob",
        "frauddetector:CreateBatchImportJob",
        "frauddetector:DeleteBatchImportJob",
        "frauddetector:GetBatchImportJobValidationReport",
        "frauddetector:GetBatchImportJobs",
        "frauddetector:ListTagsForResource",
        "frauddetector:TagResource",
        "frauddetector:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/frauddetector:batch-import"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/frauddetector:batch-import"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "frauddetector:CancelBatchPredictionJob",
         "frauddetector:CreateBatchPredictionJob",
         "frauddetector:DeleteBatchPredictionJob",
         "frauddetector:GetBatchPredictionJobs",
         "frauddetector:ListTagsForResource",
         "frauddetector:TagResource",
         "frauddetector:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "frauddetector:CancelBatchPredictionJob",
        "frauddetector:CreateBatchPredictionJob",
        "frauddetector:DeleteBatchPredictionJob",
        "frauddetector:GetBatchPredictionJobs",
        "frauddetector:ListTagsForResource",
        "frauddetector:TagResource",
        "frauddetector:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/frauddetector:batch-prediction"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/frauddetector:batch-prediction"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "frauddetector:CreateBatchImportJob",
         "frauddetector:CreateBatchPredictionJob",
         "frauddetector:CreateModel",
         "frauddetector:DeleteEvent",
         "frauddetector:DeleteEventType",
         "frauddetector:DeleteEventsByEventType",
         "frauddetector:GetDeleteEventsByEventTypeStatus",
         "frauddetector:GetEvent",
         "frauddetector:GetEventPrediction",
         "frauddetector:GetEventPredictionMetadata",
         "frauddetector:GetEventTypes",
         "frauddetector:ListEventPredictions",
         "frauddetector:ListTagsForResource",
         "frauddetector:PutDetector",
         "frauddetector:PutEventType",
         "frauddetector:PutExternalModel",
         "frauddetector:SendEvent",
         "frauddetector:TagResource",
         "frauddetector:UntagResource",
         "frauddetector:UpdateEventLabel"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "frauddetector:CreateBatchImportJob",
        "frauddetector:CreateBatchPredictionJob",
        "frauddetector:CreateModel",
        "frauddetector:DeleteEvent",
        "frauddetector:DeleteEventType",
        "frauddetector:DeleteEventsByEventType",
        "frauddetector:GetDeleteEventsByEventTypeStatus",
        "frauddetector:GetEvent",
        "frauddetector:GetEventPrediction",
        "frauddetector:GetEventPredictionMetadata",
        "frauddetector:GetEventTypes",
        "frauddetector:ListEventPredictions",
        "frauddetector:ListTagsForResource",
        "frauddetector:PutDetector",
        "frauddetector:PutEventType",
        "frauddetector:PutExternalModel",
        "frauddetector:SendEvent",
        "frauddetector:TagResource",
        "frauddetector:UntagResource",
        "frauddetector:UpdateEventLabel"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/frauddetector:event-type"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/frauddetector:event-type"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "frauddetector:CreateBatchPredictionJob",
         "frauddetector:CreateDetectorVersion",
         "frauddetector:CreateRule",
         "frauddetector:DeleteDetector",
         "frauddetector:DescribeDetector",
         "frauddetector:GetDetectors",
         "frauddetector:GetEventPrediction",
         "frauddetector:GetEventPredictionMetadata",
         "frauddetector:ListEventPredictions",
         "frauddetector:ListTagsForResource",
         "frauddetector:PutDetector",
         "frauddetector:TagResource",
         "frauddetector:UntagResource",
         "frauddetector:UpdateDetectorVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "frauddetector:CreateBatchPredictionJob",
        "frauddetector:CreateDetectorVersion",
        "frauddetector:CreateRule",
        "frauddetector:DeleteDetector",
        "frauddetector:DescribeDetector",
        "frauddetector:GetDetectors",
        "frauddetector:GetEventPrediction",
        "frauddetector:GetEventPredictionMetadata",
        "frauddetector:ListEventPredictions",
        "frauddetector:ListTagsForResource",
        "frauddetector:PutDetector",
        "frauddetector:TagResource",
        "frauddetector:UntagResource",
        "frauddetector:UpdateDetectorVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/frauddetector:detector"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/frauddetector:detector"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "frauddetector:CreateBatchPredictionJob",
         "frauddetector:DeleteDetectorVersion",
         "frauddetector:GetDetectorVersion",
         "frauddetector:GetEventPrediction",
         "frauddetector:GetEventPredictionMetadata",
         "frauddetector:ListEventPredictions",
         "frauddetector:ListTagsForResource",
         "frauddetector:TagResource",
         "frauddetector:UntagResource",
         "frauddetector:UpdateDetectorVersionMetadata",
         "frauddetector:UpdateDetectorVersionStatus"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "frauddetector:CreateBatchPredictionJob",
        "frauddetector:DeleteDetectorVersion",
        "frauddetector:GetDetectorVersion",
        "frauddetector:GetEventPrediction",
        "frauddetector:GetEventPredictionMetadata",
        "frauddetector:ListEventPredictions",
        "frauddetector:ListTagsForResource",
        "frauddetector:TagResource",
        "frauddetector:UntagResource",
        "frauddetector:UpdateDetectorVersionMetadata",
        "frauddetector:UpdateDetectorVersionStatus"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/frauddetector:detector-version"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/frauddetector:detector-version"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "frauddetector:CreateDetectorVersion",
         "frauddetector:DeleteExternalModel",
         "frauddetector:GetExternalModels",
         "frauddetector:ListTagsForResource",
         "frauddetector:PutExternalModel",
         "frauddetector:TagResource",
         "frauddetector:UntagResource",
         "frauddetector:UpdateDetectorVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "frauddetector:CreateDetectorVersion",
        "frauddetector:DeleteExternalModel",
        "frauddetector:GetExternalModels",
        "frauddetector:ListTagsForResource",
        "frauddetector:PutExternalModel",
        "frauddetector:TagResource",
        "frauddetector:UntagResource",
        "frauddetector:UpdateDetectorVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/frauddetector:external-model"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/frauddetector:external-model"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "frauddetector:CreateDetectorVersion",
         "frauddetector:DeleteModelVersion",
         "frauddetector:DescribeModelVersions",
         "frauddetector:GetModelVersion",
         "frauddetector:ListTagsForResource",
         "frauddetector:TagResource",
         "frauddetector:UntagResource",
         "frauddetector:UpdateDetectorVersion",
         "frauddetector:UpdateModelVersionStatus"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "frauddetector:CreateDetectorVersion",
        "frauddetector:DeleteModelVersion",
        "frauddetector:DescribeModelVersions",
        "frauddetector:GetModelVersion",
        "frauddetector:ListTagsForResource",
        "frauddetector:TagResource",
        "frauddetector:UntagResource",
        "frauddetector:UpdateDetectorVersion",
        "frauddetector:UpdateModelVersionStatus"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/frauddetector:model-version"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/frauddetector:model-version"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "frauddetector:CreateModel",
         "frauddetector:CreateModelVersion",
         "frauddetector:DeleteModel",
         "frauddetector:GetModels",
         "frauddetector:ListTagsForResource",
         "frauddetector:TagResource",
         "frauddetector:UntagResource",
         "frauddetector:UpdateModel",
         "frauddetector:UpdateModelVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "frauddetector:CreateModel",
        "frauddetector:CreateModelVersion",
        "frauddetector:DeleteModel",
        "frauddetector:GetModels",
        "frauddetector:ListTagsForResource",
        "frauddetector:TagResource",
        "frauddetector:UntagResource",
        "frauddetector:UpdateModel",
        "frauddetector:UpdateModelVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/frauddetector:model"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/frauddetector:model"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "frauddetector:DeleteEntityType",
         "frauddetector:GetEntityTypes",
         "frauddetector:ListTagsForResource",
         "frauddetector:PutEntityType",
         "frauddetector:TagResource",
         "frauddetector:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "frauddetector:DeleteEntityType",
        "frauddetector:GetEntityTypes",
        "frauddetector:ListTagsForResource",
        "frauddetector:PutEntityType",
        "frauddetector:TagResource",
        "frauddetector:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/frauddetector:entity-type"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/frauddetector:entity-type"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "frauddetector:DeleteLabel",
         "frauddetector:GetLabels",
         "frauddetector:ListTagsForResource",
         "frauddetector:PutLabel",
         "frauddetector:TagResource",
         "frauddetector:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "frauddetector:DeleteLabel",
        "frauddetector:GetLabels",
        "frauddetector:ListTagsForResource",
        "frauddetector:PutLabel",
        "frauddetector:TagResource",
        "frauddetector:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/frauddetector:label"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/frauddetector:label"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "frauddetector:DeleteList",
         "frauddetector:GetListElements",
         "frauddetector:GetListsMetadata",
         "frauddetector:ListTagsForResource",
         "frauddetector:TagResource",
         "frauddetector:UntagResource",
         "frauddetector:UpdateList"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "frauddetector:DeleteList",
        "frauddetector:GetListElements",
        "frauddetector:GetListsMetadata",
        "frauddetector:ListTagsForResource",
        "frauddetector:TagResource",
        "frauddetector:UntagResource",
        "frauddetector:UpdateList"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/frauddetector:list"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/frauddetector:list"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "frauddetector:DeleteOutcome",
         "frauddetector:GetOutcomes",
         "frauddetector:ListTagsForResource",
         "frauddetector:PutOutcome",
         "frauddetector:TagResource",
         "frauddetector:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "frauddetector:DeleteOutcome",
        "frauddetector:GetOutcomes",
        "frauddetector:ListTagsForResource",
        "frauddetector:PutOutcome",
        "frauddetector:TagResource",
        "frauddetector:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/frauddetector:outcome"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/frauddetector:outcome"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "frauddetector:DeleteRule",
         "frauddetector:GetRules",
         "frauddetector:ListTagsForResource",
         "frauddetector:TagResource",
         "frauddetector:UntagResource",
         "frauddetector:UpdateRuleMetadata",
         "frauddetector:UpdateRuleVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "frauddetector:DeleteRule",
        "frauddetector:GetRules",
        "frauddetector:ListTagsForResource",
        "frauddetector:TagResource",
        "frauddetector:UntagResource",
        "frauddetector:UpdateRuleMetadata",
        "frauddetector:UpdateRuleVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/frauddetector:rule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/frauddetector:rule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "freertos:CreateSoftwareConfiguration",
         "freertos:DeleteSoftwareConfiguration",
         "freertos:DescribeSoftwareConfiguration",
         "freertos:UpdateSoftwareConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "freertos:CreateSoftwareConfiguration",
        "freertos:DeleteSoftwareConfiguration",
        "freertos:DescribeSoftwareConfiguration",
        "freertos:UpdateSoftwareConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/freertos:configuration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/freertos:configuration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "freertos:DescribeSubscription"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "freertos:DescribeSubscription"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/freertos:subscription"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/freertos:subscription"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "fsx:AssociateFileGateway",
         "fsx:AssociateFileSystemAliases",
         "fsx:CreateBackup",
         "fsx:CreateDataRepositoryAssociation",
         "fsx:CreateDataRepositoryTask",
         "fsx:CreateFileSystem",
         "fsx:CreateFileSystemFromBackup",
         "fsx:CreateStorageVirtualMachine",
         "fsx:DeleteFileSystem",
         "fsx:DescribeAssociatedFileGateways",
         "fsx:DescribeFileSystemAliases",
         "fsx:DisassociateFileGateway",
         "fsx:DisassociateFileSystemAliases",
         "fsx:ListTagsForResource",
         "fsx:ReleaseFileSystemNfsV3Locks",
         "fsx:StartMisconfiguredStateRecovery",
         "fsx:TagResource",
         "fsx:UntagResource",
         "fsx:UpdateFileSystem"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "fsx:AssociateFileGateway",
        "fsx:AssociateFileSystemAliases",
        "fsx:CreateBackup",
        "fsx:CreateDataRepositoryAssociation",
        "fsx:CreateDataRepositoryTask",
        "fsx:CreateFileSystem",
        "fsx:CreateFileSystemFromBackup",
        "fsx:CreateStorageVirtualMachine",
        "fsx:DeleteFileSystem",
        "fsx:DescribeAssociatedFileGateways",
        "fsx:DescribeFileSystemAliases",
        "fsx:DisassociateFileGateway",
        "fsx:DisassociateFileSystemAliases",
        "fsx:ListTagsForResource",
        "fsx:ReleaseFileSystemNfsV3Locks",
        "fsx:StartMisconfiguredStateRecovery",
        "fsx:TagResource",
        "fsx:UntagResource",
        "fsx:UpdateFileSystem"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/fsx:file-system"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/fsx:file-system"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "fsx:BypassSnaplockEnterpriseRetention",
         "fsx:CopySnapshotAndUpdateVolume",
         "fsx:CreateBackup",
         "fsx:CreateSnapshot",
         "fsx:CreateVolume",
         "fsx:CreateVolumeFromBackup",
         "fsx:DeleteResourcePolicy",
         "fsx:DeleteVolume",
         "fsx:GetResourcePolicy",
         "fsx:ListTagsForResource",
         "fsx:PutResourcePolicy",
         "fsx:RestoreVolumeFromSnapshot",
         "fsx:TagResource",
         "fsx:UntagResource",
         "fsx:UpdateVolume"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "fsx:BypassSnaplockEnterpriseRetention",
        "fsx:CopySnapshotAndUpdateVolume",
        "fsx:CreateBackup",
        "fsx:CreateSnapshot",
        "fsx:CreateVolume",
        "fsx:CreateVolumeFromBackup",
        "fsx:DeleteResourcePolicy",
        "fsx:DeleteVolume",
        "fsx:GetResourcePolicy",
        "fsx:ListTagsForResource",
        "fsx:PutResourcePolicy",
        "fsx:RestoreVolumeFromSnapshot",
        "fsx:TagResource",
        "fsx:UntagResource",
        "fsx:UpdateVolume"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/fsx:volume"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/fsx:volume"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "fsx:CancelDataRepositoryTask",
         "fsx:CreateDataRepositoryTask",
         "fsx:ListTagsForResource",
         "fsx:TagResource",
         "fsx:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "fsx:CancelDataRepositoryTask",
        "fsx:CreateDataRepositoryTask",
        "fsx:ListTagsForResource",
        "fsx:TagResource",
        "fsx:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/fsx:task"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/fsx:task"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "fsx:CopyBackup",
         "fsx:CreateBackup",
         "fsx:CreateFileSystemFromBackup",
         "fsx:CreateVolumeFromBackup",
         "fsx:DeleteBackup",
         "fsx:DeleteFileSystem",
         "fsx:DeleteVolume",
         "fsx:ListTagsForResource",
         "fsx:ManageBackupPrincipalAssociations",
         "fsx:TagResource",
         "fsx:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "fsx:CopyBackup",
        "fsx:CreateBackup",
        "fsx:CreateFileSystemFromBackup",
        "fsx:CreateVolumeFromBackup",
        "fsx:DeleteBackup",
        "fsx:DeleteFileSystem",
        "fsx:DeleteVolume",
        "fsx:ListTagsForResource",
        "fsx:ManageBackupPrincipalAssociations",
        "fsx:TagResource",
        "fsx:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/fsx:backup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/fsx:backup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "fsx:CopySnapshotAndUpdateVolume",
         "fsx:CreateSnapshot",
         "fsx:CreateVolume",
         "fsx:DeleteSnapshot",
         "fsx:ListTagsForResource",
         "fsx:RestoreVolumeFromSnapshot",
         "fsx:TagResource",
         "fsx:UntagResource",
         "fsx:UpdateSnapshot"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "fsx:CopySnapshotAndUpdateVolume",
        "fsx:CreateSnapshot",
        "fsx:CreateVolume",
        "fsx:DeleteSnapshot",
        "fsx:ListTagsForResource",
        "fsx:RestoreVolumeFromSnapshot",
        "fsx:TagResource",
        "fsx:UntagResource",
        "fsx:UpdateSnapshot"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/fsx:snapshot"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/fsx:snapshot"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "fsx:CreateDataRepositoryAssociation",
         "fsx:CreateFileCache",
         "fsx:DeleteDataRepositoryAssociation",
         "fsx:DeleteFileCache",
         "fsx:ListTagsForResource",
         "fsx:TagResource",
         "fsx:UntagResource",
         "fsx:UpdateDataRepositoryAssociation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "fsx:CreateDataRepositoryAssociation",
        "fsx:CreateFileCache",
        "fsx:DeleteDataRepositoryAssociation",
        "fsx:DeleteFileCache",
        "fsx:ListTagsForResource",
        "fsx:TagResource",
        "fsx:UntagResource",
        "fsx:UpdateDataRepositoryAssociation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/fsx:association"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/fsx:association"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "fsx:CreateFileCache",
         "fsx:DeleteFileCache",
         "fsx:ListTagsForResource",
         "fsx:TagResource",
         "fsx:UntagResource",
         "fsx:UpdateFileCache"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "fsx:CreateFileCache",
        "fsx:DeleteFileCache",
        "fsx:ListTagsForResource",
        "fsx:TagResource",
        "fsx:UntagResource",
        "fsx:UpdateFileCache"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/fsx:file-cache"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/fsx:file-cache"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "fsx:CreateStorageVirtualMachine",
         "fsx:CreateVolumeFromBackup",
         "fsx:DeleteStorageVirtualMachine",
         "fsx:ListTagsForResource",
         "fsx:TagResource",
         "fsx:UntagResource",
         "fsx:UpdateStorageVirtualMachine"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "fsx:CreateStorageVirtualMachine",
        "fsx:CreateVolumeFromBackup",
        "fsx:DeleteStorageVirtualMachine",
        "fsx:ListTagsForResource",
        "fsx:TagResource",
        "fsx:UntagResource",
        "fsx:UpdateStorageVirtualMachine"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/fsx:storage-virtual-machine"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/fsx:storage-virtual-machine"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "gamelift:ClaimGameServer",
         "gamelift:DeleteGameServerGroup",
         "gamelift:DeregisterGameServer",
         "gamelift:DescribeGameServer",
         "gamelift:DescribeGameServerGroup",
         "gamelift:DescribeGameServerInstances",
         "gamelift:ListGameServers",
         "gamelift:ListTagsForResource",
         "gamelift:RegisterGameServer",
         "gamelift:ResumeGameServerGroup",
         "gamelift:SuspendGameServerGroup",
         "gamelift:TagResource",
         "gamelift:UntagResource",
         "gamelift:UpdateGameServer",
         "gamelift:UpdateGameServerGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "gamelift:ClaimGameServer",
        "gamelift:DeleteGameServerGroup",
        "gamelift:DeregisterGameServer",
        "gamelift:DescribeGameServer",
        "gamelift:DescribeGameServerGroup",
        "gamelift:DescribeGameServerInstances",
        "gamelift:ListGameServers",
        "gamelift:ListTagsForResource",
        "gamelift:RegisterGameServer",
        "gamelift:ResumeGameServerGroup",
        "gamelift:SuspendGameServerGroup",
        "gamelift:TagResource",
        "gamelift:UntagResource",
        "gamelift:UpdateGameServer",
        "gamelift:UpdateGameServerGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/gamelift:gameServerGroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/gamelift:gameServerGroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "gamelift:CreateFleetLocations",
         "gamelift:DeleteContainerFleet",
         "gamelift:DeleteFleetLocations",
         "gamelift:DeleteScalingPolicy",
         "gamelift:DescribeCompute",
         "gamelift:DescribeContainerFleet",
         "gamelift:DescribeFleetDeployment",
         "gamelift:DescribeFleetEvents",
         "gamelift:DescribeFleetLocationAttributes",
         "gamelift:DescribeFleetLocationCapacity",
         "gamelift:DescribeInstances",
         "gamelift:DescribeScalingPolicies",
         "gamelift:GetComputeAccess",
         "gamelift:GetComputeAuthToken",
         "gamelift:ListCompute",
         "gamelift:ListTagsForResource",
         "gamelift:PutScalingPolicy",
         "gamelift:StartFleetActions",
         "gamelift:StopFleetActions",
         "gamelift:TagResource",
         "gamelift:UntagResource",
         "gamelift:UpdateContainerFleet",
         "gamelift:UpdateFleetCapacity"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "gamelift:CreateFleetLocations",
        "gamelift:DeleteContainerFleet",
        "gamelift:DeleteFleetLocations",
        "gamelift:DeleteScalingPolicy",
        "gamelift:DescribeCompute",
        "gamelift:DescribeContainerFleet",
        "gamelift:DescribeFleetDeployment",
        "gamelift:DescribeFleetEvents",
        "gamelift:DescribeFleetLocationAttributes",
        "gamelift:DescribeFleetLocationCapacity",
        "gamelift:DescribeInstances",
        "gamelift:DescribeScalingPolicies",
        "gamelift:GetComputeAccess",
        "gamelift:GetComputeAuthToken",
        "gamelift:ListCompute",
        "gamelift:ListTagsForResource",
        "gamelift:PutScalingPolicy",
        "gamelift:StartFleetActions",
        "gamelift:StopFleetActions",
        "gamelift:TagResource",
        "gamelift:UntagResource",
        "gamelift:UpdateContainerFleet",
        "gamelift:UpdateFleetCapacity"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/gamelift:containerFleet"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/gamelift:containerFleet"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "gamelift:CreateFleetLocations",
         "gamelift:DeleteFleet",
         "gamelift:DeleteFleetLocations",
         "gamelift:DeleteScalingPolicy",
         "gamelift:DeregisterCompute",
         "gamelift:DescribeCompute",
         "gamelift:DescribeFleetEvents",
         "gamelift:DescribeFleetLocationAttributes",
         "gamelift:DescribeFleetLocationCapacity",
         "gamelift:DescribeFleetLocationUtilization",
         "gamelift:DescribeFleetPortSettings",
         "gamelift:DescribeInstances",
         "gamelift:DescribeRuntimeConfiguration",
         "gamelift:DescribeScalingPolicies",
         "gamelift:GetComputeAccess",
         "gamelift:GetComputeAuthToken",
         "gamelift:GetInstanceAccess",
         "gamelift:ListCompute",
         "gamelift:ListTagsForResource",
         "gamelift:PutScalingPolicy",
         "gamelift:RegisterCompute",
         "gamelift:StartFleetActions",
         "gamelift:StopFleetActions",
         "gamelift:TagResource",
         "gamelift:UntagResource",
         "gamelift:UpdateFleetAttributes",
         "gamelift:UpdateFleetCapacity",
         "gamelift:UpdateFleetPortSettings",
         "gamelift:UpdateRuntimeConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "gamelift:CreateFleetLocations",
        "gamelift:DeleteFleet",
        "gamelift:DeleteFleetLocations",
        "gamelift:DeleteScalingPolicy",
        "gamelift:DeregisterCompute",
        "gamelift:DescribeCompute",
        "gamelift:DescribeFleetEvents",
        "gamelift:DescribeFleetLocationAttributes",
        "gamelift:DescribeFleetLocationCapacity",
        "gamelift:DescribeFleetLocationUtilization",
        "gamelift:DescribeFleetPortSettings",
        "gamelift:DescribeInstances",
        "gamelift:DescribeRuntimeConfiguration",
        "gamelift:DescribeScalingPolicies",
        "gamelift:GetComputeAccess",
        "gamelift:GetComputeAuthToken",
        "gamelift:GetInstanceAccess",
        "gamelift:ListCompute",
        "gamelift:ListTagsForResource",
        "gamelift:PutScalingPolicy",
        "gamelift:RegisterCompute",
        "gamelift:StartFleetActions",
        "gamelift:StopFleetActions",
        "gamelift:TagResource",
        "gamelift:UntagResource",
        "gamelift:UpdateFleetAttributes",
        "gamelift:UpdateFleetCapacity",
        "gamelift:UpdateFleetPortSettings",
        "gamelift:UpdateRuntimeConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/gamelift:fleet"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/gamelift:fleet"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "gamelift:DeleteAlias",
         "gamelift:DescribeAlias",
         "gamelift:ListTagsForResource",
         "gamelift:ResolveAlias",
         "gamelift:TagResource",
         "gamelift:UntagResource",
         "gamelift:UpdateAlias"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "gamelift:DeleteAlias",
        "gamelift:DescribeAlias",
        "gamelift:ListTagsForResource",
        "gamelift:ResolveAlias",
        "gamelift:TagResource",
        "gamelift:UntagResource",
        "gamelift:UpdateAlias"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/gamelift:alias"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/gamelift:alias"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "gamelift:DeleteBuild",
         "gamelift:DescribeBuild",
         "gamelift:ListTagsForResource",
         "gamelift:RequestUploadCredentials",
         "gamelift:TagResource",
         "gamelift:UntagResource",
         "gamelift:UpdateBuild"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "gamelift:DeleteBuild",
        "gamelift:DescribeBuild",
        "gamelift:ListTagsForResource",
        "gamelift:RequestUploadCredentials",
        "gamelift:TagResource",
        "gamelift:UntagResource",
        "gamelift:UpdateBuild"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/gamelift:build"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/gamelift:build"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "gamelift:DeleteContainerGroupDefinition",
         "gamelift:DescribeContainerGroupDefinition",
         "gamelift:ListContainerGroupDefinitionVersions",
         "gamelift:ListTagsForResource",
         "gamelift:TagResource",
         "gamelift:UntagResource",
         "gamelift:UpdateContainerGroupDefinition"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "gamelift:DeleteContainerGroupDefinition",
        "gamelift:DescribeContainerGroupDefinition",
        "gamelift:ListContainerGroupDefinitionVersions",
        "gamelift:ListTagsForResource",
        "gamelift:TagResource",
        "gamelift:UntagResource",
        "gamelift:UpdateContainerGroupDefinition"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/gamelift:containerGroupDefinition"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/gamelift:containerGroupDefinition"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "gamelift:DeleteGameSessionQueue",
         "gamelift:ListTagsForResource",
         "gamelift:StartGameSessionPlacement",
         "gamelift:TagResource",
         "gamelift:UntagResource",
         "gamelift:UpdateGameSessionQueue"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "gamelift:DeleteGameSessionQueue",
        "gamelift:ListTagsForResource",
        "gamelift:StartGameSessionPlacement",
        "gamelift:TagResource",
        "gamelift:UntagResource",
        "gamelift:UpdateGameSessionQueue"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/gamelift:gameSessionQueue"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/gamelift:gameSessionQueue"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "gamelift:DeleteLocation",
         "gamelift:ListTagsForResource",
         "gamelift:TagResource",
         "gamelift:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "gamelift:DeleteLocation",
        "gamelift:ListTagsForResource",
        "gamelift:TagResource",
        "gamelift:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/gamelift:location"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/gamelift:location"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "gamelift:DeleteMatchmakingConfiguration",
         "gamelift:ListTagsForResource",
         "gamelift:TagResource",
         "gamelift:UntagResource",
         "gamelift:UpdateMatchmakingConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "gamelift:DeleteMatchmakingConfiguration",
        "gamelift:ListTagsForResource",
        "gamelift:TagResource",
        "gamelift:UntagResource",
        "gamelift:UpdateMatchmakingConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/gamelift:matchmakingConfiguration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/gamelift:matchmakingConfiguration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "gamelift:DeleteMatchmakingRuleSet",
         "gamelift:ListTagsForResource",
         "gamelift:TagResource",
         "gamelift:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "gamelift:DeleteMatchmakingRuleSet",
        "gamelift:ListTagsForResource",
        "gamelift:TagResource",
        "gamelift:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/gamelift:matchmakingRuleSet"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/gamelift:matchmakingRuleSet"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "gamelift:DeleteScript",
         "gamelift:DescribeScript",
         "gamelift:ListTagsForResource",
         "gamelift:TagResource",
         "gamelift:UntagResource",
         "gamelift:UpdateScript"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "gamelift:DeleteScript",
        "gamelift:DescribeScript",
        "gamelift:ListTagsForResource",
        "gamelift:TagResource",
        "gamelift:UntagResource",
        "gamelift:UpdateScript"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/gamelift:script"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/gamelift:script"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "gameliftstreams:AddStreamGroupLocations",
         "gameliftstreams:AssociateApplications",
         "gameliftstreams:CreateStreamSessionConnection",
         "gameliftstreams:DeleteStreamGroup",
         "gameliftstreams:DisassociateApplications",
         "gameliftstreams:ExportStreamSessionFiles",
         "gameliftstreams:GetStreamGroup",
         "gameliftstreams:GetStreamSession",
         "gameliftstreams:ListStreamSessions",
         "gameliftstreams:ListTagsForResource",
         "gameliftstreams:RemoveStreamGroupLocations",
         "gameliftstreams:StartStreamSession",
         "gameliftstreams:TagResource",
         "gameliftstreams:TerminateStreamSession",
         "gameliftstreams:UntagResource",
         "gameliftstreams:UpdateStreamGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "gameliftstreams:AddStreamGroupLocations",
        "gameliftstreams:AssociateApplications",
        "gameliftstreams:CreateStreamSessionConnection",
        "gameliftstreams:DeleteStreamGroup",
        "gameliftstreams:DisassociateApplications",
        "gameliftstreams:ExportStreamSessionFiles",
        "gameliftstreams:GetStreamGroup",
        "gameliftstreams:GetStreamSession",
        "gameliftstreams:ListStreamSessions",
        "gameliftstreams:ListTagsForResource",
        "gameliftstreams:RemoveStreamGroupLocations",
        "gameliftstreams:StartStreamSession",
        "gameliftstreams:TagResource",
        "gameliftstreams:TerminateStreamSession",
        "gameliftstreams:UntagResource",
        "gameliftstreams:UpdateStreamGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/gameliftstreams:stream group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/gameliftstreams:stream group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "gameliftstreams:AssociateApplications",
         "gameliftstreams:DeleteApplication",
         "gameliftstreams:DisassociateApplications",
         "gameliftstreams:GetApplication",
         "gameliftstreams:ListTagsForResource",
         "gameliftstreams:TagResource",
         "gameliftstreams:UntagResource",
         "gameliftstreams:UpdateApplication"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "gameliftstreams:AssociateApplications",
        "gameliftstreams:DeleteApplication",
        "gameliftstreams:DisassociateApplications",
        "gameliftstreams:GetApplication",
        "gameliftstreams:ListTagsForResource",
        "gameliftstreams:TagResource",
        "gameliftstreams:UntagResource",
        "gameliftstreams:UpdateApplication"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/gameliftstreams:application"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/gameliftstreams:application"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "geo:AssociateTrackerConsumer",
         "geo:BatchDeleteDevicePositionHistory",
         "geo:BatchGetDevicePosition",
         "geo:BatchUpdateDevicePosition",
         "geo:CreateTracker",
         "geo:DeleteTracker",
         "geo:DescribeTracker",
         "geo:DisassociateTrackerConsumer",
         "geo:GetDevicePosition",
         "geo:GetDevicePositionHistory",
         "geo:ListDevicePositions",
         "geo:ListTagsForResource",
         "geo:ListTrackerConsumers",
         "geo:ListTrackers",
         "geo:TagResource",
         "geo:UntagResource",
         "geo:UpdateTracker",
         "geo:VerifyDevicePosition"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "geo:AssociateTrackerConsumer",
        "geo:BatchDeleteDevicePositionHistory",
        "geo:BatchGetDevicePosition",
        "geo:BatchUpdateDevicePosition",
        "geo:CreateTracker",
        "geo:DeleteTracker",
        "geo:DescribeTracker",
        "geo:DisassociateTrackerConsumer",
        "geo:GetDevicePosition",
        "geo:GetDevicePositionHistory",
        "geo:ListDevicePositions",
        "geo:ListTagsForResource",
        "geo:ListTrackerConsumers",
        "geo:ListTrackers",
        "geo:TagResource",
        "geo:UntagResource",
        "geo:UpdateTracker",
        "geo:VerifyDevicePosition"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/geo:tracker"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/geo:tracker"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "geo:BatchDeleteGeofence",
         "geo:BatchEvaluateGeofences",
         "geo:BatchPutGeofence",
         "geo:CreateGeofenceCollection",
         "geo:DeleteGeofenceCollection",
         "geo:DescribeGeofenceCollection",
         "geo:ForecastGeofenceEvents",
         "geo:GetGeofence",
         "geo:ListGeofenceCollections",
         "geo:ListGeofences",
         "geo:ListTagsForResource",
         "geo:PutGeofence",
         "geo:TagResource",
         "geo:UntagResource",
         "geo:UpdateGeofenceCollection"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "geo:BatchDeleteGeofence",
        "geo:BatchEvaluateGeofences",
        "geo:BatchPutGeofence",
        "geo:CreateGeofenceCollection",
        "geo:DeleteGeofenceCollection",
        "geo:DescribeGeofenceCollection",
        "geo:ForecastGeofenceEvents",
        "geo:GetGeofence",
        "geo:ListGeofenceCollections",
        "geo:ListGeofences",
        "geo:ListTagsForResource",
        "geo:PutGeofence",
        "geo:TagResource",
        "geo:UntagResource",
        "geo:UpdateGeofenceCollection"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/geo:geofence-collection"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/geo:geofence-collection"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "geo:CalculateRoute",
         "geo:CalculateRouteMatrix",
         "geo:CreateRouteCalculator",
         "geo:DeleteRouteCalculator",
         "geo:DescribeRouteCalculator",
         "geo:ListRouteCalculators",
         "geo:ListTagsForResource",
         "geo:TagResource",
         "geo:UntagResource",
         "geo:UpdateRouteCalculator"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "geo:CalculateRoute",
        "geo:CalculateRouteMatrix",
        "geo:CreateRouteCalculator",
        "geo:DeleteRouteCalculator",
        "geo:DescribeRouteCalculator",
        "geo:ListRouteCalculators",
        "geo:ListTagsForResource",
        "geo:TagResource",
        "geo:UntagResource",
        "geo:UpdateRouteCalculator"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/geo:route-calculator"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/geo:route-calculator"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "geo:CreateKey",
         "geo:DeleteKey",
         "geo:DescribeKey",
         "geo:ListKeys",
         "geo:ListTagsForResource",
         "geo:TagResource",
         "geo:UntagResource",
         "geo:UpdateKey"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "geo:CreateKey",
        "geo:DeleteKey",
        "geo:DescribeKey",
        "geo:ListKeys",
        "geo:ListTagsForResource",
        "geo:TagResource",
        "geo:UntagResource",
        "geo:UpdateKey"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/geo:api-key"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/geo:api-key"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "geo:CreateMap",
         "geo:DeleteMap",
         "geo:DescribeMap",
         "geo:GetMapGlyphs",
         "geo:GetMapSprites",
         "geo:GetMapStyleDescriptor",
         "geo:GetMapTile",
         "geo:ListMaps",
         "geo:ListTagsForResource",
         "geo:TagResource",
         "geo:UntagResource",
         "geo:UpdateMap"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "geo:CreateMap",
        "geo:DeleteMap",
        "geo:DescribeMap",
        "geo:GetMapGlyphs",
        "geo:GetMapSprites",
        "geo:GetMapStyleDescriptor",
        "geo:GetMapTile",
        "geo:ListMaps",
        "geo:ListTagsForResource",
        "geo:TagResource",
        "geo:UntagResource",
        "geo:UpdateMap"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/geo:map"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/geo:map"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "geo:CreatePlaceIndex",
         "geo:DeletePlaceIndex",
         "geo:DescribePlaceIndex",
         "geo:GetPlace",
         "geo:ListPlaceIndexes",
         "geo:ListTagsForResource",
         "geo:SearchPlaceIndexForPosition",
         "geo:SearchPlaceIndexForSuggestions",
         "geo:SearchPlaceIndexForText",
         "geo:TagResource",
         "geo:UntagResource",
         "geo:UpdatePlaceIndex"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "geo:CreatePlaceIndex",
        "geo:DeletePlaceIndex",
        "geo:DescribePlaceIndex",
        "geo:GetPlace",
        "geo:ListPlaceIndexes",
        "geo:ListTagsForResource",
        "geo:SearchPlaceIndexForPosition",
        "geo:SearchPlaceIndexForSuggestions",
        "geo:SearchPlaceIndexForText",
        "geo:TagResource",
        "geo:UntagResource",
        "geo:UpdatePlaceIndex"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/geo:place-index"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/geo:place-index"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "geo-maps:GetStaticMap",
         "geo-maps:GetTile"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "geo-maps:GetStaticMap",
        "geo-maps:GetTile"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/geo-maps:provider"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/geo-maps:provider"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "geo-places:Autocomplete",
         "geo-places:Geocode",
         "geo-places:GetPlace",
         "geo-places:ReverseGeocode",
         "geo-places:SearchNearby",
         "geo-places:SearchText",
         "geo-places:Suggest"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "geo-places:Autocomplete",
        "geo-places:Geocode",
        "geo-places:GetPlace",
        "geo-places:ReverseGeocode",
        "geo-places:SearchNearby",
        "geo-places:SearchText",
        "geo-places:Suggest"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/geo-places:provider"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/geo-places:provider"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "geo-routes:CalculateIsolines",
         "geo-routes:CalculateRouteMatrix",
         "geo-routes:CalculateRoutes",
         "geo-routes:OptimizeWaypoints",
         "geo-routes:SnapToRoads"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "geo-routes:CalculateIsolines",
        "geo-routes:CalculateRouteMatrix",
        "geo-routes:CalculateRoutes",
        "geo-routes:OptimizeWaypoints",
        "geo-routes:SnapToRoads"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/geo-routes:provider"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/geo-routes:provider"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "glacier:AbortMultipartUpload",
         "glacier:AbortVaultLock",
         "glacier:AddTagsToVault",
         "glacier:CompleteMultipartUpload",
         "glacier:CompleteVaultLock",
         "glacier:CreateVault",
         "glacier:DeleteArchive",
         "glacier:DeleteVault",
         "glacier:DeleteVaultAccessPolicy",
         "glacier:DeleteVaultNotifications",
         "glacier:DescribeJob",
         "glacier:DescribeVault",
         "glacier:GetJobOutput",
         "glacier:GetVaultAccessPolicy",
         "glacier:GetVaultLock",
         "glacier:GetVaultNotifications",
         "glacier:InitiateJob",
         "glacier:InitiateMultipartUpload",
         "glacier:InitiateVaultLock",
         "glacier:ListJobs",
         "glacier:ListMultipartUploads",
         "glacier:ListParts",
         "glacier:ListTagsForVault",
         "glacier:RemoveTagsFromVault",
         "glacier:SetVaultAccessPolicy",
         "glacier:SetVaultNotifications",
         "glacier:UploadArchive",
         "glacier:UploadMultipartPart"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "glacier:AbortMultipartUpload",
        "glacier:AbortVaultLock",
        "glacier:AddTagsToVault",
        "glacier:CompleteMultipartUpload",
        "glacier:CompleteVaultLock",
        "glacier:CreateVault",
        "glacier:DeleteArchive",
        "glacier:DeleteVault",
        "glacier:DeleteVaultAccessPolicy",
        "glacier:DeleteVaultNotifications",
        "glacier:DescribeJob",
        "glacier:DescribeVault",
        "glacier:GetJobOutput",
        "glacier:GetVaultAccessPolicy",
        "glacier:GetVaultLock",
        "glacier:GetVaultNotifications",
        "glacier:InitiateJob",
        "glacier:InitiateMultipartUpload",
        "glacier:InitiateVaultLock",
        "glacier:ListJobs",
        "glacier:ListMultipartUploads",
        "glacier:ListParts",
        "glacier:ListTagsForVault",
        "glacier:RemoveTagsFromVault",
        "glacier:SetVaultAccessPolicy",
        "glacier:SetVaultNotifications",
        "glacier:UploadArchive",
        "glacier:UploadMultipartPart"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/glacier:vault"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/glacier:vault"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "globalaccelerator:AddCustomRoutingEndpoints",
         "globalaccelerator:AddEndpoints",
         "globalaccelerator:AllowCustomRoutingTraffic",
         "globalaccelerator:DeleteCustomRoutingEndpointGroup",
         "globalaccelerator:DeleteEndpointGroup",
         "globalaccelerator:DenyCustomRoutingTraffic",
         "globalaccelerator:DescribeCustomRoutingEndpointGroup",
         "globalaccelerator:DescribeEndpointGroup",
         "globalaccelerator:RemoveCustomRoutingEndpoints",
         "globalaccelerator:RemoveEndpoints",
         "globalaccelerator:UpdateEndpointGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "globalaccelerator:AddCustomRoutingEndpoints",
        "globalaccelerator:AddEndpoints",
        "globalaccelerator:AllowCustomRoutingTraffic",
        "globalaccelerator:DeleteCustomRoutingEndpointGroup",
        "globalaccelerator:DeleteEndpointGroup",
        "globalaccelerator:DenyCustomRoutingTraffic",
        "globalaccelerator:DescribeCustomRoutingEndpointGroup",
        "globalaccelerator:DescribeEndpointGroup",
        "globalaccelerator:RemoveCustomRoutingEndpoints",
        "globalaccelerator:RemoveEndpoints",
        "globalaccelerator:UpdateEndpointGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/globalaccelerator:endpointgroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/globalaccelerator:endpointgroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "globalaccelerator:CreateCustomRoutingEndpointGroup",
         "globalaccelerator:CreateEndpointGroup",
         "globalaccelerator:DeleteCustomRoutingListener",
         "globalaccelerator:DeleteListener",
         "globalaccelerator:DescribeCustomRoutingListener",
         "globalaccelerator:DescribeListener",
         "globalaccelerator:ListCustomRoutingEndpointGroups",
         "globalaccelerator:ListEndpointGroups",
         "globalaccelerator:UpdateCustomRoutingListener",
         "globalaccelerator:UpdateListener"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "globalaccelerator:CreateCustomRoutingEndpointGroup",
        "globalaccelerator:CreateEndpointGroup",
        "globalaccelerator:DeleteCustomRoutingListener",
        "globalaccelerator:DeleteListener",
        "globalaccelerator:DescribeCustomRoutingListener",
        "globalaccelerator:DescribeListener",
        "globalaccelerator:ListCustomRoutingEndpointGroups",
        "globalaccelerator:ListEndpointGroups",
        "globalaccelerator:UpdateCustomRoutingListener",
        "globalaccelerator:UpdateListener"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/globalaccelerator:listener"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/globalaccelerator:listener"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "globalaccelerator:CreateCustomRoutingListener",
         "globalaccelerator:CreateListener",
         "globalaccelerator:DeleteAccelerator",
         "globalaccelerator:DeleteCustomRoutingAccelerator",
         "globalaccelerator:DescribeAccelerator",
         "globalaccelerator:DescribeAcceleratorAttributes",
         "globalaccelerator:DescribeCustomRoutingAccelerator",
         "globalaccelerator:DescribeCustomRoutingAcceleratorAttributes",
         "globalaccelerator:ListCustomRoutingListeners",
         "globalaccelerator:ListCustomRoutingPortMappings",
         "globalaccelerator:ListListeners",
         "globalaccelerator:ListTagsForResource",
         "globalaccelerator:TagResource",
         "globalaccelerator:UntagResource",
         "globalaccelerator:UpdateAccelerator",
         "globalaccelerator:UpdateAcceleratorAttributes",
         "globalaccelerator:UpdateCustomRoutingAccelerator",
         "globalaccelerator:UpdateCustomRoutingAcceleratorAttributes"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "globalaccelerator:CreateCustomRoutingListener",
        "globalaccelerator:CreateListener",
        "globalaccelerator:DeleteAccelerator",
        "globalaccelerator:DeleteCustomRoutingAccelerator",
        "globalaccelerator:DescribeAccelerator",
        "globalaccelerator:DescribeAcceleratorAttributes",
        "globalaccelerator:DescribeCustomRoutingAccelerator",
        "globalaccelerator:DescribeCustomRoutingAcceleratorAttributes",
        "globalaccelerator:ListCustomRoutingListeners",
        "globalaccelerator:ListCustomRoutingPortMappings",
        "globalaccelerator:ListListeners",
        "globalaccelerator:ListTagsForResource",
        "globalaccelerator:TagResource",
        "globalaccelerator:UntagResource",
        "globalaccelerator:UpdateAccelerator",
        "globalaccelerator:UpdateAcceleratorAttributes",
        "globalaccelerator:UpdateCustomRoutingAccelerator",
        "globalaccelerator:UpdateCustomRoutingAcceleratorAttributes"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/globalaccelerator:accelerator"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/globalaccelerator:accelerator"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "globalaccelerator:DeleteCrossAccountAttachment",
         "globalaccelerator:DescribeCrossAccountAttachment",
         "globalaccelerator:ListTagsForResource",
         "globalaccelerator:TagResource",
         "globalaccelerator:UntagResource",
         "globalaccelerator:UpdateCrossAccountAttachment"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "globalaccelerator:DeleteCrossAccountAttachment",
        "globalaccelerator:DescribeCrossAccountAttachment",
        "globalaccelerator:ListTagsForResource",
        "globalaccelerator:TagResource",
        "globalaccelerator:UntagResource",
        "globalaccelerator:UpdateCrossAccountAttachment"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/globalaccelerator:attachment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/globalaccelerator:attachment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "glue:AuthorizeInboundIntegration",
         "glue:CreateIntegration",
         "glue:DeleteIntegration",
         "glue:DescribeIntegrations",
         "glue:ModifyIntegration",
         "glue:TagResource",
         "glue:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "glue:AuthorizeInboundIntegration",
        "glue:CreateIntegration",
        "glue:DeleteIntegration",
        "glue:DescribeIntegrations",
        "glue:ModifyIntegration",
        "glue:TagResource",
        "glue:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/glue:integration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/glue:integration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "glue:BatchCreatePartition",
         "glue:BatchDeletePartition",
         "glue:BatchDeleteTable",
         "glue:BatchDeleteTableVersion",
         "glue:BatchGetPartition",
         "glue:BatchUpdatePartition",
         "glue:CreateCatalog",
         "glue:CreateDatabase",
         "glue:CreateIntegration",
         "glue:CreateIntegrationResourceProperty",
         "glue:CreateIntegrationTableProperties",
         "glue:CreatePartition",
         "glue:CreatePartitionIndex",
         "glue:CreateTable",
         "glue:CreateUserDefinedFunction",
         "glue:DeleteCatalog",
         "glue:DeleteColumnStatisticsForPartition",
         "glue:DeleteColumnStatisticsForTable",
         "glue:DeleteDatabase",
         "glue:DeleteIntegrationTableProperties",
         "glue:DeletePartition",
         "glue:DeletePartitionIndex",
         "glue:DeleteTable",
         "glue:DeleteTableVersion",
         "glue:DeleteUserDefinedFunction",
         "glue:GetCatalog",
         "glue:GetCatalogs",
         "glue:GetColumnStatisticsForPartition",
         "glue:GetColumnStatisticsForTable",
         "glue:GetDatabase",
         "glue:GetDatabases",
         "glue:GetEntityRecords",
         "glue:GetIntegrationResourceProperty",
         "glue:GetIntegrationTableProperties",
         "glue:GetPartition",
         "glue:GetPartitionIndexes",
         "glue:GetPartitions",
         "glue:GetTable",
         "glue:GetTableVersion",
         "glue:GetTableVersions",
         "glue:GetTables",
         "glue:GetUserDefinedFunction",
         "glue:GetUserDefinedFunctions",
         "glue:SearchTables",
         "glue:UpdateCatalog",
         "glue:UpdateColumnStatisticsForPartition",
         "glue:UpdateColumnStatisticsForTable",
         "glue:UpdateDatabase",
         "glue:UpdateIntegrationResourceProperty",
         "glue:UpdateIntegrationTableProperties",
         "glue:UpdatePartition",
         "glue:UpdateTable",
         "glue:UpdateUserDefinedFunction"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "glue:BatchCreatePartition",
        "glue:BatchDeletePartition",
        "glue:BatchDeleteTable",
        "glue:BatchDeleteTableVersion",
        "glue:BatchGetPartition",
        "glue:BatchUpdatePartition",
        "glue:CreateCatalog",
        "glue:CreateDatabase",
        "glue:CreateIntegration",
        "glue:CreateIntegrationResourceProperty",
        "glue:CreateIntegrationTableProperties",
        "glue:CreatePartition",
        "glue:CreatePartitionIndex",
        "glue:CreateTable",
        "glue:CreateUserDefinedFunction",
        "glue:DeleteCatalog",
        "glue:DeleteColumnStatisticsForPartition",
        "glue:DeleteColumnStatisticsForTable",
        "glue:DeleteDatabase",
        "glue:DeleteIntegrationTableProperties",
        "glue:DeletePartition",
        "glue:DeletePartitionIndex",
        "glue:DeleteTable",
        "glue:DeleteTableVersion",
        "glue:DeleteUserDefinedFunction",
        "glue:GetCatalog",
        "glue:GetCatalogs",
        "glue:GetColumnStatisticsForPartition",
        "glue:GetColumnStatisticsForTable",
        "glue:GetDatabase",
        "glue:GetDatabases",
        "glue:GetEntityRecords",
        "glue:GetIntegrationResourceProperty",
        "glue:GetIntegrationTableProperties",
        "glue:GetPartition",
        "glue:GetPartitionIndexes",
        "glue:GetPartitions",
        "glue:GetTable",
        "glue:GetTableVersion",
        "glue:GetTableVersions",
        "glue:GetTables",
        "glue:GetUserDefinedFunction",
        "glue:GetUserDefinedFunctions",
        "glue:SearchTables",
        "glue:UpdateCatalog",
        "glue:UpdateColumnStatisticsForPartition",
        "glue:UpdateColumnStatisticsForTable",
        "glue:UpdateDatabase",
        "glue:UpdateIntegrationResourceProperty",
        "glue:UpdateIntegrationTableProperties",
        "glue:UpdatePartition",
        "glue:UpdateTable",
        "glue:UpdateUserDefinedFunction"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/glue:catalog"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/glue:catalog"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "glue:BatchCreatePartition",
         "glue:BatchDeletePartition",
         "glue:BatchDeleteTable",
         "glue:BatchDeleteTableVersion",
         "glue:BatchGetPartition",
         "glue:BatchGetTableOptimizer",
         "glue:BatchUpdatePartition",
         "glue:CreateColumnStatisticsTaskSettings",
         "glue:CreateDatabase",
         "glue:CreateIntegration",
         "glue:CreateIntegrationResourceProperty",
         "glue:CreateIntegrationTableProperties",
         "glue:CreatePartition",
         "glue:CreatePartitionIndex",
         "glue:CreateTable",
         "glue:CreateTableOptimizer",
         "glue:CreateUserDefinedFunction",
         "glue:DeleteColumnStatisticsForPartition",
         "glue:DeleteColumnStatisticsForTable",
         "glue:DeleteColumnStatisticsTaskSettings",
         "glue:DeleteDatabase",
         "glue:DeleteIntegrationTableProperties",
         "glue:DeletePartition",
         "glue:DeletePartitionIndex",
         "glue:DeleteTable",
         "glue:DeleteTableOptimizer",
         "glue:DeleteTableVersion",
         "glue:DeleteUserDefinedFunction",
         "glue:GetColumnStatisticsForPartition",
         "glue:GetColumnStatisticsForTable",
         "glue:GetDatabase",
         "glue:GetDatabases",
         "glue:GetIntegrationResourceProperty",
         "glue:GetIntegrationTableProperties",
         "glue:GetPartition",
         "glue:GetPartitionIndexes",
         "glue:GetPartitions",
         "glue:GetTable",
         "glue:GetTableOptimizer",
         "glue:GetTableVersion",
         "glue:GetTableVersions",
         "glue:GetTables",
         "glue:GetUserDefinedFunction",
         "glue:GetUserDefinedFunctions",
         "glue:ListTableOptimizerRuns",
         "glue:SearchTables",
         "glue:StartColumnStatisticsTaskRun",
         "glue:StartColumnStatisticsTaskRunSchedule",
         "glue:StopColumnStatisticsTaskRun",
         "glue:StopColumnStatisticsTaskRunSchedule",
         "glue:UpdateColumnStatisticsForPartition",
         "glue:UpdateColumnStatisticsForTable",
         "glue:UpdateColumnStatisticsTaskSettings",
         "glue:UpdateDatabase",
         "glue:UpdateIntegrationResourceProperty",
         "glue:UpdateIntegrationTableProperties",
         "glue:UpdatePartition",
         "glue:UpdateTable",
         "glue:UpdateTableOptimizer",
         "glue:UpdateUserDefinedFunction"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "glue:BatchCreatePartition",
        "glue:BatchDeletePartition",
        "glue:BatchDeleteTable",
        "glue:BatchDeleteTableVersion",
        "glue:BatchGetPartition",
        "glue:BatchGetTableOptimizer",
        "glue:BatchUpdatePartition",
        "glue:CreateColumnStatisticsTaskSettings",
        "glue:CreateDatabase",
        "glue:CreateIntegration",
        "glue:CreateIntegrationResourceProperty",
        "glue:CreateIntegrationTableProperties",
        "glue:CreatePartition",
        "glue:CreatePartitionIndex",
        "glue:CreateTable",
        "glue:CreateTableOptimizer",
        "glue:CreateUserDefinedFunction",
        "glue:DeleteColumnStatisticsForPartition",
        "glue:DeleteColumnStatisticsForTable",
        "glue:DeleteColumnStatisticsTaskSettings",
        "glue:DeleteDatabase",
        "glue:DeleteIntegrationTableProperties",
        "glue:DeletePartition",
        "glue:DeletePartitionIndex",
        "glue:DeleteTable",
        "glue:DeleteTableOptimizer",
        "glue:DeleteTableVersion",
        "glue:DeleteUserDefinedFunction",
        "glue:GetColumnStatisticsForPartition",
        "glue:GetColumnStatisticsForTable",
        "glue:GetDatabase",
        "glue:GetDatabases",
        "glue:GetIntegrationResourceProperty",
        "glue:GetIntegrationTableProperties",
        "glue:GetPartition",
        "glue:GetPartitionIndexes",
        "glue:GetPartitions",
        "glue:GetTable",
        "glue:GetTableOptimizer",
        "glue:GetTableVersion",
        "glue:GetTableVersions",
        "glue:GetTables",
        "glue:GetUserDefinedFunction",
        "glue:GetUserDefinedFunctions",
        "glue:ListTableOptimizerRuns",
        "glue:SearchTables",
        "glue:StartColumnStatisticsTaskRun",
        "glue:StartColumnStatisticsTaskRunSchedule",
        "glue:StopColumnStatisticsTaskRun",
        "glue:StopColumnStatisticsTaskRunSchedule",
        "glue:UpdateColumnStatisticsForPartition",
        "glue:UpdateColumnStatisticsForTable",
        "glue:UpdateColumnStatisticsTaskSettings",
        "glue:UpdateDatabase",
        "glue:UpdateIntegrationResourceProperty",
        "glue:UpdateIntegrationTableProperties",
        "glue:UpdatePartition",
        "glue:UpdateTable",
        "glue:UpdateTableOptimizer",
        "glue:UpdateUserDefinedFunction"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/glue:database"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/glue:database"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "glue:BatchCreatePartition",
         "glue:BatchDeleteConnection",
         "glue:BatchDeletePartition",
         "glue:BatchDeleteTable",
         "glue:BatchDeleteTableVersion",
         "glue:BatchGetPartition",
         "glue:BatchGetTableOptimizer",
         "glue:BatchUpdatePartition",
         "glue:CreateCatalog",
         "glue:CreateColumnStatisticsTaskSettings",
         "glue:CreateConnection",
         "glue:CreateDatabase",
         "glue:CreatePartition",
         "glue:CreatePartitionIndex",
         "glue:CreateTable",
         "glue:CreateTableOptimizer",
         "glue:CreateUserDefinedFunction",
         "glue:DeleteCatalog",
         "glue:DeleteColumnStatisticsForPartition",
         "glue:DeleteColumnStatisticsForTable",
         "glue:DeleteColumnStatisticsTaskSettings",
         "glue:DeleteConnection",
         "glue:DeleteDatabase",
         "glue:DeletePartition",
         "glue:DeletePartitionIndex",
         "glue:DeleteResourcePolicy",
         "glue:DeleteTable",
         "glue:DeleteTableOptimizer",
         "glue:DeleteTableVersion",
         "glue:DeleteUserDefinedFunction",
         "glue:DescribeEntity",
         "glue:GetCatalog",
         "glue:GetCatalogImportStatus",
         "glue:GetCatalogs",
         "glue:GetColumnStatisticsForPartition",
         "glue:GetColumnStatisticsForTable",
         "glue:GetConnection",
         "glue:GetConnections",
         "glue:GetDataCatalogEncryptionSettings",
         "glue:GetDatabase",
         "glue:GetDatabases",
         "glue:GetPartition",
         "glue:GetPartitionIndexes",
         "glue:GetPartitions",
         "glue:GetResourcePolicies",
         "glue:GetResourcePolicy",
         "glue:GetTable",
         "glue:GetTableOptimizer",
         "glue:GetTableVersion",
         "glue:GetTableVersions",
         "glue:GetTables",
         "glue:GetUserDefinedFunction",
         "glue:GetUserDefinedFunctions",
         "glue:ImportCatalogToGlue",
         "glue:ListEntities",
         "glue:ListTableOptimizerRuns",
         "glue:PutDataCatalogEncryptionSettings",
         "glue:PutResourcePolicy",
         "glue:RefreshOAuth2Tokens",
         "glue:SearchTables",
         "glue:StartColumnStatisticsTaskRun",
         "glue:StartColumnStatisticsTaskRunSchedule",
         "glue:StopColumnStatisticsTaskRun",
         "glue:StopColumnStatisticsTaskRunSchedule",
         "glue:UpdateCatalog",
         "glue:UpdateColumnStatisticsForPartition",
         "glue:UpdateColumnStatisticsForTable",
         "glue:UpdateColumnStatisticsTaskSettings",
         "glue:UpdateConnection",
         "glue:UpdateDatabase",
         "glue:UpdatePartition",
         "glue:UpdateTable",
         "glue:UpdateTableOptimizer",
         "glue:UpdateUserDefinedFunction"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "glue:BatchCreatePartition",
        "glue:BatchDeleteConnection",
        "glue:BatchDeletePartition",
        "glue:BatchDeleteTable",
        "glue:BatchDeleteTableVersion",
        "glue:BatchGetPartition",
        "glue:BatchGetTableOptimizer",
        "glue:BatchUpdatePartition",
        "glue:CreateCatalog",
        "glue:CreateColumnStatisticsTaskSettings",
        "glue:CreateConnection",
        "glue:CreateDatabase",
        "glue:CreatePartition",
        "glue:CreatePartitionIndex",
        "glue:CreateTable",
        "glue:CreateTableOptimizer",
        "glue:CreateUserDefinedFunction",
        "glue:DeleteCatalog",
        "glue:DeleteColumnStatisticsForPartition",
        "glue:DeleteColumnStatisticsForTable",
        "glue:DeleteColumnStatisticsTaskSettings",
        "glue:DeleteConnection",
        "glue:DeleteDatabase",
        "glue:DeletePartition",
        "glue:DeletePartitionIndex",
        "glue:DeleteResourcePolicy",
        "glue:DeleteTable",
        "glue:DeleteTableOptimizer",
        "glue:DeleteTableVersion",
        "glue:DeleteUserDefinedFunction",
        "glue:DescribeEntity",
        "glue:GetCatalog",
        "glue:GetCatalogImportStatus",
        "glue:GetCatalogs",
        "glue:GetColumnStatisticsForPartition",
        "glue:GetColumnStatisticsForTable",
        "glue:GetConnection",
        "glue:GetConnections",
        "glue:GetDataCatalogEncryptionSettings",
        "glue:GetDatabase",
        "glue:GetDatabases",
        "glue:GetPartition",
        "glue:GetPartitionIndexes",
        "glue:GetPartitions",
        "glue:GetResourcePolicies",
        "glue:GetResourcePolicy",
        "glue:GetTable",
        "glue:GetTableOptimizer",
        "glue:GetTableVersion",
        "glue:GetTableVersions",
        "glue:GetTables",
        "glue:GetUserDefinedFunction",
        "glue:GetUserDefinedFunctions",
        "glue:ImportCatalogToGlue",
        "glue:ListEntities",
        "glue:ListTableOptimizerRuns",
        "glue:PutDataCatalogEncryptionSettings",
        "glue:PutResourcePolicy",
        "glue:RefreshOAuth2Tokens",
        "glue:SearchTables",
        "glue:StartColumnStatisticsTaskRun",
        "glue:StartColumnStatisticsTaskRunSchedule",
        "glue:StopColumnStatisticsTaskRun",
        "glue:StopColumnStatisticsTaskRunSchedule",
        "glue:UpdateCatalog",
        "glue:UpdateColumnStatisticsForPartition",
        "glue:UpdateColumnStatisticsForTable",
        "glue:UpdateColumnStatisticsTaskSettings",
        "glue:UpdateConnection",
        "glue:UpdateDatabase",
        "glue:UpdatePartition",
        "glue:UpdateTable",
        "glue:UpdateTableOptimizer",
        "glue:UpdateUserDefinedFunction"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/glue:rootcatalog"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/glue:rootcatalog"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "glue:BatchCreatePartition",
         "glue:BatchDeletePartition",
         "glue:BatchDeleteTable",
         "glue:BatchDeleteTableVersion",
         "glue:BatchGetPartition",
         "glue:BatchGetTableOptimizer",
         "glue:BatchUpdatePartition",
         "glue:CreateColumnStatisticsTaskSettings",
         "glue:CreatePartition",
         "glue:CreatePartitionIndex",
         "glue:CreateTable",
         "glue:CreateTableOptimizer",
         "glue:DeleteColumnStatisticsForPartition",
         "glue:DeleteColumnStatisticsForTable",
         "glue:DeleteColumnStatisticsTaskSettings",
         "glue:DeleteDatabase",
         "glue:DeletePartition",
         "glue:DeletePartitionIndex",
         "glue:DeleteTable",
         "glue:DeleteTableOptimizer",
         "glue:DeleteTableVersion",
         "glue:GetColumnStatisticsForPartition",
         "glue:GetColumnStatisticsForTable",
         "glue:GetPartition",
         "glue:GetPartitionIndexes",
         "glue:GetPartitions",
         "glue:GetTable",
         "glue:GetTableOptimizer",
         "glue:GetTableVersion",
         "glue:GetTableVersions",
         "glue:GetTables",
         "glue:ListTableOptimizerRuns",
         "glue:SearchTables",
         "glue:StartColumnStatisticsTaskRun",
         "glue:StartColumnStatisticsTaskRunSchedule",
         "glue:StopColumnStatisticsTaskRun",
         "glue:StopColumnStatisticsTaskRunSchedule",
         "glue:UpdateColumnStatisticsForPartition",
         "glue:UpdateColumnStatisticsForTable",
         "glue:UpdateColumnStatisticsTaskSettings",
         "glue:UpdatePartition",
         "glue:UpdateTable",
         "glue:UpdateTableOptimizer"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "glue:BatchCreatePartition",
        "glue:BatchDeletePartition",
        "glue:BatchDeleteTable",
        "glue:BatchDeleteTableVersion",
        "glue:BatchGetPartition",
        "glue:BatchGetTableOptimizer",
        "glue:BatchUpdatePartition",
        "glue:CreateColumnStatisticsTaskSettings",
        "glue:CreatePartition",
        "glue:CreatePartitionIndex",
        "glue:CreateTable",
        "glue:CreateTableOptimizer",
        "glue:DeleteColumnStatisticsForPartition",
        "glue:DeleteColumnStatisticsForTable",
        "glue:DeleteColumnStatisticsTaskSettings",
        "glue:DeleteDatabase",
        "glue:DeletePartition",
        "glue:DeletePartitionIndex",
        "glue:DeleteTable",
        "glue:DeleteTableOptimizer",
        "glue:DeleteTableVersion",
        "glue:GetColumnStatisticsForPartition",
        "glue:GetColumnStatisticsForTable",
        "glue:GetPartition",
        "glue:GetPartitionIndexes",
        "glue:GetPartitions",
        "glue:GetTable",
        "glue:GetTableOptimizer",
        "glue:GetTableVersion",
        "glue:GetTableVersions",
        "glue:GetTables",
        "glue:ListTableOptimizerRuns",
        "glue:SearchTables",
        "glue:StartColumnStatisticsTaskRun",
        "glue:StartColumnStatisticsTaskRunSchedule",
        "glue:StopColumnStatisticsTaskRun",
        "glue:StopColumnStatisticsTaskRunSchedule",
        "glue:UpdateColumnStatisticsForPartition",
        "glue:UpdateColumnStatisticsForTable",
        "glue:UpdateColumnStatisticsTaskSettings",
        "glue:UpdatePartition",
        "glue:UpdateTable",
        "glue:UpdateTableOptimizer"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/glue:table"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/glue:table"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "glue:BatchDeleteConnection",
         "glue:CreateIntegration",
         "glue:CreateIntegrationResourceProperty",
         "glue:CreateIntegrationTableProperties",
         "glue:DeleteConnection",
         "glue:DeleteIntegrationTableProperties",
         "glue:DescribeEntity",
         "glue:GetConnection",
         "glue:GetConnections",
         "glue:GetEntityRecords",
         "glue:GetIntegrationResourceProperty",
         "glue:GetIntegrationTableProperties",
         "glue:ListEntities",
         "glue:PassConnection",
         "glue:RefreshOAuth2Tokens",
         "glue:TagResource",
         "glue:UntagResource",
         "glue:UpdateConnection",
         "glue:UpdateIntegrationResourceProperty",
         "glue:UpdateIntegrationTableProperties"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "glue:BatchDeleteConnection",
        "glue:CreateIntegration",
        "glue:CreateIntegrationResourceProperty",
        "glue:CreateIntegrationTableProperties",
        "glue:DeleteConnection",
        "glue:DeleteIntegrationTableProperties",
        "glue:DescribeEntity",
        "glue:GetConnection",
        "glue:GetConnections",
        "glue:GetEntityRecords",
        "glue:GetIntegrationResourceProperty",
        "glue:GetIntegrationTableProperties",
        "glue:ListEntities",
        "glue:PassConnection",
        "glue:RefreshOAuth2Tokens",
        "glue:TagResource",
        "glue:UntagResource",
        "glue:UpdateConnection",
        "glue:UpdateIntegrationResourceProperty",
        "glue:UpdateIntegrationTableProperties"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/glue:connection"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/glue:connection"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "glue:BatchGetBlueprints",
         "glue:CreateBlueprint",
         "glue:DeleteBlueprint",
         "glue:GetBlueprint",
         "glue:GetBlueprintRun",
         "glue:GetBlueprintRuns",
         "glue:GetTags",
         "glue:StartBlueprintRun",
         "glue:TagResource",
         "glue:UntagResource",
         "glue:UpdateBlueprint"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "glue:BatchGetBlueprints",
        "glue:CreateBlueprint",
        "glue:DeleteBlueprint",
        "glue:GetBlueprint",
        "glue:GetBlueprintRun",
        "glue:GetBlueprintRuns",
        "glue:GetTags",
        "glue:StartBlueprintRun",
        "glue:TagResource",
        "glue:UntagResource",
        "glue:UpdateBlueprint"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/glue:blueprint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/glue:blueprint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "glue:BatchGetCrawlers",
         "glue:DeleteCrawler",
         "glue:GetCrawler",
         "glue:GetTags",
         "glue:ListCrawls",
         "glue:StartCrawler",
         "glue:StopCrawler",
         "glue:TagResource",
         "glue:UntagResource",
         "glue:UpdateCrawler"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "glue:BatchGetCrawlers",
        "glue:DeleteCrawler",
        "glue:GetCrawler",
        "glue:GetTags",
        "glue:ListCrawls",
        "glue:StartCrawler",
        "glue:StopCrawler",
        "glue:TagResource",
        "glue:UntagResource",
        "glue:UpdateCrawler"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/glue:crawler"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/glue:crawler"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "glue:BatchGetDevEndpoints",
         "glue:DeleteDevEndpoint",
         "glue:GetDevEndpoint",
         "glue:GetTags",
         "glue:TagResource",
         "glue:UntagResource",
         "glue:UpdateDevEndpoint"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "glue:BatchGetDevEndpoints",
        "glue:DeleteDevEndpoint",
        "glue:GetDevEndpoint",
        "glue:GetTags",
        "glue:TagResource",
        "glue:UntagResource",
        "glue:UpdateDevEndpoint"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/glue:devendpoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/glue:devendpoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "glue:BatchGetJobs",
         "glue:BatchStopJobRun",
         "glue:CreateJob",
         "glue:DeleteJob",
         "glue:GetDataQualityModel",
         "glue:GetDataQualityModelResult",
         "glue:GetJob",
         "glue:GetJobRun",
         "glue:GetJobRuns",
         "glue:GetJobUpgradeAnalysis",
         "glue:GetTags",
         "glue:ListJobUpgradeAnalyses",
         "glue:PutDataQualityProfileAnnotation",
         "glue:PutDataQualityStatisticAnnotation",
         "glue:StartJobRun",
         "glue:StartJobUpgradeAnalysis",
         "glue:StopJobUpgradeAnalysis",
         "glue:TagResource",
         "glue:UntagResource",
         "glue:UpdateJob",
         "glue:UpdateJobFromSourceControl",
         "glue:UpdateSourceControlFromJob",
         "glue:UpgradeJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "glue:BatchGetJobs",
        "glue:BatchStopJobRun",
        "glue:CreateJob",
        "glue:DeleteJob",
        "glue:GetDataQualityModel",
        "glue:GetDataQualityModelResult",
        "glue:GetJob",
        "glue:GetJobRun",
        "glue:GetJobRuns",
        "glue:GetJobUpgradeAnalysis",
        "glue:GetTags",
        "glue:ListJobUpgradeAnalyses",
        "glue:PutDataQualityProfileAnnotation",
        "glue:PutDataQualityStatisticAnnotation",
        "glue:StartJobRun",
        "glue:StartJobUpgradeAnalysis",
        "glue:StopJobUpgradeAnalysis",
        "glue:TagResource",
        "glue:UntagResource",
        "glue:UpdateJob",
        "glue:UpdateJobFromSourceControl",
        "glue:UpdateSourceControlFromJob",
        "glue:UpgradeJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/glue:job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/glue:job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "glue:BatchGetTriggers",
         "glue:CreateTrigger",
         "glue:DeleteTrigger",
         "glue:GetTags",
         "glue:GetTrigger",
         "glue:StartTrigger",
         "glue:StopTrigger",
         "glue:TagResource",
         "glue:UntagResource",
         "glue:UpdateTrigger"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "glue:BatchGetTriggers",
        "glue:CreateTrigger",
        "glue:DeleteTrigger",
        "glue:GetTags",
        "glue:GetTrigger",
        "glue:StartTrigger",
        "glue:StopTrigger",
        "glue:TagResource",
        "glue:UntagResource",
        "glue:UpdateTrigger"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/glue:trigger"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/glue:trigger"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "glue:BatchGetWorkflows",
         "glue:CreateWorkflow",
         "glue:DeleteWorkflow",
         "glue:GetTags",
         "glue:GetWorkflow",
         "glue:GetWorkflowRun",
         "glue:GetWorkflowRunProperties",
         "glue:GetWorkflowRuns",
         "glue:NotifyEvent",
         "glue:PutWorkflowRunProperties",
         "glue:ResumeWorkflowRun",
         "glue:StartWorkflowRun",
         "glue:StopWorkflowRun",
         "glue:TagResource",
         "glue:UntagResource",
         "glue:UpdateWorkflow"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "glue:BatchGetWorkflows",
        "glue:CreateWorkflow",
        "glue:DeleteWorkflow",
        "glue:GetTags",
        "glue:GetWorkflow",
        "glue:GetWorkflowRun",
        "glue:GetWorkflowRunProperties",
        "glue:GetWorkflowRuns",
        "glue:NotifyEvent",
        "glue:PutWorkflowRunProperties",
        "glue:ResumeWorkflowRun",
        "glue:StartWorkflowRun",
        "glue:StopWorkflowRun",
        "glue:TagResource",
        "glue:UntagResource",
        "glue:UpdateWorkflow"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/glue:workflow"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/glue:workflow"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "glue:CancelDataQualityRuleRecommendationRun",
         "glue:CancelDataQualityRulesetEvaluationRun",
         "glue:DeleteDataQualityRuleset",
         "glue:GetDataQualityModel",
         "glue:GetDataQualityModelResult",
         "glue:GetDataQualityResult",
         "glue:GetDataQualityRuleRecommendationRun",
         "glue:GetDataQualityRuleset",
         "glue:GetDataQualityRulesetEvaluationRun",
         "glue:ListDataQualityResults",
         "glue:ListDataQualityRuleRecommendationRuns",
         "glue:ListDataQualityRulesetEvaluationRuns",
         "glue:ListDataQualityRulesets",
         "glue:PublishDataQuality",
         "glue:PutDataQualityProfileAnnotation",
         "glue:PutDataQualityStatisticAnnotation",
         "glue:StartDataQualityRuleRecommendationRun",
         "glue:StartDataQualityRulesetEvaluationRun",
         "glue:TagResource",
         "glue:UntagResource",
         "glue:UpdateDataQualityRuleset"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "glue:CancelDataQualityRuleRecommendationRun",
        "glue:CancelDataQualityRulesetEvaluationRun",
        "glue:DeleteDataQualityRuleset",
        "glue:GetDataQualityModel",
        "glue:GetDataQualityModelResult",
        "glue:GetDataQualityResult",
        "glue:GetDataQualityRuleRecommendationRun",
        "glue:GetDataQualityRuleset",
        "glue:GetDataQualityRulesetEvaluationRun",
        "glue:ListDataQualityResults",
        "glue:ListDataQualityRuleRecommendationRuns",
        "glue:ListDataQualityRulesetEvaluationRuns",
        "glue:ListDataQualityRulesets",
        "glue:PublishDataQuality",
        "glue:PutDataQualityProfileAnnotation",
        "glue:PutDataQualityStatisticAnnotation",
        "glue:StartDataQualityRuleRecommendationRun",
        "glue:StartDataQualityRulesetEvaluationRun",
        "glue:TagResource",
        "glue:UntagResource",
        "glue:UpdateDataQualityRuleset"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/glue:dataQualityRuleset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/glue:dataQualityRuleset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "glue:CancelMLTaskRun",
         "glue:DeleteMLTransform",
         "glue:GetMLTaskRun",
         "glue:GetMLTaskRuns",
         "glue:GetMLTransform",
         "glue:GetMLTransforms",
         "glue:ListMLTransforms",
         "glue:StartExportLabelsTaskRun",
         "glue:StartImportLabelsTaskRun",
         "glue:StartMLEvaluationTaskRun",
         "glue:StartMLLabelingSetGenerationTaskRun",
         "glue:TagResource",
         "glue:UntagResource",
         "glue:UpdateMLTransform",
         "glue:UseMLTransforms"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "glue:CancelMLTaskRun",
        "glue:DeleteMLTransform",
        "glue:GetMLTaskRun",
        "glue:GetMLTaskRuns",
        "glue:GetMLTransform",
        "glue:GetMLTransforms",
        "glue:ListMLTransforms",
        "glue:StartExportLabelsTaskRun",
        "glue:StartImportLabelsTaskRun",
        "glue:StartMLEvaluationTaskRun",
        "glue:StartMLLabelingSetGenerationTaskRun",
        "glue:TagResource",
        "glue:UntagResource",
        "glue:UpdateMLTransform",
        "glue:UseMLTransforms"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/glue:mlTransform"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/glue:mlTransform"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "glue:CancelStatement",
         "glue:CreateSession",
         "glue:DeleteSession",
         "glue:GetDashboardUrl",
         "glue:GetSession",
         "glue:GetStatement",
         "glue:ListStatements",
         "glue:RunStatement",
         "glue:StopSession",
         "glue:TagResource",
         "glue:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "glue:CancelStatement",
        "glue:CreateSession",
        "glue:DeleteSession",
        "glue:GetDashboardUrl",
        "glue:GetSession",
        "glue:GetStatement",
        "glue:ListStatements",
        "glue:RunStatement",
        "glue:StopSession",
        "glue:TagResource",
        "glue:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/glue:session"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/glue:session"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "glue:CreateRegistry",
         "glue:CreateSchema",
         "glue:DeleteRegistry",
         "glue:DeleteSchema",
         "glue:DeleteSchemaVersions",
         "glue:GetRegistry",
         "glue:GetSchema",
         "glue:GetSchemaByDefinition",
         "glue:GetSchemaVersion",
         "glue:GetSchemaVersionsDiff",
         "glue:ListSchemaVersions",
         "glue:ListSchemas",
         "glue:PutSchemaVersionMetadata",
         "glue:QuerySchemaVersionMetadata",
         "glue:RegisterSchemaVersion",
         "glue:RemoveSchemaVersionMetadata",
         "glue:TagResource",
         "glue:UntagResource",
         "glue:UpdateRegistry",
         "glue:UpdateSchema"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "glue:CreateRegistry",
        "glue:CreateSchema",
        "glue:DeleteRegistry",
        "glue:DeleteSchema",
        "glue:DeleteSchemaVersions",
        "glue:GetRegistry",
        "glue:GetSchema",
        "glue:GetSchemaByDefinition",
        "glue:GetSchemaVersion",
        "glue:GetSchemaVersionsDiff",
        "glue:ListSchemaVersions",
        "glue:ListSchemas",
        "glue:PutSchemaVersionMetadata",
        "glue:QuerySchemaVersionMetadata",
        "glue:RegisterSchemaVersion",
        "glue:RemoveSchemaVersionMetadata",
        "glue:TagResource",
        "glue:UntagResource",
        "glue:UpdateRegistry",
        "glue:UpdateSchema"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/glue:registry"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/glue:registry"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "glue:CreateSchema",
         "glue:DeleteSchema",
         "glue:DeleteSchemaVersions",
         "glue:GetSchema",
         "glue:GetSchemaByDefinition",
         "glue:GetSchemaVersion",
         "glue:GetSchemaVersionsDiff",
         "glue:ListSchemaVersions",
         "glue:PutSchemaVersionMetadata",
         "glue:QuerySchemaVersionMetadata",
         "glue:RegisterSchemaVersion",
         "glue:RemoveSchemaVersionMetadata",
         "glue:TagResource",
         "glue:UntagResource",
         "glue:UpdateSchema"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "glue:CreateSchema",
        "glue:DeleteSchema",
        "glue:DeleteSchemaVersions",
        "glue:GetSchema",
        "glue:GetSchemaByDefinition",
        "glue:GetSchemaVersion",
        "glue:GetSchemaVersionsDiff",
        "glue:ListSchemaVersions",
        "glue:PutSchemaVersionMetadata",
        "glue:QuerySchemaVersionMetadata",
        "glue:RegisterSchemaVersion",
        "glue:RemoveSchemaVersionMetadata",
        "glue:TagResource",
        "glue:UntagResource",
        "glue:UpdateSchema"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/glue:schema"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/glue:schema"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "glue:CreateUsageProfile",
         "glue:DeleteUsageProfile",
         "glue:GetTags",
         "glue:GetUsageProfile",
         "glue:TagResource",
         "glue:UntagResource",
         "glue:UpdateUsageProfile"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "glue:CreateUsageProfile",
        "glue:DeleteUsageProfile",
        "glue:GetTags",
        "glue:GetUsageProfile",
        "glue:TagResource",
        "glue:UntagResource",
        "glue:UpdateUsageProfile"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/glue:usageProfile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/glue:usageProfile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "glue:DeleteDatabase",
         "glue:DeleteUserDefinedFunction",
         "glue:GetUserDefinedFunction",
         "glue:GetUserDefinedFunctions",
         "glue:UpdateUserDefinedFunction"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "glue:DeleteDatabase",
        "glue:DeleteUserDefinedFunction",
        "glue:GetUserDefinedFunction",
        "glue:GetUserDefinedFunctions",
        "glue:UpdateUserDefinedFunction"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/glue:userdefinedfunction"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/glue:userdefinedfunction"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "glue:GetCompletion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "glue:GetCompletion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/glue:completion"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/glue:completion"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "glue:GetTags",
         "glue:TagResource",
         "glue:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "glue:GetTags",
        "glue:TagResource",
        "glue:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/glue:customEntityType"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/glue:customEntityType"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "grafana:AssociateLicense",
         "grafana:CreateWorkspaceApiKey",
         "grafana:CreateWorkspaceServiceAccount",
         "grafana:CreateWorkspaceServiceAccountToken",
         "grafana:DeleteWorkspace",
         "grafana:DeleteWorkspaceApiKey",
         "grafana:DeleteWorkspaceServiceAccount",
         "grafana:DeleteWorkspaceServiceAccountToken",
         "grafana:DescribeWorkspace",
         "grafana:DescribeWorkspaceAuthentication",
         "grafana:DescribeWorkspaceConfiguration",
         "grafana:DisassociateLicense",
         "grafana:ListPermissions",
         "grafana:ListTagsForResource",
         "grafana:ListVersions",
         "grafana:ListWorkspaceServiceAccountTokens",
         "grafana:ListWorkspaceServiceAccounts",
         "grafana:TagResource",
         "grafana:UntagResource",
         "grafana:UpdatePermissions",
         "grafana:UpdateWorkspace",
         "grafana:UpdateWorkspaceAuthentication",
         "grafana:UpdateWorkspaceConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "grafana:AssociateLicense",
        "grafana:CreateWorkspaceApiKey",
        "grafana:CreateWorkspaceServiceAccount",
        "grafana:CreateWorkspaceServiceAccountToken",
        "grafana:DeleteWorkspace",
        "grafana:DeleteWorkspaceApiKey",
        "grafana:DeleteWorkspaceServiceAccount",
        "grafana:DeleteWorkspaceServiceAccountToken",
        "grafana:DescribeWorkspace",
        "grafana:DescribeWorkspaceAuthentication",
        "grafana:DescribeWorkspaceConfiguration",
        "grafana:DisassociateLicense",
        "grafana:ListPermissions",
        "grafana:ListTagsForResource",
        "grafana:ListVersions",
        "grafana:ListWorkspaceServiceAccountTokens",
        "grafana:ListWorkspaceServiceAccounts",
        "grafana:TagResource",
        "grafana:UntagResource",
        "grafana:UpdatePermissions",
        "grafana:UpdateWorkspace",
        "grafana:UpdateWorkspaceAuthentication",
        "grafana:UpdateWorkspaceConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/grafana:workspace"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/grafana:workspace"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "greengrass:AssociateRoleToGroup",
         "greengrass:CreateDeployment",
         "greengrass:CreateGroupCertificateAuthority",
         "greengrass:CreateGroupVersion",
         "greengrass:DeleteGroup",
         "greengrass:DisassociateRoleFromGroup",
         "greengrass:GetAssociatedRole",
         "greengrass:GetDeploymentStatus",
         "greengrass:GetGroup",
         "greengrass:GetGroupCertificateAuthority",
         "greengrass:GetGroupCertificateConfiguration",
         "greengrass:GetGroupVersion",
         "greengrass:ListDeployments",
         "greengrass:ListGroupCertificateAuthorities",
         "greengrass:ListGroupVersions",
         "greengrass:ListTagsForResource",
         "greengrass:ResetDeployments",
         "greengrass:TagResource",
         "greengrass:UntagResource",
         "greengrass:UpdateGroup",
         "greengrass:UpdateGroupCertificateConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "greengrass:AssociateRoleToGroup",
        "greengrass:CreateDeployment",
        "greengrass:CreateGroupCertificateAuthority",
        "greengrass:CreateGroupVersion",
        "greengrass:DeleteGroup",
        "greengrass:DisassociateRoleFromGroup",
        "greengrass:GetAssociatedRole",
        "greengrass:GetDeploymentStatus",
        "greengrass:GetGroup",
        "greengrass:GetGroupCertificateAuthority",
        "greengrass:GetGroupCertificateConfiguration",
        "greengrass:GetGroupVersion",
        "greengrass:ListDeployments",
        "greengrass:ListGroupCertificateAuthorities",
        "greengrass:ListGroupVersions",
        "greengrass:ListTagsForResource",
        "greengrass:ResetDeployments",
        "greengrass:TagResource",
        "greengrass:UntagResource",
        "greengrass:UpdateGroup",
        "greengrass:UpdateGroupCertificateConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/greengrass:group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/greengrass:group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "greengrass:BatchAssociateClientDeviceWithCoreDevice",
         "greengrass:BatchDisassociateClientDeviceFromCoreDevice",
         "greengrass:DeleteCoreDevice",
         "greengrass:GetCoreDevice",
         "greengrass:ListClientDevicesAssociatedWithCoreDevice",
         "greengrass:ListEffectiveDeployments",
         "greengrass:ListInstalledComponents",
         "greengrass:ListTagsForResource",
         "greengrass:TagResource",
         "greengrass:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "greengrass:BatchAssociateClientDeviceWithCoreDevice",
        "greengrass:BatchDisassociateClientDeviceFromCoreDevice",
        "greengrass:DeleteCoreDevice",
        "greengrass:GetCoreDevice",
        "greengrass:ListClientDevicesAssociatedWithCoreDevice",
        "greengrass:ListEffectiveDeployments",
        "greengrass:ListInstalledComponents",
        "greengrass:ListTagsForResource",
        "greengrass:TagResource",
        "greengrass:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/greengrass:coreDevice"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/greengrass:coreDevice"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "greengrass:CancelDeployment",
         "greengrass:DeleteDeployment",
         "greengrass:GetDeployment",
         "greengrass:GetDeploymentStatus",
         "greengrass:ListTagsForResource",
         "greengrass:TagResource",
         "greengrass:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "greengrass:CancelDeployment",
        "greengrass:DeleteDeployment",
        "greengrass:GetDeployment",
        "greengrass:GetDeploymentStatus",
        "greengrass:ListTagsForResource",
        "greengrass:TagResource",
        "greengrass:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/greengrass:deployment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/greengrass:deployment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "greengrass:CreateComponentVersion",
         "greengrass:ListComponentVersions",
         "greengrass:ListTagsForResource",
         "greengrass:TagResource",
         "greengrass:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "greengrass:CreateComponentVersion",
        "greengrass:ListComponentVersions",
        "greengrass:ListTagsForResource",
        "greengrass:TagResource",
        "greengrass:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/greengrass:component"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/greengrass:component"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "greengrass:CreateConnectorDefinitionVersion",
         "greengrass:DeleteConnectorDefinition",
         "greengrass:GetConnectorDefinition",
         "greengrass:GetConnectorDefinitionVersion",
         "greengrass:ListConnectorDefinitionVersions",
         "greengrass:ListTagsForResource",
         "greengrass:TagResource",
         "greengrass:UntagResource",
         "greengrass:UpdateConnectorDefinition"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "greengrass:CreateConnectorDefinitionVersion",
        "greengrass:DeleteConnectorDefinition",
        "greengrass:GetConnectorDefinition",
        "greengrass:GetConnectorDefinitionVersion",
        "greengrass:ListConnectorDefinitionVersions",
        "greengrass:ListTagsForResource",
        "greengrass:TagResource",
        "greengrass:UntagResource",
        "greengrass:UpdateConnectorDefinition"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/greengrass:connectorDefinition"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/greengrass:connectorDefinition"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "greengrass:CreateCoreDefinitionVersion",
         "greengrass:DeleteCoreDefinition",
         "greengrass:GetCoreDefinition",
         "greengrass:GetCoreDefinitionVersion",
         "greengrass:ListCoreDefinitionVersions",
         "greengrass:ListTagsForResource",
         "greengrass:TagResource",
         "greengrass:UntagResource",
         "greengrass:UpdateCoreDefinition"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "greengrass:CreateCoreDefinitionVersion",
        "greengrass:DeleteCoreDefinition",
        "greengrass:GetCoreDefinition",
        "greengrass:GetCoreDefinitionVersion",
        "greengrass:ListCoreDefinitionVersions",
        "greengrass:ListTagsForResource",
        "greengrass:TagResource",
        "greengrass:UntagResource",
        "greengrass:UpdateCoreDefinition"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/greengrass:coreDefinition"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/greengrass:coreDefinition"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "greengrass:CreateDeviceDefinitionVersion",
         "greengrass:DeleteDeviceDefinition",
         "greengrass:GetDeviceDefinition",
         "greengrass:GetDeviceDefinitionVersion",
         "greengrass:ListDeviceDefinitionVersions",
         "greengrass:ListTagsForResource",
         "greengrass:TagResource",
         "greengrass:UntagResource",
         "greengrass:UpdateDeviceDefinition"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "greengrass:CreateDeviceDefinitionVersion",
        "greengrass:DeleteDeviceDefinition",
        "greengrass:GetDeviceDefinition",
        "greengrass:GetDeviceDefinitionVersion",
        "greengrass:ListDeviceDefinitionVersions",
        "greengrass:ListTagsForResource",
        "greengrass:TagResource",
        "greengrass:UntagResource",
        "greengrass:UpdateDeviceDefinition"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/greengrass:deviceDefinition"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/greengrass:deviceDefinition"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "greengrass:CreateFunctionDefinitionVersion",
         "greengrass:DeleteFunctionDefinition",
         "greengrass:GetFunctionDefinition",
         "greengrass:GetFunctionDefinitionVersion",
         "greengrass:ListFunctionDefinitionVersions",
         "greengrass:ListTagsForResource",
         "greengrass:TagResource",
         "greengrass:UntagResource",
         "greengrass:UpdateFunctionDefinition"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "greengrass:CreateFunctionDefinitionVersion",
        "greengrass:DeleteFunctionDefinition",
        "greengrass:GetFunctionDefinition",
        "greengrass:GetFunctionDefinitionVersion",
        "greengrass:ListFunctionDefinitionVersions",
        "greengrass:ListTagsForResource",
        "greengrass:TagResource",
        "greengrass:UntagResource",
        "greengrass:UpdateFunctionDefinition"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/greengrass:functionDefinition"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/greengrass:functionDefinition"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "greengrass:CreateLoggerDefinitionVersion",
         "greengrass:DeleteLoggerDefinition",
         "greengrass:GetLoggerDefinition",
         "greengrass:GetLoggerDefinitionVersion",
         "greengrass:ListLoggerDefinitionVersions",
         "greengrass:ListTagsForResource",
         "greengrass:TagResource",
         "greengrass:UntagResource",
         "greengrass:UpdateLoggerDefinition"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "greengrass:CreateLoggerDefinitionVersion",
        "greengrass:DeleteLoggerDefinition",
        "greengrass:GetLoggerDefinition",
        "greengrass:GetLoggerDefinitionVersion",
        "greengrass:ListLoggerDefinitionVersions",
        "greengrass:ListTagsForResource",
        "greengrass:TagResource",
        "greengrass:UntagResource",
        "greengrass:UpdateLoggerDefinition"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/greengrass:loggerDefinition"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/greengrass:loggerDefinition"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "greengrass:CreateResourceDefinitionVersion",
         "greengrass:DeleteResourceDefinition",
         "greengrass:GetResourceDefinition",
         "greengrass:GetResourceDefinitionVersion",
         "greengrass:ListResourceDefinitionVersions",
         "greengrass:ListTagsForResource",
         "greengrass:TagResource",
         "greengrass:UntagResource",
         "greengrass:UpdateResourceDefinition"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "greengrass:CreateResourceDefinitionVersion",
        "greengrass:DeleteResourceDefinition",
        "greengrass:GetResourceDefinition",
        "greengrass:GetResourceDefinitionVersion",
        "greengrass:ListResourceDefinitionVersions",
        "greengrass:ListTagsForResource",
        "greengrass:TagResource",
        "greengrass:UntagResource",
        "greengrass:UpdateResourceDefinition"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/greengrass:resourceDefinition"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/greengrass:resourceDefinition"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "greengrass:CreateSubscriptionDefinitionVersion",
         "greengrass:DeleteSubscriptionDefinition",
         "greengrass:GetSubscriptionDefinition",
         "greengrass:GetSubscriptionDefinitionVersion",
         "greengrass:ListSubscriptionDefinitionVersions",
         "greengrass:ListTagsForResource",
         "greengrass:TagResource",
         "greengrass:UntagResource",
         "greengrass:UpdateSubscriptionDefinition"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "greengrass:CreateSubscriptionDefinitionVersion",
        "greengrass:DeleteSubscriptionDefinition",
        "greengrass:GetSubscriptionDefinition",
        "greengrass:GetSubscriptionDefinitionVersion",
        "greengrass:ListSubscriptionDefinitionVersions",
        "greengrass:ListTagsForResource",
        "greengrass:TagResource",
        "greengrass:UntagResource",
        "greengrass:UpdateSubscriptionDefinition"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/greengrass:subscriptionDefinition"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/greengrass:subscriptionDefinition"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "greengrass:DeleteComponent",
         "greengrass:DescribeComponent",
         "greengrass:GetComponent",
         "greengrass:GetComponentVersionArtifact",
         "greengrass:ListTagsForResource",
         "greengrass:ResolveComponentCandidates",
         "greengrass:TagResource",
         "greengrass:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "greengrass:DeleteComponent",
        "greengrass:DescribeComponent",
        "greengrass:GetComponent",
        "greengrass:GetComponentVersionArtifact",
        "greengrass:ListTagsForResource",
        "greengrass:ResolveComponentCandidates",
        "greengrass:TagResource",
        "greengrass:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/greengrass:componentVersion"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/greengrass:componentVersion"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "greengrass:Discover"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "greengrass:Discover"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/greengrass:thing"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/greengrass:thing"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "greengrass:GetBulkDeploymentStatus",
         "greengrass:ListBulkDeploymentDetailedReports",
         "greengrass:ListTagsForResource",
         "greengrass:StopBulkDeployment",
         "greengrass:TagResource",
         "greengrass:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "greengrass:GetBulkDeploymentStatus",
        "greengrass:ListBulkDeploymentDetailedReports",
        "greengrass:ListTagsForResource",
        "greengrass:StopBulkDeployment",
        "greengrass:TagResource",
        "greengrass:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/greengrass:bulkDeployment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/greengrass:bulkDeployment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "greengrass:GetConnectivityInfo",
         "greengrass:UpdateConnectivityInfo"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "greengrass:GetConnectivityInfo",
        "greengrass:UpdateConnectivityInfo"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/greengrass:connectivityInfo"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/greengrass:connectivityInfo"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "greengrass:GetConnectorDefinitionVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "greengrass:GetConnectorDefinitionVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/greengrass:connectorDefinitionVersion"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/greengrass:connectorDefinitionVersion"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "greengrass:GetCoreDefinitionVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "greengrass:GetCoreDefinitionVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/greengrass:coreDefinitionVersion"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/greengrass:coreDefinitionVersion"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "greengrass:GetDeviceDefinitionVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "greengrass:GetDeviceDefinitionVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/greengrass:deviceDefinitionVersion"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/greengrass:deviceDefinitionVersion"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "greengrass:GetFunctionDefinitionVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "greengrass:GetFunctionDefinitionVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/greengrass:functionDefinitionVersion"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/greengrass:functionDefinitionVersion"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "greengrass:GetGroupCertificateAuthority"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "greengrass:GetGroupCertificateAuthority"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/greengrass:certificateAuthority"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/greengrass:certificateAuthority"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "greengrass:GetGroupVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "greengrass:GetGroupVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/greengrass:groupVersion"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/greengrass:groupVersion"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "greengrass:GetLoggerDefinitionVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "greengrass:GetLoggerDefinitionVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/greengrass:loggerDefinitionVersion"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/greengrass:loggerDefinitionVersion"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "greengrass:GetResourceDefinitionVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "greengrass:GetResourceDefinitionVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/greengrass:resourceDefinitionVersion"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/greengrass:resourceDefinitionVersion"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "greengrass:GetSubscriptionDefinitionVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "greengrass:GetSubscriptionDefinitionVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/greengrass:subscriptionDefinitionVersion"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/greengrass:subscriptionDefinitionVersion"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "greengrass:GetThingRuntimeConfiguration",
         "greengrass:UpdateThingRuntimeConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "greengrass:GetThingRuntimeConfiguration",
        "greengrass:UpdateThingRuntimeConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/greengrass:thingRuntimeConfig"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/greengrass:thingRuntimeConfig"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "groundstation:CancelContact",
         "groundstation:DescribeContact",
         "groundstation:ListTagsForResource",
         "groundstation:TagResource",
         "groundstation:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "groundstation:CancelContact",
        "groundstation:DescribeContact",
        "groundstation:ListTagsForResource",
        "groundstation:TagResource",
        "groundstation:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/groundstation:Contact"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/groundstation:Contact"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "groundstation:DeleteConfig",
         "groundstation:GetConfig",
         "groundstation:ListTagsForResource",
         "groundstation:TagResource",
         "groundstation:UntagResource",
         "groundstation:UpdateConfig"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "groundstation:DeleteConfig",
        "groundstation:GetConfig",
        "groundstation:ListTagsForResource",
        "groundstation:TagResource",
        "groundstation:UntagResource",
        "groundstation:UpdateConfig"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/groundstation:Config"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/groundstation:Config"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "groundstation:DeleteDataflowEndpointGroup",
         "groundstation:GetDataflowEndpointGroup",
         "groundstation:ListTagsForResource",
         "groundstation:TagResource",
         "groundstation:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "groundstation:DeleteDataflowEndpointGroup",
        "groundstation:GetDataflowEndpointGroup",
        "groundstation:ListTagsForResource",
        "groundstation:TagResource",
        "groundstation:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/groundstation:DataflowEndpointGroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/groundstation:DataflowEndpointGroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "groundstation:DeleteEphemeris",
         "groundstation:DescribeEphemeris",
         "groundstation:TagResource",
         "groundstation:UntagResource",
         "groundstation:UpdateEphemeris"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "groundstation:DeleteEphemeris",
        "groundstation:DescribeEphemeris",
        "groundstation:TagResource",
        "groundstation:UntagResource",
        "groundstation:UpdateEphemeris"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/groundstation:EphemerisItem"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/groundstation:EphemerisItem"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "groundstation:DeleteMissionProfile",
         "groundstation:GetMissionProfile",
         "groundstation:ListTagsForResource",
         "groundstation:TagResource",
         "groundstation:UntagResource",
         "groundstation:UpdateMissionProfile"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "groundstation:DeleteMissionProfile",
        "groundstation:GetMissionProfile",
        "groundstation:ListTagsForResource",
        "groundstation:TagResource",
        "groundstation:UntagResource",
        "groundstation:UpdateMissionProfile"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/groundstation:MissionProfile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/groundstation:MissionProfile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "groundstation:GetAgentConfiguration",
         "groundstation:UpdateAgentStatus"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "groundstation:GetAgentConfiguration",
        "groundstation:UpdateAgentStatus"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/groundstation:Agent"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/groundstation:Agent"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "groundstation:GetSatellite"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "groundstation:GetSatellite"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/groundstation:Satellite"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/groundstation:Satellite"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "guardduty:CreateFilter",
         "guardduty:DeleteFilter",
         "guardduty:GetFilter",
         "guardduty:ListTagsForResource",
         "guardduty:TagResource",
         "guardduty:UntagResource",
         "guardduty:UpdateFilter"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "guardduty:CreateFilter",
        "guardduty:DeleteFilter",
        "guardduty:GetFilter",
        "guardduty:ListTagsForResource",
        "guardduty:TagResource",
        "guardduty:UntagResource",
        "guardduty:UpdateFilter"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/guardduty:filter"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/guardduty:filter"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "guardduty:DeleteDetector",
         "guardduty:GetCoverageStatistics",
         "guardduty:GetDetector",
         "guardduty:ListCoverage",
         "guardduty:ListTagsForResource",
         "guardduty:TagResource",
         "guardduty:UntagResource",
         "guardduty:UpdateDetector"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "guardduty:DeleteDetector",
        "guardduty:GetCoverageStatistics",
        "guardduty:GetDetector",
        "guardduty:ListCoverage",
        "guardduty:ListTagsForResource",
        "guardduty:TagResource",
        "guardduty:UntagResource",
        "guardduty:UpdateDetector"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/guardduty:detector"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/guardduty:detector"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "guardduty:DeleteIPSet",
         "guardduty:GetIPSet",
         "guardduty:ListTagsForResource",
         "guardduty:TagResource",
         "guardduty:UntagResource",
         "guardduty:UpdateIPSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "guardduty:DeleteIPSet",
        "guardduty:GetIPSet",
        "guardduty:ListTagsForResource",
        "guardduty:TagResource",
        "guardduty:UntagResource",
        "guardduty:UpdateIPSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/guardduty:ipset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/guardduty:ipset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "guardduty:DeleteMalwareProtectionPlan",
         "guardduty:GetMalwareProtectionPlan",
         "guardduty:ListTagsForResource",
         "guardduty:TagResource",
         "guardduty:UntagResource",
         "guardduty:UpdateMalwareProtectionPlan"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "guardduty:DeleteMalwareProtectionPlan",
        "guardduty:GetMalwareProtectionPlan",
        "guardduty:ListTagsForResource",
        "guardduty:TagResource",
        "guardduty:UntagResource",
        "guardduty:UpdateMalwareProtectionPlan"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/guardduty:malwareprotectionplan"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/guardduty:malwareprotectionplan"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "guardduty:DeletePublishingDestination",
         "guardduty:DescribePublishingDestination",
         "guardduty:UpdatePublishingDestination"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "guardduty:DeletePublishingDestination",
        "guardduty:DescribePublishingDestination",
        "guardduty:UpdatePublishingDestination"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/guardduty:publishingDestination"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/guardduty:publishingDestination"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "guardduty:DeleteThreatIntelSet",
         "guardduty:GetThreatIntelSet",
         "guardduty:ListTagsForResource",
         "guardduty:TagResource",
         "guardduty:UntagResource",
         "guardduty:UpdateThreatIntelSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "guardduty:DeleteThreatIntelSet",
        "guardduty:GetThreatIntelSet",
        "guardduty:ListTagsForResource",
        "guardduty:TagResource",
        "guardduty:UntagResource",
        "guardduty:UpdateThreatIntelSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/guardduty:threatintelset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/guardduty:threatintelset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "health:DescribeAffectedEntities",
         "health:DescribeEventDetails"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "health:DescribeAffectedEntities",
        "health:DescribeEventDetails"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/health:event"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/health:event"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "healthlake:CancelFHIRExportJobWithDelete",
         "healthlake:CreateResource",
         "healthlake:DeleteFHIRDatastore",
         "healthlake:DeleteResource",
         "healthlake:DescribeFHIRDatastore",
         "healthlake:DescribeFHIRExportJob",
         "healthlake:DescribeFHIRExportJobWithGet",
         "healthlake:DescribeFHIRImportJob",
         "healthlake:GetCapabilities",
         "healthlake:GetExportedFile",
         "healthlake:GetHistoryByResourceId",
         "healthlake:ListFHIRExportJobs",
         "healthlake:ListFHIRImportJobs",
         "healthlake:ListTagsForResource",
         "healthlake:ReadResource",
         "healthlake:SearchEverything",
         "healthlake:SearchWithGet",
         "healthlake:SearchWithPost",
         "healthlake:StartFHIRExportJob",
         "healthlake:StartFHIRExportJobWithGet",
         "healthlake:StartFHIRExportJobWithPost",
         "healthlake:StartFHIRImportJob",
         "healthlake:TagResource",
         "healthlake:UntagResource",
         "healthlake:UpdateResource",
         "healthlake:VersionReadResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "healthlake:CancelFHIRExportJobWithDelete",
        "healthlake:CreateResource",
        "healthlake:DeleteFHIRDatastore",
        "healthlake:DeleteResource",
        "healthlake:DescribeFHIRDatastore",
        "healthlake:DescribeFHIRExportJob",
        "healthlake:DescribeFHIRExportJobWithGet",
        "healthlake:DescribeFHIRImportJob",
        "healthlake:GetCapabilities",
        "healthlake:GetExportedFile",
        "healthlake:GetHistoryByResourceId",
        "healthlake:ListFHIRExportJobs",
        "healthlake:ListFHIRImportJobs",
        "healthlake:ListTagsForResource",
        "healthlake:ReadResource",
        "healthlake:SearchEverything",
        "healthlake:SearchWithGet",
        "healthlake:SearchWithPost",
        "healthlake:StartFHIRExportJob",
        "healthlake:StartFHIRExportJobWithGet",
        "healthlake:StartFHIRExportJobWithPost",
        "healthlake:StartFHIRImportJob",
        "healthlake:TagResource",
        "healthlake:UntagResource",
        "healthlake:UpdateResource",
        "healthlake:VersionReadResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/healthlake:datastore"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/healthlake:datastore"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "honeycode:BatchCreateTableRows",
         "honeycode:BatchDeleteTableRows",
         "honeycode:BatchUpdateTableRows",
         "honeycode:BatchUpsertTableRows",
         "honeycode:DescribeTableDataImportJob",
         "honeycode:ListTableColumns",
         "honeycode:ListTableRows",
         "honeycode:QueryTableRows",
         "honeycode:StartTableDataImportJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "honeycode:BatchCreateTableRows",
        "honeycode:BatchDeleteTableRows",
        "honeycode:BatchUpdateTableRows",
        "honeycode:BatchUpsertTableRows",
        "honeycode:DescribeTableDataImportJob",
        "honeycode:ListTableColumns",
        "honeycode:ListTableRows",
        "honeycode:QueryTableRows",
        "honeycode:StartTableDataImportJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/honeycode:table"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/honeycode:table"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "honeycode:GetScreenData"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "honeycode:GetScreenData"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/honeycode:screen"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/honeycode:screen"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "honeycode:InvokeScreenAutomation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "honeycode:InvokeScreenAutomation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/honeycode:screen-automation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/honeycode:screen-automation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "honeycode:ListTables"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "honeycode:ListTables"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/honeycode:workbook"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/honeycode:workbook"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iam:AddClientIDToOpenIDConnectProvider",
         "iam:CreateOpenIDConnectProvider",
         "iam:DeleteOpenIDConnectProvider",
         "iam:GetOpenIDConnectProvider",
         "iam:ListOpenIDConnectProviderTags",
         "iam:RemoveClientIDFromOpenIDConnectProvider",
         "iam:TagOpenIDConnectProvider",
         "iam:UntagOpenIDConnectProvider",
         "iam:UpdateOpenIDConnectProviderThumbprint"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iam:AddClientIDToOpenIDConnectProvider",
        "iam:CreateOpenIDConnectProvider",
        "iam:DeleteOpenIDConnectProvider",
        "iam:GetOpenIDConnectProvider",
        "iam:ListOpenIDConnectProviderTags",
        "iam:RemoveClientIDFromOpenIDConnectProvider",
        "iam:TagOpenIDConnectProvider",
        "iam:UntagOpenIDConnectProvider",
        "iam:UpdateOpenIDConnectProviderThumbprint"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iam:oidc-provider"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iam:oidc-provider"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iam:AddRoleToInstanceProfile",
         "iam:CreateInstanceProfile",
         "iam:DeleteInstanceProfile",
         "iam:GetInstanceProfile",
         "iam:ListInstanceProfileTags",
         "iam:RemoveRoleFromInstanceProfile",
         "iam:TagInstanceProfile",
         "iam:UntagInstanceProfile"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iam:AddRoleToInstanceProfile",
        "iam:CreateInstanceProfile",
        "iam:DeleteInstanceProfile",
        "iam:GetInstanceProfile",
        "iam:ListInstanceProfileTags",
        "iam:RemoveRoleFromInstanceProfile",
        "iam:TagInstanceProfile",
        "iam:UntagInstanceProfile"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iam:instance-profile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iam:instance-profile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iam:AddUserToGroup",
         "iam:AttachGroupPolicy",
         "iam:CreateGroup",
         "iam:DeleteGroup",
         "iam:DeleteGroupPolicy",
         "iam:DetachGroupPolicy",
         "iam:GenerateServiceLastAccessedDetails",
         "iam:GetContextKeysForPrincipalPolicy",
         "iam:GetGroup",
         "iam:GetGroupPolicy",
         "iam:ListAttachedGroupPolicies",
         "iam:ListGroupPolicies",
         "iam:ListPoliciesGrantingServiceAccess",
         "iam:PutGroupPolicy",
         "iam:RemoveUserFromGroup",
         "iam:SimulatePrincipalPolicy",
         "iam:UpdateGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iam:AddUserToGroup",
        "iam:AttachGroupPolicy",
        "iam:CreateGroup",
        "iam:DeleteGroup",
        "iam:DeleteGroupPolicy",
        "iam:DetachGroupPolicy",
        "iam:GenerateServiceLastAccessedDetails",
        "iam:GetContextKeysForPrincipalPolicy",
        "iam:GetGroup",
        "iam:GetGroupPolicy",
        "iam:ListAttachedGroupPolicies",
        "iam:ListGroupPolicies",
        "iam:ListPoliciesGrantingServiceAccess",
        "iam:PutGroupPolicy",
        "iam:RemoveUserFromGroup",
        "iam:SimulatePrincipalPolicy",
        "iam:UpdateGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iam:group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iam:group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iam:AttachRolePolicy",
         "iam:CreateRole",
         "iam:CreateServiceLinkedRole",
         "iam:DeleteRole",
         "iam:DeleteRolePermissionsBoundary",
         "iam:DeleteRolePolicy",
         "iam:DeleteServiceLinkedRole",
         "iam:DetachRolePolicy",
         "iam:GenerateServiceLastAccessedDetails",
         "iam:GetContextKeysForPrincipalPolicy",
         "iam:GetRole",
         "iam:GetRolePolicy",
         "iam:GetServiceLinkedRoleDeletionStatus",
         "iam:ListAttachedRolePolicies",
         "iam:ListInstanceProfilesForRole",
         "iam:ListPoliciesGrantingServiceAccess",
         "iam:ListRolePolicies",
         "iam:ListRoleTags",
         "iam:PassRole",
         "iam:PutRolePermissionsBoundary",
         "iam:PutRolePolicy",
         "iam:SimulatePrincipalPolicy",
         "iam:TagRole",
         "iam:UntagRole",
         "iam:UpdateAssumeRolePolicy",
         "iam:UpdateRole",
         "iam:UpdateRoleDescription"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iam:AttachRolePolicy",
        "iam:CreateRole",
        "iam:CreateServiceLinkedRole",
        "iam:DeleteRole",
        "iam:DeleteRolePermissionsBoundary",
        "iam:DeleteRolePolicy",
        "iam:DeleteServiceLinkedRole",
        "iam:DetachRolePolicy",
        "iam:GenerateServiceLastAccessedDetails",
        "iam:GetContextKeysForPrincipalPolicy",
        "iam:GetRole",
        "iam:GetRolePolicy",
        "iam:GetServiceLinkedRoleDeletionStatus",
        "iam:ListAttachedRolePolicies",
        "iam:ListInstanceProfilesForRole",
        "iam:ListPoliciesGrantingServiceAccess",
        "iam:ListRolePolicies",
        "iam:ListRoleTags",
        "iam:PassRole",
        "iam:PutRolePermissionsBoundary",
        "iam:PutRolePolicy",
        "iam:SimulatePrincipalPolicy",
        "iam:TagRole",
        "iam:UntagRole",
        "iam:UpdateAssumeRolePolicy",
        "iam:UpdateRole",
        "iam:UpdateRoleDescription"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iam:role"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iam:role"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iam:AttachUserPolicy",
         "iam:ChangePassword",
         "iam:CreateAccessKey",
         "iam:CreateLoginProfile",
         "iam:CreateServiceSpecificCredential",
         "iam:CreateUser",
         "iam:DeactivateMFADevice",
         "iam:DeleteAccessKey",
         "iam:DeleteLoginProfile",
         "iam:DeleteSSHPublicKey",
         "iam:DeleteServiceSpecificCredential",
         "iam:DeleteSigningCertificate",
         "iam:DeleteUser",
         "iam:DeleteUserPermissionsBoundary",
         "iam:DeleteUserPolicy",
         "iam:DetachUserPolicy",
         "iam:EnableMFADevice",
         "iam:GenerateServiceLastAccessedDetails",
         "iam:GetAccessKeyLastUsed",
         "iam:GetContextKeysForPrincipalPolicy",
         "iam:GetLoginProfile",
         "iam:GetMFADevice",
         "iam:GetSSHPublicKey",
         "iam:GetUser",
         "iam:GetUserPolicy",
         "iam:ListAccessKeys",
         "iam:ListAttachedUserPolicies",
         "iam:ListGroupsForUser",
         "iam:ListMFADevices",
         "iam:ListPoliciesGrantingServiceAccess",
         "iam:ListSSHPublicKeys",
         "iam:ListServiceSpecificCredentials",
         "iam:ListSigningCertificates",
         "iam:ListUserPolicies",
         "iam:ListUserTags",
         "iam:PutUserPermissionsBoundary",
         "iam:PutUserPolicy",
         "iam:ResetServiceSpecificCredential",
         "iam:ResyncMFADevice",
         "iam:SimulatePrincipalPolicy",
         "iam:TagUser",
         "iam:UntagUser",
         "iam:UpdateAccessKey",
         "iam:UpdateLoginProfile",
         "iam:UpdateSSHPublicKey",
         "iam:UpdateServiceSpecificCredential",
         "iam:UpdateSigningCertificate",
         "iam:UpdateUser",
         "iam:UploadSSHPublicKey",
         "iam:UploadSigningCertificate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iam:AttachUserPolicy",
        "iam:ChangePassword",
        "iam:CreateAccessKey",
        "iam:CreateLoginProfile",
        "iam:CreateServiceSpecificCredential",
        "iam:CreateUser",
        "iam:DeactivateMFADevice",
        "iam:DeleteAccessKey",
        "iam:DeleteLoginProfile",
        "iam:DeleteSSHPublicKey",
        "iam:DeleteServiceSpecificCredential",
        "iam:DeleteSigningCertificate",
        "iam:DeleteUser",
        "iam:DeleteUserPermissionsBoundary",
        "iam:DeleteUserPolicy",
        "iam:DetachUserPolicy",
        "iam:EnableMFADevice",
        "iam:GenerateServiceLastAccessedDetails",
        "iam:GetAccessKeyLastUsed",
        "iam:GetContextKeysForPrincipalPolicy",
        "iam:GetLoginProfile",
        "iam:GetMFADevice",
        "iam:GetSSHPublicKey",
        "iam:GetUser",
        "iam:GetUserPolicy",
        "iam:ListAccessKeys",
        "iam:ListAttachedUserPolicies",
        "iam:ListGroupsForUser",
        "iam:ListMFADevices",
        "iam:ListPoliciesGrantingServiceAccess",
        "iam:ListSSHPublicKeys",
        "iam:ListServiceSpecificCredentials",
        "iam:ListSigningCertificates",
        "iam:ListUserPolicies",
        "iam:ListUserTags",
        "iam:PutUserPermissionsBoundary",
        "iam:PutUserPolicy",
        "iam:ResetServiceSpecificCredential",
        "iam:ResyncMFADevice",
        "iam:SimulatePrincipalPolicy",
        "iam:TagUser",
        "iam:UntagUser",
        "iam:UpdateAccessKey",
        "iam:UpdateLoginProfile",
        "iam:UpdateSSHPublicKey",
        "iam:UpdateServiceSpecificCredential",
        "iam:UpdateSigningCertificate",
        "iam:UpdateUser",
        "iam:UploadSSHPublicKey",
        "iam:UploadSigningCertificate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iam:user"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iam:user"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iam:CreatePolicy",
         "iam:CreatePolicyVersion",
         "iam:DeletePolicy",
         "iam:DeletePolicyVersion",
         "iam:GenerateServiceLastAccessedDetails",
         "iam:GetPolicy",
         "iam:GetPolicyVersion",
         "iam:ListEntitiesForPolicy",
         "iam:ListPolicyTags",
         "iam:ListPolicyVersions",
         "iam:SetDefaultPolicyVersion",
         "iam:TagPolicy",
         "iam:UntagPolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iam:CreatePolicy",
        "iam:CreatePolicyVersion",
        "iam:DeletePolicy",
        "iam:DeletePolicyVersion",
        "iam:GenerateServiceLastAccessedDetails",
        "iam:GetPolicy",
        "iam:GetPolicyVersion",
        "iam:ListEntitiesForPolicy",
        "iam:ListPolicyTags",
        "iam:ListPolicyVersions",
        "iam:SetDefaultPolicyVersion",
        "iam:TagPolicy",
        "iam:UntagPolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iam:policy"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iam:policy"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iam:CreateSAMLProvider",
         "iam:DeleteSAMLProvider",
         "iam:GetSAMLProvider",
         "iam:ListSAMLProviderTags",
         "iam:TagSAMLProvider",
         "iam:UntagSAMLProvider",
         "iam:UpdateSAMLProvider"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iam:CreateSAMLProvider",
        "iam:DeleteSAMLProvider",
        "iam:GetSAMLProvider",
        "iam:ListSAMLProviderTags",
        "iam:TagSAMLProvider",
        "iam:UntagSAMLProvider",
        "iam:UpdateSAMLProvider"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iam:saml-provider"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iam:saml-provider"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iam:CreateVirtualMFADevice",
         "iam:DeleteVirtualMFADevice",
         "iam:ListMFADeviceTags",
         "iam:TagMFADevice",
         "iam:UntagMFADevice"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iam:CreateVirtualMFADevice",
        "iam:DeleteVirtualMFADevice",
        "iam:ListMFADeviceTags",
        "iam:TagMFADevice",
        "iam:UntagMFADevice"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iam:mfa"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iam:mfa"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iam:DeleteServerCertificate",
         "iam:GetServerCertificate",
         "iam:ListServerCertificateTags",
         "iam:TagServerCertificate",
         "iam:UntagServerCertificate",
         "iam:UpdateServerCertificate",
         "iam:UploadServerCertificate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iam:DeleteServerCertificate",
        "iam:GetServerCertificate",
        "iam:ListServerCertificateTags",
        "iam:TagServerCertificate",
        "iam:UntagServerCertificate",
        "iam:UpdateServerCertificate",
        "iam:UploadServerCertificate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iam:server-certificate"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iam:server-certificate"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iam:DeleteVirtualMFADevice"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iam:DeleteVirtualMFADevice"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iam:sms-mfa"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iam:sms-mfa"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iam:GenerateOrganizationsAccessReport"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iam:GenerateOrganizationsAccessReport"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iam:access-report"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iam:access-report"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "identity-sync:AllowVendedLogDeliveryForResource",
         "identity-sync:CreateSyncFilter",
         "identity-sync:CreateSyncTarget",
         "identity-sync:DeleteSyncFilter",
         "identity-sync:DeleteSyncProfile",
         "identity-sync:DeleteSyncTarget",
         "identity-sync:GetSyncProfile",
         "identity-sync:GetSyncTarget",
         "identity-sync:ListSyncFilters",
         "identity-sync:StartSync",
         "identity-sync:StopSync",
         "identity-sync:UpdateSyncTarget"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "identity-sync:AllowVendedLogDeliveryForResource",
        "identity-sync:CreateSyncFilter",
        "identity-sync:CreateSyncTarget",
        "identity-sync:DeleteSyncFilter",
        "identity-sync:DeleteSyncProfile",
        "identity-sync:DeleteSyncTarget",
        "identity-sync:GetSyncProfile",
        "identity-sync:GetSyncTarget",
        "identity-sync:ListSyncFilters",
        "identity-sync:StartSync",
        "identity-sync:StopSync",
        "identity-sync:UpdateSyncTarget"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/identity-sync:SyncProfileResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/identity-sync:SyncProfileResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "identity-sync:DeleteSyncTarget",
         "identity-sync:GetSyncTarget",
         "identity-sync:UpdateSyncTarget"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "identity-sync:DeleteSyncTarget",
        "identity-sync:GetSyncTarget",
        "identity-sync:UpdateSyncTarget"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/identity-sync:SyncTargetResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/identity-sync:SyncTargetResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "identitystore:CreateGroup",
         "identitystore:CreateGroupMembership",
         "identitystore:CreateUser",
         "identitystore:DeleteGroup",
         "identitystore:DeleteGroupMembership",
         "identitystore:DeleteUser",
         "identitystore:DescribeGroup",
         "identitystore:DescribeGroupMembership",
         "identitystore:DescribeUser",
         "identitystore:GetGroupId",
         "identitystore:GetGroupMembershipId",
         "identitystore:GetUserId",
         "identitystore:IsMemberInGroups",
         "identitystore:ListGroupMemberships",
         "identitystore:ListGroupMembershipsForMember",
         "identitystore:ListGroups",
         "identitystore:ListUsers",
         "identitystore:UpdateGroup",
         "identitystore:UpdateUser"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "identitystore:CreateGroup",
        "identitystore:CreateGroupMembership",
        "identitystore:CreateUser",
        "identitystore:DeleteGroup",
        "identitystore:DeleteGroupMembership",
        "identitystore:DeleteUser",
        "identitystore:DescribeGroup",
        "identitystore:DescribeGroupMembership",
        "identitystore:DescribeUser",
        "identitystore:GetGroupId",
        "identitystore:GetGroupMembershipId",
        "identitystore:GetUserId",
        "identitystore:IsMemberInGroups",
        "identitystore:ListGroupMemberships",
        "identitystore:ListGroupMembershipsForMember",
        "identitystore:ListGroups",
        "identitystore:ListUsers",
        "identitystore:UpdateGroup",
        "identitystore:UpdateUser"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/identitystore:Identitystore"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/identitystore:Identitystore"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "identitystore:CreateGroupMembership",
         "identitystore:DeleteGroup",
         "identitystore:DeleteGroupMembership",
         "identitystore:DescribeGroup",
         "identitystore:DescribeGroupMembership",
         "identitystore:GetGroupId",
         "identitystore:GetGroupMembershipId",
         "identitystore:IsMemberInGroups",
         "identitystore:ListGroupMemberships",
         "identitystore:UpdateGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "identitystore:CreateGroupMembership",
        "identitystore:DeleteGroup",
        "identitystore:DeleteGroupMembership",
        "identitystore:DescribeGroup",
        "identitystore:DescribeGroupMembership",
        "identitystore:GetGroupId",
        "identitystore:GetGroupMembershipId",
        "identitystore:IsMemberInGroups",
        "identitystore:ListGroupMemberships",
        "identitystore:UpdateGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/identitystore:Group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/identitystore:Group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "identitystore:CreateGroupMembership",
         "identitystore:DeleteGroupMembership",
         "identitystore:DeleteUser",
         "identitystore:DescribeGroupMembership",
         "identitystore:DescribeUser",
         "identitystore:GetGroupMembershipId",
         "identitystore:GetUserId",
         "identitystore:IsMemberInGroups",
         "identitystore:ListGroupMembershipsForMember",
         "identitystore:UpdateUser"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "identitystore:CreateGroupMembership",
        "identitystore:DeleteGroupMembership",
        "identitystore:DeleteUser",
        "identitystore:DescribeGroupMembership",
        "identitystore:DescribeUser",
        "identitystore:GetGroupMembershipId",
        "identitystore:GetUserId",
        "identitystore:IsMemberInGroups",
        "identitystore:ListGroupMembershipsForMember",
        "identitystore:UpdateUser"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/identitystore:User"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/identitystore:User"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "identitystore:DeleteGroupMembership",
         "identitystore:DescribeGroupMembership",
         "identitystore:GetGroupMembershipId"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "identitystore:DeleteGroupMembership",
        "identitystore:DescribeGroupMembership",
        "identitystore:GetGroupMembershipId"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/identitystore:GroupMembership"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/identitystore:GroupMembership"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "identitystore:IsMemberInGroups",
         "identitystore:ListGroupMemberships",
         "identitystore:ListGroupMembershipsForMember"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "identitystore:IsMemberInGroups",
        "identitystore:ListGroupMemberships",
        "identitystore:ListGroupMembershipsForMember"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/identitystore:AllGroupMemberships"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/identitystore:AllGroupMemberships"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "identitystore:ListGroups"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "identitystore:ListGroups"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/identitystore:AllGroups"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/identitystore:AllGroups"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "identitystore:ListUsers"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "identitystore:ListUsers"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/identitystore:AllUsers"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/identitystore:AllUsers"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "imagebuilder:CancelImageCreation",
         "imagebuilder:CreateImage",
         "imagebuilder:DeleteImage",
         "imagebuilder:GetImage",
         "imagebuilder:GetImagePolicy",
         "imagebuilder:ListImagePackages",
         "imagebuilder:ListImageScanFindingAggregations",
         "imagebuilder:ListImageScanFindings",
         "imagebuilder:ListLifecycleExecutions",
         "imagebuilder:ListTagsForResource",
         "imagebuilder:ListWorkflowExecutions",
         "imagebuilder:PutImagePolicy",
         "imagebuilder:SendWorkflowStepAction",
         "imagebuilder:StartResourceStateUpdate",
         "imagebuilder:TagResource",
         "imagebuilder:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "imagebuilder:CancelImageCreation",
        "imagebuilder:CreateImage",
        "imagebuilder:DeleteImage",
        "imagebuilder:GetImage",
        "imagebuilder:GetImagePolicy",
        "imagebuilder:ListImagePackages",
        "imagebuilder:ListImageScanFindingAggregations",
        "imagebuilder:ListImageScanFindings",
        "imagebuilder:ListLifecycleExecutions",
        "imagebuilder:ListTagsForResource",
        "imagebuilder:ListWorkflowExecutions",
        "imagebuilder:PutImagePolicy",
        "imagebuilder:SendWorkflowStepAction",
        "imagebuilder:StartResourceStateUpdate",
        "imagebuilder:TagResource",
        "imagebuilder:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/imagebuilder:image"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/imagebuilder:image"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "imagebuilder:CancelLifecycleExecution",
         "imagebuilder:GetLifecycleExecution",
         "imagebuilder:ListLifecycleExecutionResources"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "imagebuilder:CancelLifecycleExecution",
        "imagebuilder:GetLifecycleExecution",
        "imagebuilder:ListLifecycleExecutionResources"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/imagebuilder:lifecycleExecution"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/imagebuilder:lifecycleExecution"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "imagebuilder:CreateComponent",
         "imagebuilder:DeleteComponent",
         "imagebuilder:GetComponent",
         "imagebuilder:GetComponentPolicy",
         "imagebuilder:GetMarketplaceResource",
         "imagebuilder:ImportComponent",
         "imagebuilder:ListTagsForResource",
         "imagebuilder:PutComponentPolicy",
         "imagebuilder:TagResource",
         "imagebuilder:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "imagebuilder:CreateComponent",
        "imagebuilder:DeleteComponent",
        "imagebuilder:GetComponent",
        "imagebuilder:GetComponentPolicy",
        "imagebuilder:GetMarketplaceResource",
        "imagebuilder:ImportComponent",
        "imagebuilder:ListTagsForResource",
        "imagebuilder:PutComponentPolicy",
        "imagebuilder:TagResource",
        "imagebuilder:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/imagebuilder:component"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/imagebuilder:component"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "imagebuilder:CreateContainerRecipe",
         "imagebuilder:DeleteContainerRecipe",
         "imagebuilder:GetContainerRecipe",
         "imagebuilder:GetContainerRecipePolicy",
         "imagebuilder:ListTagsForResource",
         "imagebuilder:PutContainerRecipePolicy",
         "imagebuilder:TagResource",
         "imagebuilder:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "imagebuilder:CreateContainerRecipe",
        "imagebuilder:DeleteContainerRecipe",
        "imagebuilder:GetContainerRecipe",
        "imagebuilder:GetContainerRecipePolicy",
        "imagebuilder:ListTagsForResource",
        "imagebuilder:PutContainerRecipePolicy",
        "imagebuilder:TagResource",
        "imagebuilder:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/imagebuilder:containerRecipe"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/imagebuilder:containerRecipe"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "imagebuilder:CreateDistributionConfiguration",
         "imagebuilder:DeleteDistributionConfiguration",
         "imagebuilder:GetDistributionConfiguration",
         "imagebuilder:ListTagsForResource",
         "imagebuilder:TagResource",
         "imagebuilder:UntagResource",
         "imagebuilder:UpdateDistributionConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "imagebuilder:CreateDistributionConfiguration",
        "imagebuilder:DeleteDistributionConfiguration",
        "imagebuilder:GetDistributionConfiguration",
        "imagebuilder:ListTagsForResource",
        "imagebuilder:TagResource",
        "imagebuilder:UntagResource",
        "imagebuilder:UpdateDistributionConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/imagebuilder:distributionConfiguration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/imagebuilder:distributionConfiguration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "imagebuilder:CreateImagePipeline",
         "imagebuilder:DeleteImagePipeline",
         "imagebuilder:GetImagePipeline",
         "imagebuilder:ListImagePipelineImages",
         "imagebuilder:ListImageScanFindingAggregations",
         "imagebuilder:ListImageScanFindings",
         "imagebuilder:ListTagsForResource",
         "imagebuilder:StartImagePipelineExecution",
         "imagebuilder:TagResource",
         "imagebuilder:UntagResource",
         "imagebuilder:UpdateImagePipeline"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "imagebuilder:CreateImagePipeline",
        "imagebuilder:DeleteImagePipeline",
        "imagebuilder:GetImagePipeline",
        "imagebuilder:ListImagePipelineImages",
        "imagebuilder:ListImageScanFindingAggregations",
        "imagebuilder:ListImageScanFindings",
        "imagebuilder:ListTagsForResource",
        "imagebuilder:StartImagePipelineExecution",
        "imagebuilder:TagResource",
        "imagebuilder:UntagResource",
        "imagebuilder:UpdateImagePipeline"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/imagebuilder:imagePipeline"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/imagebuilder:imagePipeline"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "imagebuilder:CreateImageRecipe",
         "imagebuilder:DeleteImageRecipe",
         "imagebuilder:GetImageRecipe",
         "imagebuilder:GetImageRecipePolicy",
         "imagebuilder:ListTagsForResource",
         "imagebuilder:PutImageRecipePolicy",
         "imagebuilder:TagResource",
         "imagebuilder:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "imagebuilder:CreateImageRecipe",
        "imagebuilder:DeleteImageRecipe",
        "imagebuilder:GetImageRecipe",
        "imagebuilder:GetImageRecipePolicy",
        "imagebuilder:ListTagsForResource",
        "imagebuilder:PutImageRecipePolicy",
        "imagebuilder:TagResource",
        "imagebuilder:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/imagebuilder:imageRecipe"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/imagebuilder:imageRecipe"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "imagebuilder:CreateInfrastructureConfiguration",
         "imagebuilder:DeleteInfrastructureConfiguration",
         "imagebuilder:GetInfrastructureConfiguration",
         "imagebuilder:ListTagsForResource",
         "imagebuilder:TagResource",
         "imagebuilder:UntagResource",
         "imagebuilder:UpdateInfrastructureConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "imagebuilder:CreateInfrastructureConfiguration",
        "imagebuilder:DeleteInfrastructureConfiguration",
        "imagebuilder:GetInfrastructureConfiguration",
        "imagebuilder:ListTagsForResource",
        "imagebuilder:TagResource",
        "imagebuilder:UntagResource",
        "imagebuilder:UpdateInfrastructureConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/imagebuilder:infrastructureConfiguration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/imagebuilder:infrastructureConfiguration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "imagebuilder:CreateLifecyclePolicy",
         "imagebuilder:DeleteLifecyclePolicy",
         "imagebuilder:GetLifecyclePolicy",
         "imagebuilder:ListLifecycleExecutions",
         "imagebuilder:ListTagsForResource",
         "imagebuilder:TagResource",
         "imagebuilder:UntagResource",
         "imagebuilder:UpdateLifecyclePolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "imagebuilder:CreateLifecyclePolicy",
        "imagebuilder:DeleteLifecyclePolicy",
        "imagebuilder:GetLifecyclePolicy",
        "imagebuilder:ListLifecycleExecutions",
        "imagebuilder:ListTagsForResource",
        "imagebuilder:TagResource",
        "imagebuilder:UntagResource",
        "imagebuilder:UpdateLifecyclePolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/imagebuilder:lifecyclePolicy"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/imagebuilder:lifecyclePolicy"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "imagebuilder:CreateWorkflow",
         "imagebuilder:DeleteWorkflow",
         "imagebuilder:GetWorkflow",
         "imagebuilder:ListTagsForResource",
         "imagebuilder:TagResource",
         "imagebuilder:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "imagebuilder:CreateWorkflow",
        "imagebuilder:DeleteWorkflow",
        "imagebuilder:GetWorkflow",
        "imagebuilder:ListTagsForResource",
        "imagebuilder:TagResource",
        "imagebuilder:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/imagebuilder:workflow"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/imagebuilder:workflow"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "imagebuilder:GetWorkflowExecution",
         "imagebuilder:ListWorkflowStepExecutions"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "imagebuilder:GetWorkflowExecution",
        "imagebuilder:ListWorkflowStepExecutions"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/imagebuilder:workflowExecution"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/imagebuilder:workflowExecution"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "imagebuilder:GetWorkflowStepExecution",
         "imagebuilder:SendWorkflowStepAction"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "imagebuilder:GetWorkflowStepExecution",
        "imagebuilder:SendWorkflowStepAction"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/imagebuilder:workflowStepExecution"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/imagebuilder:workflowStepExecution"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "imagebuilder:ImportDiskImage",
         "imagebuilder:ImportVmImage",
         "imagebuilder:ListImageBuildVersions"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "imagebuilder:ImportDiskImage",
        "imagebuilder:ImportVmImage",
        "imagebuilder:ListImageBuildVersions"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/imagebuilder:imageVersion"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/imagebuilder:imageVersion"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "imagebuilder:ListComponentBuildVersions"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "imagebuilder:ListComponentBuildVersions"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/imagebuilder:componentVersion"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/imagebuilder:componentVersion"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "imagebuilder:ListWorkflowBuildVersions"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "imagebuilder:ListWorkflowBuildVersions"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/imagebuilder:workflowVersion"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/imagebuilder:workflowVersion"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "inspector2:CreateCisScanConfiguration",
         "inspector2:DeleteCisScanConfiguration",
         "inspector2:TagResource",
         "inspector2:UntagResource",
         "inspector2:UpdateCisScanConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "inspector2:CreateCisScanConfiguration",
        "inspector2:DeleteCisScanConfiguration",
        "inspector2:TagResource",
        "inspector2:UntagResource",
        "inspector2:UpdateCisScanConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/inspector2:CIS Scan Configuration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/inspector2:CIS Scan Configuration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "inspector2:CreateFilter",
         "inspector2:DeleteFilter",
         "inspector2:TagResource",
         "inspector2:UntagResource",
         "inspector2:UpdateFilter"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "inspector2:CreateFilter",
        "inspector2:DeleteFilter",
        "inspector2:TagResource",
        "inspector2:UntagResource",
        "inspector2:UpdateFilter"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/inspector2:Filter"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/inspector2:Filter"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "internetmonitor:CreateMonitor",
         "internetmonitor:DeleteMonitor",
         "internetmonitor:GetHealthEvent",
         "internetmonitor:GetMonitor",
         "internetmonitor:GetQueryResults",
         "internetmonitor:GetQueryStatus",
         "internetmonitor:ListHealthEvents",
         "internetmonitor:ListTagsForResource",
         "internetmonitor:StartQuery",
         "internetmonitor:StopQuery",
         "internetmonitor:TagResource",
         "internetmonitor:UntagResource",
         "internetmonitor:UpdateMonitor"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "internetmonitor:CreateMonitor",
        "internetmonitor:DeleteMonitor",
        "internetmonitor:GetHealthEvent",
        "internetmonitor:GetMonitor",
        "internetmonitor:GetQueryResults",
        "internetmonitor:GetQueryStatus",
        "internetmonitor:ListHealthEvents",
        "internetmonitor:ListTagsForResource",
        "internetmonitor:StartQuery",
        "internetmonitor:StopQuery",
        "internetmonitor:TagResource",
        "internetmonitor:UntagResource",
        "internetmonitor:UpdateMonitor"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/internetmonitor:Monitor"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/internetmonitor:Monitor"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "internetmonitor:GetInternetEvent"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "internetmonitor:GetInternetEvent"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/internetmonitor:InternetEvent"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/internetmonitor:InternetEvent"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "invoicing:DeleteInvoiceUnit",
         "invoicing:GetInvoiceUnit",
         "invoicing:ListTagsForResource",
         "invoicing:TagResource",
         "invoicing:UntagResource",
         "invoicing:UpdateInvoiceUnit"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "invoicing:DeleteInvoiceUnit",
        "invoicing:GetInvoiceUnit",
        "invoicing:ListTagsForResource",
        "invoicing:TagResource",
        "invoicing:UntagResource",
        "invoicing:UpdateInvoiceUnit"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/invoicing:invoice-unit"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/invoicing:invoice-unit"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:AcceptCertificateTransfer",
         "iot:AttachPolicy",
         "iot:AttachPrincipalPolicy",
         "iot:CancelCertificateTransfer",
         "iot:DeleteCertificate",
         "iot:DescribeCertificate",
         "iot:DetachPolicy",
         "iot:DetachPrincipalPolicy",
         "iot:GetEffectivePolicies",
         "iot:RejectCertificateTransfer",
         "iot:TestAuthorization",
         "iot:TransferCertificate",
         "iot:UpdateCertificate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:AcceptCertificateTransfer",
        "iot:AttachPolicy",
        "iot:AttachPrincipalPolicy",
        "iot:CancelCertificateTransfer",
        "iot:DeleteCertificate",
        "iot:DescribeCertificate",
        "iot:DetachPolicy",
        "iot:DetachPrincipalPolicy",
        "iot:GetEffectivePolicies",
        "iot:RejectCertificateTransfer",
        "iot:TestAuthorization",
        "iot:TransferCertificate",
        "iot:UpdateCertificate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:cert"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:cert"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:AddThingToBillingGroup",
         "iot:CreateBillingGroup",
         "iot:CreateThing",
         "iot:DeleteBillingGroup",
         "iot:DescribeBillingGroup",
         "iot:ListTagsForResource",
         "iot:ListThingsInBillingGroup",
         "iot:RemoveThingFromBillingGroup",
         "iot:TagResource",
         "iot:UntagResource",
         "iot:UpdateBillingGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:AddThingToBillingGroup",
        "iot:CreateBillingGroup",
        "iot:CreateThing",
        "iot:DeleteBillingGroup",
        "iot:DescribeBillingGroup",
        "iot:ListTagsForResource",
        "iot:ListThingsInBillingGroup",
        "iot:RemoveThingFromBillingGroup",
        "iot:TagResource",
        "iot:UntagResource",
        "iot:UpdateBillingGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:billinggroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:billinggroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:AddThingToBillingGroup",
         "iot:AddThingToThingGroup",
         "iot:AssociateTargetsWithJob",
         "iot:CancelJobExecution",
         "iot:CreateJob",
         "iot:CreateThing",
         "iot:DeleteCommandExecution",
         "iot:DeleteJobExecution",
         "iot:DeleteThing",
         "iot:DeleteThingShadow",
         "iot:DescribeJobExecution",
         "iot:DescribeThing",
         "iot:GetCommandExecution",
         "iot:GetThingConnectivityData",
         "iot:GetThingShadow",
         "iot:ListActiveViolations",
         "iot:ListCommandExecutions",
         "iot:ListDetectMitigationActionsExecutions",
         "iot:ListJobExecutionsForThing",
         "iot:ListMetricValues",
         "iot:ListNamedShadowsForThing",
         "iot:ListThingGroupsForThing",
         "iot:ListViolationEvents",
         "iot:RemoveThingFromBillingGroup",
         "iot:RemoveThingFromThingGroup",
         "iot:StartCommandExecution",
         "iot:UpdateThing",
         "iot:UpdateThingGroupsForThing",
         "iot:UpdateThingShadow"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:AddThingToBillingGroup",
        "iot:AddThingToThingGroup",
        "iot:AssociateTargetsWithJob",
        "iot:CancelJobExecution",
        "iot:CreateJob",
        "iot:CreateThing",
        "iot:DeleteCommandExecution",
        "iot:DeleteJobExecution",
        "iot:DeleteThing",
        "iot:DeleteThingShadow",
        "iot:DescribeJobExecution",
        "iot:DescribeThing",
        "iot:GetCommandExecution",
        "iot:GetThingConnectivityData",
        "iot:GetThingShadow",
        "iot:ListActiveViolations",
        "iot:ListCommandExecutions",
        "iot:ListDetectMitigationActionsExecutions",
        "iot:ListJobExecutionsForThing",
        "iot:ListMetricValues",
        "iot:ListNamedShadowsForThing",
        "iot:ListThingGroupsForThing",
        "iot:ListViolationEvents",
        "iot:RemoveThingFromBillingGroup",
        "iot:RemoveThingFromThingGroup",
        "iot:StartCommandExecution",
        "iot:UpdateThing",
        "iot:UpdateThingGroupsForThing",
        "iot:UpdateThingShadow"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:thing"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:thing"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:AddThingToThingGroup",
         "iot:AssociateTargetsWithJob",
         "iot:AttachPolicy",
         "iot:AttachSecurityProfile",
         "iot:CreateJob",
         "iot:CreateThingGroup",
         "iot:DeleteThingGroup",
         "iot:DescribeThingGroup",
         "iot:DetachPolicy",
         "iot:DetachSecurityProfile",
         "iot:ListSecurityProfilesForTarget",
         "iot:ListTagsForResource",
         "iot:ListThingsInThingGroup",
         "iot:RemoveThingFromThingGroup",
         "iot:TagResource",
         "iot:UntagResource",
         "iot:UpdateThingGroup",
         "iot:UpdateThingGroupsForThing"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:AddThingToThingGroup",
        "iot:AssociateTargetsWithJob",
        "iot:AttachPolicy",
        "iot:AttachSecurityProfile",
        "iot:CreateJob",
        "iot:CreateThingGroup",
        "iot:DeleteThingGroup",
        "iot:DescribeThingGroup",
        "iot:DetachPolicy",
        "iot:DetachSecurityProfile",
        "iot:ListSecurityProfilesForTarget",
        "iot:ListTagsForResource",
        "iot:ListThingsInThingGroup",
        "iot:RemoveThingFromThingGroup",
        "iot:TagResource",
        "iot:UntagResource",
        "iot:UpdateThingGroup",
        "iot:UpdateThingGroupsForThing"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:thinggroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:thinggroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:AssociateSbomWithPackageVersion",
         "iot:CreateJob",
         "iot:CreateJobTemplate",
         "iot:CreatePackageVersion",
         "iot:DeletePackageVersion",
         "iot:DisassociateSbomFromPackageVersion",
         "iot:GetPackageVersion",
         "iot:ListSbomValidationResults",
         "iot:TagResource",
         "iot:UntagResource",
         "iot:UpdatePackageVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:AssociateSbomWithPackageVersion",
        "iot:CreateJob",
        "iot:CreateJobTemplate",
        "iot:CreatePackageVersion",
        "iot:DeletePackageVersion",
        "iot:DisassociateSbomFromPackageVersion",
        "iot:GetPackageVersion",
        "iot:ListSbomValidationResults",
        "iot:TagResource",
        "iot:UntagResource",
        "iot:UpdatePackageVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:packageversion"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:packageversion"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:AssociateTargetsWithJob",
         "iot:CancelJob",
         "iot:CancelJobExecution",
         "iot:CreateJob",
         "iot:CreateJobTemplate",
         "iot:DeleteJob",
         "iot:DeleteJobExecution",
         "iot:DescribeJob",
         "iot:DescribeJobExecution",
         "iot:GetJobDocument",
         "iot:ListJobExecutionsForJob",
         "iot:ListTagsForResource",
         "iot:TagResource",
         "iot:UntagResource",
         "iot:UpdateJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:AssociateTargetsWithJob",
        "iot:CancelJob",
        "iot:CancelJobExecution",
        "iot:CreateJob",
        "iot:CreateJobTemplate",
        "iot:DeleteJob",
        "iot:DeleteJobExecution",
        "iot:DescribeJob",
        "iot:DescribeJobExecution",
        "iot:GetJobDocument",
        "iot:ListJobExecutionsForJob",
        "iot:ListTagsForResource",
        "iot:TagResource",
        "iot:UntagResource",
        "iot:UpdateJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:AttachSecurityProfile",
         "iot:CreateCustomMetric",
         "iot:CreateSecurityProfile",
         "iot:DeleteCustomMetric",
         "iot:DeleteSecurityProfile",
         "iot:DescribeCustomMetric",
         "iot:DetachSecurityProfile",
         "iot:ListSecurityProfiles",
         "iot:ListTagsForResource",
         "iot:TagResource",
         "iot:UntagResource",
         "iot:UpdateCustomMetric",
         "iot:UpdateSecurityProfile"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:AttachSecurityProfile",
        "iot:CreateCustomMetric",
        "iot:CreateSecurityProfile",
        "iot:DeleteCustomMetric",
        "iot:DeleteSecurityProfile",
        "iot:DescribeCustomMetric",
        "iot:DetachSecurityProfile",
        "iot:ListSecurityProfiles",
        "iot:ListTagsForResource",
        "iot:TagResource",
        "iot:UntagResource",
        "iot:UpdateCustomMetric",
        "iot:UpdateSecurityProfile"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:custommetric"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:custommetric"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:AttachSecurityProfile",
         "iot:CreateDimension",
         "iot:CreateSecurityProfile",
         "iot:DeleteDimension",
         "iot:DeleteSecurityProfile",
         "iot:DescribeDimension",
         "iot:DetachSecurityProfile",
         "iot:ListSecurityProfiles",
         "iot:ListTagsForResource",
         "iot:TagResource",
         "iot:UntagResource",
         "iot:UpdateDimension",
         "iot:UpdateSecurityProfile"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:AttachSecurityProfile",
        "iot:CreateDimension",
        "iot:CreateSecurityProfile",
        "iot:DeleteDimension",
        "iot:DeleteSecurityProfile",
        "iot:DescribeDimension",
        "iot:DetachSecurityProfile",
        "iot:ListSecurityProfiles",
        "iot:ListTagsForResource",
        "iot:TagResource",
        "iot:UntagResource",
        "iot:UpdateDimension",
        "iot:UpdateSecurityProfile"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:dimension"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:dimension"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:AttachSecurityProfile",
         "iot:CreateSecurityProfile",
         "iot:DeleteSecurityProfile",
         "iot:DescribeSecurityProfile",
         "iot:DetachSecurityProfile",
         "iot:GetBehaviorModelTrainingSummaries",
         "iot:ListActiveViolations",
         "iot:ListTagsForResource",
         "iot:ListTargetsForSecurityProfile",
         "iot:ListViolationEvents",
         "iot:StartDetectMitigationActionsTask",
         "iot:TagResource",
         "iot:UntagResource",
         "iot:UpdateSecurityProfile"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:AttachSecurityProfile",
        "iot:CreateSecurityProfile",
        "iot:DeleteSecurityProfile",
        "iot:DescribeSecurityProfile",
        "iot:DetachSecurityProfile",
        "iot:GetBehaviorModelTrainingSummaries",
        "iot:ListActiveViolations",
        "iot:ListTagsForResource",
        "iot:ListTargetsForSecurityProfile",
        "iot:ListViolationEvents",
        "iot:StartDetectMitigationActionsTask",
        "iot:TagResource",
        "iot:UntagResource",
        "iot:UpdateSecurityProfile"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:securityprofile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:securityprofile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:CloseTunnel",
         "iot:DescribeTunnel",
         "iot:RotateTunnelAccessToken"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:CloseTunnel",
        "iot:DescribeTunnel",
        "iot:RotateTunnelAccessToken"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:tunnel"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:tunnel"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:ConfirmTopicRuleDestination",
         "iot:DeleteTopicRuleDestination",
         "iot:GetTopicRuleDestination",
         "iot:UpdateTopicRuleDestination"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:ConfirmTopicRuleDestination",
        "iot:DeleteTopicRuleDestination",
        "iot:GetTopicRuleDestination",
        "iot:UpdateTopicRuleDestination"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:destination"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:destination"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:Connect",
         "iot:DeleteCommandExecution",
         "iot:GetCommandExecution",
         "iot:ListCommandExecutions",
         "iot:StartCommandExecution"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:Connect",
        "iot:DeleteCommandExecution",
        "iot:GetCommandExecution",
        "iot:ListCommandExecutions",
        "iot:StartCommandExecution"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:client"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:client"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:CreateAuthorizer",
         "iot:DeleteAuthorizer",
         "iot:DescribeAuthorizer",
         "iot:ListTagsForResource",
         "iot:SetDefaultAuthorizer",
         "iot:TagResource",
         "iot:TestInvokeAuthorizer",
         "iot:UntagResource",
         "iot:UpdateAuthorizer"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:CreateAuthorizer",
        "iot:DeleteAuthorizer",
        "iot:DescribeAuthorizer",
        "iot:ListTagsForResource",
        "iot:SetDefaultAuthorizer",
        "iot:TagResource",
        "iot:TestInvokeAuthorizer",
        "iot:UntagResource",
        "iot:UpdateAuthorizer"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:authorizer"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:authorizer"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:CreateCertificateProvider",
         "iot:DeleteCertificateProvider",
         "iot:DescribeCertificateProvider",
         "iot:ListTagsForResource",
         "iot:TagResource",
         "iot:UntagResource",
         "iot:UpdateCertificateProvider"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:CreateCertificateProvider",
        "iot:DeleteCertificateProvider",
        "iot:DescribeCertificateProvider",
        "iot:ListTagsForResource",
        "iot:TagResource",
        "iot:UntagResource",
        "iot:UpdateCertificateProvider"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:certificateprovider"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:certificateprovider"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:CreateCommand",
         "iot:DeleteCommand",
         "iot:GetCommand",
         "iot:ListCommandExecutions",
         "iot:ListTagsForResource",
         "iot:StartCommandExecution",
         "iot:TagResource",
         "iot:UntagResource",
         "iot:UpdateCommand"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:CreateCommand",
        "iot:DeleteCommand",
        "iot:GetCommand",
        "iot:ListCommandExecutions",
        "iot:ListTagsForResource",
        "iot:StartCommandExecution",
        "iot:TagResource",
        "iot:UntagResource",
        "iot:UpdateCommand"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:command"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:command"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:CreateDomainConfiguration",
         "iot:DeleteDomainConfiguration",
         "iot:DescribeDomainConfiguration",
         "iot:ListTagsForResource",
         "iot:TagResource",
         "iot:UntagResource",
         "iot:UpdateDomainConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:CreateDomainConfiguration",
        "iot:DeleteDomainConfiguration",
        "iot:DescribeDomainConfiguration",
        "iot:ListTagsForResource",
        "iot:TagResource",
        "iot:UntagResource",
        "iot:UpdateDomainConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:domainconfiguration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:domainconfiguration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:CreateDynamicThingGroup",
         "iot:DeleteDynamicThingGroup",
         "iot:ListTagsForResource",
         "iot:TagResource",
         "iot:UntagResource",
         "iot:UpdateDynamicThingGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:CreateDynamicThingGroup",
        "iot:DeleteDynamicThingGroup",
        "iot:ListTagsForResource",
        "iot:TagResource",
        "iot:UntagResource",
        "iot:UpdateDynamicThingGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:dynamicthinggroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:dynamicthinggroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:CreateFleetMetric",
         "iot:DeleteFleetMetric",
         "iot:DescribeFleetMetric",
         "iot:ListTagsForResource",
         "iot:TagResource",
         "iot:UntagResource",
         "iot:UpdateFleetMetric"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:CreateFleetMetric",
        "iot:DeleteFleetMetric",
        "iot:DescribeFleetMetric",
        "iot:ListTagsForResource",
        "iot:TagResource",
        "iot:UntagResource",
        "iot:UpdateFleetMetric"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:fleetmetric"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:fleetmetric"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:CreateFleetMetric",
         "iot:DescribeIndex",
         "iot:GetBucketsAggregation",
         "iot:GetCardinality",
         "iot:GetPercentiles",
         "iot:GetStatistics",
         "iot:SearchIndex",
         "iot:UpdateFleetMetric"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:CreateFleetMetric",
        "iot:DescribeIndex",
        "iot:GetBucketsAggregation",
        "iot:GetCardinality",
        "iot:GetPercentiles",
        "iot:GetStatistics",
        "iot:SearchIndex",
        "iot:UpdateFleetMetric"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:index"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:index"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:CreateJob",
         "iot:CreateJobTemplate",
         "iot:DeleteJobTemplate",
         "iot:DescribeJobTemplate",
         "iot:DescribeManagedJobTemplate",
         "iot:ListTagsForResource",
         "iot:TagResource",
         "iot:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:CreateJob",
        "iot:CreateJobTemplate",
        "iot:DeleteJobTemplate",
        "iot:DescribeJobTemplate",
        "iot:DescribeManagedJobTemplate",
        "iot:ListTagsForResource",
        "iot:TagResource",
        "iot:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:jobtemplate"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:jobtemplate"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:CreateJob",
         "iot:CreateJobTemplate",
         "iot:CreatePackage",
         "iot:CreatePackageVersion",
         "iot:DeletePackage",
         "iot:DeletePackageVersion",
         "iot:GetPackage",
         "iot:GetPackageVersion",
         "iot:TagResource",
         "iot:UntagResource",
         "iot:UpdatePackage",
         "iot:UpdatePackageVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:CreateJob",
        "iot:CreateJobTemplate",
        "iot:CreatePackage",
        "iot:CreatePackageVersion",
        "iot:DeletePackage",
        "iot:DeletePackageVersion",
        "iot:GetPackage",
        "iot:GetPackageVersion",
        "iot:TagResource",
        "iot:UntagResource",
        "iot:UpdatePackage",
        "iot:UpdatePackageVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:package"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:package"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:CreateMitigationAction",
         "iot:DeleteMitigationAction",
         "iot:DescribeMitigationAction",
         "iot:ListTagsForResource",
         "iot:TagResource",
         "iot:UntagResource",
         "iot:UpdateMitigationAction"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:CreateMitigationAction",
        "iot:DeleteMitigationAction",
        "iot:DescribeMitigationAction",
        "iot:ListTagsForResource",
        "iot:TagResource",
        "iot:UntagResource",
        "iot:UpdateMitigationAction"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:mitigationaction"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:mitigationaction"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:CreateOTAUpdate",
         "iot:DeleteOTAUpdate",
         "iot:GetOTAUpdate",
         "iot:ListTagsForResource",
         "iot:TagResource",
         "iot:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:CreateOTAUpdate",
        "iot:DeleteOTAUpdate",
        "iot:GetOTAUpdate",
        "iot:ListTagsForResource",
        "iot:TagResource",
        "iot:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:otaupdate"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:otaupdate"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:CreatePolicy",
         "iot:CreatePolicyVersion",
         "iot:DeletePolicy",
         "iot:DeletePolicyVersion",
         "iot:GetPolicy",
         "iot:GetPolicyVersion",
         "iot:ListPolicyVersions",
         "iot:ListTagsForResource",
         "iot:ListTargetsForPolicy",
         "iot:SetDefaultPolicyVersion",
         "iot:TagResource",
         "iot:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:CreatePolicy",
        "iot:CreatePolicyVersion",
        "iot:DeletePolicy",
        "iot:DeletePolicyVersion",
        "iot:GetPolicy",
        "iot:GetPolicyVersion",
        "iot:ListPolicyVersions",
        "iot:ListTagsForResource",
        "iot:ListTargetsForPolicy",
        "iot:SetDefaultPolicyVersion",
        "iot:TagResource",
        "iot:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:policy"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:policy"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:CreateProvisioningClaim",
         "iot:CreateProvisioningTemplate",
         "iot:CreateProvisioningTemplateVersion",
         "iot:DeleteProvisioningTemplate",
         "iot:DeleteProvisioningTemplateVersion",
         "iot:DescribeProvisioningTemplate",
         "iot:DescribeProvisioningTemplateVersion",
         "iot:ListProvisioningTemplateVersions",
         "iot:ListTagsForResource",
         "iot:TagResource",
         "iot:UntagResource",
         "iot:UpdateProvisioningTemplate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:CreateProvisioningClaim",
        "iot:CreateProvisioningTemplate",
        "iot:CreateProvisioningTemplateVersion",
        "iot:DeleteProvisioningTemplate",
        "iot:DeleteProvisioningTemplateVersion",
        "iot:DescribeProvisioningTemplate",
        "iot:DescribeProvisioningTemplateVersion",
        "iot:ListProvisioningTemplateVersions",
        "iot:ListTagsForResource",
        "iot:TagResource",
        "iot:UntagResource",
        "iot:UpdateProvisioningTemplate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:provisioningtemplate"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:provisioningtemplate"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:CreateRoleAlias",
         "iot:DeleteRoleAlias",
         "iot:DescribeRoleAlias",
         "iot:ListTagsForResource",
         "iot:TagResource",
         "iot:UntagResource",
         "iot:UpdateRoleAlias"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:CreateRoleAlias",
        "iot:DeleteRoleAlias",
        "iot:DescribeRoleAlias",
        "iot:ListTagsForResource",
        "iot:TagResource",
        "iot:UntagResource",
        "iot:UpdateRoleAlias"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:rolealias"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:rolealias"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:CreateScheduledAudit",
         "iot:DeleteScheduledAudit",
         "iot:DescribeScheduledAudit",
         "iot:ListTagsForResource",
         "iot:TagResource",
         "iot:UntagResource",
         "iot:UpdateScheduledAudit"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:CreateScheduledAudit",
        "iot:DeleteScheduledAudit",
        "iot:DescribeScheduledAudit",
        "iot:ListTagsForResource",
        "iot:TagResource",
        "iot:UntagResource",
        "iot:UpdateScheduledAudit"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:scheduledaudit"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:scheduledaudit"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:CreateStream",
         "iot:DeleteStream",
         "iot:DescribeStream",
         "iot:ListTagsForResource",
         "iot:TagResource",
         "iot:UntagResource",
         "iot:UpdateStream"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:CreateStream",
        "iot:DeleteStream",
        "iot:DescribeStream",
        "iot:ListTagsForResource",
        "iot:TagResource",
        "iot:UntagResource",
        "iot:UpdateStream"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:stream"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:stream"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:CreateThingType",
         "iot:DeleteThingType",
         "iot:DeprecateThingType",
         "iot:DescribeThingType",
         "iot:ListTagsForResource",
         "iot:TagResource",
         "iot:UntagResource",
         "iot:UpdateThingType"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:CreateThingType",
        "iot:DeleteThingType",
        "iot:DeprecateThingType",
        "iot:DescribeThingType",
        "iot:ListTagsForResource",
        "iot:TagResource",
        "iot:UntagResource",
        "iot:UpdateThingType"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:thingtype"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:thingtype"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:CreateTopicRule",
         "iot:DeleteTopicRule",
         "iot:DisableTopicRule",
         "iot:EnableTopicRule",
         "iot:GetTopicRule",
         "iot:ListTagsForResource",
         "iot:ReplaceTopicRule",
         "iot:TagResource",
         "iot:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:CreateTopicRule",
        "iot:DeleteTopicRule",
        "iot:DisableTopicRule",
        "iot:EnableTopicRule",
        "iot:GetTopicRule",
        "iot:ListTagsForResource",
        "iot:ReplaceTopicRule",
        "iot:TagResource",
        "iot:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:rule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:rule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:DeleteCACertificate",
         "iot:DescribeCACertificate",
         "iot:ListTagsForResource",
         "iot:TagResource",
         "iot:UntagResource",
         "iot:UpdateCACertificate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:DeleteCACertificate",
        "iot:DescribeCACertificate",
        "iot:ListTagsForResource",
        "iot:TagResource",
        "iot:UntagResource",
        "iot:UpdateCACertificate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:cacert"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:cacert"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:GetRetainedMessage",
         "iot:Publish",
         "iot:Receive",
         "iot:RetainPublish"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:GetRetainedMessage",
        "iot:Publish",
        "iot:Receive",
        "iot:RetainPublish"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:topic"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:topic"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot:Subscribe"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot:Subscribe"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot:topicfilter"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot:topicfilter"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot1click:AssociateDeviceWithPlacement",
         "iot1click:CreatePlacement",
         "iot1click:CreateProject",
         "iot1click:DeletePlacement",
         "iot1click:DeleteProject",
         "iot1click:DescribePlacement",
         "iot1click:DescribeProject",
         "iot1click:DisassociateDeviceFromPlacement",
         "iot1click:GetDevicesInPlacement",
         "iot1click:ListPlacements",
         "iot1click:ListTagsForResource",
         "iot1click:TagResource",
         "iot1click:UntagResource",
         "iot1click:UpdatePlacement",
         "iot1click:UpdateProject"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot1click:AssociateDeviceWithPlacement",
        "iot1click:CreatePlacement",
        "iot1click:CreateProject",
        "iot1click:DeletePlacement",
        "iot1click:DeleteProject",
        "iot1click:DescribePlacement",
        "iot1click:DescribeProject",
        "iot1click:DisassociateDeviceFromPlacement",
        "iot1click:GetDevicesInPlacement",
        "iot1click:ListPlacements",
        "iot1click:ListTagsForResource",
        "iot1click:TagResource",
        "iot1click:UntagResource",
        "iot1click:UpdatePlacement",
        "iot1click:UpdateProject"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot1click:project"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot1click:project"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iot1click:DescribeDevice",
         "iot1click:FinalizeDeviceClaim",
         "iot1click:GetDeviceMethods",
         "iot1click:InitiateDeviceClaim",
         "iot1click:InvokeDeviceMethod",
         "iot1click:ListDeviceEvents",
         "iot1click:ListTagsForResource",
         "iot1click:TagResource",
         "iot1click:UnclaimDevice",
         "iot1click:UntagResource",
         "iot1click:UpdateDeviceState"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iot1click:DescribeDevice",
        "iot1click:FinalizeDeviceClaim",
        "iot1click:GetDeviceMethods",
        "iot1click:InitiateDeviceClaim",
        "iot1click:InvokeDeviceMethod",
        "iot1click:ListDeviceEvents",
        "iot1click:ListTagsForResource",
        "iot1click:TagResource",
        "iot1click:UnclaimDevice",
        "iot1click:UntagResource",
        "iot1click:UpdateDeviceState"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iot1click:device"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iot1click:device"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotanalytics:BatchPutMessage",
         "iotanalytics:CreateChannel",
         "iotanalytics:DeleteChannel",
         "iotanalytics:DescribeChannel",
         "iotanalytics:ListTagsForResource",
         "iotanalytics:SampleChannelData",
         "iotanalytics:TagResource",
         "iotanalytics:UntagResource",
         "iotanalytics:UpdateChannel"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotanalytics:BatchPutMessage",
        "iotanalytics:CreateChannel",
        "iotanalytics:DeleteChannel",
        "iotanalytics:DescribeChannel",
        "iotanalytics:ListTagsForResource",
        "iotanalytics:SampleChannelData",
        "iotanalytics:TagResource",
        "iotanalytics:UntagResource",
        "iotanalytics:UpdateChannel"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotanalytics:channel"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotanalytics:channel"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotanalytics:CancelPipelineReprocessing",
         "iotanalytics:CreatePipeline",
         "iotanalytics:DeletePipeline",
         "iotanalytics:DescribePipeline",
         "iotanalytics:ListTagsForResource",
         "iotanalytics:StartPipelineReprocessing",
         "iotanalytics:TagResource",
         "iotanalytics:UntagResource",
         "iotanalytics:UpdatePipeline"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotanalytics:CancelPipelineReprocessing",
        "iotanalytics:CreatePipeline",
        "iotanalytics:DeletePipeline",
        "iotanalytics:DescribePipeline",
        "iotanalytics:ListTagsForResource",
        "iotanalytics:StartPipelineReprocessing",
        "iotanalytics:TagResource",
        "iotanalytics:UntagResource",
        "iotanalytics:UpdatePipeline"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotanalytics:pipeline"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotanalytics:pipeline"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotanalytics:CreateDataset",
         "iotanalytics:CreateDatasetContent",
         "iotanalytics:DeleteDataset",
         "iotanalytics:DeleteDatasetContent",
         "iotanalytics:DescribeDataset",
         "iotanalytics:GetDatasetContent",
         "iotanalytics:ListDatasetContents",
         "iotanalytics:ListTagsForResource",
         "iotanalytics:TagResource",
         "iotanalytics:UntagResource",
         "iotanalytics:UpdateDataset"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotanalytics:CreateDataset",
        "iotanalytics:CreateDatasetContent",
        "iotanalytics:DeleteDataset",
        "iotanalytics:DeleteDatasetContent",
        "iotanalytics:DescribeDataset",
        "iotanalytics:GetDatasetContent",
        "iotanalytics:ListDatasetContents",
        "iotanalytics:ListTagsForResource",
        "iotanalytics:TagResource",
        "iotanalytics:UntagResource",
        "iotanalytics:UpdateDataset"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotanalytics:dataset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotanalytics:dataset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotanalytics:CreateDatastore",
         "iotanalytics:DeleteDatastore",
         "iotanalytics:DescribeDatastore",
         "iotanalytics:ListTagsForResource",
         "iotanalytics:TagResource",
         "iotanalytics:UntagResource",
         "iotanalytics:UpdateDatastore"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotanalytics:CreateDatastore",
        "iotanalytics:DeleteDatastore",
        "iotanalytics:DescribeDatastore",
        "iotanalytics:ListTagsForResource",
        "iotanalytics:TagResource",
        "iotanalytics:UntagResource",
        "iotanalytics:UpdateDatastore"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotanalytics:datastore"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotanalytics:datastore"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotdeviceadvisor:DeleteSuiteDefinition",
         "iotdeviceadvisor:GetSuiteDefinition",
         "iotdeviceadvisor:ListSuiteRuns",
         "iotdeviceadvisor:ListTagsForResource",
         "iotdeviceadvisor:TagResource",
         "iotdeviceadvisor:UntagResource",
         "iotdeviceadvisor:UpdateSuiteDefinition"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotdeviceadvisor:DeleteSuiteDefinition",
        "iotdeviceadvisor:GetSuiteDefinition",
        "iotdeviceadvisor:ListSuiteRuns",
        "iotdeviceadvisor:ListTagsForResource",
        "iotdeviceadvisor:TagResource",
        "iotdeviceadvisor:UntagResource",
        "iotdeviceadvisor:UpdateSuiteDefinition"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotdeviceadvisor:Suitedefinition"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotdeviceadvisor:Suitedefinition"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotdeviceadvisor:GetSuiteRun",
         "iotdeviceadvisor:GetSuiteRunReport",
         "iotdeviceadvisor:ListTagsForResource",
         "iotdeviceadvisor:StopSuiteRun",
         "iotdeviceadvisor:TagResource",
         "iotdeviceadvisor:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotdeviceadvisor:GetSuiteRun",
        "iotdeviceadvisor:GetSuiteRunReport",
        "iotdeviceadvisor:ListTagsForResource",
        "iotdeviceadvisor:StopSuiteRun",
        "iotdeviceadvisor:TagResource",
        "iotdeviceadvisor:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotdeviceadvisor:Suiterun"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotdeviceadvisor:Suiterun"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotevents:BatchAcknowledgeAlarm",
         "iotevents:BatchDisableAlarm",
         "iotevents:BatchEnableAlarm",
         "iotevents:BatchResetAlarm",
         "iotevents:BatchSnoozeAlarm",
         "iotevents:CreateAlarmModel",
         "iotevents:DeleteAlarmModel",
         "iotevents:DescribeAlarm",
         "iotevents:DescribeAlarmModel",
         "iotevents:ListAlarmModelVersions",
         "iotevents:ListAlarms",
         "iotevents:ListTagsForResource",
         "iotevents:TagResource",
         "iotevents:UntagResource",
         "iotevents:UpdateAlarmModel"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotevents:BatchAcknowledgeAlarm",
        "iotevents:BatchDisableAlarm",
        "iotevents:BatchEnableAlarm",
        "iotevents:BatchResetAlarm",
        "iotevents:BatchSnoozeAlarm",
        "iotevents:CreateAlarmModel",
        "iotevents:DeleteAlarmModel",
        "iotevents:DescribeAlarm",
        "iotevents:DescribeAlarmModel",
        "iotevents:ListAlarmModelVersions",
        "iotevents:ListAlarms",
        "iotevents:ListTagsForResource",
        "iotevents:TagResource",
        "iotevents:UntagResource",
        "iotevents:UpdateAlarmModel"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotevents:alarmModel"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotevents:alarmModel"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotevents:BatchDeleteDetector",
         "iotevents:BatchUpdateDetector",
         "iotevents:CreateDetectorModel",
         "iotevents:DeleteDetectorModel",
         "iotevents:DescribeDetector",
         "iotevents:DescribeDetectorModel",
         "iotevents:ListDetectorModelVersions",
         "iotevents:ListDetectors",
         "iotevents:ListTagsForResource",
         "iotevents:TagResource",
         "iotevents:UntagResource",
         "iotevents:UpdateDetectorModel"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotevents:BatchDeleteDetector",
        "iotevents:BatchUpdateDetector",
        "iotevents:CreateDetectorModel",
        "iotevents:DeleteDetectorModel",
        "iotevents:DescribeDetector",
        "iotevents:DescribeDetectorModel",
        "iotevents:ListDetectorModelVersions",
        "iotevents:ListDetectors",
        "iotevents:ListTagsForResource",
        "iotevents:TagResource",
        "iotevents:UntagResource",
        "iotevents:UpdateDetectorModel"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotevents:detectorModel"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotevents:detectorModel"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotevents:BatchPutMessage",
         "iotevents:CreateInput",
         "iotevents:DeleteInput",
         "iotevents:DescribeInput",
         "iotevents:ListTagsForResource",
         "iotevents:TagResource",
         "iotevents:UntagResource",
         "iotevents:UpdateInput",
         "iotevents:UpdateInputRouting"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotevents:BatchPutMessage",
        "iotevents:CreateInput",
        "iotevents:DeleteInput",
        "iotevents:DescribeInput",
        "iotevents:ListTagsForResource",
        "iotevents:TagResource",
        "iotevents:UntagResource",
        "iotevents:UpdateInput",
        "iotevents:UpdateInputRouting"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotevents:input"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotevents:input"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotfleethub:DeleteApplication",
         "iotfleethub:DescribeApplication",
         "iotfleethub:ListTagsForResource",
         "iotfleethub:TagResource",
         "iotfleethub:UntagResource",
         "iotfleethub:UpdateApplication"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotfleethub:DeleteApplication",
        "iotfleethub:DescribeApplication",
        "iotfleethub:ListTagsForResource",
        "iotfleethub:TagResource",
        "iotfleethub:UntagResource",
        "iotfleethub:UpdateApplication"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotfleethub:application"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotfleethub:application"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotfleetwise:AssociateVehicleFleet",
         "iotfleetwise:CreateCampaign",
         "iotfleetwise:CreateFleet",
         "iotfleetwise:DeleteFleet",
         "iotfleetwise:DisassociateVehicleFleet",
         "iotfleetwise:GetFleet",
         "iotfleetwise:ListTagsForResource",
         "iotfleetwise:ListVehiclesInFleet",
         "iotfleetwise:TagResource",
         "iotfleetwise:UntagResource",
         "iotfleetwise:UpdateFleet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotfleetwise:AssociateVehicleFleet",
        "iotfleetwise:CreateCampaign",
        "iotfleetwise:CreateFleet",
        "iotfleetwise:DeleteFleet",
        "iotfleetwise:DisassociateVehicleFleet",
        "iotfleetwise:GetFleet",
        "iotfleetwise:ListTagsForResource",
        "iotfleetwise:ListVehiclesInFleet",
        "iotfleetwise:TagResource",
        "iotfleetwise:UntagResource",
        "iotfleetwise:UpdateFleet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotfleetwise:fleet"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotfleetwise:fleet"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotfleetwise:AssociateVehicleFleet",
         "iotfleetwise:BatchCreateVehicle",
         "iotfleetwise:BatchUpdateVehicle",
         "iotfleetwise:CreateCampaign",
         "iotfleetwise:CreateVehicle",
         "iotfleetwise:DeleteVehicle",
         "iotfleetwise:DisassociateVehicleFleet",
         "iotfleetwise:GenerateCommandPayload",
         "iotfleetwise:GetVehicle",
         "iotfleetwise:GetVehicleStatus",
         "iotfleetwise:ListFleetsForVehicle",
         "iotfleetwise:ListTagsForResource",
         "iotfleetwise:TagResource",
         "iotfleetwise:UntagResource",
         "iotfleetwise:UpdateVehicle"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotfleetwise:AssociateVehicleFleet",
        "iotfleetwise:BatchCreateVehicle",
        "iotfleetwise:BatchUpdateVehicle",
        "iotfleetwise:CreateCampaign",
        "iotfleetwise:CreateVehicle",
        "iotfleetwise:DeleteVehicle",
        "iotfleetwise:DisassociateVehicleFleet",
        "iotfleetwise:GenerateCommandPayload",
        "iotfleetwise:GetVehicle",
        "iotfleetwise:GetVehicleStatus",
        "iotfleetwise:ListFleetsForVehicle",
        "iotfleetwise:ListTagsForResource",
        "iotfleetwise:TagResource",
        "iotfleetwise:UntagResource",
        "iotfleetwise:UpdateVehicle"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotfleetwise:vehicle"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotfleetwise:vehicle"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotfleetwise:BatchCreateVehicle",
         "iotfleetwise:BatchUpdateVehicle",
         "iotfleetwise:CreateDecoderManifest",
         "iotfleetwise:CreateVehicle",
         "iotfleetwise:DeleteDecoderManifest",
         "iotfleetwise:GetDecoderManifest",
         "iotfleetwise:ImportDecoderManifest",
         "iotfleetwise:ListDecoderManifestNetworkInterfaces",
         "iotfleetwise:ListDecoderManifestSignals",
         "iotfleetwise:ListTagsForResource",
         "iotfleetwise:TagResource",
         "iotfleetwise:UntagResource",
         "iotfleetwise:UpdateDecoderManifest",
         "iotfleetwise:UpdateVehicle"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotfleetwise:BatchCreateVehicle",
        "iotfleetwise:BatchUpdateVehicle",
        "iotfleetwise:CreateDecoderManifest",
        "iotfleetwise:CreateVehicle",
        "iotfleetwise:DeleteDecoderManifest",
        "iotfleetwise:GetDecoderManifest",
        "iotfleetwise:ImportDecoderManifest",
        "iotfleetwise:ListDecoderManifestNetworkInterfaces",
        "iotfleetwise:ListDecoderManifestSignals",
        "iotfleetwise:ListTagsForResource",
        "iotfleetwise:TagResource",
        "iotfleetwise:UntagResource",
        "iotfleetwise:UpdateDecoderManifest",
        "iotfleetwise:UpdateVehicle"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotfleetwise:decodermanifest"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotfleetwise:decodermanifest"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotfleetwise:BatchCreateVehicle",
         "iotfleetwise:BatchUpdateVehicle",
         "iotfleetwise:CreateDecoderManifest",
         "iotfleetwise:CreateModelManifest",
         "iotfleetwise:CreateVehicle",
         "iotfleetwise:DeleteModelManifest",
         "iotfleetwise:GetModelManifest",
         "iotfleetwise:ListModelManifestNodes",
         "iotfleetwise:ListTagsForResource",
         "iotfleetwise:TagResource",
         "iotfleetwise:UntagResource",
         "iotfleetwise:UpdateModelManifest",
         "iotfleetwise:UpdateVehicle"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotfleetwise:BatchCreateVehicle",
        "iotfleetwise:BatchUpdateVehicle",
        "iotfleetwise:CreateDecoderManifest",
        "iotfleetwise:CreateModelManifest",
        "iotfleetwise:CreateVehicle",
        "iotfleetwise:DeleteModelManifest",
        "iotfleetwise:GetModelManifest",
        "iotfleetwise:ListModelManifestNodes",
        "iotfleetwise:ListTagsForResource",
        "iotfleetwise:TagResource",
        "iotfleetwise:UntagResource",
        "iotfleetwise:UpdateModelManifest",
        "iotfleetwise:UpdateVehicle"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotfleetwise:modelmanifest"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotfleetwise:modelmanifest"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotfleetwise:CreateCampaign",
         "iotfleetwise:DeleteCampaign",
         "iotfleetwise:GetCampaign",
         "iotfleetwise:ListTagsForResource",
         "iotfleetwise:TagResource",
         "iotfleetwise:UntagResource",
         "iotfleetwise:UpdateCampaign"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotfleetwise:CreateCampaign",
        "iotfleetwise:DeleteCampaign",
        "iotfleetwise:GetCampaign",
        "iotfleetwise:ListTagsForResource",
        "iotfleetwise:TagResource",
        "iotfleetwise:UntagResource",
        "iotfleetwise:UpdateCampaign"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotfleetwise:campaign"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotfleetwise:campaign"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotfleetwise:CreateCampaign",
         "iotfleetwise:CreateFleet",
         "iotfleetwise:CreateModelManifest",
         "iotfleetwise:CreateSignalCatalog",
         "iotfleetwise:CreateStateTemplate",
         "iotfleetwise:DeleteSignalCatalog",
         "iotfleetwise:GetSignalCatalog",
         "iotfleetwise:ImportSignalCatalog",
         "iotfleetwise:ListSignalCatalogNodes",
         "iotfleetwise:ListTagsForResource",
         "iotfleetwise:TagResource",
         "iotfleetwise:UntagResource",
         "iotfleetwise:UpdateSignalCatalog"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotfleetwise:CreateCampaign",
        "iotfleetwise:CreateFleet",
        "iotfleetwise:CreateModelManifest",
        "iotfleetwise:CreateSignalCatalog",
        "iotfleetwise:CreateStateTemplate",
        "iotfleetwise:DeleteSignalCatalog",
        "iotfleetwise:GetSignalCatalog",
        "iotfleetwise:ImportSignalCatalog",
        "iotfleetwise:ListSignalCatalogNodes",
        "iotfleetwise:ListTagsForResource",
        "iotfleetwise:TagResource",
        "iotfleetwise:UntagResource",
        "iotfleetwise:UpdateSignalCatalog"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotfleetwise:signalcatalog"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotfleetwise:signalcatalog"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotfleetwise:CreateStateTemplate",
         "iotfleetwise:DeleteStateTemplate",
         "iotfleetwise:GenerateCommandPayload",
         "iotfleetwise:GetStateTemplate",
         "iotfleetwise:TagResource",
         "iotfleetwise:UntagResource",
         "iotfleetwise:UpdateStateTemplate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotfleetwise:CreateStateTemplate",
        "iotfleetwise:DeleteStateTemplate",
        "iotfleetwise:GenerateCommandPayload",
        "iotfleetwise:GetStateTemplate",
        "iotfleetwise:TagResource",
        "iotfleetwise:UntagResource",
        "iotfleetwise:UpdateStateTemplate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotfleetwise:statetemplate"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotfleetwise:statetemplate"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotjobsdata:DescribeJobExecution",
         "iotjobsdata:GetPendingJobExecutions",
         "iotjobsdata:StartNextPendingJobExecution",
         "iotjobsdata:UpdateJobExecution"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotjobsdata:DescribeJobExecution",
        "iotjobsdata:GetPendingJobExecutions",
        "iotjobsdata:StartNextPendingJobExecution",
        "iotjobsdata:UpdateJobExecution"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotjobsdata:thing"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotjobsdata:thing"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotmanagedintegrations:DeleteCredentialLocker",
         "iotmanagedintegrations:GetCredentialLocker"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotmanagedintegrations:DeleteCredentialLocker",
        "iotmanagedintegrations:GetCredentialLocker"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotmanagedintegrations:CredentialLockerResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotmanagedintegrations:CredentialLockerResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotmanagedintegrations:DeleteManagedThing",
         "iotmanagedintegrations:GetManagedThing",
         "iotmanagedintegrations:GetManagedThingCapabilities",
         "iotmanagedintegrations:GetManagedThingConnectivityData",
         "iotmanagedintegrations:GetManagedThingMetaData",
         "iotmanagedintegrations:GetManagedThingState",
         "iotmanagedintegrations:ListManagedThingSchemas",
         "iotmanagedintegrations:UpdateManagedThing"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotmanagedintegrations:DeleteManagedThing",
        "iotmanagedintegrations:GetManagedThing",
        "iotmanagedintegrations:GetManagedThingCapabilities",
        "iotmanagedintegrations:GetManagedThingConnectivityData",
        "iotmanagedintegrations:GetManagedThingMetaData",
        "iotmanagedintegrations:GetManagedThingState",
        "iotmanagedintegrations:ListManagedThingSchemas",
        "iotmanagedintegrations:UpdateManagedThing"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotmanagedintegrations:ManagedThingResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotmanagedintegrations:ManagedThingResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotmanagedintegrations:DeleteOtaTask",
         "iotmanagedintegrations:GetOtaTask",
         "iotmanagedintegrations:ListOtaTaskExecutions",
         "iotmanagedintegrations:UpdateOtaTask"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotmanagedintegrations:DeleteOtaTask",
        "iotmanagedintegrations:GetOtaTask",
        "iotmanagedintegrations:ListOtaTaskExecutions",
        "iotmanagedintegrations:UpdateOtaTask"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotmanagedintegrations:OtaTaskResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotmanagedintegrations:OtaTaskResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotmanagedintegrations:DeleteProvisioningProfile",
         "iotmanagedintegrations:GetProvisioningProfile"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotmanagedintegrations:DeleteProvisioningProfile",
        "iotmanagedintegrations:GetProvisioningProfile"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotmanagedintegrations:ProvisioningProfileResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotmanagedintegrations:ProvisioningProfileResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotsitewise:AssociateAssets",
         "iotsitewise:AssociateTimeSeriesToAssetProperty",
         "iotsitewise:BatchGetAssetPropertyAggregates",
         "iotsitewise:BatchGetAssetPropertyValue",
         "iotsitewise:BatchGetAssetPropertyValueHistory",
         "iotsitewise:BatchPutAssetPropertyValue",
         "iotsitewise:DeleteAsset",
         "iotsitewise:DeleteTimeSeries",
         "iotsitewise:DescribeAction",
         "iotsitewise:DescribeAsset",
         "iotsitewise:DescribeAssetCompositeModel",
         "iotsitewise:DescribeAssetProperty",
         "iotsitewise:DescribeTimeSeries",
         "iotsitewise:DisassociateAssets",
         "iotsitewise:DisassociateTimeSeriesFromAssetProperty",
         "iotsitewise:ExecuteAction",
         "iotsitewise:GetAssetPropertyAggregates",
         "iotsitewise:GetAssetPropertyValue",
         "iotsitewise:GetAssetPropertyValueHistory",
         "iotsitewise:GetInterpolatedAssetPropertyValues",
         "iotsitewise:ListActions",
         "iotsitewise:ListAssetProperties",
         "iotsitewise:ListAssetRelationships",
         "iotsitewise:ListAssociatedAssets",
         "iotsitewise:ListTagsForResource",
         "iotsitewise:ListTimeSeries",
         "iotsitewise:TagResource",
         "iotsitewise:UntagResource",
         "iotsitewise:UpdateAsset",
         "iotsitewise:UpdateAssetProperty"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotsitewise:AssociateAssets",
        "iotsitewise:AssociateTimeSeriesToAssetProperty",
        "iotsitewise:BatchGetAssetPropertyAggregates",
        "iotsitewise:BatchGetAssetPropertyValue",
        "iotsitewise:BatchGetAssetPropertyValueHistory",
        "iotsitewise:BatchPutAssetPropertyValue",
        "iotsitewise:DeleteAsset",
        "iotsitewise:DeleteTimeSeries",
        "iotsitewise:DescribeAction",
        "iotsitewise:DescribeAsset",
        "iotsitewise:DescribeAssetCompositeModel",
        "iotsitewise:DescribeAssetProperty",
        "iotsitewise:DescribeTimeSeries",
        "iotsitewise:DisassociateAssets",
        "iotsitewise:DisassociateTimeSeriesFromAssetProperty",
        "iotsitewise:ExecuteAction",
        "iotsitewise:GetAssetPropertyAggregates",
        "iotsitewise:GetAssetPropertyValue",
        "iotsitewise:GetAssetPropertyValueHistory",
        "iotsitewise:GetInterpolatedAssetPropertyValues",
        "iotsitewise:ListActions",
        "iotsitewise:ListAssetProperties",
        "iotsitewise:ListAssetRelationships",
        "iotsitewise:ListAssociatedAssets",
        "iotsitewise:ListTagsForResource",
        "iotsitewise:ListTimeSeries",
        "iotsitewise:TagResource",
        "iotsitewise:UntagResource",
        "iotsitewise:UpdateAsset",
        "iotsitewise:UpdateAssetProperty"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotsitewise:asset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotsitewise:asset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotsitewise:AssociateTimeSeriesToAssetProperty",
         "iotsitewise:BatchGetAssetPropertyAggregates",
         "iotsitewise:BatchGetAssetPropertyValue",
         "iotsitewise:BatchGetAssetPropertyValueHistory",
         "iotsitewise:BatchPutAssetPropertyValue",
         "iotsitewise:DeleteTimeSeries",
         "iotsitewise:DescribeTimeSeries",
         "iotsitewise:DisassociateTimeSeriesFromAssetProperty",
         "iotsitewise:GetAssetPropertyAggregates",
         "iotsitewise:GetAssetPropertyValue",
         "iotsitewise:GetAssetPropertyValueHistory",
         "iotsitewise:GetInterpolatedAssetPropertyValues",
         "iotsitewise:ListTagsForResource",
         "iotsitewise:TagResource",
         "iotsitewise:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotsitewise:AssociateTimeSeriesToAssetProperty",
        "iotsitewise:BatchGetAssetPropertyAggregates",
        "iotsitewise:BatchGetAssetPropertyValue",
        "iotsitewise:BatchGetAssetPropertyValueHistory",
        "iotsitewise:BatchPutAssetPropertyValue",
        "iotsitewise:DeleteTimeSeries",
        "iotsitewise:DescribeTimeSeries",
        "iotsitewise:DisassociateTimeSeriesFromAssetProperty",
        "iotsitewise:GetAssetPropertyAggregates",
        "iotsitewise:GetAssetPropertyValue",
        "iotsitewise:GetAssetPropertyValueHistory",
        "iotsitewise:GetInterpolatedAssetPropertyValues",
        "iotsitewise:ListTagsForResource",
        "iotsitewise:TagResource",
        "iotsitewise:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotsitewise:time-series"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotsitewise:time-series"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotsitewise:BatchAssociateProjectAssets",
         "iotsitewise:BatchDisassociateProjectAssets",
         "iotsitewise:CreateAccessPolicy",
         "iotsitewise:CreateDashboard",
         "iotsitewise:DeleteProject",
         "iotsitewise:DescribeProject",
         "iotsitewise:ListAccessPolicies",
         "iotsitewise:ListDashboards",
         "iotsitewise:ListProjectAssets",
         "iotsitewise:ListTagsForResource",
         "iotsitewise:TagResource",
         "iotsitewise:UntagResource",
         "iotsitewise:UpdateProject"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotsitewise:BatchAssociateProjectAssets",
        "iotsitewise:BatchDisassociateProjectAssets",
        "iotsitewise:CreateAccessPolicy",
        "iotsitewise:CreateDashboard",
        "iotsitewise:DeleteProject",
        "iotsitewise:DescribeProject",
        "iotsitewise:ListAccessPolicies",
        "iotsitewise:ListDashboards",
        "iotsitewise:ListProjectAssets",
        "iotsitewise:ListTagsForResource",
        "iotsitewise:TagResource",
        "iotsitewise:UntagResource",
        "iotsitewise:UpdateProject"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotsitewise:project"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotsitewise:project"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotsitewise:CreateAccessPolicy",
         "iotsitewise:CreateProject",
         "iotsitewise:DeletePortal",
         "iotsitewise:DescribePortal",
         "iotsitewise:ListAccessPolicies",
         "iotsitewise:ListProjects",
         "iotsitewise:ListTagsForResource",
         "iotsitewise:TagResource",
         "iotsitewise:UntagResource",
         "iotsitewise:UpdatePortal"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotsitewise:CreateAccessPolicy",
        "iotsitewise:CreateProject",
        "iotsitewise:DeletePortal",
        "iotsitewise:DescribePortal",
        "iotsitewise:ListAccessPolicies",
        "iotsitewise:ListProjects",
        "iotsitewise:ListTagsForResource",
        "iotsitewise:TagResource",
        "iotsitewise:UntagResource",
        "iotsitewise:UpdatePortal"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotsitewise:portal"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotsitewise:portal"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotsitewise:CreateAsset",
         "iotsitewise:CreateAssetModelCompositeModel",
         "iotsitewise:DeleteAssetModel",
         "iotsitewise:DeleteAssetModelCompositeModel",
         "iotsitewise:DescribeAssetModel",
         "iotsitewise:DescribeAssetModelCompositeModel",
         "iotsitewise:ListAssetModelCompositeModels",
         "iotsitewise:ListAssetModelProperties",
         "iotsitewise:ListAssets",
         "iotsitewise:ListCompositionRelationships",
         "iotsitewise:ListTagsForResource",
         "iotsitewise:TagResource",
         "iotsitewise:UntagResource",
         "iotsitewise:UpdateAssetModel",
         "iotsitewise:UpdateAssetModelCompositeModel",
         "iotsitewise:UpdateAssetModelPropertyRouting"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotsitewise:CreateAsset",
        "iotsitewise:CreateAssetModelCompositeModel",
        "iotsitewise:DeleteAssetModel",
        "iotsitewise:DeleteAssetModelCompositeModel",
        "iotsitewise:DescribeAssetModel",
        "iotsitewise:DescribeAssetModelCompositeModel",
        "iotsitewise:ListAssetModelCompositeModels",
        "iotsitewise:ListAssetModelProperties",
        "iotsitewise:ListAssets",
        "iotsitewise:ListCompositionRelationships",
        "iotsitewise:ListTagsForResource",
        "iotsitewise:TagResource",
        "iotsitewise:UntagResource",
        "iotsitewise:UpdateAssetModel",
        "iotsitewise:UpdateAssetModelCompositeModel",
        "iotsitewise:UpdateAssetModelPropertyRouting"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotsitewise:asset-model"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotsitewise:asset-model"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotsitewise:DeleteAccessPolicy",
         "iotsitewise:DescribeAccessPolicy",
         "iotsitewise:ListTagsForResource",
         "iotsitewise:TagResource",
         "iotsitewise:UntagResource",
         "iotsitewise:UpdateAccessPolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotsitewise:DeleteAccessPolicy",
        "iotsitewise:DescribeAccessPolicy",
        "iotsitewise:ListTagsForResource",
        "iotsitewise:TagResource",
        "iotsitewise:UntagResource",
        "iotsitewise:UpdateAccessPolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotsitewise:access-policy"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotsitewise:access-policy"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotsitewise:DeleteDashboard",
         "iotsitewise:DescribeDashboard",
         "iotsitewise:ListTagsForResource",
         "iotsitewise:TagResource",
         "iotsitewise:UntagResource",
         "iotsitewise:UpdateDashboard"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotsitewise:DeleteDashboard",
        "iotsitewise:DescribeDashboard",
        "iotsitewise:ListTagsForResource",
        "iotsitewise:TagResource",
        "iotsitewise:UntagResource",
        "iotsitewise:UpdateDashboard"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotsitewise:dashboard"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotsitewise:dashboard"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotsitewise:DeleteDataset",
         "iotsitewise:DescribeDataset",
         "iotsitewise:ListTagsForResource",
         "iotsitewise:TagResource",
         "iotsitewise:UntagResource",
         "iotsitewise:UpdateDataset"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotsitewise:DeleteDataset",
        "iotsitewise:DescribeDataset",
        "iotsitewise:ListTagsForResource",
        "iotsitewise:TagResource",
        "iotsitewise:UntagResource",
        "iotsitewise:UpdateDataset"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotsitewise:dataset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotsitewise:dataset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotsitewise:DeleteGateway",
         "iotsitewise:DescribeGateway",
         "iotsitewise:DescribeGatewayCapabilityConfiguration",
         "iotsitewise:ListTagsForResource",
         "iotsitewise:TagResource",
         "iotsitewise:UntagResource",
         "iotsitewise:UpdateGateway",
         "iotsitewise:UpdateGatewayCapabilityConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotsitewise:DeleteGateway",
        "iotsitewise:DescribeGateway",
        "iotsitewise:DescribeGatewayCapabilityConfiguration",
        "iotsitewise:ListTagsForResource",
        "iotsitewise:TagResource",
        "iotsitewise:UntagResource",
        "iotsitewise:UpdateGateway",
        "iotsitewise:UpdateGatewayCapabilityConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotsitewise:gateway"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotsitewise:gateway"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iottwinmaker:BatchPutPropertyValues",
         "iottwinmaker:DeleteEntity",
         "iottwinmaker:GetEntity",
         "iottwinmaker:GetPropertyValue",
         "iottwinmaker:GetPropertyValueHistory",
         "iottwinmaker:ListComponents",
         "iottwinmaker:ListProperties",
         "iottwinmaker:ListTagsForResource",
         "iottwinmaker:TagResource",
         "iottwinmaker:UntagResource",
         "iottwinmaker:UpdateEntity"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iottwinmaker:BatchPutPropertyValues",
        "iottwinmaker:DeleteEntity",
        "iottwinmaker:GetEntity",
        "iottwinmaker:GetPropertyValue",
        "iottwinmaker:GetPropertyValueHistory",
        "iottwinmaker:ListComponents",
        "iottwinmaker:ListProperties",
        "iottwinmaker:ListTagsForResource",
        "iottwinmaker:TagResource",
        "iottwinmaker:UntagResource",
        "iottwinmaker:UpdateEntity"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iottwinmaker:entity"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iottwinmaker:entity"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iottwinmaker:BatchPutPropertyValues",
         "iottwinmaker:CreateComponentType",
         "iottwinmaker:CreateEntity",
         "iottwinmaker:CreateScene",
         "iottwinmaker:CreateSyncJob",
         "iottwinmaker:DeleteComponentType",
         "iottwinmaker:DeleteEntity",
         "iottwinmaker:DeleteScene",
         "iottwinmaker:DeleteSyncJob",
         "iottwinmaker:DeleteWorkspace",
         "iottwinmaker:ExecuteQuery",
         "iottwinmaker:GetComponentType",
         "iottwinmaker:GetEntity",
         "iottwinmaker:GetPropertyValue",
         "iottwinmaker:GetPropertyValueHistory",
         "iottwinmaker:GetScene",
         "iottwinmaker:GetSyncJob",
         "iottwinmaker:GetWorkspace",
         "iottwinmaker:ListComponentTypes",
         "iottwinmaker:ListComponents",
         "iottwinmaker:ListEntities",
         "iottwinmaker:ListProperties",
         "iottwinmaker:ListScenes",
         "iottwinmaker:ListSyncJobs",
         "iottwinmaker:ListSyncResources",
         "iottwinmaker:ListTagsForResource",
         "iottwinmaker:TagResource",
         "iottwinmaker:UntagResource",
         "iottwinmaker:UpdateComponentType",
         "iottwinmaker:UpdateEntity",
         "iottwinmaker:UpdateScene",
         "iottwinmaker:UpdateWorkspace"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iottwinmaker:BatchPutPropertyValues",
        "iottwinmaker:CreateComponentType",
        "iottwinmaker:CreateEntity",
        "iottwinmaker:CreateScene",
        "iottwinmaker:CreateSyncJob",
        "iottwinmaker:DeleteComponentType",
        "iottwinmaker:DeleteEntity",
        "iottwinmaker:DeleteScene",
        "iottwinmaker:DeleteSyncJob",
        "iottwinmaker:DeleteWorkspace",
        "iottwinmaker:ExecuteQuery",
        "iottwinmaker:GetComponentType",
        "iottwinmaker:GetEntity",
        "iottwinmaker:GetPropertyValue",
        "iottwinmaker:GetPropertyValueHistory",
        "iottwinmaker:GetScene",
        "iottwinmaker:GetSyncJob",
        "iottwinmaker:GetWorkspace",
        "iottwinmaker:ListComponentTypes",
        "iottwinmaker:ListComponents",
        "iottwinmaker:ListEntities",
        "iottwinmaker:ListProperties",
        "iottwinmaker:ListScenes",
        "iottwinmaker:ListSyncJobs",
        "iottwinmaker:ListSyncResources",
        "iottwinmaker:ListTagsForResource",
        "iottwinmaker:TagResource",
        "iottwinmaker:UntagResource",
        "iottwinmaker:UpdateComponentType",
        "iottwinmaker:UpdateEntity",
        "iottwinmaker:UpdateScene",
        "iottwinmaker:UpdateWorkspace"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iottwinmaker:workspace"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iottwinmaker:workspace"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iottwinmaker:CancelMetadataTransferJob",
         "iottwinmaker:GetMetadataTransferJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iottwinmaker:CancelMetadataTransferJob",
        "iottwinmaker:GetMetadataTransferJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iottwinmaker:metadataTransferJob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iottwinmaker:metadataTransferJob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iottwinmaker:DeleteComponentType",
         "iottwinmaker:GetComponentType",
         "iottwinmaker:GetPropertyValue",
         "iottwinmaker:GetPropertyValueHistory",
         "iottwinmaker:ListTagsForResource",
         "iottwinmaker:TagResource",
         "iottwinmaker:UntagResource",
         "iottwinmaker:UpdateComponentType"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iottwinmaker:DeleteComponentType",
        "iottwinmaker:GetComponentType",
        "iottwinmaker:GetPropertyValue",
        "iottwinmaker:GetPropertyValueHistory",
        "iottwinmaker:ListTagsForResource",
        "iottwinmaker:TagResource",
        "iottwinmaker:UntagResource",
        "iottwinmaker:UpdateComponentType"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iottwinmaker:componentType"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iottwinmaker:componentType"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iottwinmaker:DeleteScene",
         "iottwinmaker:GetScene",
         "iottwinmaker:ListTagsForResource",
         "iottwinmaker:TagResource",
         "iottwinmaker:UntagResource",
         "iottwinmaker:UpdateScene"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iottwinmaker:DeleteScene",
        "iottwinmaker:GetScene",
        "iottwinmaker:ListTagsForResource",
        "iottwinmaker:TagResource",
        "iottwinmaker:UntagResource",
        "iottwinmaker:UpdateScene"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iottwinmaker:scene"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iottwinmaker:scene"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iottwinmaker:DeleteSyncJob",
         "iottwinmaker:GetSyncJob",
         "iottwinmaker:ListSyncResources",
         "iottwinmaker:ListTagsForResource",
         "iottwinmaker:TagResource",
         "iottwinmaker:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iottwinmaker:DeleteSyncJob",
        "iottwinmaker:GetSyncJob",
        "iottwinmaker:ListSyncResources",
        "iottwinmaker:ListTagsForResource",
        "iottwinmaker:TagResource",
        "iottwinmaker:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iottwinmaker:syncJob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iottwinmaker:syncJob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotwireless:AssociateMulticastGroupWithFuotaTask",
         "iotwireless:AssociateWirelessDeviceWithFuotaTask",
         "iotwireless:DeleteFuotaTask",
         "iotwireless:DisassociateMulticastGroupFromFuotaTask",
         "iotwireless:DisassociateWirelessDeviceFromFuotaTask",
         "iotwireless:GetFuotaTask",
         "iotwireless:ListMulticastGroupsByFuotaTask",
         "iotwireless:ListTagsForResource",
         "iotwireless:StartFuotaTask",
         "iotwireless:TagResource",
         "iotwireless:UntagResource",
         "iotwireless:UpdateFuotaTask"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotwireless:AssociateMulticastGroupWithFuotaTask",
        "iotwireless:AssociateWirelessDeviceWithFuotaTask",
        "iotwireless:DeleteFuotaTask",
        "iotwireless:DisassociateMulticastGroupFromFuotaTask",
        "iotwireless:DisassociateWirelessDeviceFromFuotaTask",
        "iotwireless:GetFuotaTask",
        "iotwireless:ListMulticastGroupsByFuotaTask",
        "iotwireless:ListTagsForResource",
        "iotwireless:StartFuotaTask",
        "iotwireless:TagResource",
        "iotwireless:UntagResource",
        "iotwireless:UpdateFuotaTask"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotwireless:FuotaTask"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotwireless:FuotaTask"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotwireless:AssociateMulticastGroupWithFuotaTask",
         "iotwireless:AssociateWirelessDeviceWithMulticastGroup",
         "iotwireless:CancelMulticastGroupSession",
         "iotwireless:CreateNetworkAnalyzerConfiguration",
         "iotwireless:DeleteMulticastGroup",
         "iotwireless:DisassociateMulticastGroupFromFuotaTask",
         "iotwireless:DisassociateWirelessDeviceFromMulticastGroup",
         "iotwireless:GetMulticastGroup",
         "iotwireless:GetMulticastGroupSession",
         "iotwireless:ListTagsForResource",
         "iotwireless:SendDataToMulticastGroup",
         "iotwireless:StartBulkAssociateWirelessDeviceWithMulticastGroup",
         "iotwireless:StartBulkDisassociateWirelessDeviceFromMulticastGroup",
         "iotwireless:StartMulticastGroupSession",
         "iotwireless:TagResource",
         "iotwireless:UntagResource",
         "iotwireless:UpdateMulticastGroup",
         "iotwireless:UpdateNetworkAnalyzerConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotwireless:AssociateMulticastGroupWithFuotaTask",
        "iotwireless:AssociateWirelessDeviceWithMulticastGroup",
        "iotwireless:CancelMulticastGroupSession",
        "iotwireless:CreateNetworkAnalyzerConfiguration",
        "iotwireless:DeleteMulticastGroup",
        "iotwireless:DisassociateMulticastGroupFromFuotaTask",
        "iotwireless:DisassociateWirelessDeviceFromMulticastGroup",
        "iotwireless:GetMulticastGroup",
        "iotwireless:GetMulticastGroupSession",
        "iotwireless:ListTagsForResource",
        "iotwireless:SendDataToMulticastGroup",
        "iotwireless:StartBulkAssociateWirelessDeviceWithMulticastGroup",
        "iotwireless:StartBulkDisassociateWirelessDeviceFromMulticastGroup",
        "iotwireless:StartMulticastGroupSession",
        "iotwireless:TagResource",
        "iotwireless:UntagResource",
        "iotwireless:UpdateMulticastGroup",
        "iotwireless:UpdateNetworkAnalyzerConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotwireless:MulticastGroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotwireless:MulticastGroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotwireless:AssociateWirelessDeviceWithFuotaTask",
         "iotwireless:AssociateWirelessDeviceWithMulticastGroup",
         "iotwireless:AssociateWirelessDeviceWithThing",
         "iotwireless:CreateNetworkAnalyzerConfiguration",
         "iotwireless:DeleteWirelessDevice",
         "iotwireless:DeregisterWirelessDevice",
         "iotwireless:DisassociateWirelessDeviceFromFuotaTask",
         "iotwireless:DisassociateWirelessDeviceFromMulticastGroup",
         "iotwireless:DisassociateWirelessDeviceFromThing",
         "iotwireless:GetPosition",
         "iotwireless:GetPositionConfiguration",
         "iotwireless:GetResourceEventConfiguration",
         "iotwireless:GetResourceLogLevel",
         "iotwireless:GetResourcePosition",
         "iotwireless:GetWirelessDevice",
         "iotwireless:GetWirelessDeviceStatistics",
         "iotwireless:ListTagsForResource",
         "iotwireless:PutPositionConfiguration",
         "iotwireless:PutResourceLogLevel",
         "iotwireless:ResetResourceLogLevel",
         "iotwireless:SendDataToWirelessDevice",
         "iotwireless:TagResource",
         "iotwireless:TestWirelessDevice",
         "iotwireless:UntagResource",
         "iotwireless:UpdateNetworkAnalyzerConfiguration",
         "iotwireless:UpdatePosition",
         "iotwireless:UpdateResourceEventConfiguration",
         "iotwireless:UpdateResourcePosition",
         "iotwireless:UpdateWirelessDevice"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotwireless:AssociateWirelessDeviceWithFuotaTask",
        "iotwireless:AssociateWirelessDeviceWithMulticastGroup",
        "iotwireless:AssociateWirelessDeviceWithThing",
        "iotwireless:CreateNetworkAnalyzerConfiguration",
        "iotwireless:DeleteWirelessDevice",
        "iotwireless:DeregisterWirelessDevice",
        "iotwireless:DisassociateWirelessDeviceFromFuotaTask",
        "iotwireless:DisassociateWirelessDeviceFromMulticastGroup",
        "iotwireless:DisassociateWirelessDeviceFromThing",
        "iotwireless:GetPosition",
        "iotwireless:GetPositionConfiguration",
        "iotwireless:GetResourceEventConfiguration",
        "iotwireless:GetResourceLogLevel",
        "iotwireless:GetResourcePosition",
        "iotwireless:GetWirelessDevice",
        "iotwireless:GetWirelessDeviceStatistics",
        "iotwireless:ListTagsForResource",
        "iotwireless:PutPositionConfiguration",
        "iotwireless:PutResourceLogLevel",
        "iotwireless:ResetResourceLogLevel",
        "iotwireless:SendDataToWirelessDevice",
        "iotwireless:TagResource",
        "iotwireless:TestWirelessDevice",
        "iotwireless:UntagResource",
        "iotwireless:UpdateNetworkAnalyzerConfiguration",
        "iotwireless:UpdatePosition",
        "iotwireless:UpdateResourceEventConfiguration",
        "iotwireless:UpdateResourcePosition",
        "iotwireless:UpdateWirelessDevice"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotwireless:WirelessDevice"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotwireless:WirelessDevice"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotwireless:AssociateWirelessDeviceWithThing",
         "iotwireless:AssociateWirelessGatewayWithThing",
         "iotwireless:DisassociateWirelessDeviceFromThing",
         "iotwireless:DisassociateWirelessGatewayFromThing"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotwireless:AssociateWirelessDeviceWithThing",
        "iotwireless:AssociateWirelessGatewayWithThing",
        "iotwireless:DisassociateWirelessDeviceFromThing",
        "iotwireless:DisassociateWirelessGatewayFromThing"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotwireless:thing"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotwireless:thing"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotwireless:AssociateWirelessGatewayWithCertificate",
         "iotwireless:AssociateWirelessGatewayWithThing",
         "iotwireless:CreateNetworkAnalyzerConfiguration",
         "iotwireless:CreateWirelessGatewayTask",
         "iotwireless:DeleteWirelessGateway",
         "iotwireless:DeleteWirelessGatewayTask",
         "iotwireless:DisassociateWirelessGatewayFromCertificate",
         "iotwireless:DisassociateWirelessGatewayFromThing",
         "iotwireless:GetPosition",
         "iotwireless:GetPositionConfiguration",
         "iotwireless:GetResourceEventConfiguration",
         "iotwireless:GetResourceLogLevel",
         "iotwireless:GetResourcePosition",
         "iotwireless:GetWirelessGateway",
         "iotwireless:GetWirelessGatewayCertificate",
         "iotwireless:GetWirelessGatewayFirmwareInformation",
         "iotwireless:GetWirelessGatewayStatistics",
         "iotwireless:GetWirelessGatewayTask",
         "iotwireless:ListTagsForResource",
         "iotwireless:PutPositionConfiguration",
         "iotwireless:PutResourceLogLevel",
         "iotwireless:ResetResourceLogLevel",
         "iotwireless:TagResource",
         "iotwireless:UntagResource",
         "iotwireless:UpdateNetworkAnalyzerConfiguration",
         "iotwireless:UpdatePosition",
         "iotwireless:UpdateResourceEventConfiguration",
         "iotwireless:UpdateResourcePosition",
         "iotwireless:UpdateWirelessGateway"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotwireless:AssociateWirelessGatewayWithCertificate",
        "iotwireless:AssociateWirelessGatewayWithThing",
        "iotwireless:CreateNetworkAnalyzerConfiguration",
        "iotwireless:CreateWirelessGatewayTask",
        "iotwireless:DeleteWirelessGateway",
        "iotwireless:DeleteWirelessGatewayTask",
        "iotwireless:DisassociateWirelessGatewayFromCertificate",
        "iotwireless:DisassociateWirelessGatewayFromThing",
        "iotwireless:GetPosition",
        "iotwireless:GetPositionConfiguration",
        "iotwireless:GetResourceEventConfiguration",
        "iotwireless:GetResourceLogLevel",
        "iotwireless:GetResourcePosition",
        "iotwireless:GetWirelessGateway",
        "iotwireless:GetWirelessGatewayCertificate",
        "iotwireless:GetWirelessGatewayFirmwareInformation",
        "iotwireless:GetWirelessGatewayStatistics",
        "iotwireless:GetWirelessGatewayTask",
        "iotwireless:ListTagsForResource",
        "iotwireless:PutPositionConfiguration",
        "iotwireless:PutResourceLogLevel",
        "iotwireless:ResetResourceLogLevel",
        "iotwireless:TagResource",
        "iotwireless:UntagResource",
        "iotwireless:UpdateNetworkAnalyzerConfiguration",
        "iotwireless:UpdatePosition",
        "iotwireless:UpdateResourceEventConfiguration",
        "iotwireless:UpdateResourcePosition",
        "iotwireless:UpdateWirelessGateway"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotwireless:WirelessGateway"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotwireless:WirelessGateway"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotwireless:AssociateWirelessGatewayWithCertificate",
         "iotwireless:DisassociateWirelessGatewayFromCertificate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotwireless:AssociateWirelessGatewayWithCertificate",
        "iotwireless:DisassociateWirelessGatewayFromCertificate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotwireless:cert"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotwireless:cert"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotwireless:DeleteDestination",
         "iotwireless:GetDestination",
         "iotwireless:ListTagsForResource",
         "iotwireless:TagResource",
         "iotwireless:UntagResource",
         "iotwireless:UpdateDestination"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotwireless:DeleteDestination",
        "iotwireless:GetDestination",
        "iotwireless:ListTagsForResource",
        "iotwireless:TagResource",
        "iotwireless:UntagResource",
        "iotwireless:UpdateDestination"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotwireless:Destination"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotwireless:Destination"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotwireless:DeleteDeviceProfile",
         "iotwireless:GetDeviceProfile",
         "iotwireless:ListTagsForResource",
         "iotwireless:TagResource",
         "iotwireless:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotwireless:DeleteDeviceProfile",
        "iotwireless:GetDeviceProfile",
        "iotwireless:ListTagsForResource",
        "iotwireless:TagResource",
        "iotwireless:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotwireless:DeviceProfile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotwireless:DeviceProfile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotwireless:DeleteNetworkAnalyzerConfiguration",
         "iotwireless:GetNetworkAnalyzerConfiguration",
         "iotwireless:ListTagsForResource",
         "iotwireless:StartNetworkAnalyzerStream",
         "iotwireless:TagResource",
         "iotwireless:UntagResource",
         "iotwireless:UpdateNetworkAnalyzerConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotwireless:DeleteNetworkAnalyzerConfiguration",
        "iotwireless:GetNetworkAnalyzerConfiguration",
        "iotwireless:ListTagsForResource",
        "iotwireless:StartNetworkAnalyzerStream",
        "iotwireless:TagResource",
        "iotwireless:UntagResource",
        "iotwireless:UpdateNetworkAnalyzerConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotwireless:NetworkAnalyzerConfiguration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotwireless:NetworkAnalyzerConfiguration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotwireless:DeleteServiceProfile",
         "iotwireless:GetServiceProfile",
         "iotwireless:ListTagsForResource",
         "iotwireless:TagResource",
         "iotwireless:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotwireless:DeleteServiceProfile",
        "iotwireless:GetServiceProfile",
        "iotwireless:ListTagsForResource",
        "iotwireless:TagResource",
        "iotwireless:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotwireless:ServiceProfile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotwireless:ServiceProfile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotwireless:DeleteWirelessDeviceImportTask",
         "iotwireless:GetWirelessDeviceImportTask",
         "iotwireless:ListDevicesForWirelessDeviceImportTask",
         "iotwireless:ListTagsForResource",
         "iotwireless:StartWirelessDeviceImportTask",
         "iotwireless:TagResource",
         "iotwireless:UntagResource",
         "iotwireless:UpdateWirelessDeviceImportTask"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotwireless:DeleteWirelessDeviceImportTask",
        "iotwireless:GetWirelessDeviceImportTask",
        "iotwireless:ListDevicesForWirelessDeviceImportTask",
        "iotwireless:ListTagsForResource",
        "iotwireless:StartWirelessDeviceImportTask",
        "iotwireless:TagResource",
        "iotwireless:UntagResource",
        "iotwireless:UpdateWirelessDeviceImportTask"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotwireless:ImportTask"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotwireless:ImportTask"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotwireless:DeleteWirelessGatewayTaskDefinition",
         "iotwireless:GetWirelessGatewayTaskDefinition",
         "iotwireless:ListTagsForResource",
         "iotwireless:TagResource",
         "iotwireless:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotwireless:DeleteWirelessGatewayTaskDefinition",
        "iotwireless:GetWirelessGatewayTaskDefinition",
        "iotwireless:ListTagsForResource",
        "iotwireless:TagResource",
        "iotwireless:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotwireless:WirelessGatewayTaskDefinition"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotwireless:WirelessGatewayTaskDefinition"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iotwireless:DisassociateAwsAccountFromPartnerAccount",
         "iotwireless:GetPartnerAccount",
         "iotwireless:GetResourceEventConfiguration",
         "iotwireless:ListTagsForResource",
         "iotwireless:TagResource",
         "iotwireless:UntagResource",
         "iotwireless:UpdatePartnerAccount",
         "iotwireless:UpdateResourceEventConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iotwireless:DisassociateAwsAccountFromPartnerAccount",
        "iotwireless:GetPartnerAccount",
        "iotwireless:GetResourceEventConfiguration",
        "iotwireless:ListTagsForResource",
        "iotwireless:TagResource",
        "iotwireless:UntagResource",
        "iotwireless:UpdatePartnerAccount",
        "iotwireless:UpdateResourceEventConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iotwireless:SidewalkAccount"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iotwireless:SidewalkAccount"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iq:AcceptCall",
         "iq:DeclineCall",
         "iq:EndCall",
         "iq:GetCall"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iq:AcceptCall",
        "iq:DeclineCall",
        "iq:EndCall",
        "iq:GetCall"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iq:call"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iq:call"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iq:ApprovePaymentRequest",
         "iq:GetPaymentRequest",
         "iq:ListPaymentRequests",
         "iq:RejectPaymentRequest",
         "iq:WithdrawPaymentRequest"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iq:ApprovePaymentRequest",
        "iq:GetPaymentRequest",
        "iq:ListPaymentRequests",
        "iq:RejectPaymentRequest",
        "iq:WithdrawPaymentRequest"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iq:paymentRequest"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iq:paymentRequest"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iq:ApproveProposal",
         "iq:CompleteProposal",
         "iq:GetProposal",
         "iq:ListProposals",
         "iq:RejectProposal",
         "iq:WithdrawProposal"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iq:ApproveProposal",
        "iq:CompleteProposal",
        "iq:GetProposal",
        "iq:ListProposals",
        "iq:RejectProposal",
        "iq:WithdrawProposal"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iq:proposal"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iq:proposal"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iq:ArchiveConversation",
         "iq:GetChatInfo",
         "iq:GetChatMessages",
         "iq:GetCompanyChatMessages",
         "iq:GetConversation",
         "iq:ListConversations",
         "iq:MarkChatMessageRead",
         "iq:SendCompanyChatMessage",
         "iq:SendIndividualChatMessage",
         "iq:UnarchiveConversation",
         "iq:UpdateConversationMembers"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iq:ArchiveConversation",
        "iq:GetChatInfo",
        "iq:GetChatMessages",
        "iq:GetCompanyChatMessages",
        "iq:GetConversation",
        "iq:ListConversations",
        "iq:MarkChatMessageRead",
        "iq:SendCompanyChatMessage",
        "iq:SendIndividualChatMessage",
        "iq:UnarchiveConversation",
        "iq:UpdateConversationMembers"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iq:conversation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iq:conversation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iq:DeleteAttachment",
         "iq:DownloadAttachment",
         "iq:ListAttachments"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iq:DeleteAttachment",
        "iq:DownloadAttachment",
        "iq:ListAttachments"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iq:attachment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iq:attachment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iq:DisableIndividualPublicProfile",
         "iq:EnableIndividualPublicProfile",
         "iq:GetExpert",
         "iq:LinkAwsCertification",
         "iq:UnlinkAwsCertification",
         "iq:UpdateExpert"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iq:DisableIndividualPublicProfile",
        "iq:EnableIndividualPublicProfile",
        "iq:GetExpert",
        "iq:LinkAwsCertification",
        "iq:UnlinkAwsCertification",
        "iq:UpdateExpert"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iq:expert"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iq:expert"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iq:GetBuyer"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iq:GetBuyer"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iq:buyer"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iq:buyer"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iq:GetChatToken"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iq:GetChatToken"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iq:token"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iq:token"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iq:GetCompanyProfile",
         "iq:UpdateCompanyProfile"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iq:GetCompanyProfile",
        "iq:UpdateCompanyProfile"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iq:company"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iq:company"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iq:GetListing",
         "iq:ListListings",
         "iq:UpdateListing"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iq:GetListing",
        "iq:ListListings",
        "iq:UpdateListing"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iq:listing"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iq:listing"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iq:GetMarketplaceSeller",
         "iq:GetReview",
         "iq:ListReviews",
         "iq:WriteReview"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iq:GetMarketplaceSeller",
        "iq:GetReview",
        "iq:ListReviews",
        "iq:WriteReview"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iq:seller"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iq:seller"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iq:GetRequest",
         "iq:HideRequest",
         "iq:ListRequests",
         "iq:UpdateRequest"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iq:GetRequest",
        "iq:HideRequest",
        "iq:ListRequests",
        "iq:UpdateRequest"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iq:request"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iq:request"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iq:ListExpertAccessLogs"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iq:ListExpertAccessLogs"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iq:permission"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iq:permission"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iq:ListPaymentRequests"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iq:ListPaymentRequests"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iq:paymentSchedule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iq:paymentSchedule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "iq-permission:ApproveAccessGrant",
         "iq-permission:ApprovePermissionRequest",
         "iq-permission:AssumePermissionRole",
         "iq-permission:CreatePermissionRequest",
         "iq-permission:GetPermissionRequest",
         "iq-permission:ListPermissionRequests",
         "iq-permission:RejectPermissionRequest",
         "iq-permission:RevokePermissionRequest",
         "iq-permission:WithdrawPermissionRequest"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "iq-permission:ApproveAccessGrant",
        "iq-permission:ApprovePermissionRequest",
        "iq-permission:AssumePermissionRole",
        "iq-permission:CreatePermissionRequest",
        "iq-permission:GetPermissionRequest",
        "iq-permission:ListPermissionRequests",
        "iq-permission:RejectPermissionRequest",
        "iq-permission:RevokePermissionRequest",
        "iq-permission:WithdrawPermissionRequest"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/iq-permission:permission"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/iq-permission:permission"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ivs:BatchGetChannel",
         "ivs:BatchStartViewerSessionRevocation",
         "ivs:CreateChannel",
         "ivs:DeleteChannel",
         "ivs:GetChannel",
         "ivs:GetStream",
         "ivs:GetStreamSession",
         "ivs:ListChannels",
         "ivs:ListStreamKeys",
         "ivs:ListStreamSessions",
         "ivs:ListStreams",
         "ivs:ListTagsForResource",
         "ivs:PutMetadata",
         "ivs:StartComposition",
         "ivs:StartViewerSessionRevocation",
         "ivs:StopStream",
         "ivs:TagResource",
         "ivs:UntagResource",
         "ivs:UpdateChannel"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ivs:BatchGetChannel",
        "ivs:BatchStartViewerSessionRevocation",
        "ivs:CreateChannel",
        "ivs:DeleteChannel",
        "ivs:GetChannel",
        "ivs:GetStream",
        "ivs:GetStreamSession",
        "ivs:ListChannels",
        "ivs:ListStreamKeys",
        "ivs:ListStreamSessions",
        "ivs:ListStreams",
        "ivs:ListTagsForResource",
        "ivs:PutMetadata",
        "ivs:StartComposition",
        "ivs:StartViewerSessionRevocation",
        "ivs:StopStream",
        "ivs:TagResource",
        "ivs:UntagResource",
        "ivs:UpdateChannel"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ivs:Channel"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ivs:Channel"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ivs:BatchGetStreamKey",
         "ivs:CreateChannel",
         "ivs:CreateStreamKey",
         "ivs:DeleteChannel",
         "ivs:DeleteStreamKey",
         "ivs:GetStreamKey",
         "ivs:ListStreamKeys",
         "ivs:ListTagsForResource",
         "ivs:TagResource",
         "ivs:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ivs:BatchGetStreamKey",
        "ivs:CreateChannel",
        "ivs:CreateStreamKey",
        "ivs:DeleteChannel",
        "ivs:DeleteStreamKey",
        "ivs:GetStreamKey",
        "ivs:ListStreamKeys",
        "ivs:ListTagsForResource",
        "ivs:TagResource",
        "ivs:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ivs:Stream-Key"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ivs:Stream-Key"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ivs:CreateEncoderConfiguration",
         "ivs:DeleteEncoderConfiguration",
         "ivs:GetEncoderConfiguration",
         "ivs:ListCompositions",
         "ivs:ListTagsForResource",
         "ivs:StartComposition",
         "ivs:TagResource",
         "ivs:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ivs:CreateEncoderConfiguration",
        "ivs:DeleteEncoderConfiguration",
        "ivs:GetEncoderConfiguration",
        "ivs:ListCompositions",
        "ivs:ListTagsForResource",
        "ivs:StartComposition",
        "ivs:TagResource",
        "ivs:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ivs:Encoder-Configuration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ivs:Encoder-Configuration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ivs:CreateIngestConfiguration",
         "ivs:DeleteIngestConfiguration",
         "ivs:GetIngestConfiguration",
         "ivs:ListTagsForResource",
         "ivs:TagResource",
         "ivs:UntagResource",
         "ivs:UpdateIngestConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ivs:CreateIngestConfiguration",
        "ivs:DeleteIngestConfiguration",
        "ivs:GetIngestConfiguration",
        "ivs:ListTagsForResource",
        "ivs:TagResource",
        "ivs:UntagResource",
        "ivs:UpdateIngestConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ivs:Ingest-Configuration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ivs:Ingest-Configuration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ivs:CreateParticipantToken",
         "ivs:CreateStage",
         "ivs:DeleteStage",
         "ivs:DisconnectParticipant",
         "ivs:GetParticipant",
         "ivs:GetStage",
         "ivs:GetStageSession",
         "ivs:ListCompositions",
         "ivs:ListParticipantEvents",
         "ivs:ListParticipants",
         "ivs:ListStageSessions",
         "ivs:ListStages",
         "ivs:ListTagsForResource",
         "ivs:StartComposition",
         "ivs:TagResource",
         "ivs:UntagResource",
         "ivs:UpdateStage"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ivs:CreateParticipantToken",
        "ivs:CreateStage",
        "ivs:DeleteStage",
        "ivs:DisconnectParticipant",
        "ivs:GetParticipant",
        "ivs:GetStage",
        "ivs:GetStageSession",
        "ivs:ListCompositions",
        "ivs:ListParticipantEvents",
        "ivs:ListParticipants",
        "ivs:ListStageSessions",
        "ivs:ListStages",
        "ivs:ListTagsForResource",
        "ivs:StartComposition",
        "ivs:TagResource",
        "ivs:UntagResource",
        "ivs:UpdateStage"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ivs:Stage"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ivs:Stage"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ivs:CreatePlaybackRestrictionPolicy",
         "ivs:DeletePlaybackRestrictionPolicy",
         "ivs:GetPlaybackRestrictionPolicy",
         "ivs:ListTagsForResource",
         "ivs:TagResource",
         "ivs:UntagResource",
         "ivs:UpdatePlaybackRestrictionPolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ivs:CreatePlaybackRestrictionPolicy",
        "ivs:DeletePlaybackRestrictionPolicy",
        "ivs:GetPlaybackRestrictionPolicy",
        "ivs:ListTagsForResource",
        "ivs:TagResource",
        "ivs:UntagResource",
        "ivs:UpdatePlaybackRestrictionPolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ivs:Playback-Restriction-Policy"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ivs:Playback-Restriction-Policy"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ivs:CreateRecordingConfiguration",
         "ivs:DeleteRecordingConfiguration",
         "ivs:GetRecordingConfiguration",
         "ivs:ListRecordingConfigurations",
         "ivs:ListTagsForResource",
         "ivs:TagResource",
         "ivs:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ivs:CreateRecordingConfiguration",
        "ivs:DeleteRecordingConfiguration",
        "ivs:GetRecordingConfiguration",
        "ivs:ListRecordingConfigurations",
        "ivs:ListTagsForResource",
        "ivs:TagResource",
        "ivs:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ivs:Recording-Configuration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ivs:Recording-Configuration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ivs:CreateStorageConfiguration",
         "ivs:DeleteStorageConfiguration",
         "ivs:GetStorageConfiguration",
         "ivs:ListTagsForResource",
         "ivs:StartComposition",
         "ivs:TagResource",
         "ivs:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ivs:CreateStorageConfiguration",
        "ivs:DeleteStorageConfiguration",
        "ivs:GetStorageConfiguration",
        "ivs:ListTagsForResource",
        "ivs:StartComposition",
        "ivs:TagResource",
        "ivs:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ivs:Storage-Configuration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ivs:Storage-Configuration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ivs:DeletePlaybackKeyPair",
         "ivs:GetPlaybackKeyPair",
         "ivs:ImportPlaybackKeyPair",
         "ivs:ListPlaybackKeyPairs",
         "ivs:ListTagsForResource",
         "ivs:TagResource",
         "ivs:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ivs:DeletePlaybackKeyPair",
        "ivs:GetPlaybackKeyPair",
        "ivs:ImportPlaybackKeyPair",
        "ivs:ListPlaybackKeyPairs",
        "ivs:ListTagsForResource",
        "ivs:TagResource",
        "ivs:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ivs:Playback-Key-Pair"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ivs:Playback-Key-Pair"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ivs:DeletePublicKey",
         "ivs:GetPublicKey",
         "ivs:ImportPublicKey",
         "ivs:ListTagsForResource",
         "ivs:TagResource",
         "ivs:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ivs:DeletePublicKey",
        "ivs:GetPublicKey",
        "ivs:ImportPublicKey",
        "ivs:ListTagsForResource",
        "ivs:TagResource",
        "ivs:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ivs:Public-Key"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ivs:Public-Key"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ivs:GetComposition",
         "ivs:ListTagsForResource",
         "ivs:StopComposition",
         "ivs:TagResource",
         "ivs:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ivs:GetComposition",
        "ivs:ListTagsForResource",
        "ivs:StopComposition",
        "ivs:TagResource",
        "ivs:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ivs:Composition"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ivs:Composition"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ivschat:CreateChatToken",
         "ivschat:CreateRoom",
         "ivschat:DeleteMessage",
         "ivschat:DeleteRoom",
         "ivschat:DisconnectUser",
         "ivschat:GetRoom",
         "ivschat:ListRooms",
         "ivschat:ListTagsForResource",
         "ivschat:SendEvent",
         "ivschat:TagResource",
         "ivschat:UntagResource",
         "ivschat:UpdateRoom"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ivschat:CreateChatToken",
        "ivschat:CreateRoom",
        "ivschat:DeleteMessage",
        "ivschat:DeleteRoom",
        "ivschat:DisconnectUser",
        "ivschat:GetRoom",
        "ivschat:ListRooms",
        "ivschat:ListTagsForResource",
        "ivschat:SendEvent",
        "ivschat:TagResource",
        "ivschat:UntagResource",
        "ivschat:UpdateRoom"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ivschat:Room"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ivschat:Room"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ivschat:CreateLoggingConfiguration",
         "ivschat:DeleteLoggingConfiguration",
         "ivschat:GetLoggingConfiguration",
         "ivschat:ListLoggingConfigurations",
         "ivschat:TagResource",
         "ivschat:UntagResource",
         "ivschat:UpdateLoggingConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ivschat:CreateLoggingConfiguration",
        "ivschat:DeleteLoggingConfiguration",
        "ivschat:GetLoggingConfiguration",
        "ivschat:ListLoggingConfigurations",
        "ivschat:TagResource",
        "ivschat:UntagResource",
        "ivschat:UpdateLoggingConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ivschat:Logging-Configuration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ivschat:Logging-Configuration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kafka:BatchAssociateScramSecret",
         "kafka:BatchDisassociateScramSecret",
         "kafka:CreateCluster",
         "kafka:CreateClusterV2",
         "kafka:CreateVpcConnection",
         "kafka:DeleteCluster",
         "kafka:DeleteClusterPolicy",
         "kafka:DescribeCluster",
         "kafka:DescribeClusterV2",
         "kafka:GetClusterPolicy",
         "kafka:ListClientVpcConnections",
         "kafka:ListClusterOperations",
         "kafka:ListClusterOperationsV2",
         "kafka:ListNodes",
         "kafka:ListScramSecrets",
         "kafka:ListTagsForResource",
         "kafka:PutClusterPolicy",
         "kafka:RebootBroker",
         "kafka:RejectClientVpcConnection",
         "kafka:TagResource",
         "kafka:UntagResource",
         "kafka:UpdateBrokerCount",
         "kafka:UpdateBrokerStorage",
         "kafka:UpdateBrokerType",
         "kafka:UpdateClusterConfiguration",
         "kafka:UpdateClusterKafkaVersion",
         "kafka:UpdateConnectivity",
         "kafka:UpdateMonitoring",
         "kafka:UpdateSecurity",
         "kafka:UpdateStorage"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kafka:BatchAssociateScramSecret",
        "kafka:BatchDisassociateScramSecret",
        "kafka:CreateCluster",
        "kafka:CreateClusterV2",
        "kafka:CreateVpcConnection",
        "kafka:DeleteCluster",
        "kafka:DeleteClusterPolicy",
        "kafka:DescribeCluster",
        "kafka:DescribeClusterV2",
        "kafka:GetClusterPolicy",
        "kafka:ListClientVpcConnections",
        "kafka:ListClusterOperations",
        "kafka:ListClusterOperationsV2",
        "kafka:ListNodes",
        "kafka:ListScramSecrets",
        "kafka:ListTagsForResource",
        "kafka:PutClusterPolicy",
        "kafka:RebootBroker",
        "kafka:RejectClientVpcConnection",
        "kafka:TagResource",
        "kafka:UntagResource",
        "kafka:UpdateBrokerCount",
        "kafka:UpdateBrokerStorage",
        "kafka:UpdateBrokerType",
        "kafka:UpdateClusterConfiguration",
        "kafka:UpdateClusterKafkaVersion",
        "kafka:UpdateConnectivity",
        "kafka:UpdateMonitoring",
        "kafka:UpdateSecurity",
        "kafka:UpdateStorage"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kafka:cluster"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kafka:cluster"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kafka:CreateConfiguration",
         "kafka:DeleteConfiguration",
         "kafka:DescribeConfiguration",
         "kafka:DescribeConfigurationRevision",
         "kafka:ListConfigurationRevisions",
         "kafka:UpdateClusterConfiguration",
         "kafka:UpdateConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kafka:CreateConfiguration",
        "kafka:DeleteConfiguration",
        "kafka:DescribeConfiguration",
        "kafka:DescribeConfigurationRevision",
        "kafka:ListConfigurationRevisions",
        "kafka:UpdateClusterConfiguration",
        "kafka:UpdateConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kafka:configuration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kafka:configuration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kafka:CreateReplicator",
         "kafka:DeleteReplicator",
         "kafka:DescribeReplicator",
         "kafka:UpdateReplicationInfo"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kafka:CreateReplicator",
        "kafka:DeleteReplicator",
        "kafka:DescribeReplicator",
        "kafka:UpdateReplicationInfo"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kafka:replicator"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kafka:replicator"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kafka:CreateVpcConnection",
         "kafka:DeleteVpcConnection",
         "kafka:DescribeVpcConnection",
         "kafka:RejectClientVpcConnection",
         "kafka:TagResource",
         "kafka:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kafka:CreateVpcConnection",
        "kafka:DeleteVpcConnection",
        "kafka:DescribeVpcConnection",
        "kafka:RejectClientVpcConnection",
        "kafka:TagResource",
        "kafka:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kafka:vpc-connection"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kafka:vpc-connection"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kafka-cluster:AlterCluster",
         "kafka-cluster:AlterClusterDynamicConfiguration",
         "kafka-cluster:Connect",
         "kafka-cluster:DescribeCluster",
         "kafka-cluster:DescribeClusterDynamicConfiguration",
         "kafka-cluster:WriteDataIdempotently"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kafka-cluster:AlterCluster",
        "kafka-cluster:AlterClusterDynamicConfiguration",
        "kafka-cluster:Connect",
        "kafka-cluster:DescribeCluster",
        "kafka-cluster:DescribeClusterDynamicConfiguration",
        "kafka-cluster:WriteDataIdempotently"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kafka-cluster:cluster"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kafka-cluster:cluster"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kafka-cluster:AlterGroup",
         "kafka-cluster:DeleteGroup",
         "kafka-cluster:DescribeGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kafka-cluster:AlterGroup",
        "kafka-cluster:DeleteGroup",
        "kafka-cluster:DescribeGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kafka-cluster:group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kafka-cluster:group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kafka-cluster:AlterTopic",
         "kafka-cluster:AlterTopicDynamicConfiguration",
         "kafka-cluster:CreateTopic",
         "kafka-cluster:DeleteTopic",
         "kafka-cluster:DescribeTopic",
         "kafka-cluster:DescribeTopicDynamicConfiguration",
         "kafka-cluster:ReadData",
         "kafka-cluster:WriteData"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kafka-cluster:AlterTopic",
        "kafka-cluster:AlterTopicDynamicConfiguration",
        "kafka-cluster:CreateTopic",
        "kafka-cluster:DeleteTopic",
        "kafka-cluster:DescribeTopic",
        "kafka-cluster:DescribeTopicDynamicConfiguration",
        "kafka-cluster:ReadData",
        "kafka-cluster:WriteData"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kafka-cluster:topic"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kafka-cluster:topic"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kafka-cluster:AlterTransactionalId",
         "kafka-cluster:DescribeTransactionalId"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kafka-cluster:AlterTransactionalId",
        "kafka-cluster:DescribeTransactionalId"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kafka-cluster:transactional-id"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kafka-cluster:transactional-id"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kafkaconnect:DeleteConnector",
         "kafkaconnect:DescribeConnector",
         "kafkaconnect:ListConnectorOperations",
         "kafkaconnect:ListTagsForResource",
         "kafkaconnect:TagResource",
         "kafkaconnect:UntagResource",
         "kafkaconnect:UpdateConnector"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kafkaconnect:DeleteConnector",
        "kafkaconnect:DescribeConnector",
        "kafkaconnect:ListConnectorOperations",
        "kafkaconnect:ListTagsForResource",
        "kafkaconnect:TagResource",
        "kafkaconnect:UntagResource",
        "kafkaconnect:UpdateConnector"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kafkaconnect:connector"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kafkaconnect:connector"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kafkaconnect:DeleteCustomPlugin",
         "kafkaconnect:DescribeCustomPlugin",
         "kafkaconnect:ListTagsForResource",
         "kafkaconnect:TagResource",
         "kafkaconnect:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kafkaconnect:DeleteCustomPlugin",
        "kafkaconnect:DescribeCustomPlugin",
        "kafkaconnect:ListTagsForResource",
        "kafkaconnect:TagResource",
        "kafkaconnect:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kafkaconnect:custom plugin"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kafkaconnect:custom plugin"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kafkaconnect:DeleteWorkerConfiguration",
         "kafkaconnect:DescribeWorkerConfiguration",
         "kafkaconnect:ListTagsForResource",
         "kafkaconnect:TagResource",
         "kafkaconnect:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kafkaconnect:DeleteWorkerConfiguration",
        "kafkaconnect:DescribeWorkerConfiguration",
        "kafkaconnect:ListTagsForResource",
        "kafkaconnect:TagResource",
        "kafkaconnect:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kafkaconnect:worker configuration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kafkaconnect:worker configuration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kafkaconnect:DescribeConnectorOperation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kafkaconnect:DescribeConnectorOperation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kafkaconnect:connector operation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kafkaconnect:connector operation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kendra:AssociateEntitiesToExperience",
         "kendra:AssociatePersonasToEntities",
         "kendra:DeleteExperience",
         "kendra:DescribeExperience",
         "kendra:DisassociateEntitiesFromExperience",
         "kendra:DisassociatePersonasFromEntities",
         "kendra:ListEntityPersonas",
         "kendra:ListExperienceEntities"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kendra:AssociateEntitiesToExperience",
        "kendra:AssociatePersonasToEntities",
        "kendra:DeleteExperience",
        "kendra:DescribeExperience",
        "kendra:DisassociateEntitiesFromExperience",
        "kendra:DisassociatePersonasFromEntities",
        "kendra:ListEntityPersonas",
        "kendra:ListExperienceEntities"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kendra:experience"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kendra:experience"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kendra:AssociateEntitiesToExperience",
         "kendra:AssociatePersonasToEntities",
         "kendra:BatchDeleteDocument",
         "kendra:BatchDeleteFeaturedResultsSet",
         "kendra:BatchGetDocumentStatus",
         "kendra:BatchPutDocument",
         "kendra:ClearQuerySuggestions",
         "kendra:CreateAccessControlConfiguration",
         "kendra:CreateDataSource",
         "kendra:CreateExperience",
         "kendra:CreateFaq",
         "kendra:CreateFeaturedResultsSet",
         "kendra:CreateQuerySuggestionsBlockList",
         "kendra:CreateThesaurus",
         "kendra:DeleteAccessControlConfiguration",
         "kendra:DeleteDataSource",
         "kendra:DeleteExperience",
         "kendra:DeleteFaq",
         "kendra:DeleteIndex",
         "kendra:DeletePrincipalMapping",
         "kendra:DeleteQuerySuggestionsBlockList",
         "kendra:DeleteThesaurus",
         "kendra:DescribeAccessControlConfiguration",
         "kendra:DescribeDataSource",
         "kendra:DescribeExperience",
         "kendra:DescribeFaq",
         "kendra:DescribeFeaturedResultsSet",
         "kendra:DescribeIndex",
         "kendra:DescribePrincipalMapping",
         "kendra:DescribeQuerySuggestionsBlockList",
         "kendra:DescribeQuerySuggestionsConfig",
         "kendra:DescribeThesaurus",
         "kendra:DisassociateEntitiesFromExperience",
         "kendra:DisassociatePersonasFromEntities",
         "kendra:GetQuerySuggestions",
         "kendra:GetSnapshots",
         "kendra:ListAccessControlConfigurations",
         "kendra:ListDataSourceSyncJobs",
         "kendra:ListDataSources",
         "kendra:ListEntityPersonas",
         "kendra:ListExperienceEntities",
         "kendra:ListExperiences",
         "kendra:ListFaqs",
         "kendra:ListFeaturedResultsSets",
         "kendra:ListGroupsOlderThanOrderingId",
         "kendra:ListQuerySuggestionsBlockLists",
         "kendra:ListTagsForResource",
         "kendra:ListThesauri",
         "kendra:PutPrincipalMapping",
         "kendra:Query",
         "kendra:Retrieve",
         "kendra:StartDataSourceSyncJob",
         "kendra:StopDataSourceSyncJob",
         "kendra:SubmitFeedback",
         "kendra:TagResource",
         "kendra:UntagResource",
         "kendra:UpdateAccessControlConfiguration",
         "kendra:UpdateDataSource",
         "kendra:UpdateExperience",
         "kendra:UpdateFeaturedResultsSet",
         "kendra:UpdateIndex",
         "kendra:UpdateQuerySuggestionsBlockList",
         "kendra:UpdateQuerySuggestionsConfig",
         "kendra:UpdateThesaurus"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kendra:AssociateEntitiesToExperience",
        "kendra:AssociatePersonasToEntities",
        "kendra:BatchDeleteDocument",
        "kendra:BatchDeleteFeaturedResultsSet",
        "kendra:BatchGetDocumentStatus",
        "kendra:BatchPutDocument",
        "kendra:ClearQuerySuggestions",
        "kendra:CreateAccessControlConfiguration",
        "kendra:CreateDataSource",
        "kendra:CreateExperience",
        "kendra:CreateFaq",
        "kendra:CreateFeaturedResultsSet",
        "kendra:CreateQuerySuggestionsBlockList",
        "kendra:CreateThesaurus",
        "kendra:DeleteAccessControlConfiguration",
        "kendra:DeleteDataSource",
        "kendra:DeleteExperience",
        "kendra:DeleteFaq",
        "kendra:DeleteIndex",
        "kendra:DeletePrincipalMapping",
        "kendra:DeleteQuerySuggestionsBlockList",
        "kendra:DeleteThesaurus",
        "kendra:DescribeAccessControlConfiguration",
        "kendra:DescribeDataSource",
        "kendra:DescribeExperience",
        "kendra:DescribeFaq",
        "kendra:DescribeFeaturedResultsSet",
        "kendra:DescribeIndex",
        "kendra:DescribePrincipalMapping",
        "kendra:DescribeQuerySuggestionsBlockList",
        "kendra:DescribeQuerySuggestionsConfig",
        "kendra:DescribeThesaurus",
        "kendra:DisassociateEntitiesFromExperience",
        "kendra:DisassociatePersonasFromEntities",
        "kendra:GetQuerySuggestions",
        "kendra:GetSnapshots",
        "kendra:ListAccessControlConfigurations",
        "kendra:ListDataSourceSyncJobs",
        "kendra:ListDataSources",
        "kendra:ListEntityPersonas",
        "kendra:ListExperienceEntities",
        "kendra:ListExperiences",
        "kendra:ListFaqs",
        "kendra:ListFeaturedResultsSets",
        "kendra:ListGroupsOlderThanOrderingId",
        "kendra:ListQuerySuggestionsBlockLists",
        "kendra:ListTagsForResource",
        "kendra:ListThesauri",
        "kendra:PutPrincipalMapping",
        "kendra:Query",
        "kendra:Retrieve",
        "kendra:StartDataSourceSyncJob",
        "kendra:StopDataSourceSyncJob",
        "kendra:SubmitFeedback",
        "kendra:TagResource",
        "kendra:UntagResource",
        "kendra:UpdateAccessControlConfiguration",
        "kendra:UpdateDataSource",
        "kendra:UpdateExperience",
        "kendra:UpdateFeaturedResultsSet",
        "kendra:UpdateIndex",
        "kendra:UpdateQuerySuggestionsBlockList",
        "kendra:UpdateQuerySuggestionsConfig",
        "kendra:UpdateThesaurus"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kendra:index"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kendra:index"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kendra:BatchDeleteFeaturedResultsSet",
         "kendra:DescribeFeaturedResultsSet",
         "kendra:ListTagsForResource",
         "kendra:TagResource",
         "kendra:UntagResource",
         "kendra:UpdateFeaturedResultsSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kendra:BatchDeleteFeaturedResultsSet",
        "kendra:DescribeFeaturedResultsSet",
        "kendra:ListTagsForResource",
        "kendra:TagResource",
        "kendra:UntagResource",
        "kendra:UpdateFeaturedResultsSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kendra:featured-results-set"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kendra:featured-results-set"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kendra:DeleteAccessControlConfiguration",
         "kendra:DescribeAccessControlConfiguration",
         "kendra:UpdateAccessControlConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kendra:DeleteAccessControlConfiguration",
        "kendra:DescribeAccessControlConfiguration",
        "kendra:UpdateAccessControlConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kendra:access-control-configuration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kendra:access-control-configuration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kendra:DeleteDataSource",
         "kendra:DeletePrincipalMapping",
         "kendra:DescribeDataSource",
         "kendra:DescribePrincipalMapping",
         "kendra:ListDataSourceSyncJobs",
         "kendra:ListGroupsOlderThanOrderingId",
         "kendra:ListTagsForResource",
         "kendra:PutPrincipalMapping",
         "kendra:StartDataSourceSyncJob",
         "kendra:StopDataSourceSyncJob",
         "kendra:TagResource",
         "kendra:UntagResource",
         "kendra:UpdateDataSource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kendra:DeleteDataSource",
        "kendra:DeletePrincipalMapping",
        "kendra:DescribeDataSource",
        "kendra:DescribePrincipalMapping",
        "kendra:ListDataSourceSyncJobs",
        "kendra:ListGroupsOlderThanOrderingId",
        "kendra:ListTagsForResource",
        "kendra:PutPrincipalMapping",
        "kendra:StartDataSourceSyncJob",
        "kendra:StopDataSourceSyncJob",
        "kendra:TagResource",
        "kendra:UntagResource",
        "kendra:UpdateDataSource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kendra:data-source"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kendra:data-source"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kendra:DeleteFaq",
         "kendra:DescribeFaq",
         "kendra:ListTagsForResource",
         "kendra:TagResource",
         "kendra:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kendra:DeleteFaq",
        "kendra:DescribeFaq",
        "kendra:ListTagsForResource",
        "kendra:TagResource",
        "kendra:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kendra:faq"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kendra:faq"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kendra:DeleteQuerySuggestionsBlockList",
         "kendra:DescribeQuerySuggestionsBlockList",
         "kendra:ListTagsForResource",
         "kendra:TagResource",
         "kendra:UntagResource",
         "kendra:UpdateQuerySuggestionsBlockList"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kendra:DeleteQuerySuggestionsBlockList",
        "kendra:DescribeQuerySuggestionsBlockList",
        "kendra:ListTagsForResource",
        "kendra:TagResource",
        "kendra:UntagResource",
        "kendra:UpdateQuerySuggestionsBlockList"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kendra:query-suggestions-block-list"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kendra:query-suggestions-block-list"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kendra:DeleteThesaurus",
         "kendra:DescribeThesaurus",
         "kendra:ListTagsForResource",
         "kendra:TagResource",
         "kendra:UntagResource",
         "kendra:UpdateThesaurus"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kendra:DeleteThesaurus",
        "kendra:DescribeThesaurus",
        "kendra:ListTagsForResource",
        "kendra:TagResource",
        "kendra:UntagResource",
        "kendra:UpdateThesaurus"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kendra:thesaurus"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kendra:thesaurus"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kendra-ranking:DeleteRescoreExecutionPlan",
         "kendra-ranking:DescribeRescoreExecutionPlan",
         "kendra-ranking:ListTagsForResource",
         "kendra-ranking:Rescore",
         "kendra-ranking:TagResource",
         "kendra-ranking:UntagResource",
         "kendra-ranking:UpdateRescoreExecutionPlan"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kendra-ranking:DeleteRescoreExecutionPlan",
        "kendra-ranking:DescribeRescoreExecutionPlan",
        "kendra-ranking:ListTagsForResource",
        "kendra-ranking:Rescore",
        "kendra-ranking:TagResource",
        "kendra-ranking:UntagResource",
        "kendra-ranking:UpdateRescoreExecutionPlan"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kendra-ranking:rescore-execution-plan"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kendra-ranking:rescore-execution-plan"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kinesis:AddTagsToStream",
         "kinesis:CreateStream",
         "kinesis:DecreaseStreamRetentionPeriod",
         "kinesis:DeleteResourcePolicy",
         "kinesis:DeleteStream",
         "kinesis:DescribeStream",
         "kinesis:DescribeStreamSummary",
         "kinesis:GetRecords",
         "kinesis:GetResourcePolicy",
         "kinesis:GetShardIterator",
         "kinesis:IncreaseStreamRetentionPeriod",
         "kinesis:ListShards",
         "kinesis:ListStreamConsumers",
         "kinesis:ListTagsForStream",
         "kinesis:MergeShards",
         "kinesis:PutRecord",
         "kinesis:PutRecords",
         "kinesis:PutResourcePolicy",
         "kinesis:RegisterStreamConsumer",
         "kinesis:RemoveTagsFromStream",
         "kinesis:SplitShard",
         "kinesis:StartStreamEncryption",
         "kinesis:StopStreamEncryption"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kinesis:AddTagsToStream",
        "kinesis:CreateStream",
        "kinesis:DecreaseStreamRetentionPeriod",
        "kinesis:DeleteResourcePolicy",
        "kinesis:DeleteStream",
        "kinesis:DescribeStream",
        "kinesis:DescribeStreamSummary",
        "kinesis:GetRecords",
        "kinesis:GetResourcePolicy",
        "kinesis:GetShardIterator",
        "kinesis:IncreaseStreamRetentionPeriod",
        "kinesis:ListShards",
        "kinesis:ListStreamConsumers",
        "kinesis:ListTagsForStream",
        "kinesis:MergeShards",
        "kinesis:PutRecord",
        "kinesis:PutRecords",
        "kinesis:PutResourcePolicy",
        "kinesis:RegisterStreamConsumer",
        "kinesis:RemoveTagsFromStream",
        "kinesis:SplitShard",
        "kinesis:StartStreamEncryption",
        "kinesis:StopStreamEncryption"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kinesis:stream"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kinesis:stream"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kinesis:DeleteResourcePolicy",
         "kinesis:DeregisterStreamConsumer",
         "kinesis:DescribeStreamConsumer",
         "kinesis:GetResourcePolicy",
         "kinesis:PutResourcePolicy",
         "kinesis:SubscribeToShard"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kinesis:DeleteResourcePolicy",
        "kinesis:DeregisterStreamConsumer",
        "kinesis:DescribeStreamConsumer",
        "kinesis:GetResourcePolicy",
        "kinesis:PutResourcePolicy",
        "kinesis:SubscribeToShard"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kinesis:consumer"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kinesis:consumer"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kinesis:StartStreamEncryption",
         "kinesis:StopStreamEncryption"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kinesis:StartStreamEncryption",
        "kinesis:StopStreamEncryption"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kinesis:kmsKey"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kinesis:kmsKey"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kinesisanalytics:AddApplicationCloudWatchLoggingOption",
         "kinesisanalytics:AddApplicationInput",
         "kinesisanalytics:AddApplicationInputProcessingConfiguration",
         "kinesisanalytics:AddApplicationOutput",
         "kinesisanalytics:AddApplicationReferenceDataSource",
         "kinesisanalytics:AddApplicationVpcConfiguration",
         "kinesisanalytics:CreateApplicationPresignedUrl",
         "kinesisanalytics:CreateApplicationSnapshot",
         "kinesisanalytics:DeleteApplication",
         "kinesisanalytics:DeleteApplicationCloudWatchLoggingOption",
         "kinesisanalytics:DeleteApplicationInputProcessingConfiguration",
         "kinesisanalytics:DeleteApplicationOutput",
         "kinesisanalytics:DeleteApplicationReferenceDataSource",
         "kinesisanalytics:DeleteApplicationSnapshot",
         "kinesisanalytics:DeleteApplicationVpcConfiguration",
         "kinesisanalytics:DescribeApplication",
         "kinesisanalytics:DescribeApplicationOperation",
         "kinesisanalytics:DescribeApplicationSnapshot",
         "kinesisanalytics:DescribeApplicationVersion",
         "kinesisanalytics:GetApplicationState",
         "kinesisanalytics:ListApplicationOperations",
         "kinesisanalytics:ListApplicationSnapshots",
         "kinesisanalytics:ListApplicationVersions",
         "kinesisanalytics:ListTagsForResource",
         "kinesisanalytics:RollbackApplication",
         "kinesisanalytics:StartApplication",
         "kinesisanalytics:StopApplication",
         "kinesisanalytics:TagResource",
         "kinesisanalytics:UntagResource",
         "kinesisanalytics:UpdateApplication",
         "kinesisanalytics:UpdateApplicationMaintenanceConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kinesisanalytics:AddApplicationCloudWatchLoggingOption",
        "kinesisanalytics:AddApplicationInput",
        "kinesisanalytics:AddApplicationInputProcessingConfiguration",
        "kinesisanalytics:AddApplicationOutput",
        "kinesisanalytics:AddApplicationReferenceDataSource",
        "kinesisanalytics:AddApplicationVpcConfiguration",
        "kinesisanalytics:CreateApplicationPresignedUrl",
        "kinesisanalytics:CreateApplicationSnapshot",
        "kinesisanalytics:DeleteApplication",
        "kinesisanalytics:DeleteApplicationCloudWatchLoggingOption",
        "kinesisanalytics:DeleteApplicationInputProcessingConfiguration",
        "kinesisanalytics:DeleteApplicationOutput",
        "kinesisanalytics:DeleteApplicationReferenceDataSource",
        "kinesisanalytics:DeleteApplicationSnapshot",
        "kinesisanalytics:DeleteApplicationVpcConfiguration",
        "kinesisanalytics:DescribeApplication",
        "kinesisanalytics:DescribeApplicationOperation",
        "kinesisanalytics:DescribeApplicationSnapshot",
        "kinesisanalytics:DescribeApplicationVersion",
        "kinesisanalytics:GetApplicationState",
        "kinesisanalytics:ListApplicationOperations",
        "kinesisanalytics:ListApplicationSnapshots",
        "kinesisanalytics:ListApplicationVersions",
        "kinesisanalytics:ListTagsForResource",
        "kinesisanalytics:RollbackApplication",
        "kinesisanalytics:StartApplication",
        "kinesisanalytics:StopApplication",
        "kinesisanalytics:TagResource",
        "kinesisanalytics:UntagResource",
        "kinesisanalytics:UpdateApplication",
        "kinesisanalytics:UpdateApplicationMaintenanceConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kinesisanalytics:application"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kinesisanalytics:application"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kinesisvideo:ConnectAsMaster",
         "kinesisvideo:ConnectAsViewer",
         "kinesisvideo:CreateSignalingChannel",
         "kinesisvideo:DeleteSignalingChannel",
         "kinesisvideo:DescribeMediaStorageConfiguration",
         "kinesisvideo:DescribeSignalingChannel",
         "kinesisvideo:GetIceServerConfig",
         "kinesisvideo:GetSignalingChannelEndpoint",
         "kinesisvideo:JoinStorageSession",
         "kinesisvideo:JoinStorageSessionAsViewer",
         "kinesisvideo:ListTagsForResource",
         "kinesisvideo:SendAlexaOfferToMaster",
         "kinesisvideo:TagResource",
         "kinesisvideo:UntagResource",
         "kinesisvideo:UpdateMediaStorageConfiguration",
         "kinesisvideo:UpdateSignalingChannel"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kinesisvideo:ConnectAsMaster",
        "kinesisvideo:ConnectAsViewer",
        "kinesisvideo:CreateSignalingChannel",
        "kinesisvideo:DeleteSignalingChannel",
        "kinesisvideo:DescribeMediaStorageConfiguration",
        "kinesisvideo:DescribeSignalingChannel",
        "kinesisvideo:GetIceServerConfig",
        "kinesisvideo:GetSignalingChannelEndpoint",
        "kinesisvideo:JoinStorageSession",
        "kinesisvideo:JoinStorageSessionAsViewer",
        "kinesisvideo:ListTagsForResource",
        "kinesisvideo:SendAlexaOfferToMaster",
        "kinesisvideo:TagResource",
        "kinesisvideo:UntagResource",
        "kinesisvideo:UpdateMediaStorageConfiguration",
        "kinesisvideo:UpdateSignalingChannel"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kinesisvideo:channel"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kinesisvideo:channel"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kinesisvideo:CreateStream",
         "kinesisvideo:DeleteEdgeConfiguration",
         "kinesisvideo:DeleteStream",
         "kinesisvideo:DescribeEdgeConfiguration",
         "kinesisvideo:DescribeImageGenerationConfiguration",
         "kinesisvideo:DescribeMappedResourceConfiguration",
         "kinesisvideo:DescribeNotificationConfiguration",
         "kinesisvideo:DescribeStream",
         "kinesisvideo:GetClip",
         "kinesisvideo:GetDASHStreamingSessionURL",
         "kinesisvideo:GetDataEndpoint",
         "kinesisvideo:GetHLSStreamingSessionURL",
         "kinesisvideo:GetImages",
         "kinesisvideo:GetMedia",
         "kinesisvideo:GetMediaForFragmentList",
         "kinesisvideo:ListFragments",
         "kinesisvideo:ListTagsForResource",
         "kinesisvideo:ListTagsForStream",
         "kinesisvideo:PutMedia",
         "kinesisvideo:StartEdgeConfigurationUpdate",
         "kinesisvideo:TagResource",
         "kinesisvideo:TagStream",
         "kinesisvideo:UntagResource",
         "kinesisvideo:UntagStream",
         "kinesisvideo:UpdateDataRetention",
         "kinesisvideo:UpdateImageGenerationConfiguration",
         "kinesisvideo:UpdateNotificationConfiguration",
         "kinesisvideo:UpdateStream"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kinesisvideo:CreateStream",
        "kinesisvideo:DeleteEdgeConfiguration",
        "kinesisvideo:DeleteStream",
        "kinesisvideo:DescribeEdgeConfiguration",
        "kinesisvideo:DescribeImageGenerationConfiguration",
        "kinesisvideo:DescribeMappedResourceConfiguration",
        "kinesisvideo:DescribeNotificationConfiguration",
        "kinesisvideo:DescribeStream",
        "kinesisvideo:GetClip",
        "kinesisvideo:GetDASHStreamingSessionURL",
        "kinesisvideo:GetDataEndpoint",
        "kinesisvideo:GetHLSStreamingSessionURL",
        "kinesisvideo:GetImages",
        "kinesisvideo:GetMedia",
        "kinesisvideo:GetMediaForFragmentList",
        "kinesisvideo:ListFragments",
        "kinesisvideo:ListTagsForResource",
        "kinesisvideo:ListTagsForStream",
        "kinesisvideo:PutMedia",
        "kinesisvideo:StartEdgeConfigurationUpdate",
        "kinesisvideo:TagResource",
        "kinesisvideo:TagStream",
        "kinesisvideo:UntagResource",
        "kinesisvideo:UntagStream",
        "kinesisvideo:UpdateDataRetention",
        "kinesisvideo:UpdateImageGenerationConfiguration",
        "kinesisvideo:UpdateNotificationConfiguration",
        "kinesisvideo:UpdateStream"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kinesisvideo:stream"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kinesisvideo:stream"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kms:CancelKeyDeletion",
         "kms:CreateAlias",
         "kms:CreateGrant",
         "kms:Decrypt",
         "kms:DeleteAlias",
         "kms:DeleteImportedKeyMaterial",
         "kms:DeriveSharedSecret",
         "kms:DescribeKey",
         "kms:DisableKey",
         "kms:DisableKeyRotation",
         "kms:EnableKey",
         "kms:EnableKeyRotation",
         "kms:Encrypt",
         "kms:GenerateDataKey",
         "kms:GenerateDataKeyPair",
         "kms:GenerateDataKeyPairWithoutPlaintext",
         "kms:GenerateDataKeyWithoutPlaintext",
         "kms:GenerateMac",
         "kms:GetKeyPolicy",
         "kms:GetKeyRotationStatus",
         "kms:GetParametersForImport",
         "kms:GetPublicKey",
         "kms:ImportKeyMaterial",
         "kms:ListGrants",
         "kms:ListKeyPolicies",
         "kms:ListKeyRotations",
         "kms:ListResourceTags",
         "kms:PutKeyPolicy",
         "kms:ReEncryptFrom",
         "kms:ReEncryptTo",
         "kms:ReplicateKey",
         "kms:RetireGrant",
         "kms:RevokeGrant",
         "kms:RotateKeyOnDemand",
         "kms:ScheduleKeyDeletion",
         "kms:Sign",
         "kms:SynchronizeMultiRegionKey",
         "kms:TagResource",
         "kms:UntagResource",
         "kms:UpdateAlias",
         "kms:UpdateKeyDescription",
         "kms:UpdatePrimaryRegion",
         "kms:Verify",
         "kms:VerifyMac"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kms:CancelKeyDeletion",
        "kms:CreateAlias",
        "kms:CreateGrant",
        "kms:Decrypt",
        "kms:DeleteAlias",
        "kms:DeleteImportedKeyMaterial",
        "kms:DeriveSharedSecret",
        "kms:DescribeKey",
        "kms:DisableKey",
        "kms:DisableKeyRotation",
        "kms:EnableKey",
        "kms:EnableKeyRotation",
        "kms:Encrypt",
        "kms:GenerateDataKey",
        "kms:GenerateDataKeyPair",
        "kms:GenerateDataKeyPairWithoutPlaintext",
        "kms:GenerateDataKeyWithoutPlaintext",
        "kms:GenerateMac",
        "kms:GetKeyPolicy",
        "kms:GetKeyRotationStatus",
        "kms:GetParametersForImport",
        "kms:GetPublicKey",
        "kms:ImportKeyMaterial",
        "kms:ListGrants",
        "kms:ListKeyPolicies",
        "kms:ListKeyRotations",
        "kms:ListResourceTags",
        "kms:PutKeyPolicy",
        "kms:ReEncryptFrom",
        "kms:ReEncryptTo",
        "kms:ReplicateKey",
        "kms:RetireGrant",
        "kms:RevokeGrant",
        "kms:RotateKeyOnDemand",
        "kms:ScheduleKeyDeletion",
        "kms:Sign",
        "kms:SynchronizeMultiRegionKey",
        "kms:TagResource",
        "kms:UntagResource",
        "kms:UpdateAlias",
        "kms:UpdateKeyDescription",
        "kms:UpdatePrimaryRegion",
        "kms:Verify",
        "kms:VerifyMac"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kms:key"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kms:key"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "kms:CreateAlias",
         "kms:DeleteAlias",
         "kms:UpdateAlias"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "kms:CreateAlias",
        "kms:DeleteAlias",
        "kms:UpdateAlias"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/kms:alias"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/kms:alias"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lambda:AddLayerVersionPermission",
         "lambda:DeleteLayerVersion",
         "lambda:GetLayerVersion",
         "lambda:GetLayerVersionPolicy",
         "lambda:RemoveLayerVersionPermission"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lambda:AddLayerVersionPermission",
        "lambda:DeleteLayerVersion",
        "lambda:GetLayerVersion",
        "lambda:GetLayerVersionPolicy",
        "lambda:RemoveLayerVersionPermission"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lambda:layerVersion"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lambda:layerVersion"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lambda:AddPermission",
         "lambda:CreateAlias",
         "lambda:CreateFunction",
         "lambda:CreateFunctionUrlConfig",
         "lambda:DeleteAlias",
         "lambda:DeleteFunction",
         "lambda:DeleteFunctionCodeSigningConfig",
         "lambda:DeleteFunctionConcurrency",
         "lambda:DeleteFunctionEventInvokeConfig",
         "lambda:DeleteFunctionUrlConfig",
         "lambda:DisableReplication",
         "lambda:EnableReplication",
         "lambda:GetAlias",
         "lambda:GetFunction",
         "lambda:GetFunctionCodeSigningConfig",
         "lambda:GetFunctionConcurrency",
         "lambda:GetFunctionConfiguration",
         "lambda:GetFunctionEventInvokeConfig",
         "lambda:GetFunctionRecursionConfig",
         "lambda:GetFunctionUrlConfig",
         "lambda:GetPolicy",
         "lambda:GetRuntimeManagementConfig",
         "lambda:InvokeAsync",
         "lambda:InvokeFunction",
         "lambda:InvokeFunctionUrl",
         "lambda:ListAliases",
         "lambda:ListFunctionEventInvokeConfigs",
         "lambda:ListFunctionUrlConfigs",
         "lambda:ListProvisionedConcurrencyConfigs",
         "lambda:ListTags",
         "lambda:ListVersionsByFunction",
         "lambda:PublishVersion",
         "lambda:PutFunctionCodeSigningConfig",
         "lambda:PutFunctionConcurrency",
         "lambda:PutFunctionEventInvokeConfig",
         "lambda:PutFunctionRecursionConfig",
         "lambda:PutRuntimeManagementConfig",
         "lambda:RemovePermission",
         "lambda:TagResource",
         "lambda:UntagResource",
         "lambda:UpdateAlias",
         "lambda:UpdateFunctionCode",
         "lambda:UpdateFunctionCodeSigningConfig",
         "lambda:UpdateFunctionConfiguration",
         "lambda:UpdateFunctionEventInvokeConfig",
         "lambda:UpdateFunctionUrlConfig"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lambda:AddPermission",
        "lambda:CreateAlias",
        "lambda:CreateFunction",
        "lambda:CreateFunctionUrlConfig",
        "lambda:DeleteAlias",
        "lambda:DeleteFunction",
        "lambda:DeleteFunctionCodeSigningConfig",
        "lambda:DeleteFunctionConcurrency",
        "lambda:DeleteFunctionEventInvokeConfig",
        "lambda:DeleteFunctionUrlConfig",
        "lambda:DisableReplication",
        "lambda:EnableReplication",
        "lambda:GetAlias",
        "lambda:GetFunction",
        "lambda:GetFunctionCodeSigningConfig",
        "lambda:GetFunctionConcurrency",
        "lambda:GetFunctionConfiguration",
        "lambda:GetFunctionEventInvokeConfig",
        "lambda:GetFunctionRecursionConfig",
        "lambda:GetFunctionUrlConfig",
        "lambda:GetPolicy",
        "lambda:GetRuntimeManagementConfig",
        "lambda:InvokeAsync",
        "lambda:InvokeFunction",
        "lambda:InvokeFunctionUrl",
        "lambda:ListAliases",
        "lambda:ListFunctionEventInvokeConfigs",
        "lambda:ListFunctionUrlConfigs",
        "lambda:ListProvisionedConcurrencyConfigs",
        "lambda:ListTags",
        "lambda:ListVersionsByFunction",
        "lambda:PublishVersion",
        "lambda:PutFunctionCodeSigningConfig",
        "lambda:PutFunctionConcurrency",
        "lambda:PutFunctionEventInvokeConfig",
        "lambda:PutFunctionRecursionConfig",
        "lambda:PutRuntimeManagementConfig",
        "lambda:RemovePermission",
        "lambda:TagResource",
        "lambda:UntagResource",
        "lambda:UpdateAlias",
        "lambda:UpdateFunctionCode",
        "lambda:UpdateFunctionCodeSigningConfig",
        "lambda:UpdateFunctionConfiguration",
        "lambda:UpdateFunctionEventInvokeConfig",
        "lambda:UpdateFunctionUrlConfig"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lambda:function"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lambda:function"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lambda:DeleteCodeSigningConfig",
         "lambda:GetCodeSigningConfig",
         "lambda:ListFunctionsByCodeSigningConfig",
         "lambda:ListTags",
         "lambda:PutFunctionCodeSigningConfig",
         "lambda:TagResource",
         "lambda:UntagResource",
         "lambda:UpdateCodeSigningConfig",
         "lambda:UpdateFunctionCodeSigningConfig"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lambda:DeleteCodeSigningConfig",
        "lambda:GetCodeSigningConfig",
        "lambda:ListFunctionsByCodeSigningConfig",
        "lambda:ListTags",
        "lambda:PutFunctionCodeSigningConfig",
        "lambda:TagResource",
        "lambda:UntagResource",
        "lambda:UpdateCodeSigningConfig",
        "lambda:UpdateFunctionCodeSigningConfig"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lambda:code signing config"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lambda:code signing config"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lambda:DeleteEventSourceMapping",
         "lambda:GetEventSourceMapping",
         "lambda:ListTags",
         "lambda:TagResource",
         "lambda:UntagResource",
         "lambda:UpdateEventSourceMapping"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lambda:DeleteEventSourceMapping",
        "lambda:GetEventSourceMapping",
        "lambda:ListTags",
        "lambda:TagResource",
        "lambda:UntagResource",
        "lambda:UpdateEventSourceMapping"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lambda:eventSourceMapping"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lambda:eventSourceMapping"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lambda:DeleteProvisionedConcurrencyConfig",
         "lambda:GetProvisionedConcurrencyConfig",
         "lambda:PutProvisionedConcurrencyConfig"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lambda:DeleteProvisionedConcurrencyConfig",
        "lambda:GetProvisionedConcurrencyConfig",
        "lambda:PutProvisionedConcurrencyConfig"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lambda:function alias"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lambda:function alias"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lambda:DeleteProvisionedConcurrencyConfig",
         "lambda:GetProvisionedConcurrencyConfig",
         "lambda:PutProvisionedConcurrencyConfig"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lambda:DeleteProvisionedConcurrencyConfig",
        "lambda:GetProvisionedConcurrencyConfig",
        "lambda:PutProvisionedConcurrencyConfig"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lambda:function version"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lambda:function version"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lambda:PublishLayerVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lambda:PublishLayerVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lambda:layer"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lambda:layer"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "launchwizard:CreateDeployment",
         "launchwizard:DeleteDeployment",
         "launchwizard:GetDeployment",
         "launchwizard:ListTagsForResource",
         "launchwizard:TagResource",
         "launchwizard:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "launchwizard:CreateDeployment",
        "launchwizard:DeleteDeployment",
        "launchwizard:GetDeployment",
        "launchwizard:ListTagsForResource",
        "launchwizard:TagResource",
        "launchwizard:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/launchwizard:deployment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/launchwizard:deployment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lex:BatchCreateCustomVocabularyItem",
         "lex:BatchDeleteCustomVocabularyItem",
         "lex:BatchUpdateCustomVocabularyItem",
         "lex:BuildBotLocale",
         "lex:CreateBot",
         "lex:CreateBotChannel",
         "lex:CreateBotLocale",
         "lex:CreateBotReplica",
         "lex:CreateBotVersion",
         "lex:CreateCustomVocabulary",
         "lex:CreateExport",
         "lex:CreateIntent",
         "lex:CreateResourcePolicy",
         "lex:CreateSlot",
         "lex:CreateSlotType",
         "lex:DeleteBot",
         "lex:DeleteBotChannel",
         "lex:DeleteBotLocale",
         "lex:DeleteBotReplica",
         "lex:DeleteBotVersion",
         "lex:DeleteCustomVocabulary",
         "lex:DeleteExport",
         "lex:DeleteImport",
         "lex:DeleteIntent",
         "lex:DeleteResourcePolicy",
         "lex:DeleteSlot",
         "lex:DeleteSlotType",
         "lex:DeleteUtterances",
         "lex:DescribeBot",
         "lex:DescribeBotChannel",
         "lex:DescribeBotLocale",
         "lex:DescribeBotRecommendation",
         "lex:DescribeBotReplica",
         "lex:DescribeBotResourceGeneration",
         "lex:DescribeBotVersion",
         "lex:DescribeCustomVocabulary",
         "lex:DescribeCustomVocabularyMetadata",
         "lex:DescribeExport",
         "lex:DescribeImport",
         "lex:DescribeIntent",
         "lex:DescribeResourcePolicy",
         "lex:DescribeSlot",
         "lex:DescribeSlotType",
         "lex:GenerateBotElement",
         "lex:ListAggregatedUtterances",
         "lex:ListBotAliasReplicas",
         "lex:ListBotAliases",
         "lex:ListBotChannels",
         "lex:ListBotLocales",
         "lex:ListBotRecommendations",
         "lex:ListBotReplicas",
         "lex:ListBotResourceGenerations",
         "lex:ListBotVersionReplicas",
         "lex:ListBotVersions",
         "lex:ListCustomVocabularyItems",
         "lex:ListIntentMetrics",
         "lex:ListIntentPaths",
         "lex:ListIntentStageMetrics",
         "lex:ListIntents",
         "lex:ListRecommendedIntents",
         "lex:ListSessionAnalyticsData",
         "lex:ListSessionMetrics",
         "lex:ListSlotTypes",
         "lex:ListSlots",
         "lex:ListTagsForResource",
         "lex:SearchAssociatedTranscripts",
         "lex:StartBotRecommendation",
         "lex:StartBotResourceGeneration",
         "lex:StartImport",
         "lex:StopBotRecommendation",
         "lex:TagResource",
         "lex:UntagResource",
         "lex:UpdateBot",
         "lex:UpdateBotLocale",
         "lex:UpdateBotRecommendation",
         "lex:UpdateCustomVocabulary",
         "lex:UpdateExport",
         "lex:UpdateIntent",
         "lex:UpdateResourcePolicy",
         "lex:UpdateSlot",
         "lex:UpdateSlotType"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lex:BatchCreateCustomVocabularyItem",
        "lex:BatchDeleteCustomVocabularyItem",
        "lex:BatchUpdateCustomVocabularyItem",
        "lex:BuildBotLocale",
        "lex:CreateBot",
        "lex:CreateBotChannel",
        "lex:CreateBotLocale",
        "lex:CreateBotReplica",
        "lex:CreateBotVersion",
        "lex:CreateCustomVocabulary",
        "lex:CreateExport",
        "lex:CreateIntent",
        "lex:CreateResourcePolicy",
        "lex:CreateSlot",
        "lex:CreateSlotType",
        "lex:DeleteBot",
        "lex:DeleteBotChannel",
        "lex:DeleteBotLocale",
        "lex:DeleteBotReplica",
        "lex:DeleteBotVersion",
        "lex:DeleteCustomVocabulary",
        "lex:DeleteExport",
        "lex:DeleteImport",
        "lex:DeleteIntent",
        "lex:DeleteResourcePolicy",
        "lex:DeleteSlot",
        "lex:DeleteSlotType",
        "lex:DeleteUtterances",
        "lex:DescribeBot",
        "lex:DescribeBotChannel",
        "lex:DescribeBotLocale",
        "lex:DescribeBotRecommendation",
        "lex:DescribeBotReplica",
        "lex:DescribeBotResourceGeneration",
        "lex:DescribeBotVersion",
        "lex:DescribeCustomVocabulary",
        "lex:DescribeCustomVocabularyMetadata",
        "lex:DescribeExport",
        "lex:DescribeImport",
        "lex:DescribeIntent",
        "lex:DescribeResourcePolicy",
        "lex:DescribeSlot",
        "lex:DescribeSlotType",
        "lex:GenerateBotElement",
        "lex:ListAggregatedUtterances",
        "lex:ListBotAliasReplicas",
        "lex:ListBotAliases",
        "lex:ListBotChannels",
        "lex:ListBotLocales",
        "lex:ListBotRecommendations",
        "lex:ListBotReplicas",
        "lex:ListBotResourceGenerations",
        "lex:ListBotVersionReplicas",
        "lex:ListBotVersions",
        "lex:ListCustomVocabularyItems",
        "lex:ListIntentMetrics",
        "lex:ListIntentPaths",
        "lex:ListIntentStageMetrics",
        "lex:ListIntents",
        "lex:ListRecommendedIntents",
        "lex:ListSessionAnalyticsData",
        "lex:ListSessionMetrics",
        "lex:ListSlotTypes",
        "lex:ListSlots",
        "lex:ListTagsForResource",
        "lex:SearchAssociatedTranscripts",
        "lex:StartBotRecommendation",
        "lex:StartBotResourceGeneration",
        "lex:StartImport",
        "lex:StopBotRecommendation",
        "lex:TagResource",
        "lex:UntagResource",
        "lex:UpdateBot",
        "lex:UpdateBotLocale",
        "lex:UpdateBotRecommendation",
        "lex:UpdateCustomVocabulary",
        "lex:UpdateExport",
        "lex:UpdateIntent",
        "lex:UpdateResourcePolicy",
        "lex:UpdateSlot",
        "lex:UpdateSlotType"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lex:bot"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lex:bot"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lex:CreateBot",
         "lex:CreateBotAlias",
         "lex:CreateResourcePolicy",
         "lex:DeleteBot",
         "lex:DeleteBotAlias",
         "lex:DeleteResourcePolicy",
         "lex:DeleteSession",
         "lex:DescribeBotAlias",
         "lex:DescribeResourcePolicy",
         "lex:GetBot",
         "lex:GetBotAlias",
         "lex:GetSession",
         "lex:ListTagsForResource",
         "lex:PostContent",
         "lex:PostText",
         "lex:PutBotAlias",
         "lex:PutSession",
         "lex:RecognizeText",
         "lex:RecognizeUtterance",
         "lex:StartConversation",
         "lex:StartImport",
         "lex:TagResource",
         "lex:UntagResource",
         "lex:UpdateBotAlias",
         "lex:UpdateResourcePolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lex:CreateBot",
        "lex:CreateBotAlias",
        "lex:CreateResourcePolicy",
        "lex:DeleteBot",
        "lex:DeleteBotAlias",
        "lex:DeleteResourcePolicy",
        "lex:DeleteSession",
        "lex:DescribeBotAlias",
        "lex:DescribeResourcePolicy",
        "lex:GetBot",
        "lex:GetBotAlias",
        "lex:GetSession",
        "lex:ListTagsForResource",
        "lex:PostContent",
        "lex:PostText",
        "lex:PutBotAlias",
        "lex:PutSession",
        "lex:RecognizeText",
        "lex:RecognizeUtterance",
        "lex:StartConversation",
        "lex:StartImport",
        "lex:TagResource",
        "lex:UntagResource",
        "lex:UpdateBotAlias",
        "lex:UpdateResourcePolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lex:bot alias"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lex:bot alias"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lex:CreateBotVersion",
         "lex:DeleteBot",
         "lex:DeleteBotVersion",
         "lex:DeleteSession",
         "lex:DeleteUtterances",
         "lex:GetBot",
         "lex:GetBotVersions",
         "lex:GetExport",
         "lex:GetSession",
         "lex:GetUtterancesView",
         "lex:PostContent",
         "lex:PostText",
         "lex:PutBot",
         "lex:PutSession",
         "lex:StartMigration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lex:CreateBotVersion",
        "lex:DeleteBot",
        "lex:DeleteBotVersion",
        "lex:DeleteSession",
        "lex:DeleteUtterances",
        "lex:GetBot",
        "lex:GetBotVersions",
        "lex:GetExport",
        "lex:GetSession",
        "lex:GetUtterancesView",
        "lex:PostContent",
        "lex:PostText",
        "lex:PutBot",
        "lex:PutSession",
        "lex:StartMigration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lex:bot version"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lex:bot version"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lex:CreateExport",
         "lex:CreateTestSetDiscrepancyReport",
         "lex:DeleteExport",
         "lex:DeleteImport",
         "lex:DeleteTestSet",
         "lex:DescribeExport",
         "lex:DescribeImport",
         "lex:DescribeTestExecution",
         "lex:DescribeTestSet",
         "lex:DescribeTestSetDiscrepancyReport",
         "lex:DescribeTestSetGeneration",
         "lex:GetTestExecutionArtifactsUrl",
         "lex:ListTagsForResource",
         "lex:ListTestExecutionResultItems",
         "lex:ListTestSetRecords",
         "lex:StartImport",
         "lex:StartTestExecution",
         "lex:StartTestSetGeneration",
         "lex:TagResource",
         "lex:UntagResource",
         "lex:UpdateTestSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lex:CreateExport",
        "lex:CreateTestSetDiscrepancyReport",
        "lex:DeleteExport",
        "lex:DeleteImport",
        "lex:DeleteTestSet",
        "lex:DescribeExport",
        "lex:DescribeImport",
        "lex:DescribeTestExecution",
        "lex:DescribeTestSet",
        "lex:DescribeTestSetDiscrepancyReport",
        "lex:DescribeTestSetGeneration",
        "lex:GetTestExecutionArtifactsUrl",
        "lex:ListTagsForResource",
        "lex:ListTestExecutionResultItems",
        "lex:ListTestSetRecords",
        "lex:StartImport",
        "lex:StartTestExecution",
        "lex:StartTestSetGeneration",
        "lex:TagResource",
        "lex:UntagResource",
        "lex:UpdateTestSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lex:test set"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lex:test set"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lex:CreateIntentVersion",
         "lex:DeleteIntent",
         "lex:DeleteIntentVersion",
         "lex:GetIntent",
         "lex:GetIntentVersions",
         "lex:PutIntent"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lex:CreateIntentVersion",
        "lex:DeleteIntent",
        "lex:DeleteIntentVersion",
        "lex:GetIntent",
        "lex:GetIntentVersions",
        "lex:PutIntent"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lex:intent version"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lex:intent version"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lex:CreateSlotTypeVersion",
         "lex:DeleteSlotType",
         "lex:DeleteSlotTypeVersion",
         "lex:GetSlotType",
         "lex:GetSlotTypeVersions",
         "lex:PutSlotType"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lex:CreateSlotTypeVersion",
        "lex:DeleteSlotType",
        "lex:DeleteSlotTypeVersion",
        "lex:GetSlotType",
        "lex:GetSlotTypeVersions",
        "lex:PutSlotType"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lex:slottype version"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lex:slottype version"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lex:DeleteBotChannelAssociation",
         "lex:GetBotChannelAssociation",
         "lex:GetBotChannelAssociations",
         "lex:ListTagsForResource",
         "lex:TagResource",
         "lex:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lex:DeleteBotChannelAssociation",
        "lex:GetBotChannelAssociation",
        "lex:GetBotChannelAssociations",
        "lex:ListTagsForResource",
        "lex:TagResource",
        "lex:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lex:channel"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lex:channel"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "license-manager:AcceptGrant",
         "license-manager:CreateGrantVersion",
         "license-manager:DeleteGrant",
         "license-manager:GetGrant",
         "license-manager:RejectGrant"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "license-manager:AcceptGrant",
        "license-manager:CreateGrantVersion",
        "license-manager:DeleteGrant",
        "license-manager:GetGrant",
        "license-manager:RejectGrant"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/license-manager:grant"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/license-manager:grant"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "license-manager:CheckoutBorrowLicense",
         "license-manager:CreateGrant",
         "license-manager:CreateLicenseVersion",
         "license-manager:CreateToken",
         "license-manager:DeleteLicense",
         "license-manager:GetLicense",
         "license-manager:GetLicenseUsage",
         "license-manager:ListLicenseVersions"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "license-manager:CheckoutBorrowLicense",
        "license-manager:CreateGrant",
        "license-manager:CreateLicenseVersion",
        "license-manager:CreateToken",
        "license-manager:DeleteLicense",
        "license-manager:GetLicense",
        "license-manager:GetLicenseUsage",
        "license-manager:ListLicenseVersions"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/license-manager:license"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/license-manager:license"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "license-manager:DeleteLicenseConfiguration",
         "license-manager:GetLicenseConfiguration",
         "license-manager:ListAssociationsForLicenseConfiguration",
         "license-manager:ListFailuresForLicenseConfigurationOperations",
         "license-manager:ListLicenseManagerReportGenerators",
         "license-manager:ListTagsForResource",
         "license-manager:ListUsageForLicenseConfiguration",
         "license-manager:TagResource",
         "license-manager:UntagResource",
         "license-manager:UpdateLicenseConfiguration",
         "license-manager:UpdateLicenseSpecificationsForResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "license-manager:DeleteLicenseConfiguration",
        "license-manager:GetLicenseConfiguration",
        "license-manager:ListAssociationsForLicenseConfiguration",
        "license-manager:ListFailuresForLicenseConfigurationOperations",
        "license-manager:ListLicenseManagerReportGenerators",
        "license-manager:ListTagsForResource",
        "license-manager:ListUsageForLicenseConfiguration",
        "license-manager:TagResource",
        "license-manager:UntagResource",
        "license-manager:UpdateLicenseConfiguration",
        "license-manager:UpdateLicenseSpecificationsForResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/license-manager:license-configuration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/license-manager:license-configuration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "license-manager:DeleteLicenseManagerReportGenerator",
         "license-manager:GetLicenseManagerReportGenerator",
         "license-manager:UpdateLicenseManagerReportGenerator"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "license-manager:DeleteLicenseManagerReportGenerator",
        "license-manager:GetLicenseManagerReportGenerator",
        "license-manager:UpdateLicenseManagerReportGenerator"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/license-manager:report-generator"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/license-manager:report-generator"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "license-manager-linux-subscriptions:DeregisterSubscriptionProvider",
         "license-manager-linux-subscriptions:GetRegisteredSubscriptionProvider",
         "license-manager-linux-subscriptions:ListTagsForResource",
         "license-manager-linux-subscriptions:TagResource",
         "license-manager-linux-subscriptions:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "license-manager-linux-subscriptions:DeregisterSubscriptionProvider",
        "license-manager-linux-subscriptions:GetRegisteredSubscriptionProvider",
        "license-manager-linux-subscriptions:ListTagsForResource",
        "license-manager-linux-subscriptions:TagResource",
        "license-manager-linux-subscriptions:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/license-manager-linux-subscriptions:subscription-provider"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/license-manager-linux-subscriptions:subscription-provider"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "license-manager-user-subscriptions:AssociateUser",
         "license-manager-user-subscriptions:CreateLicenseServerEndpoint",
         "license-manager-user-subscriptions:DeleteLicenseServerEndpoint",
         "license-manager-user-subscriptions:DeregisterIdentityProvider",
         "license-manager-user-subscriptions:DisassociateUser",
         "license-manager-user-subscriptions:ListProductSubscriptions",
         "license-manager-user-subscriptions:ListTagsForResource",
         "license-manager-user-subscriptions:ListUserAssociations",
         "license-manager-user-subscriptions:StartProductSubscription",
         "license-manager-user-subscriptions:StopProductSubscription",
         "license-manager-user-subscriptions:TagResource",
         "license-manager-user-subscriptions:UntagResource",
         "license-manager-user-subscriptions:UpdateIdentityProviderSettings"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "license-manager-user-subscriptions:AssociateUser",
        "license-manager-user-subscriptions:CreateLicenseServerEndpoint",
        "license-manager-user-subscriptions:DeleteLicenseServerEndpoint",
        "license-manager-user-subscriptions:DeregisterIdentityProvider",
        "license-manager-user-subscriptions:DisassociateUser",
        "license-manager-user-subscriptions:ListProductSubscriptions",
        "license-manager-user-subscriptions:ListTagsForResource",
        "license-manager-user-subscriptions:ListUserAssociations",
        "license-manager-user-subscriptions:StartProductSubscription",
        "license-manager-user-subscriptions:StopProductSubscription",
        "license-manager-user-subscriptions:TagResource",
        "license-manager-user-subscriptions:UntagResource",
        "license-manager-user-subscriptions:UpdateIdentityProviderSettings"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/license-manager-user-subscriptions:identity-provider"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/license-manager-user-subscriptions:identity-provider"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "license-manager-user-subscriptions:DeleteLicenseServerEndpoint",
         "license-manager-user-subscriptions:ListTagsForResource",
         "license-manager-user-subscriptions:TagResource",
         "license-manager-user-subscriptions:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "license-manager-user-subscriptions:DeleteLicenseServerEndpoint",
        "license-manager-user-subscriptions:ListTagsForResource",
        "license-manager-user-subscriptions:TagResource",
        "license-manager-user-subscriptions:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/license-manager-user-subscriptions:license-server-endpoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/license-manager-user-subscriptions:license-server-endpoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "license-manager-user-subscriptions:DisassociateUser",
         "license-manager-user-subscriptions:ListTagsForResource",
         "license-manager-user-subscriptions:TagResource",
         "license-manager-user-subscriptions:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "license-manager-user-subscriptions:DisassociateUser",
        "license-manager-user-subscriptions:ListTagsForResource",
        "license-manager-user-subscriptions:TagResource",
        "license-manager-user-subscriptions:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/license-manager-user-subscriptions:instance-user"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/license-manager-user-subscriptions:instance-user"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "license-manager-user-subscriptions:ListTagsForResource",
         "license-manager-user-subscriptions:StopProductSubscription",
         "license-manager-user-subscriptions:TagResource",
         "license-manager-user-subscriptions:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "license-manager-user-subscriptions:ListTagsForResource",
        "license-manager-user-subscriptions:StopProductSubscription",
        "license-manager-user-subscriptions:TagResource",
        "license-manager-user-subscriptions:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/license-manager-user-subscriptions:product-subscription"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/license-manager-user-subscriptions:product-subscription"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lightsail:AttachCertificateToDistribution",
         "lightsail:DeleteCertificate",
         "lightsail:TagResource",
         "lightsail:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lightsail:AttachCertificateToDistribution",
        "lightsail:DeleteCertificate",
        "lightsail:TagResource",
        "lightsail:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lightsail:Certificate"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lightsail:Certificate"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lightsail:AttachCertificateToDistribution",
         "lightsail:DeleteDistribution",
         "lightsail:DetachCertificateFromDistribution",
         "lightsail:ResetDistributionCache",
         "lightsail:SetIpAddressType",
         "lightsail:TagResource",
         "lightsail:UntagResource",
         "lightsail:UpdateDistribution",
         "lightsail:UpdateDistributionBundle"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lightsail:AttachCertificateToDistribution",
        "lightsail:DeleteDistribution",
        "lightsail:DetachCertificateFromDistribution",
        "lightsail:ResetDistributionCache",
        "lightsail:SetIpAddressType",
        "lightsail:TagResource",
        "lightsail:UntagResource",
        "lightsail:UpdateDistribution",
        "lightsail:UpdateDistributionBundle"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lightsail:Distribution"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lightsail:Distribution"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lightsail:AttachDisk",
         "lightsail:CreateDiskSnapshot",
         "lightsail:DeleteDisk",
         "lightsail:DetachDisk",
         "lightsail:GetCostEstimate",
         "lightsail:TagResource",
         "lightsail:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lightsail:AttachDisk",
        "lightsail:CreateDiskSnapshot",
        "lightsail:DeleteDisk",
        "lightsail:DetachDisk",
        "lightsail:GetCostEstimate",
        "lightsail:TagResource",
        "lightsail:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lightsail:Disk"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lightsail:Disk"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lightsail:AttachInstancesToLoadBalancer",
         "lightsail:AttachLoadBalancerTlsCertificate",
         "lightsail:CreateLoadBalancerTlsCertificate",
         "lightsail:DeleteLoadBalancer",
         "lightsail:DeleteLoadBalancerTlsCertificate",
         "lightsail:DetachInstancesFromLoadBalancer",
         "lightsail:SetIpAddressType",
         "lightsail:TagResource",
         "lightsail:UntagResource",
         "lightsail:UpdateLoadBalancerAttribute"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lightsail:AttachInstancesToLoadBalancer",
        "lightsail:AttachLoadBalancerTlsCertificate",
        "lightsail:CreateLoadBalancerTlsCertificate",
        "lightsail:DeleteLoadBalancer",
        "lightsail:DeleteLoadBalancerTlsCertificate",
        "lightsail:DetachInstancesFromLoadBalancer",
        "lightsail:SetIpAddressType",
        "lightsail:TagResource",
        "lightsail:UntagResource",
        "lightsail:UpdateLoadBalancerAttribute"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lightsail:LoadBalancer"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lightsail:LoadBalancer"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lightsail:AttachStaticIp",
         "lightsail:CloseInstancePublicPorts",
         "lightsail:CreateDiskSnapshot",
         "lightsail:CreateGUISessionAccessDetails",
         "lightsail:CreateInstanceSnapshot",
         "lightsail:DeleteInstance",
         "lightsail:DeleteKnownHostKeys",
         "lightsail:GetCostEstimate",
         "lightsail:GetInstanceAccessDetails",
         "lightsail:GetSetupHistory",
         "lightsail:OpenInstancePublicPorts",
         "lightsail:PutInstancePublicPorts",
         "lightsail:RebootInstance",
         "lightsail:SetIpAddressType",
         "lightsail:SetResourceAccessForBucket",
         "lightsail:SetupInstanceHttps",
         "lightsail:StartGUISession",
         "lightsail:StartInstance",
         "lightsail:StopGUISession",
         "lightsail:StopInstance",
         "lightsail:TagResource",
         "lightsail:UntagResource",
         "lightsail:UpdateInstanceMetadataOptions"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lightsail:AttachStaticIp",
        "lightsail:CloseInstancePublicPorts",
        "lightsail:CreateDiskSnapshot",
        "lightsail:CreateGUISessionAccessDetails",
        "lightsail:CreateInstanceSnapshot",
        "lightsail:DeleteInstance",
        "lightsail:DeleteKnownHostKeys",
        "lightsail:GetCostEstimate",
        "lightsail:GetInstanceAccessDetails",
        "lightsail:GetSetupHistory",
        "lightsail:OpenInstancePublicPorts",
        "lightsail:PutInstancePublicPorts",
        "lightsail:RebootInstance",
        "lightsail:SetIpAddressType",
        "lightsail:SetResourceAccessForBucket",
        "lightsail:SetupInstanceHttps",
        "lightsail:StartGUISession",
        "lightsail:StartInstance",
        "lightsail:StopGUISession",
        "lightsail:StopInstance",
        "lightsail:TagResource",
        "lightsail:UntagResource",
        "lightsail:UpdateInstanceMetadataOptions"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lightsail:Instance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lightsail:Instance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lightsail:AttachStaticIp",
         "lightsail:DetachStaticIp",
         "lightsail:ReleaseStaticIp",
         "lightsail:TagResource",
         "lightsail:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lightsail:AttachStaticIp",
        "lightsail:DetachStaticIp",
        "lightsail:ReleaseStaticIp",
        "lightsail:TagResource",
        "lightsail:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lightsail:StaticIp"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lightsail:StaticIp"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lightsail:CreateBucketAccessKey",
         "lightsail:DeleteBucket",
         "lightsail:DeleteBucketAccessKey",
         "lightsail:SetResourceAccessForBucket",
         "lightsail:TagResource",
         "lightsail:UntagResource",
         "lightsail:UpdateBucket",
         "lightsail:UpdateBucketBundle"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lightsail:CreateBucketAccessKey",
        "lightsail:DeleteBucket",
        "lightsail:DeleteBucketAccessKey",
        "lightsail:SetResourceAccessForBucket",
        "lightsail:TagResource",
        "lightsail:UntagResource",
        "lightsail:UpdateBucket",
        "lightsail:UpdateBucketBundle"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lightsail:Bucket"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lightsail:Bucket"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lightsail:CreateContainerServiceDeployment",
         "lightsail:DeleteContainerImage",
         "lightsail:DeleteContainerService",
         "lightsail:RegisterContainerImage",
         "lightsail:TagResource",
         "lightsail:UntagResource",
         "lightsail:UpdateContainerService"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lightsail:CreateContainerServiceDeployment",
        "lightsail:DeleteContainerImage",
        "lightsail:DeleteContainerService",
        "lightsail:RegisterContainerImage",
        "lightsail:TagResource",
        "lightsail:UntagResource",
        "lightsail:UpdateContainerService"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lightsail:ContainerService"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lightsail:ContainerService"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lightsail:CreateDiskFromSnapshot",
         "lightsail:DeleteDiskSnapshot",
         "lightsail:ExportSnapshot",
         "lightsail:TagResource",
         "lightsail:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lightsail:CreateDiskFromSnapshot",
        "lightsail:DeleteDiskSnapshot",
        "lightsail:ExportSnapshot",
        "lightsail:TagResource",
        "lightsail:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lightsail:DiskSnapshot"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lightsail:DiskSnapshot"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lightsail:CreateDomainEntry",
         "lightsail:DeleteDomain",
         "lightsail:DeleteDomainEntry",
         "lightsail:TagResource",
         "lightsail:UntagResource",
         "lightsail:UpdateDomainEntry"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lightsail:CreateDomainEntry",
        "lightsail:DeleteDomain",
        "lightsail:DeleteDomainEntry",
        "lightsail:TagResource",
        "lightsail:UntagResource",
        "lightsail:UpdateDomainEntry"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lightsail:Domain"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lightsail:Domain"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lightsail:CreateInstancesFromSnapshot",
         "lightsail:DeleteInstanceSnapshot",
         "lightsail:ExportSnapshot",
         "lightsail:TagResource",
         "lightsail:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lightsail:CreateInstancesFromSnapshot",
        "lightsail:DeleteInstanceSnapshot",
        "lightsail:ExportSnapshot",
        "lightsail:TagResource",
        "lightsail:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lightsail:InstanceSnapshot"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lightsail:InstanceSnapshot"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lightsail:CreateRelationalDatabaseFromSnapshot",
         "lightsail:DeleteRelationalDatabaseSnapshot",
         "lightsail:TagResource",
         "lightsail:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lightsail:CreateRelationalDatabaseFromSnapshot",
        "lightsail:DeleteRelationalDatabaseSnapshot",
        "lightsail:TagResource",
        "lightsail:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lightsail:RelationalDatabaseSnapshot"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lightsail:RelationalDatabaseSnapshot"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lightsail:DeleteAlarm",
         "lightsail:PutAlarm",
         "lightsail:TestAlarm"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lightsail:DeleteAlarm",
        "lightsail:PutAlarm",
        "lightsail:TestAlarm"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lightsail:Alarm"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lightsail:Alarm"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lightsail:DeleteKeyPair",
         "lightsail:TagResource",
         "lightsail:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lightsail:DeleteKeyPair",
        "lightsail:TagResource",
        "lightsail:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lightsail:KeyPair"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lightsail:KeyPair"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lightsail:DeleteRelationalDatabase",
         "lightsail:GetRelationalDatabaseMasterUserPassword",
         "lightsail:RebootRelationalDatabase",
         "lightsail:StartRelationalDatabase",
         "lightsail:StopRelationalDatabase",
         "lightsail:TagResource",
         "lightsail:UntagResource",
         "lightsail:UpdateRelationalDatabase",
         "lightsail:UpdateRelationalDatabaseParameters"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lightsail:DeleteRelationalDatabase",
        "lightsail:GetRelationalDatabaseMasterUserPassword",
        "lightsail:RebootRelationalDatabase",
        "lightsail:StartRelationalDatabase",
        "lightsail:StopRelationalDatabase",
        "lightsail:TagResource",
        "lightsail:UntagResource",
        "lightsail:UpdateRelationalDatabase",
        "lightsail:UpdateRelationalDatabaseParameters"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lightsail:RelationalDatabase"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lightsail:RelationalDatabase"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "logs:AssociateKmsKey",
         "logs:CreateExportTask",
         "logs:CreateLogAnomalyDetector",
         "logs:CreateLogGroup",
         "logs:DeleteDataProtectionPolicy",
         "logs:DeleteLogGroup",
         "logs:DeleteMetricFilter",
         "logs:DeleteRetentionPolicy",
         "logs:DeleteSubscriptionFilter",
         "logs:DeleteTransformer",
         "logs:DescribeLogStreams",
         "logs:DescribeMetricFilters",
         "logs:DescribeSubscriptionFilters",
         "logs:DisassociateKmsKey",
         "logs:FilterLogEvents",
         "logs:GetDataProtectionPolicy",
         "logs:GetLogGroupFields",
         "logs:GetLogRecord",
         "logs:GetQueryResults",
         "logs:GetTransformer",
         "logs:ListTagsForResource",
         "logs:ListTagsLogGroup",
         "logs:PutDataProtectionPolicy",
         "logs:PutMetricFilter",
         "logs:PutRetentionPolicy",
         "logs:PutSubscriptionFilter",
         "logs:PutTransformer",
         "logs:StartLiveTail",
         "logs:StartQuery",
         "logs:TagLogGroup",
         "logs:TagResource",
         "logs:Unmask",
         "logs:UntagLogGroup",
         "logs:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "logs:AssociateKmsKey",
        "logs:CreateExportTask",
        "logs:CreateLogAnomalyDetector",
        "logs:CreateLogGroup",
        "logs:DeleteDataProtectionPolicy",
        "logs:DeleteLogGroup",
        "logs:DeleteMetricFilter",
        "logs:DeleteRetentionPolicy",
        "logs:DeleteSubscriptionFilter",
        "logs:DeleteTransformer",
        "logs:DescribeLogStreams",
        "logs:DescribeMetricFilters",
        "logs:DescribeSubscriptionFilters",
        "logs:DisassociateKmsKey",
        "logs:FilterLogEvents",
        "logs:GetDataProtectionPolicy",
        "logs:GetLogGroupFields",
        "logs:GetLogRecord",
        "logs:GetQueryResults",
        "logs:GetTransformer",
        "logs:ListTagsForResource",
        "logs:ListTagsLogGroup",
        "logs:PutDataProtectionPolicy",
        "logs:PutMetricFilter",
        "logs:PutRetentionPolicy",
        "logs:PutSubscriptionFilter",
        "logs:PutTransformer",
        "logs:StartLiveTail",
        "logs:StartQuery",
        "logs:TagLogGroup",
        "logs:TagResource",
        "logs:Unmask",
        "logs:UntagLogGroup",
        "logs:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/logs:log-group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/logs:log-group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "logs:CreateDelivery",
         "logs:DeleteDelivery",
         "logs:GetDelivery",
         "logs:ListTagsForResource",
         "logs:TagResource",
         "logs:UntagResource",
         "logs:UpdateDeliveryConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "logs:CreateDelivery",
        "logs:DeleteDelivery",
        "logs:GetDelivery",
        "logs:ListTagsForResource",
        "logs:TagResource",
        "logs:UntagResource",
        "logs:UpdateDeliveryConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/logs:delivery"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/logs:delivery"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "logs:CreateDelivery",
         "logs:DeleteDeliveryDestination",
         "logs:DeleteDeliveryDestinationPolicy",
         "logs:DeleteDeliverySource",
         "logs:GetDeliveryDestination",
         "logs:GetDeliveryDestinationPolicy",
         "logs:ListTagsForResource",
         "logs:PutDeliveryDestination",
         "logs:PutDeliveryDestinationPolicy",
         "logs:TagResource",
         "logs:UntagResource",
         "logs:UpdateDeliveryConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "logs:CreateDelivery",
        "logs:DeleteDeliveryDestination",
        "logs:DeleteDeliveryDestinationPolicy",
        "logs:DeleteDeliverySource",
        "logs:GetDeliveryDestination",
        "logs:GetDeliveryDestinationPolicy",
        "logs:ListTagsForResource",
        "logs:PutDeliveryDestination",
        "logs:PutDeliveryDestinationPolicy",
        "logs:TagResource",
        "logs:UntagResource",
        "logs:UpdateDeliveryConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/logs:delivery-destination"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/logs:delivery-destination"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "logs:CreateDelivery",
         "logs:GetDeliverySource",
         "logs:ListTagsForResource",
         "logs:PutDeliverySource",
         "logs:TagResource",
         "logs:UntagResource",
         "logs:UpdateDeliveryConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "logs:CreateDelivery",
        "logs:GetDeliverySource",
        "logs:ListTagsForResource",
        "logs:PutDeliverySource",
        "logs:TagResource",
        "logs:UntagResource",
        "logs:UpdateDeliveryConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/logs:delivery-source"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/logs:delivery-source"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "logs:CreateLogStream",
         "logs:DeleteLogStream",
         "logs:GetLogEvents",
         "logs:PutLogEvents"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "logs:CreateLogStream",
        "logs:DeleteLogStream",
        "logs:GetLogEvents",
        "logs:PutLogEvents"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/logs:log-stream"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/logs:log-stream"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "logs:DeleteDestination",
         "logs:ListTagsForResource",
         "logs:PutDestination",
         "logs:PutDestinationPolicy",
         "logs:PutSubscriptionFilter",
         "logs:TagResource",
         "logs:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "logs:DeleteDestination",
        "logs:ListTagsForResource",
        "logs:PutDestination",
        "logs:PutDestinationPolicy",
        "logs:PutSubscriptionFilter",
        "logs:TagResource",
        "logs:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/logs:destination"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/logs:destination"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "logs:DeleteLogAnomalyDetector",
         "logs:GetLogAnomalyDetector",
         "logs:ListAnomalies",
         "logs:ListLogAnomalyDetectors",
         "logs:ListTagsForResource",
         "logs:TagResource",
         "logs:UntagResource",
         "logs:UpdateAnomaly",
         "logs:UpdateLogAnomalyDetector"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "logs:DeleteLogAnomalyDetector",
        "logs:GetLogAnomalyDetector",
        "logs:ListAnomalies",
        "logs:ListLogAnomalyDetectors",
        "logs:ListTagsForResource",
        "logs:TagResource",
        "logs:UntagResource",
        "logs:UpdateAnomaly",
        "logs:UpdateLogAnomalyDetector"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/logs:anomaly-detector"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/logs:anomaly-detector"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lookoutequipment:CreateDataset",
         "lookoutequipment:CreateModel",
         "lookoutequipment:DeleteDataset",
         "lookoutequipment:DeleteResourcePolicy",
         "lookoutequipment:DescribeDataset",
         "lookoutequipment:DescribeResourcePolicy",
         "lookoutequipment:ImportDataset",
         "lookoutequipment:ImportModelVersion",
         "lookoutequipment:ListDataIngestionJobs",
         "lookoutequipment:ListSensorStatistics",
         "lookoutequipment:ListTagsForResource",
         "lookoutequipment:PutResourcePolicy",
         "lookoutequipment:StartDataIngestionJob",
         "lookoutequipment:TagResource",
         "lookoutequipment:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lookoutequipment:CreateDataset",
        "lookoutequipment:CreateModel",
        "lookoutequipment:DeleteDataset",
        "lookoutequipment:DeleteResourcePolicy",
        "lookoutequipment:DescribeDataset",
        "lookoutequipment:DescribeResourcePolicy",
        "lookoutequipment:ImportDataset",
        "lookoutequipment:ImportModelVersion",
        "lookoutequipment:ListDataIngestionJobs",
        "lookoutequipment:ListSensorStatistics",
        "lookoutequipment:ListTagsForResource",
        "lookoutequipment:PutResourcePolicy",
        "lookoutequipment:StartDataIngestionJob",
        "lookoutequipment:TagResource",
        "lookoutequipment:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lookoutequipment:dataset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lookoutequipment:dataset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lookoutequipment:CreateInferenceScheduler",
         "lookoutequipment:DeleteInferenceScheduler",
         "lookoutequipment:DescribeInferenceScheduler",
         "lookoutequipment:ListInferenceEvents",
         "lookoutequipment:ListInferenceExecutions",
         "lookoutequipment:ListTagsForResource",
         "lookoutequipment:StartInferenceScheduler",
         "lookoutequipment:StopInferenceScheduler",
         "lookoutequipment:TagResource",
         "lookoutequipment:UntagResource",
         "lookoutequipment:UpdateInferenceScheduler"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lookoutequipment:CreateInferenceScheduler",
        "lookoutequipment:DeleteInferenceScheduler",
        "lookoutequipment:DescribeInferenceScheduler",
        "lookoutequipment:ListInferenceEvents",
        "lookoutequipment:ListInferenceExecutions",
        "lookoutequipment:ListTagsForResource",
        "lookoutequipment:StartInferenceScheduler",
        "lookoutequipment:StopInferenceScheduler",
        "lookoutequipment:TagResource",
        "lookoutequipment:UntagResource",
        "lookoutequipment:UpdateInferenceScheduler"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lookoutequipment:inference-scheduler"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lookoutequipment:inference-scheduler"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lookoutequipment:CreateInferenceScheduler",
         "lookoutequipment:CreateModel",
         "lookoutequipment:CreateRetrainingScheduler",
         "lookoutequipment:DeleteModel",
         "lookoutequipment:DeleteResourcePolicy",
         "lookoutequipment:DeleteRetrainingScheduler",
         "lookoutequipment:DescribeModel",
         "lookoutequipment:DescribeResourcePolicy",
         "lookoutequipment:DescribeRetrainingScheduler",
         "lookoutequipment:ImportModelVersion",
         "lookoutequipment:ListModelVersions",
         "lookoutequipment:ListTagsForResource",
         "lookoutequipment:PutResourcePolicy",
         "lookoutequipment:StartRetrainingScheduler",
         "lookoutequipment:StopRetrainingScheduler",
         "lookoutequipment:TagResource",
         "lookoutequipment:UntagResource",
         "lookoutequipment:UpdateActiveModelVersion",
         "lookoutequipment:UpdateModel",
         "lookoutequipment:UpdateRetrainingScheduler"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lookoutequipment:CreateInferenceScheduler",
        "lookoutequipment:CreateModel",
        "lookoutequipment:CreateRetrainingScheduler",
        "lookoutequipment:DeleteModel",
        "lookoutequipment:DeleteResourcePolicy",
        "lookoutequipment:DeleteRetrainingScheduler",
        "lookoutequipment:DescribeModel",
        "lookoutequipment:DescribeResourcePolicy",
        "lookoutequipment:DescribeRetrainingScheduler",
        "lookoutequipment:ImportModelVersion",
        "lookoutequipment:ListModelVersions",
        "lookoutequipment:ListTagsForResource",
        "lookoutequipment:PutResourcePolicy",
        "lookoutequipment:StartRetrainingScheduler",
        "lookoutequipment:StopRetrainingScheduler",
        "lookoutequipment:TagResource",
        "lookoutequipment:UntagResource",
        "lookoutequipment:UpdateActiveModelVersion",
        "lookoutequipment:UpdateModel",
        "lookoutequipment:UpdateRetrainingScheduler"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lookoutequipment:model"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lookoutequipment:model"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lookoutequipment:CreateLabel",
         "lookoutequipment:CreateLabelGroup",
         "lookoutequipment:CreateModel",
         "lookoutequipment:DeleteLabel",
         "lookoutequipment:DeleteLabelGroup",
         "lookoutequipment:DescribeLabelGroup",
         "lookoutequipment:Describelabel",
         "lookoutequipment:ImportModelVersion",
         "lookoutequipment:ListLabelGroups",
         "lookoutequipment:ListLabels",
         "lookoutequipment:ListTagsForResource",
         "lookoutequipment:TagResource",
         "lookoutequipment:UntagResource",
         "lookoutequipment:UpdateLabelGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lookoutequipment:CreateLabel",
        "lookoutequipment:CreateLabelGroup",
        "lookoutequipment:CreateModel",
        "lookoutequipment:DeleteLabel",
        "lookoutequipment:DeleteLabelGroup",
        "lookoutequipment:DescribeLabelGroup",
        "lookoutequipment:Describelabel",
        "lookoutequipment:ImportModelVersion",
        "lookoutequipment:ListLabelGroups",
        "lookoutequipment:ListLabels",
        "lookoutequipment:ListTagsForResource",
        "lookoutequipment:TagResource",
        "lookoutequipment:UntagResource",
        "lookoutequipment:UpdateLabelGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lookoutequipment:label-group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lookoutequipment:label-group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lookoutequipment:DeleteResourcePolicy",
         "lookoutequipment:DescribeModelVersion",
         "lookoutequipment:DescribeResourcePolicy",
         "lookoutequipment:ListTagsForResource",
         "lookoutequipment:PutResourcePolicy",
         "lookoutequipment:TagResource",
         "lookoutequipment:UntagResource",
         "lookoutequipment:UpdateActiveModelVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lookoutequipment:DeleteResourcePolicy",
        "lookoutequipment:DescribeModelVersion",
        "lookoutequipment:DescribeResourcePolicy",
        "lookoutequipment:ListTagsForResource",
        "lookoutequipment:PutResourcePolicy",
        "lookoutequipment:TagResource",
        "lookoutequipment:UntagResource",
        "lookoutequipment:UpdateActiveModelVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lookoutequipment:model-version"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lookoutequipment:model-version"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lookoutmetrics:ActivateAnomalyDetector",
         "lookoutmetrics:BackTestAnomalyDetector",
         "lookoutmetrics:CreateAlert",
         "lookoutmetrics:CreateAnomalyDetector",
         "lookoutmetrics:CreateMetricSet",
         "lookoutmetrics:DeactivateAnomalyDetector",
         "lookoutmetrics:DeleteAnomalyDetector",
         "lookoutmetrics:DescribeAnomalyDetectionExecutions",
         "lookoutmetrics:DescribeAnomalyDetector",
         "lookoutmetrics:DetectMetricSetConfig",
         "lookoutmetrics:GetAnomalyGroup",
         "lookoutmetrics:GetDataQualityMetrics",
         "lookoutmetrics:GetFeedback",
         "lookoutmetrics:ListAlerts",
         "lookoutmetrics:ListAnomalyGroupRelatedMetrics",
         "lookoutmetrics:ListAnomalyGroupSummaries",
         "lookoutmetrics:ListAnomalyGroupTimeSeries",
         "lookoutmetrics:ListMetricSets",
         "lookoutmetrics:ListTagsForResource",
         "lookoutmetrics:PutFeedback",
         "lookoutmetrics:TagResource",
         "lookoutmetrics:UntagResource",
         "lookoutmetrics:UpdateAnomalyDetector"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lookoutmetrics:ActivateAnomalyDetector",
        "lookoutmetrics:BackTestAnomalyDetector",
        "lookoutmetrics:CreateAlert",
        "lookoutmetrics:CreateAnomalyDetector",
        "lookoutmetrics:CreateMetricSet",
        "lookoutmetrics:DeactivateAnomalyDetector",
        "lookoutmetrics:DeleteAnomalyDetector",
        "lookoutmetrics:DescribeAnomalyDetectionExecutions",
        "lookoutmetrics:DescribeAnomalyDetector",
        "lookoutmetrics:DetectMetricSetConfig",
        "lookoutmetrics:GetAnomalyGroup",
        "lookoutmetrics:GetDataQualityMetrics",
        "lookoutmetrics:GetFeedback",
        "lookoutmetrics:ListAlerts",
        "lookoutmetrics:ListAnomalyGroupRelatedMetrics",
        "lookoutmetrics:ListAnomalyGroupSummaries",
        "lookoutmetrics:ListAnomalyGroupTimeSeries",
        "lookoutmetrics:ListMetricSets",
        "lookoutmetrics:ListTagsForResource",
        "lookoutmetrics:PutFeedback",
        "lookoutmetrics:TagResource",
        "lookoutmetrics:UntagResource",
        "lookoutmetrics:UpdateAnomalyDetector"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lookoutmetrics:AnomalyDetector"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lookoutmetrics:AnomalyDetector"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lookoutmetrics:CreateAlert",
         "lookoutmetrics:DeleteAlert",
         "lookoutmetrics:DescribeAlert",
         "lookoutmetrics:ListTagsForResource",
         "lookoutmetrics:TagResource",
         "lookoutmetrics:UntagResource",
         "lookoutmetrics:UpdateAlert"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lookoutmetrics:CreateAlert",
        "lookoutmetrics:DeleteAlert",
        "lookoutmetrics:DescribeAlert",
        "lookoutmetrics:ListTagsForResource",
        "lookoutmetrics:TagResource",
        "lookoutmetrics:UntagResource",
        "lookoutmetrics:UpdateAlert"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lookoutmetrics:Alert"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lookoutmetrics:Alert"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lookoutmetrics:CreateMetricSet",
         "lookoutmetrics:DescribeMetricSet",
         "lookoutmetrics:ListTagsForResource",
         "lookoutmetrics:TagResource",
         "lookoutmetrics:UntagResource",
         "lookoutmetrics:UpdateMetricSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lookoutmetrics:CreateMetricSet",
        "lookoutmetrics:DescribeMetricSet",
        "lookoutmetrics:ListTagsForResource",
        "lookoutmetrics:TagResource",
        "lookoutmetrics:UntagResource",
        "lookoutmetrics:UpdateMetricSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lookoutmetrics:MetricSet"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lookoutmetrics:MetricSet"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lookoutvision:CreateModel",
         "lookoutvision:DeleteModel",
         "lookoutvision:DescribeModel",
         "lookoutvision:DetectAnomalies",
         "lookoutvision:ListTagsForResource",
         "lookoutvision:StartModel",
         "lookoutvision:StartModelPackagingJob",
         "lookoutvision:StopModel",
         "lookoutvision:TagResource",
         "lookoutvision:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lookoutvision:CreateModel",
        "lookoutvision:DeleteModel",
        "lookoutvision:DescribeModel",
        "lookoutvision:DetectAnomalies",
        "lookoutvision:ListTagsForResource",
        "lookoutvision:StartModel",
        "lookoutvision:StartModelPackagingJob",
        "lookoutvision:StopModel",
        "lookoutvision:TagResource",
        "lookoutvision:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lookoutvision:model"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lookoutvision:model"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "lookoutvision:CreateProject",
         "lookoutvision:DeleteProject",
         "lookoutvision:DescribeProject"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "lookoutvision:CreateProject",
        "lookoutvision:DeleteProject",
        "lookoutvision:DescribeProject"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/lookoutvision:project"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/lookoutvision:project"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "m2:CancelBatchJobExecution",
         "m2:CreateDataSetImportTask",
         "m2:CreateDeployment",
         "m2:DeleteApplication",
         "m2:DeleteApplicationFromEnvironment",
         "m2:GetApplication",
         "m2:GetApplicationVersion",
         "m2:GetBatchJobExecution",
         "m2:GetDataSetDetails",
         "m2:GetDataSetImportTask",
         "m2:GetDeployment",
         "m2:ListApplicationVersions",
         "m2:ListBatchJobDefinitions",
         "m2:ListBatchJobExecutions",
         "m2:ListBatchJobRestartPoints",
         "m2:ListDataSetImportHistory",
         "m2:ListDataSets",
         "m2:ListDeployments",
         "m2:StartApplication",
         "m2:StartBatchJob",
         "m2:StopApplication",
         "m2:TagResource",
         "m2:UntagResource",
         "m2:UpdateApplication"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "m2:CancelBatchJobExecution",
        "m2:CreateDataSetImportTask",
        "m2:CreateDeployment",
        "m2:DeleteApplication",
        "m2:DeleteApplicationFromEnvironment",
        "m2:GetApplication",
        "m2:GetApplicationVersion",
        "m2:GetBatchJobExecution",
        "m2:GetDataSetDetails",
        "m2:GetDataSetImportTask",
        "m2:GetDeployment",
        "m2:ListApplicationVersions",
        "m2:ListBatchJobDefinitions",
        "m2:ListBatchJobExecutions",
        "m2:ListBatchJobRestartPoints",
        "m2:ListDataSetImportHistory",
        "m2:ListDataSets",
        "m2:ListDeployments",
        "m2:StartApplication",
        "m2:StartBatchJob",
        "m2:StopApplication",
        "m2:TagResource",
        "m2:UntagResource",
        "m2:UpdateApplication"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/m2:Application"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/m2:Application"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "m2:CreateDeployment",
         "m2:DeleteEnvironment",
         "m2:GetEnvironment",
         "m2:TagResource",
         "m2:UntagResource",
         "m2:UpdateEnvironment"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "m2:CreateDeployment",
        "m2:DeleteEnvironment",
        "m2:GetEnvironment",
        "m2:TagResource",
        "m2:UntagResource",
        "m2:UpdateEnvironment"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/m2:Environment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/m2:Environment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "machinelearning:AddTags",
         "machinelearning:CreateBatchPrediction",
         "machinelearning:DeleteBatchPrediction",
         "machinelearning:DeleteTags",
         "machinelearning:DescribeTags",
         "machinelearning:GetBatchPrediction",
         "machinelearning:UpdateBatchPrediction"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "machinelearning:AddTags",
        "machinelearning:CreateBatchPrediction",
        "machinelearning:DeleteBatchPrediction",
        "machinelearning:DeleteTags",
        "machinelearning:DescribeTags",
        "machinelearning:GetBatchPrediction",
        "machinelearning:UpdateBatchPrediction"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/machinelearning:batchprediction"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/machinelearning:batchprediction"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "machinelearning:AddTags",
         "machinelearning:CreateBatchPrediction",
         "machinelearning:CreateDataSourceFromRDS",
         "machinelearning:CreateDataSourceFromRedshift",
         "machinelearning:CreateDataSourceFromS3",
         "machinelearning:CreateEvaluation",
         "machinelearning:CreateMLModel",
         "machinelearning:DeleteDataSource",
         "machinelearning:DeleteTags",
         "machinelearning:DescribeTags",
         "machinelearning:GetDataSource",
         "machinelearning:GetEvaluation",
         "machinelearning:UpdateDataSource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "machinelearning:AddTags",
        "machinelearning:CreateBatchPrediction",
        "machinelearning:CreateDataSourceFromRDS",
        "machinelearning:CreateDataSourceFromRedshift",
        "machinelearning:CreateDataSourceFromS3",
        "machinelearning:CreateEvaluation",
        "machinelearning:CreateMLModel",
        "machinelearning:DeleteDataSource",
        "machinelearning:DeleteTags",
        "machinelearning:DescribeTags",
        "machinelearning:GetDataSource",
        "machinelearning:GetEvaluation",
        "machinelearning:UpdateDataSource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/machinelearning:datasource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/machinelearning:datasource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "machinelearning:AddTags",
         "machinelearning:CreateEvaluation",
         "machinelearning:DeleteEvaluation",
         "machinelearning:DeleteTags",
         "machinelearning:DescribeTags",
         "machinelearning:UpdateEvaluation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "machinelearning:AddTags",
        "machinelearning:CreateEvaluation",
        "machinelearning:DeleteEvaluation",
        "machinelearning:DeleteTags",
        "machinelearning:DescribeTags",
        "machinelearning:UpdateEvaluation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/machinelearning:evaluation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/machinelearning:evaluation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "machinelearning:AddTags",
         "machinelearning:CreateBatchPrediction",
         "machinelearning:CreateEvaluation",
         "machinelearning:CreateMLModel",
         "machinelearning:CreateRealtimeEndpoint",
         "machinelearning:DeleteMLModel",
         "machinelearning:DeleteRealtimeEndpoint",
         "machinelearning:DeleteTags",
         "machinelearning:DescribeTags",
         "machinelearning:GetMLModel",
         "machinelearning:Predict",
         "machinelearning:UpdateMLModel"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "machinelearning:AddTags",
        "machinelearning:CreateBatchPrediction",
        "machinelearning:CreateEvaluation",
        "machinelearning:CreateMLModel",
        "machinelearning:CreateRealtimeEndpoint",
        "machinelearning:DeleteMLModel",
        "machinelearning:DeleteRealtimeEndpoint",
        "machinelearning:DeleteTags",
        "machinelearning:DescribeTags",
        "machinelearning:GetMLModel",
        "machinelearning:Predict",
        "machinelearning:UpdateMLModel"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/machinelearning:mlmodel"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/machinelearning:mlmodel"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "macie2:BatchGetCustomDataIdentifiers",
         "macie2:CreateCustomDataIdentifier",
         "macie2:DeleteCustomDataIdentifier",
         "macie2:GetCustomDataIdentifier",
         "macie2:ListTagsForResource",
         "macie2:TagResource",
         "macie2:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "macie2:BatchGetCustomDataIdentifiers",
        "macie2:CreateCustomDataIdentifier",
        "macie2:DeleteCustomDataIdentifier",
        "macie2:GetCustomDataIdentifier",
        "macie2:ListTagsForResource",
        "macie2:TagResource",
        "macie2:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/macie2:CustomDataIdentifier"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/macie2:CustomDataIdentifier"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "macie2:CreateClassificationJob",
         "macie2:DescribeClassificationJob",
         "macie2:ListTagsForResource",
         "macie2:TagResource",
         "macie2:UntagResource",
         "macie2:UpdateClassificationJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "macie2:CreateClassificationJob",
        "macie2:DescribeClassificationJob",
        "macie2:ListTagsForResource",
        "macie2:TagResource",
        "macie2:UntagResource",
        "macie2:UpdateClassificationJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/macie2:ClassificationJob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/macie2:ClassificationJob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "macie2:CreateFindingsFilter",
         "macie2:DeleteFindingsFilter",
         "macie2:GetFindingsFilter",
         "macie2:ListTagsForResource",
         "macie2:TagResource",
         "macie2:UntagResource",
         "macie2:UpdateFindingsFilter"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "macie2:CreateFindingsFilter",
        "macie2:DeleteFindingsFilter",
        "macie2:GetFindingsFilter",
        "macie2:ListTagsForResource",
        "macie2:TagResource",
        "macie2:UntagResource",
        "macie2:UpdateFindingsFilter"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/macie2:FindingsFilter"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/macie2:FindingsFilter"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "macie2:CreateMember",
         "macie2:DeleteMember",
         "macie2:DisassociateMember",
         "macie2:GetMember",
         "macie2:ListTagsForResource",
         "macie2:TagResource",
         "macie2:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "macie2:CreateMember",
        "macie2:DeleteMember",
        "macie2:DisassociateMember",
        "macie2:GetMember",
        "macie2:ListTagsForResource",
        "macie2:TagResource",
        "macie2:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/macie2:Member"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/macie2:Member"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "macie2:DeleteAllowList",
         "macie2:GetAllowList",
         "macie2:ListTagsForResource",
         "macie2:TagResource",
         "macie2:UntagResource",
         "macie2:UpdateAllowList"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "macie2:DeleteAllowList",
        "macie2:GetAllowList",
        "macie2:ListTagsForResource",
        "macie2:TagResource",
        "macie2:UntagResource",
        "macie2:UpdateAllowList"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/macie2:AllowList"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/macie2:AllowList"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "managedblockchain:CreateMember",
         "managedblockchain:CreateNode",
         "managedblockchain:CreateProposal",
         "managedblockchain:GetNetwork",
         "managedblockchain:ListMembers",
         "managedblockchain:ListNodes",
         "managedblockchain:ListProposals",
         "managedblockchain:ListTagsForResource",
         "managedblockchain:TagResource",
         "managedblockchain:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "managedblockchain:CreateMember",
        "managedblockchain:CreateNode",
        "managedblockchain:CreateProposal",
        "managedblockchain:GetNetwork",
        "managedblockchain:ListMembers",
        "managedblockchain:ListNodes",
        "managedblockchain:ListProposals",
        "managedblockchain:ListTagsForResource",
        "managedblockchain:TagResource",
        "managedblockchain:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/managedblockchain:network"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/managedblockchain:network"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "managedblockchain:CreateNode",
         "managedblockchain:DeleteMember",
         "managedblockchain:GetMember",
         "managedblockchain:ListNodes",
         "managedblockchain:ListTagsForResource",
         "managedblockchain:TagResource",
         "managedblockchain:UntagResource",
         "managedblockchain:UpdateMember"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "managedblockchain:CreateNode",
        "managedblockchain:DeleteMember",
        "managedblockchain:GetMember",
        "managedblockchain:ListNodes",
        "managedblockchain:ListTagsForResource",
        "managedblockchain:TagResource",
        "managedblockchain:UntagResource",
        "managedblockchain:UpdateMember"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/managedblockchain:member"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/managedblockchain:member"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "managedblockchain:DeleteAccessor",
         "managedblockchain:GetAccessor",
         "managedblockchain:ListTagsForResource",
         "managedblockchain:TagResource",
         "managedblockchain:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "managedblockchain:DeleteAccessor",
        "managedblockchain:GetAccessor",
        "managedblockchain:ListTagsForResource",
        "managedblockchain:TagResource",
        "managedblockchain:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/managedblockchain:accessor"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/managedblockchain:accessor"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "managedblockchain:DeleteNode",
         "managedblockchain:GetNode",
         "managedblockchain:ListTagsForResource",
         "managedblockchain:TagResource",
         "managedblockchain:UntagResource",
         "managedblockchain:UpdateNode"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "managedblockchain:DeleteNode",
        "managedblockchain:GetNode",
        "managedblockchain:ListTagsForResource",
        "managedblockchain:TagResource",
        "managedblockchain:UntagResource",
        "managedblockchain:UpdateNode"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/managedblockchain:node"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/managedblockchain:node"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "managedblockchain:GetProposal",
         "managedblockchain:ListProposalVotes",
         "managedblockchain:ListTagsForResource",
         "managedblockchain:TagResource",
         "managedblockchain:UntagResource",
         "managedblockchain:VoteOnProposal"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "managedblockchain:GetProposal",
        "managedblockchain:ListProposalVotes",
        "managedblockchain:ListTagsForResource",
        "managedblockchain:TagResource",
        "managedblockchain:UntagResource",
        "managedblockchain:VoteOnProposal"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/managedblockchain:proposal"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/managedblockchain:proposal"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "managedblockchain:ListTagsForResource",
         "managedblockchain:RejectInvitation",
         "managedblockchain:TagResource",
         "managedblockchain:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "managedblockchain:ListTagsForResource",
        "managedblockchain:RejectInvitation",
        "managedblockchain:TagResource",
        "managedblockchain:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/managedblockchain:invitation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/managedblockchain:invitation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mapcredits:ListAssociatedPrograms",
         "mapcredits:ListQuarterCredits",
         "mapcredits:ListQuarterSpend"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mapcredits:ListAssociatedPrograms",
        "mapcredits:ListQuarterCredits",
        "mapcredits:ListQuarterSpend"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mapcredits:agreement"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mapcredits:agreement"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediaconnect:AddBridgeOutputs",
         "mediaconnect:AddBridgeSources",
         "mediaconnect:CreateBridge",
         "mediaconnect:DeleteBridge",
         "mediaconnect:DescribeBridge",
         "mediaconnect:ListBridges",
         "mediaconnect:RemoveBridgeOutput",
         "mediaconnect:RemoveBridgeSource",
         "mediaconnect:UpdateBridge",
         "mediaconnect:UpdateBridgeOutput",
         "mediaconnect:UpdateBridgeSource",
         "mediaconnect:UpdateBridgeState"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediaconnect:AddBridgeOutputs",
        "mediaconnect:AddBridgeSources",
        "mediaconnect:CreateBridge",
        "mediaconnect:DeleteBridge",
        "mediaconnect:DescribeBridge",
        "mediaconnect:ListBridges",
        "mediaconnect:RemoveBridgeOutput",
        "mediaconnect:RemoveBridgeSource",
        "mediaconnect:UpdateBridge",
        "mediaconnect:UpdateBridgeOutput",
        "mediaconnect:UpdateBridgeSource",
        "mediaconnect:UpdateBridgeState"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediaconnect:Bridge"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediaconnect:Bridge"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediaconnect:CreateGateway",
         "mediaconnect:DeleteGateway",
         "mediaconnect:DescribeGateway"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediaconnect:CreateGateway",
        "mediaconnect:DeleteGateway",
        "mediaconnect:DescribeGateway"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediaconnect:Gateway"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediaconnect:Gateway"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediaconnect:DeregisterGatewayInstance",
         "mediaconnect:DescribeGatewayInstance",
         "mediaconnect:ListGatewayInstances",
         "mediaconnect:UpdateGatewayInstance"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediaconnect:DeregisterGatewayInstance",
        "mediaconnect:DescribeGatewayInstance",
        "mediaconnect:ListGatewayInstances",
        "mediaconnect:UpdateGatewayInstance"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediaconnect:GatewayInstance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediaconnect:GatewayInstance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediaconvert:CancelJob",
         "mediaconvert:GetJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediaconvert:CancelJob",
        "mediaconvert:GetJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediaconvert:Job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediaconvert:Job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediaconvert:CreateJob",
         "mediaconvert:DeleteJobTemplate",
         "mediaconvert:GetJobTemplate",
         "mediaconvert:ListTagsForResource",
         "mediaconvert:TagResource",
         "mediaconvert:UntagResource",
         "mediaconvert:UpdateJobTemplate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediaconvert:CreateJob",
        "mediaconvert:DeleteJobTemplate",
        "mediaconvert:GetJobTemplate",
        "mediaconvert:ListTagsForResource",
        "mediaconvert:TagResource",
        "mediaconvert:UntagResource",
        "mediaconvert:UpdateJobTemplate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediaconvert:JobTemplate"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediaconvert:JobTemplate"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediaconvert:CreateJob",
         "mediaconvert:CreateJobTemplate",
         "mediaconvert:DeletePreset",
         "mediaconvert:GetPreset",
         "mediaconvert:ListTagsForResource",
         "mediaconvert:TagResource",
         "mediaconvert:UntagResource",
         "mediaconvert:UpdateJobTemplate",
         "mediaconvert:UpdatePreset"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediaconvert:CreateJob",
        "mediaconvert:CreateJobTemplate",
        "mediaconvert:DeletePreset",
        "mediaconvert:GetPreset",
        "mediaconvert:ListTagsForResource",
        "mediaconvert:TagResource",
        "mediaconvert:UntagResource",
        "mediaconvert:UpdateJobTemplate",
        "mediaconvert:UpdatePreset"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediaconvert:Preset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediaconvert:Preset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediaconvert:CreateJob",
         "mediaconvert:CreateJobTemplate",
         "mediaconvert:DeleteQueue",
         "mediaconvert:GetQueue",
         "mediaconvert:ListJobs",
         "mediaconvert:ListTagsForResource",
         "mediaconvert:SearchJobs",
         "mediaconvert:TagResource",
         "mediaconvert:UntagResource",
         "mediaconvert:UpdateJobTemplate",
         "mediaconvert:UpdateQueue"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediaconvert:CreateJob",
        "mediaconvert:CreateJobTemplate",
        "mediaconvert:DeleteQueue",
        "mediaconvert:GetQueue",
        "mediaconvert:ListJobs",
        "mediaconvert:ListTagsForResource",
        "mediaconvert:SearchJobs",
        "mediaconvert:TagResource",
        "mediaconvert:UntagResource",
        "mediaconvert:UpdateJobTemplate",
        "mediaconvert:UpdateQueue"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediaconvert:Queue"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediaconvert:Queue"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "medialive:AcceptInputDeviceTransfer",
         "medialive:CancelInputDeviceTransfer",
         "medialive:ClaimDevice",
         "medialive:DescribeInputDevice",
         "medialive:DescribeInputDeviceThumbnail",
         "medialive:RebootInputDevice",
         "medialive:RejectInputDeviceTransfer",
         "medialive:StartInputDevice",
         "medialive:StartInputDeviceMaintenanceWindow",
         "medialive:StopInputDevice",
         "medialive:TransferInputDevice",
         "medialive:UpdateInputDevice"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "medialive:AcceptInputDeviceTransfer",
        "medialive:CancelInputDeviceTransfer",
        "medialive:ClaimDevice",
        "medialive:DescribeInputDevice",
        "medialive:DescribeInputDeviceThumbnail",
        "medialive:RebootInputDevice",
        "medialive:RejectInputDeviceTransfer",
        "medialive:StartInputDevice",
        "medialive:StartInputDeviceMaintenanceWindow",
        "medialive:StopInputDevice",
        "medialive:TransferInputDevice",
        "medialive:UpdateInputDevice"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/medialive:input-device"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/medialive:input-device"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "medialive:BatchUpdateSchedule",
         "medialive:CreateChannel",
         "medialive:CreateTags",
         "medialive:DeleteChannel",
         "medialive:DeleteSchedule",
         "medialive:DeleteTags",
         "medialive:DescribeChannel",
         "medialive:DescribeSchedule",
         "medialive:DescribeThumbnails",
         "medialive:ListTagsForResource",
         "medialive:RestartChannelPipelines",
         "medialive:StartChannel",
         "medialive:StopChannel",
         "medialive:UpdateChannel",
         "medialive:UpdateChannelClass"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "medialive:BatchUpdateSchedule",
        "medialive:CreateChannel",
        "medialive:CreateTags",
        "medialive:DeleteChannel",
        "medialive:DeleteSchedule",
        "medialive:DeleteTags",
        "medialive:DescribeChannel",
        "medialive:DescribeSchedule",
        "medialive:DescribeThumbnails",
        "medialive:ListTagsForResource",
        "medialive:RestartChannelPipelines",
        "medialive:StartChannel",
        "medialive:StopChannel",
        "medialive:UpdateChannel",
        "medialive:UpdateChannelClass"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/medialive:channel"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/medialive:channel"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "medialive:CreateChannel",
         "medialive:CreateInput",
         "medialive:CreatePartnerInput",
         "medialive:CreateTags",
         "medialive:DeleteInput",
         "medialive:DeleteTags",
         "medialive:DescribeInput",
         "medialive:ListTagsForResource",
         "medialive:UpdateInput"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "medialive:CreateChannel",
        "medialive:CreateInput",
        "medialive:CreatePartnerInput",
        "medialive:CreateTags",
        "medialive:DeleteInput",
        "medialive:DeleteTags",
        "medialive:DescribeInput",
        "medialive:ListTagsForResource",
        "medialive:UpdateInput"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/medialive:input"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/medialive:input"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "medialive:CreateChannelPlacementGroup",
         "medialive:CreateTags",
         "medialive:DeleteChannelPlacementGroup",
         "medialive:DeleteTags",
         "medialive:DescribeChannelPlacementGroup",
         "medialive:ListTagsForResource",
         "medialive:UpdateChannelPlacementGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "medialive:CreateChannelPlacementGroup",
        "medialive:CreateTags",
        "medialive:DeleteChannelPlacementGroup",
        "medialive:DeleteTags",
        "medialive:DescribeChannelPlacementGroup",
        "medialive:ListTagsForResource",
        "medialive:UpdateChannelPlacementGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/medialive:channel-placement-group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/medialive:channel-placement-group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "medialive:CreateChannelPlacementGroup",
         "medialive:CreateCluster",
         "medialive:CreateNode",
         "medialive:CreateNodeRegistrationScript",
         "medialive:CreateTags",
         "medialive:DeleteCluster",
         "medialive:DeleteTags",
         "medialive:DescribeCluster",
         "medialive:ListTagsForResource",
         "medialive:UpdateCluster"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "medialive:CreateChannelPlacementGroup",
        "medialive:CreateCluster",
        "medialive:CreateNode",
        "medialive:CreateNodeRegistrationScript",
        "medialive:CreateTags",
        "medialive:DeleteCluster",
        "medialive:DeleteTags",
        "medialive:DescribeCluster",
        "medialive:ListTagsForResource",
        "medialive:UpdateCluster"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/medialive:cluster"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/medialive:cluster"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "medialive:CreateCloudWatchAlarmTemplate",
         "medialive:CreateTags",
         "medialive:DeleteCloudWatchAlarmTemplate",
         "medialive:DeleteTags",
         "medialive:GetCloudWatchAlarmTemplate",
         "medialive:ListTagsForResource",
         "medialive:UpdateCloudWatchAlarmTemplate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "medialive:CreateCloudWatchAlarmTemplate",
        "medialive:CreateTags",
        "medialive:DeleteCloudWatchAlarmTemplate",
        "medialive:DeleteTags",
        "medialive:GetCloudWatchAlarmTemplate",
        "medialive:ListTagsForResource",
        "medialive:UpdateCloudWatchAlarmTemplate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/medialive:cloudwatch-alarm-template"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/medialive:cloudwatch-alarm-template"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "medialive:CreateCloudWatchAlarmTemplate",
         "medialive:CreateCloudWatchAlarmTemplateGroup",
         "medialive:CreateTags",
         "medialive:DeleteCloudWatchAlarmTemplateGroup",
         "medialive:DeleteTags",
         "medialive:GetCloudWatchAlarmTemplateGroup",
         "medialive:ListTagsForResource",
         "medialive:UpdateCloudWatchAlarmTemplate",
         "medialive:UpdateCloudWatchAlarmTemplateGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "medialive:CreateCloudWatchAlarmTemplate",
        "medialive:CreateCloudWatchAlarmTemplateGroup",
        "medialive:CreateTags",
        "medialive:DeleteCloudWatchAlarmTemplateGroup",
        "medialive:DeleteTags",
        "medialive:GetCloudWatchAlarmTemplateGroup",
        "medialive:ListTagsForResource",
        "medialive:UpdateCloudWatchAlarmTemplate",
        "medialive:UpdateCloudWatchAlarmTemplateGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/medialive:cloudwatch-alarm-template-group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/medialive:cloudwatch-alarm-template-group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "medialive:CreateEventBridgeRuleTemplate",
         "medialive:CreateTags",
         "medialive:DeleteEventBridgeRuleTemplate",
         "medialive:DeleteTags",
         "medialive:GetEventBridgeRuleTemplate",
         "medialive:ListTagsForResource",
         "medialive:UpdateEventBridgeRuleTemplate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "medialive:CreateEventBridgeRuleTemplate",
        "medialive:CreateTags",
        "medialive:DeleteEventBridgeRuleTemplate",
        "medialive:DeleteTags",
        "medialive:GetEventBridgeRuleTemplate",
        "medialive:ListTagsForResource",
        "medialive:UpdateEventBridgeRuleTemplate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/medialive:eventbridge-rule-template"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/medialive:eventbridge-rule-template"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "medialive:CreateEventBridgeRuleTemplate",
         "medialive:CreateEventBridgeRuleTemplateGroup",
         "medialive:CreateTags",
         "medialive:DeleteEventBridgeRuleTemplateGroup",
         "medialive:DeleteTags",
         "medialive:GetEventBridgeRuleTemplateGroup",
         "medialive:ListTagsForResource",
         "medialive:UpdateEventBridgeRuleTemplate",
         "medialive:UpdateEventBridgeRuleTemplateGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "medialive:CreateEventBridgeRuleTemplate",
        "medialive:CreateEventBridgeRuleTemplateGroup",
        "medialive:CreateTags",
        "medialive:DeleteEventBridgeRuleTemplateGroup",
        "medialive:DeleteTags",
        "medialive:GetEventBridgeRuleTemplateGroup",
        "medialive:ListTagsForResource",
        "medialive:UpdateEventBridgeRuleTemplate",
        "medialive:UpdateEventBridgeRuleTemplateGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/medialive:eventbridge-rule-template-group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/medialive:eventbridge-rule-template-group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "medialive:CreateInput",
         "medialive:CreateInputSecurityGroup",
         "medialive:CreateTags",
         "medialive:DeleteInputSecurityGroup",
         "medialive:DeleteTags",
         "medialive:DescribeInputSecurityGroup",
         "medialive:ListTagsForResource",
         "medialive:UpdateInputSecurityGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "medialive:CreateInput",
        "medialive:CreateInputSecurityGroup",
        "medialive:CreateTags",
        "medialive:DeleteInputSecurityGroup",
        "medialive:DeleteTags",
        "medialive:DescribeInputSecurityGroup",
        "medialive:ListTagsForResource",
        "medialive:UpdateInputSecurityGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/medialive:input-security-group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/medialive:input-security-group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "medialive:CreateMultiplex",
         "medialive:CreateMultiplexProgram",
         "medialive:CreateTags",
         "medialive:DeleteMultiplex",
         "medialive:DeleteMultiplexProgram",
         "medialive:DeleteTags",
         "medialive:DescribeMultiplex",
         "medialive:DescribeMultiplexProgram",
         "medialive:ListTagsForResource",
         "medialive:StartMultiplex",
         "medialive:StopMultiplex",
         "medialive:UpdateMultiplex",
         "medialive:UpdateMultiplexProgram"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "medialive:CreateMultiplex",
        "medialive:CreateMultiplexProgram",
        "medialive:CreateTags",
        "medialive:DeleteMultiplex",
        "medialive:DeleteMultiplexProgram",
        "medialive:DeleteTags",
        "medialive:DescribeMultiplex",
        "medialive:DescribeMultiplexProgram",
        "medialive:ListTagsForResource",
        "medialive:StartMultiplex",
        "medialive:StopMultiplex",
        "medialive:UpdateMultiplex",
        "medialive:UpdateMultiplexProgram"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/medialive:multiplex"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/medialive:multiplex"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "medialive:CreateNetwork",
         "medialive:CreateTags",
         "medialive:DeleteNetwork",
         "medialive:DeleteTags",
         "medialive:DescribeNetwork",
         "medialive:ListTagsForResource",
         "medialive:UpdateNetwork"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "medialive:CreateNetwork",
        "medialive:CreateTags",
        "medialive:DeleteNetwork",
        "medialive:DeleteTags",
        "medialive:DescribeNetwork",
        "medialive:ListTagsForResource",
        "medialive:UpdateNetwork"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/medialive:network"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/medialive:network"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "medialive:CreateNode",
         "medialive:CreateTags",
         "medialive:DeleteNode",
         "medialive:DeleteTags",
         "medialive:DescribeNode",
         "medialive:ListTagsForResource",
         "medialive:UpdateNode",
         "medialive:UpdateNodeState"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "medialive:CreateNode",
        "medialive:CreateTags",
        "medialive:DeleteNode",
        "medialive:DeleteTags",
        "medialive:DescribeNode",
        "medialive:ListTagsForResource",
        "medialive:UpdateNode",
        "medialive:UpdateNodeState"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/medialive:node"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/medialive:node"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "medialive:CreateSignalMap",
         "medialive:CreateTags",
         "medialive:DeleteSignalMap",
         "medialive:DeleteTags",
         "medialive:GetSignalMap",
         "medialive:ListTagsForResource",
         "medialive:StartDeleteMonitorDeployment",
         "medialive:StartMonitorDeployment",
         "medialive:StartUpdateSignalMap"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "medialive:CreateSignalMap",
        "medialive:CreateTags",
        "medialive:DeleteSignalMap",
        "medialive:DeleteTags",
        "medialive:GetSignalMap",
        "medialive:ListTagsForResource",
        "medialive:StartDeleteMonitorDeployment",
        "medialive:StartMonitorDeployment",
        "medialive:StartUpdateSignalMap"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/medialive:signal-map"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/medialive:signal-map"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "medialive:CreateTags",
         "medialive:DeleteReservation",
         "medialive:DeleteTags",
         "medialive:DescribeReservation",
         "medialive:ListTagsForResource",
         "medialive:PurchaseOffering",
         "medialive:UpdateReservation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "medialive:CreateTags",
        "medialive:DeleteReservation",
        "medialive:DeleteTags",
        "medialive:DescribeReservation",
        "medialive:ListTagsForResource",
        "medialive:PurchaseOffering",
        "medialive:UpdateReservation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/medialive:reservation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/medialive:reservation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "medialive:DescribeOffering",
         "medialive:PurchaseOffering"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "medialive:DescribeOffering",
        "medialive:PurchaseOffering"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/medialive:offering"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/medialive:offering"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediapackage:ConfigureLogs",
         "mediapackage:DeleteChannel",
         "mediapackage:DescribeChannel",
         "mediapackage:ListTagsForResource",
         "mediapackage:RotateChannelCredentials",
         "mediapackage:RotateIngestEndpointCredentials",
         "mediapackage:TagResource",
         "mediapackage:UntagResource",
         "mediapackage:UpdateChannel"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediapackage:ConfigureLogs",
        "mediapackage:DeleteChannel",
        "mediapackage:DescribeChannel",
        "mediapackage:ListTagsForResource",
        "mediapackage:RotateChannelCredentials",
        "mediapackage:RotateIngestEndpointCredentials",
        "mediapackage:TagResource",
        "mediapackage:UntagResource",
        "mediapackage:UpdateChannel"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediapackage:channels"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediapackage:channels"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediapackage:DeleteOriginEndpoint",
         "mediapackage:DescribeOriginEndpoint",
         "mediapackage:ListTagsForResource",
         "mediapackage:TagResource",
         "mediapackage:UntagResource",
         "mediapackage:UpdateOriginEndpoint"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediapackage:DeleteOriginEndpoint",
        "mediapackage:DescribeOriginEndpoint",
        "mediapackage:ListTagsForResource",
        "mediapackage:TagResource",
        "mediapackage:UntagResource",
        "mediapackage:UpdateOriginEndpoint"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediapackage:origin_endpoints"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediapackage:origin_endpoints"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediapackage:DescribeHarvestJob",
         "mediapackage:ListTagsForResource",
         "mediapackage:TagResource",
         "mediapackage:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediapackage:DescribeHarvestJob",
        "mediapackage:ListTagsForResource",
        "mediapackage:TagResource",
        "mediapackage:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediapackage:harvest_jobs"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediapackage:harvest_jobs"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediapackage-vod:ConfigureLogs",
         "mediapackage-vod:DeletePackagingGroup",
         "mediapackage-vod:DescribePackagingGroup",
         "mediapackage-vod:ListTagsForResource",
         "mediapackage-vod:TagResource",
         "mediapackage-vod:UntagResource",
         "mediapackage-vod:UpdatePackagingGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediapackage-vod:ConfigureLogs",
        "mediapackage-vod:DeletePackagingGroup",
        "mediapackage-vod:DescribePackagingGroup",
        "mediapackage-vod:ListTagsForResource",
        "mediapackage-vod:TagResource",
        "mediapackage-vod:UntagResource",
        "mediapackage-vod:UpdatePackagingGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediapackage-vod:packaging-groups"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediapackage-vod:packaging-groups"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediapackage-vod:DeleteAsset",
         "mediapackage-vod:DescribeAsset",
         "mediapackage-vod:ListTagsForResource",
         "mediapackage-vod:TagResource",
         "mediapackage-vod:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediapackage-vod:DeleteAsset",
        "mediapackage-vod:DescribeAsset",
        "mediapackage-vod:ListTagsForResource",
        "mediapackage-vod:TagResource",
        "mediapackage-vod:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediapackage-vod:assets"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediapackage-vod:assets"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediapackage-vod:DeletePackagingConfiguration",
         "mediapackage-vod:DescribePackagingConfiguration",
         "mediapackage-vod:ListTagsForResource",
         "mediapackage-vod:TagResource",
         "mediapackage-vod:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediapackage-vod:DeletePackagingConfiguration",
        "mediapackage-vod:DescribePackagingConfiguration",
        "mediapackage-vod:ListTagsForResource",
        "mediapackage-vod:TagResource",
        "mediapackage-vod:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediapackage-vod:packaging-configurations"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediapackage-vod:packaging-configurations"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediapackagev2:CancelHarvestJob",
         "mediapackagev2:CreateChannel",
         "mediapackagev2:CreateHarvestJob",
         "mediapackagev2:CreateOriginEndpoint",
         "mediapackagev2:DeleteChannel",
         "mediapackagev2:DeleteChannelPolicy",
         "mediapackagev2:DeleteOriginEndpoint",
         "mediapackagev2:DeleteOriginEndpointPolicy",
         "mediapackagev2:GetChannel",
         "mediapackagev2:GetChannelPolicy",
         "mediapackagev2:GetHarvestJob",
         "mediapackagev2:GetOriginEndpoint",
         "mediapackagev2:GetOriginEndpointPolicy",
         "mediapackagev2:ListOriginEndpoints",
         "mediapackagev2:ListTagsForResource",
         "mediapackagev2:PutChannelPolicy",
         "mediapackagev2:PutObject",
         "mediapackagev2:PutOriginEndpointPolicy",
         "mediapackagev2:TagResource",
         "mediapackagev2:UntagResource",
         "mediapackagev2:UpdateChannel",
         "mediapackagev2:UpdateOriginEndpoint"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediapackagev2:CancelHarvestJob",
        "mediapackagev2:CreateChannel",
        "mediapackagev2:CreateHarvestJob",
        "mediapackagev2:CreateOriginEndpoint",
        "mediapackagev2:DeleteChannel",
        "mediapackagev2:DeleteChannelPolicy",
        "mediapackagev2:DeleteOriginEndpoint",
        "mediapackagev2:DeleteOriginEndpointPolicy",
        "mediapackagev2:GetChannel",
        "mediapackagev2:GetChannelPolicy",
        "mediapackagev2:GetHarvestJob",
        "mediapackagev2:GetOriginEndpoint",
        "mediapackagev2:GetOriginEndpointPolicy",
        "mediapackagev2:ListOriginEndpoints",
        "mediapackagev2:ListTagsForResource",
        "mediapackagev2:PutChannelPolicy",
        "mediapackagev2:PutObject",
        "mediapackagev2:PutOriginEndpointPolicy",
        "mediapackagev2:TagResource",
        "mediapackagev2:UntagResource",
        "mediapackagev2:UpdateChannel",
        "mediapackagev2:UpdateOriginEndpoint"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediapackagev2:Channel"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediapackagev2:Channel"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediapackagev2:CancelHarvestJob",
         "mediapackagev2:CreateChannel",
         "mediapackagev2:CreateChannelGroup",
         "mediapackagev2:CreateHarvestJob",
         "mediapackagev2:CreateOriginEndpoint",
         "mediapackagev2:DeleteChannel",
         "mediapackagev2:DeleteChannelGroup",
         "mediapackagev2:DeleteChannelPolicy",
         "mediapackagev2:DeleteOriginEndpoint",
         "mediapackagev2:DeleteOriginEndpointPolicy",
         "mediapackagev2:GetChannel",
         "mediapackagev2:GetChannelGroup",
         "mediapackagev2:GetChannelPolicy",
         "mediapackagev2:GetHarvestJob",
         "mediapackagev2:GetOriginEndpoint",
         "mediapackagev2:GetOriginEndpointPolicy",
         "mediapackagev2:ListChannels",
         "mediapackagev2:ListHarvestJobs",
         "mediapackagev2:ListOriginEndpoints",
         "mediapackagev2:ListTagsForResource",
         "mediapackagev2:PutChannelPolicy",
         "mediapackagev2:PutOriginEndpointPolicy",
         "mediapackagev2:TagResource",
         "mediapackagev2:UntagResource",
         "mediapackagev2:UpdateChannel",
         "mediapackagev2:UpdateChannelGroup",
         "mediapackagev2:UpdateOriginEndpoint"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediapackagev2:CancelHarvestJob",
        "mediapackagev2:CreateChannel",
        "mediapackagev2:CreateChannelGroup",
        "mediapackagev2:CreateHarvestJob",
        "mediapackagev2:CreateOriginEndpoint",
        "mediapackagev2:DeleteChannel",
        "mediapackagev2:DeleteChannelGroup",
        "mediapackagev2:DeleteChannelPolicy",
        "mediapackagev2:DeleteOriginEndpoint",
        "mediapackagev2:DeleteOriginEndpointPolicy",
        "mediapackagev2:GetChannel",
        "mediapackagev2:GetChannelGroup",
        "mediapackagev2:GetChannelPolicy",
        "mediapackagev2:GetHarvestJob",
        "mediapackagev2:GetOriginEndpoint",
        "mediapackagev2:GetOriginEndpointPolicy",
        "mediapackagev2:ListChannels",
        "mediapackagev2:ListHarvestJobs",
        "mediapackagev2:ListOriginEndpoints",
        "mediapackagev2:ListTagsForResource",
        "mediapackagev2:PutChannelPolicy",
        "mediapackagev2:PutOriginEndpointPolicy",
        "mediapackagev2:TagResource",
        "mediapackagev2:UntagResource",
        "mediapackagev2:UpdateChannel",
        "mediapackagev2:UpdateChannelGroup",
        "mediapackagev2:UpdateOriginEndpoint"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediapackagev2:ChannelGroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediapackagev2:ChannelGroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediapackagev2:CancelHarvestJob",
         "mediapackagev2:CreateHarvestJob",
         "mediapackagev2:GetHarvestJob",
         "mediapackagev2:ListTagsForResource",
         "mediapackagev2:TagResource",
         "mediapackagev2:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediapackagev2:CancelHarvestJob",
        "mediapackagev2:CreateHarvestJob",
        "mediapackagev2:GetHarvestJob",
        "mediapackagev2:ListTagsForResource",
        "mediapackagev2:TagResource",
        "mediapackagev2:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediapackagev2:HarvestJob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediapackagev2:HarvestJob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediapackagev2:CancelHarvestJob",
         "mediapackagev2:CreateHarvestJob",
         "mediapackagev2:CreateOriginEndpoint",
         "mediapackagev2:DeleteOriginEndpoint",
         "mediapackagev2:DeleteOriginEndpointPolicy",
         "mediapackagev2:GetHarvestJob",
         "mediapackagev2:GetHeadObject",
         "mediapackagev2:GetObject",
         "mediapackagev2:GetOriginEndpoint",
         "mediapackagev2:GetOriginEndpointPolicy",
         "mediapackagev2:HarvestObject",
         "mediapackagev2:ListTagsForResource",
         "mediapackagev2:PutOriginEndpointPolicy",
         "mediapackagev2:TagResource",
         "mediapackagev2:UntagResource",
         "mediapackagev2:UpdateOriginEndpoint"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediapackagev2:CancelHarvestJob",
        "mediapackagev2:CreateHarvestJob",
        "mediapackagev2:CreateOriginEndpoint",
        "mediapackagev2:DeleteOriginEndpoint",
        "mediapackagev2:DeleteOriginEndpointPolicy",
        "mediapackagev2:GetHarvestJob",
        "mediapackagev2:GetHeadObject",
        "mediapackagev2:GetObject",
        "mediapackagev2:GetOriginEndpoint",
        "mediapackagev2:GetOriginEndpointPolicy",
        "mediapackagev2:HarvestObject",
        "mediapackagev2:ListTagsForResource",
        "mediapackagev2:PutOriginEndpointPolicy",
        "mediapackagev2:TagResource",
        "mediapackagev2:UntagResource",
        "mediapackagev2:UpdateOriginEndpoint"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediapackagev2:OriginEndpoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediapackagev2:OriginEndpoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediapackagev2:DeleteChannelPolicy",
         "mediapackagev2:GetChannelPolicy",
         "mediapackagev2:PutChannelPolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediapackagev2:DeleteChannelPolicy",
        "mediapackagev2:GetChannelPolicy",
        "mediapackagev2:PutChannelPolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediapackagev2:ChannelPolicy"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediapackagev2:ChannelPolicy"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediapackagev2:DeleteOriginEndpointPolicy",
         "mediapackagev2:GetOriginEndpointPolicy",
         "mediapackagev2:PutOriginEndpointPolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediapackagev2:DeleteOriginEndpointPolicy",
        "mediapackagev2:GetOriginEndpointPolicy",
        "mediapackagev2:PutOriginEndpointPolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediapackagev2:OriginEndpointPolicy"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediapackagev2:OriginEndpointPolicy"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediastore:DeleteContainer",
         "mediastore:DeleteContainerPolicy",
         "mediastore:DeleteCorsPolicy",
         "mediastore:DeleteLifecyclePolicy",
         "mediastore:DeleteMetricPolicy",
         "mediastore:DescribeContainer",
         "mediastore:GetContainerPolicy",
         "mediastore:GetCorsPolicy",
         "mediastore:GetLifecyclePolicy",
         "mediastore:GetMetricPolicy",
         "mediastore:ListTagsForResource",
         "mediastore:PutContainerPolicy",
         "mediastore:PutCorsPolicy",
         "mediastore:PutLifecyclePolicy",
         "mediastore:PutMetricPolicy",
         "mediastore:StartAccessLogging",
         "mediastore:StopAccessLogging",
         "mediastore:TagResource",
         "mediastore:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediastore:DeleteContainer",
        "mediastore:DeleteContainerPolicy",
        "mediastore:DeleteCorsPolicy",
        "mediastore:DeleteLifecyclePolicy",
        "mediastore:DeleteMetricPolicy",
        "mediastore:DescribeContainer",
        "mediastore:GetContainerPolicy",
        "mediastore:GetCorsPolicy",
        "mediastore:GetLifecyclePolicy",
        "mediastore:GetMetricPolicy",
        "mediastore:ListTagsForResource",
        "mediastore:PutContainerPolicy",
        "mediastore:PutCorsPolicy",
        "mediastore:PutLifecyclePolicy",
        "mediastore:PutMetricPolicy",
        "mediastore:StartAccessLogging",
        "mediastore:StopAccessLogging",
        "mediastore:TagResource",
        "mediastore:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediastore:container"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediastore:container"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediastore:DeleteObject",
         "mediastore:DescribeObject",
         "mediastore:GetObject",
         "mediastore:PutObject"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediastore:DeleteObject",
        "mediastore:DescribeObject",
        "mediastore:GetObject",
        "mediastore:PutObject"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediastore:object"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediastore:object"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediastore:ListItems"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediastore:ListItems"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediastore:folder"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediastore:folder"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediatailor:ConfigureLogsForChannel",
         "mediatailor:DeleteChannel",
         "mediatailor:DeleteChannelPolicy",
         "mediatailor:DescribeChannel",
         "mediatailor:GetChannelPolicy",
         "mediatailor:GetChannelSchedule",
         "mediatailor:ListTagsForResource",
         "mediatailor:PutChannelPolicy",
         "mediatailor:StartChannel",
         "mediatailor:StopChannel",
         "mediatailor:TagResource",
         "mediatailor:UntagResource",
         "mediatailor:UpdateChannel"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediatailor:ConfigureLogsForChannel",
        "mediatailor:DeleteChannel",
        "mediatailor:DeleteChannelPolicy",
        "mediatailor:DescribeChannel",
        "mediatailor:GetChannelPolicy",
        "mediatailor:GetChannelSchedule",
        "mediatailor:ListTagsForResource",
        "mediatailor:PutChannelPolicy",
        "mediatailor:StartChannel",
        "mediatailor:StopChannel",
        "mediatailor:TagResource",
        "mediatailor:UntagResource",
        "mediatailor:UpdateChannel"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediatailor:channel"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediatailor:channel"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediatailor:ConfigureLogsForPlaybackConfiguration",
         "mediatailor:CreatePrefetchSchedule",
         "mediatailor:DeletePlaybackConfiguration",
         "mediatailor:DeletePrefetchSchedule",
         "mediatailor:GetPlaybackConfiguration",
         "mediatailor:GetPrefetchSchedule",
         "mediatailor:ListPrefetchSchedules",
         "mediatailor:ListTagsForResource",
         "mediatailor:TagResource",
         "mediatailor:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediatailor:ConfigureLogsForPlaybackConfiguration",
        "mediatailor:CreatePrefetchSchedule",
        "mediatailor:DeletePlaybackConfiguration",
        "mediatailor:DeletePrefetchSchedule",
        "mediatailor:GetPlaybackConfiguration",
        "mediatailor:GetPrefetchSchedule",
        "mediatailor:ListPrefetchSchedules",
        "mediatailor:ListTagsForResource",
        "mediatailor:TagResource",
        "mediatailor:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediatailor:playbackConfiguration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediatailor:playbackConfiguration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediatailor:DeleteLiveSource",
         "mediatailor:DescribeLiveSource",
         "mediatailor:ListTagsForResource",
         "mediatailor:TagResource",
         "mediatailor:UntagResource",
         "mediatailor:UpdateLiveSource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediatailor:DeleteLiveSource",
        "mediatailor:DescribeLiveSource",
        "mediatailor:ListTagsForResource",
        "mediatailor:TagResource",
        "mediatailor:UntagResource",
        "mediatailor:UpdateLiveSource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediatailor:liveSource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediatailor:liveSource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediatailor:DeletePrefetchSchedule",
         "mediatailor:GetPrefetchSchedule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediatailor:DeletePrefetchSchedule",
        "mediatailor:GetPrefetchSchedule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediatailor:prefetchSchedule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediatailor:prefetchSchedule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediatailor:DeleteProgram",
         "mediatailor:DescribeProgram",
         "mediatailor:UpdateProgram"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediatailor:DeleteProgram",
        "mediatailor:DescribeProgram",
        "mediatailor:UpdateProgram"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediatailor:program"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediatailor:program"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediatailor:DeleteSourceLocation",
         "mediatailor:DescribeSourceLocation",
         "mediatailor:ListTagsForResource",
         "mediatailor:TagResource",
         "mediatailor:UntagResource",
         "mediatailor:UpdateSourceLocation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediatailor:DeleteSourceLocation",
        "mediatailor:DescribeSourceLocation",
        "mediatailor:ListTagsForResource",
        "mediatailor:TagResource",
        "mediatailor:UntagResource",
        "mediatailor:UpdateSourceLocation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediatailor:sourceLocation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediatailor:sourceLocation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mediatailor:DeleteVodSource",
         "mediatailor:DescribeVodSource",
         "mediatailor:ListTagsForResource",
         "mediatailor:TagResource",
         "mediatailor:UntagResource",
         "mediatailor:UpdateVodSource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mediatailor:DeleteVodSource",
        "mediatailor:DescribeVodSource",
        "mediatailor:ListTagsForResource",
        "mediatailor:TagResource",
        "mediatailor:UntagResource",
        "mediatailor:UpdateVodSource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mediatailor:vodSource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mediatailor:vodSource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "medical-imaging:CopyImageSet",
         "medical-imaging:DeleteDatastore",
         "medical-imaging:DeleteImageSet",
         "medical-imaging:GetDICOMImportJob",
         "medical-imaging:GetDICOMInstance",
         "medical-imaging:GetDICOMInstanceFrames",
         "medical-imaging:GetDICOMInstanceMetadata",
         "medical-imaging:GetDatastore",
         "medical-imaging:GetImageFrame",
         "medical-imaging:GetImageSet",
         "medical-imaging:GetImageSetMetadata",
         "medical-imaging:ListDICOMImportJobs",
         "medical-imaging:ListImageSetVersions",
         "medical-imaging:ListTagsForResource",
         "medical-imaging:SearchImageSets",
         "medical-imaging:StartDICOMImportJob",
         "medical-imaging:TagResource",
         "medical-imaging:UntagResource",
         "medical-imaging:UpdateImageSetMetadata"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "medical-imaging:CopyImageSet",
        "medical-imaging:DeleteDatastore",
        "medical-imaging:DeleteImageSet",
        "medical-imaging:GetDICOMImportJob",
        "medical-imaging:GetDICOMInstance",
        "medical-imaging:GetDICOMInstanceFrames",
        "medical-imaging:GetDICOMInstanceMetadata",
        "medical-imaging:GetDatastore",
        "medical-imaging:GetImageFrame",
        "medical-imaging:GetImageSet",
        "medical-imaging:GetImageSetMetadata",
        "medical-imaging:ListDICOMImportJobs",
        "medical-imaging:ListImageSetVersions",
        "medical-imaging:ListTagsForResource",
        "medical-imaging:SearchImageSets",
        "medical-imaging:StartDICOMImportJob",
        "medical-imaging:TagResource",
        "medical-imaging:UntagResource",
        "medical-imaging:UpdateImageSetMetadata"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/medical-imaging:datastore"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/medical-imaging:datastore"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "medical-imaging:CopyImageSet",
         "medical-imaging:DeleteImageSet",
         "medical-imaging:GetImageFrame",
         "medical-imaging:GetImageSet",
         "medical-imaging:GetImageSetMetadata",
         "medical-imaging:ListImageSetVersions",
         "medical-imaging:ListTagsForResource",
         "medical-imaging:TagResource",
         "medical-imaging:UntagResource",
         "medical-imaging:UpdateImageSetMetadata"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "medical-imaging:CopyImageSet",
        "medical-imaging:DeleteImageSet",
        "medical-imaging:GetImageFrame",
        "medical-imaging:GetImageSet",
        "medical-imaging:GetImageSetMetadata",
        "medical-imaging:ListImageSetVersions",
        "medical-imaging:ListTagsForResource",
        "medical-imaging:TagResource",
        "medical-imaging:UntagResource",
        "medical-imaging:UpdateImageSetMetadata"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/medical-imaging:imageset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/medical-imaging:imageset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "memorydb:BatchUpdateCluster",
         "memorydb:Connect",
         "memorydb:CreateSnapshot",
         "memorydb:DeleteCluster",
         "memorydb:DescribeClusters",
         "memorydb:FailoverShard",
         "memorydb:ListAllowedNodeTypeUpdates",
         "memorydb:ListTags",
         "memorydb:TagResource",
         "memorydb:UntagResource",
         "memorydb:UpdateCluster"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "memorydb:BatchUpdateCluster",
        "memorydb:Connect",
        "memorydb:CreateSnapshot",
        "memorydb:DeleteCluster",
        "memorydb:DescribeClusters",
        "memorydb:FailoverShard",
        "memorydb:ListAllowedNodeTypeUpdates",
        "memorydb:ListTags",
        "memorydb:TagResource",
        "memorydb:UntagResource",
        "memorydb:UpdateCluster"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/memorydb:cluster"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/memorydb:cluster"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "memorydb:Connect",
         "memorydb:CreateAcl",
         "memorydb:DeleteUser",
         "memorydb:DescribeUsers",
         "memorydb:ListTags",
         "memorydb:TagResource",
         "memorydb:UntagResource",
         "memorydb:UpdateAcl",
         "memorydb:UpdateUser"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "memorydb:Connect",
        "memorydb:CreateAcl",
        "memorydb:DeleteUser",
        "memorydb:DescribeUsers",
        "memorydb:ListTags",
        "memorydb:TagResource",
        "memorydb:UntagResource",
        "memorydb:UpdateAcl",
        "memorydb:UpdateUser"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/memorydb:user"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/memorydb:user"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "memorydb:CopySnapshot",
         "memorydb:CreateCluster",
         "memorydb:DeleteCluster",
         "memorydb:DeleteSnapshot",
         "memorydb:DescribeSnapshots",
         "memorydb:ListTags",
         "memorydb:TagResource",
         "memorydb:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "memorydb:CopySnapshot",
        "memorydb:CreateCluster",
        "memorydb:DeleteCluster",
        "memorydb:DeleteSnapshot",
        "memorydb:DescribeSnapshots",
        "memorydb:ListTags",
        "memorydb:TagResource",
        "memorydb:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/memorydb:snapshot"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/memorydb:snapshot"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "memorydb:CreateCluster",
         "memorydb:DeleteAcl",
         "memorydb:DescribeAcls",
         "memorydb:ListTags",
         "memorydb:TagResource",
         "memorydb:UntagResource",
         "memorydb:UpdateAcl",
         "memorydb:UpdateCluster"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "memorydb:CreateCluster",
        "memorydb:DeleteAcl",
        "memorydb:DescribeAcls",
        "memorydb:ListTags",
        "memorydb:TagResource",
        "memorydb:UntagResource",
        "memorydb:UpdateAcl",
        "memorydb:UpdateCluster"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/memorydb:acl"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/memorydb:acl"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "memorydb:CreateCluster",
         "memorydb:DeleteCluster",
         "memorydb:DeleteMultiRegionCluster",
         "memorydb:DescribeMultiRegionClusters",
         "memorydb:ListAllowedMultiRegionClusterUpdates",
         "memorydb:ListTags",
         "memorydb:TagResource",
         "memorydb:UntagResource",
         "memorydb:UpdateMultiRegionCluster"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "memorydb:CreateCluster",
        "memorydb:DeleteCluster",
        "memorydb:DeleteMultiRegionCluster",
        "memorydb:DescribeMultiRegionClusters",
        "memorydb:ListAllowedMultiRegionClusterUpdates",
        "memorydb:ListTags",
        "memorydb:TagResource",
        "memorydb:UntagResource",
        "memorydb:UpdateMultiRegionCluster"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/memorydb:multiregioncluster"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/memorydb:multiregioncluster"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "memorydb:CreateCluster",
         "memorydb:DeleteParameterGroup",
         "memorydb:DescribeParameterGroups",
         "memorydb:DescribeParameters",
         "memorydb:ListTags",
         "memorydb:ResetParameterGroup",
         "memorydb:TagResource",
         "memorydb:UntagResource",
         "memorydb:UpdateCluster",
         "memorydb:UpdateParameterGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "memorydb:CreateCluster",
        "memorydb:DeleteParameterGroup",
        "memorydb:DescribeParameterGroups",
        "memorydb:DescribeParameters",
        "memorydb:ListTags",
        "memorydb:ResetParameterGroup",
        "memorydb:TagResource",
        "memorydb:UntagResource",
        "memorydb:UpdateCluster",
        "memorydb:UpdateParameterGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/memorydb:parametergroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/memorydb:parametergroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "memorydb:CreateCluster",
         "memorydb:DeleteSubnetGroup",
         "memorydb:DescribeSubnetGroups",
         "memorydb:ListTags",
         "memorydb:TagResource",
         "memorydb:UntagResource",
         "memorydb:UpdateSubnetGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "memorydb:CreateCluster",
        "memorydb:DeleteSubnetGroup",
        "memorydb:DescribeSubnetGroups",
        "memorydb:ListTags",
        "memorydb:TagResource",
        "memorydb:UntagResource",
        "memorydb:UpdateSubnetGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/memorydb:subnetgroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/memorydb:subnetgroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "memorydb:CreateMultiRegionCluster",
         "memorydb:DescribeMultiRegionParameterGroups",
         "memorydb:DescribeMultiRegionParameters",
         "memorydb:UpdateMultiRegionCluster"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "memorydb:CreateMultiRegionCluster",
        "memorydb:DescribeMultiRegionParameterGroups",
        "memorydb:DescribeMultiRegionParameters",
        "memorydb:UpdateMultiRegionCluster"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/memorydb:multiregionparametergroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/memorydb:multiregionparametergroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "memorydb:DescribeReservedNodes",
         "memorydb:PurchaseReservedNodesOffering",
         "memorydb:TagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "memorydb:DescribeReservedNodes",
        "memorydb:PurchaseReservedNodesOffering",
        "memorydb:TagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/memorydb:reservednode"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/memorydb:reservednode"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mgh:AcceptConnection",
         "mgh:BatchAssociateIamRoleWithConnection",
         "mgh:BatchDisassociateIamRoleFromConnection",
         "mgh:DeleteConnection",
         "mgh:GetConnection",
         "mgh:ListConnectionRoles",
         "mgh:RejectConnection"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mgh:AcceptConnection",
        "mgh:BatchAssociateIamRoleWithConnection",
        "mgh:BatchDisassociateIamRoleFromConnection",
        "mgh:DeleteConnection",
        "mgh:GetConnection",
        "mgh:ListConnectionRoles",
        "mgh:RejectConnection"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mgh:ConnectionResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mgh:ConnectionResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mgh:AssociateAutomationUnitRole",
         "mgh:DeleteAutomationUnit",
         "mgh:DescribeAutomationUnit",
         "mgh:DisassociateAutomationUnitRole"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mgh:AssociateAutomationUnitRole",
        "mgh:DeleteAutomationUnit",
        "mgh:DescribeAutomationUnit",
        "mgh:DisassociateAutomationUnitRole"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mgh:AutomationUnitResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mgh:AutomationUnitResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mgh:AssociateCreatedArtifact",
         "mgh:AssociateDiscoveredResource",
         "mgh:AssociateSourceResource",
         "mgh:DescribeMigrationTask",
         "mgh:DisassociateCreatedArtifact",
         "mgh:DisassociateDiscoveredResource",
         "mgh:DisassociateSourceResource",
         "mgh:ImportMigrationTask",
         "mgh:ListCreatedArtifacts",
         "mgh:ListDiscoveredResources",
         "mgh:ListMigrationTaskUpdates",
         "mgh:ListSourceResources",
         "mgh:NotifyMigrationTaskState",
         "mgh:PutResourceAttributes"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mgh:AssociateCreatedArtifact",
        "mgh:AssociateDiscoveredResource",
        "mgh:AssociateSourceResource",
        "mgh:DescribeMigrationTask",
        "mgh:DisassociateCreatedArtifact",
        "mgh:DisassociateDiscoveredResource",
        "mgh:DisassociateSourceResource",
        "mgh:ImportMigrationTask",
        "mgh:ListCreatedArtifacts",
        "mgh:ListDiscoveredResources",
        "mgh:ListMigrationTaskUpdates",
        "mgh:ListSourceResources",
        "mgh:NotifyMigrationTaskState",
        "mgh:PutResourceAttributes"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mgh:migrationTask"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mgh:migrationTask"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mgh:CreateProgressUpdateStream",
         "mgh:DeleteProgressUpdateStream"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mgh:CreateProgressUpdateStream",
        "mgh:DeleteProgressUpdateStream"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mgh:progressUpdateStream"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mgh:progressUpdateStream"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mgh:DeleteAutomationRun",
         "mgh:DescribeAutomationRun"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mgh:DeleteAutomationRun",
        "mgh:DescribeAutomationRun"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mgh:AutomationRunResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mgh:AutomationRunResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mgn:ArchiveApplication",
         "mgn:AssociateApplications",
         "mgn:AssociateSourceServers",
         "mgn:DeleteApplication",
         "mgn:DisassociateApplications",
         "mgn:DisassociateSourceServers",
         "mgn:TagResource",
         "mgn:UnarchiveApplication",
         "mgn:UntagResource",
         "mgn:UpdateApplication"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mgn:ArchiveApplication",
        "mgn:AssociateApplications",
        "mgn:AssociateSourceServers",
        "mgn:DeleteApplication",
        "mgn:DisassociateApplications",
        "mgn:DisassociateSourceServers",
        "mgn:TagResource",
        "mgn:UnarchiveApplication",
        "mgn:UntagResource",
        "mgn:UpdateApplication"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mgn:ApplicationResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mgn:ApplicationResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mgn:ArchiveWave",
         "mgn:AssociateApplications",
         "mgn:DeleteWave",
         "mgn:DisassociateApplications",
         "mgn:TagResource",
         "mgn:UnarchiveWave",
         "mgn:UntagResource",
         "mgn:UpdateWave"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mgn:ArchiveWave",
        "mgn:AssociateApplications",
        "mgn:DeleteWave",
        "mgn:DisassociateApplications",
        "mgn:TagResource",
        "mgn:UnarchiveWave",
        "mgn:UntagResource",
        "mgn:UpdateWave"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mgn:WaveResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mgn:WaveResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mgn:AssociateSourceServers",
         "mgn:BatchCreateVolumeSnapshotGroupForMgn",
         "mgn:ChangeServerLifeCycleState",
         "mgn:DeleteSourceServer",
         "mgn:DisassociateSourceServers",
         "mgn:DisconnectFromService",
         "mgn:FinalizeCutover",
         "mgn:GetAgentCommandForMgn",
         "mgn:GetAgentConfirmedResumeInfoForMgn",
         "mgn:GetAgentReplicationInfoForMgn",
         "mgn:GetAgentRuntimeConfigurationForMgn",
         "mgn:GetAgentSnapshotCreditsForMgn",
         "mgn:GetLaunchConfiguration",
         "mgn:GetReplicationConfiguration",
         "mgn:IssueClientCertificateForMgn",
         "mgn:ListSourceServerActions",
         "mgn:MarkAsArchived",
         "mgn:NotifyAgentAuthenticationForMgn",
         "mgn:NotifyAgentConnectedForMgn",
         "mgn:NotifyAgentDisconnectedForMgn",
         "mgn:NotifyAgentReplicationProgressForMgn",
         "mgn:PauseReplication",
         "mgn:PutSourceServerAction",
         "mgn:RemoveSourceServerAction",
         "mgn:ResumeReplication",
         "mgn:RetryDataReplication",
         "mgn:SendAgentLogsForMgn",
         "mgn:SendAgentMetricsForMgn",
         "mgn:StartCutover",
         "mgn:StartReplication",
         "mgn:StartTest",
         "mgn:StopReplication",
         "mgn:TagResource",
         "mgn:TerminateTargetInstances",
         "mgn:UntagResource",
         "mgn:UpdateAgentBacklogForMgn",
         "mgn:UpdateAgentConversionInfoForMgn",
         "mgn:UpdateAgentReplicationInfoForMgn",
         "mgn:UpdateAgentReplicationProcessStateForMgn",
         "mgn:UpdateAgentSourcePropertiesForMgn",
         "mgn:UpdateLaunchConfiguration",
         "mgn:UpdateReplicationConfiguration",
         "mgn:UpdateSourceServer",
         "mgn:UpdateSourceServerReplicationType"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mgn:AssociateSourceServers",
        "mgn:BatchCreateVolumeSnapshotGroupForMgn",
        "mgn:ChangeServerLifeCycleState",
        "mgn:DeleteSourceServer",
        "mgn:DisassociateSourceServers",
        "mgn:DisconnectFromService",
        "mgn:FinalizeCutover",
        "mgn:GetAgentCommandForMgn",
        "mgn:GetAgentConfirmedResumeInfoForMgn",
        "mgn:GetAgentReplicationInfoForMgn",
        "mgn:GetAgentRuntimeConfigurationForMgn",
        "mgn:GetAgentSnapshotCreditsForMgn",
        "mgn:GetLaunchConfiguration",
        "mgn:GetReplicationConfiguration",
        "mgn:IssueClientCertificateForMgn",
        "mgn:ListSourceServerActions",
        "mgn:MarkAsArchived",
        "mgn:NotifyAgentAuthenticationForMgn",
        "mgn:NotifyAgentConnectedForMgn",
        "mgn:NotifyAgentDisconnectedForMgn",
        "mgn:NotifyAgentReplicationProgressForMgn",
        "mgn:PauseReplication",
        "mgn:PutSourceServerAction",
        "mgn:RemoveSourceServerAction",
        "mgn:ResumeReplication",
        "mgn:RetryDataReplication",
        "mgn:SendAgentLogsForMgn",
        "mgn:SendAgentMetricsForMgn",
        "mgn:StartCutover",
        "mgn:StartReplication",
        "mgn:StartTest",
        "mgn:StopReplication",
        "mgn:TagResource",
        "mgn:TerminateTargetInstances",
        "mgn:UntagResource",
        "mgn:UpdateAgentBacklogForMgn",
        "mgn:UpdateAgentConversionInfoForMgn",
        "mgn:UpdateAgentReplicationInfoForMgn",
        "mgn:UpdateAgentReplicationProcessStateForMgn",
        "mgn:UpdateAgentSourcePropertiesForMgn",
        "mgn:UpdateLaunchConfiguration",
        "mgn:UpdateReplicationConfiguration",
        "mgn:UpdateSourceServer",
        "mgn:UpdateSourceServerReplicationType"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mgn:SourceServerResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mgn:SourceServerResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mgn:DeleteConnector",
         "mgn:TagResource",
         "mgn:UntagResource",
         "mgn:UpdateConnector"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mgn:DeleteConnector",
        "mgn:TagResource",
        "mgn:UntagResource",
        "mgn:UpdateConnector"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mgn:ConnectorResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mgn:ConnectorResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mgn:DeleteJob",
         "mgn:DescribeJobLogItems",
         "mgn:TagResource",
         "mgn:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mgn:DeleteJob",
        "mgn:DescribeJobLogItems",
        "mgn:TagResource",
        "mgn:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mgn:JobResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mgn:JobResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mgn:DeleteLaunchConfigurationTemplate",
         "mgn:ListTemplateActions",
         "mgn:PutTemplateAction",
         "mgn:RemoveTemplateAction",
         "mgn:TagResource",
         "mgn:UntagResource",
         "mgn:UpdateLaunchConfigurationTemplate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mgn:DeleteLaunchConfigurationTemplate",
        "mgn:ListTemplateActions",
        "mgn:PutTemplateAction",
        "mgn:RemoveTemplateAction",
        "mgn:TagResource",
        "mgn:UntagResource",
        "mgn:UpdateLaunchConfigurationTemplate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mgn:LaunchConfigurationTemplateResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mgn:LaunchConfigurationTemplateResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mgn:DeleteNetworkMigrationDefinition",
         "mgn:GetNetworkMigrationDefinition",
         "mgn:GetNetworkMigrationMapperSegmentConstruct",
         "mgn:ListNetworkMigrationAnalyses",
         "mgn:ListNetworkMigrationAnalysisResults",
         "mgn:ListNetworkMigrationCodeGenerationSegments",
         "mgn:ListNetworkMigrationCodeGenerations",
         "mgn:ListNetworkMigrationDeployedStacks",
         "mgn:ListNetworkMigrationDeployedStacksDeletions",
         "mgn:ListNetworkMigrationDeployments",
         "mgn:ListNetworkMigrationExecutions",
         "mgn:ListNetworkMigrationMapperSegmentConstructs",
         "mgn:ListNetworkMigrationMapperSegments",
         "mgn:ListNetworkMigrationMappings",
         "mgn:StartNetworkMigrationAnalysis",
         "mgn:StartNetworkMigrationCodeGeneration",
         "mgn:StartNetworkMigrationDeployedStacksDeletion",
         "mgn:StartNetworkMigrationDeployment",
         "mgn:StartNetworkMigrationMapping",
         "mgn:UpdateNetworkMigrationDefinition",
         "mgn:UpdateNetworkMigrationMapperSegment",
         "mgn:UpdateNetworkMigrationMapperSegmentConstruct"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mgn:DeleteNetworkMigrationDefinition",
        "mgn:GetNetworkMigrationDefinition",
        "mgn:GetNetworkMigrationMapperSegmentConstruct",
        "mgn:ListNetworkMigrationAnalyses",
        "mgn:ListNetworkMigrationAnalysisResults",
        "mgn:ListNetworkMigrationCodeGenerationSegments",
        "mgn:ListNetworkMigrationCodeGenerations",
        "mgn:ListNetworkMigrationDeployedStacks",
        "mgn:ListNetworkMigrationDeployedStacksDeletions",
        "mgn:ListNetworkMigrationDeployments",
        "mgn:ListNetworkMigrationExecutions",
        "mgn:ListNetworkMigrationMapperSegmentConstructs",
        "mgn:ListNetworkMigrationMapperSegments",
        "mgn:ListNetworkMigrationMappings",
        "mgn:StartNetworkMigrationAnalysis",
        "mgn:StartNetworkMigrationCodeGeneration",
        "mgn:StartNetworkMigrationDeployedStacksDeletion",
        "mgn:StartNetworkMigrationDeployment",
        "mgn:StartNetworkMigrationMapping",
        "mgn:UpdateNetworkMigrationDefinition",
        "mgn:UpdateNetworkMigrationMapperSegment",
        "mgn:UpdateNetworkMigrationMapperSegmentConstruct"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mgn:NetworkMigrationDefinitionResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mgn:NetworkMigrationDefinitionResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mgn:DeleteReplicationConfigurationTemplate",
         "mgn:TagResource",
         "mgn:UntagResource",
         "mgn:UpdateReplicationConfigurationTemplate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mgn:DeleteReplicationConfigurationTemplate",
        "mgn:TagResource",
        "mgn:UntagResource",
        "mgn:UpdateReplicationConfigurationTemplate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mgn:ReplicationConfigurationTemplateResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mgn:ReplicationConfigurationTemplateResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mgn:DeleteVcenterClient",
         "mgn:GetVcenterClientCommandsForMgn",
         "mgn:NotifyVcenterClientStartedForMgn",
         "mgn:SendVcenterClientCommandResultForMgn",
         "mgn:SendVcenterClientLogsForMgn",
         "mgn:SendVcenterClientMetricsForMgn",
         "mgn:TagResource",
         "mgn:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mgn:DeleteVcenterClient",
        "mgn:GetVcenterClientCommandsForMgn",
        "mgn:NotifyVcenterClientStartedForMgn",
        "mgn:SendVcenterClientCommandResultForMgn",
        "mgn:SendVcenterClientLogsForMgn",
        "mgn:SendVcenterClientMetricsForMgn",
        "mgn:TagResource",
        "mgn:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mgn:VcenterClientResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mgn:VcenterClientResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mgn:ListExportErrors"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mgn:ListExportErrors"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mgn:ExportResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mgn:ExportResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mgn:ListImportErrors"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mgn:ListImportErrors"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mgn:ImportResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mgn:ImportResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "migrationhub-orchestrator:CreateWorkflow",
         "migrationhub-orchestrator:DeleteTemplate",
         "migrationhub-orchestrator:GetTemplate",
         "migrationhub-orchestrator:GetTemplateStep",
         "migrationhub-orchestrator:GetTemplateStepGroup",
         "migrationhub-orchestrator:ListTagsForResource",
         "migrationhub-orchestrator:ListTemplateStepGroups",
         "migrationhub-orchestrator:ListTemplateSteps",
         "migrationhub-orchestrator:TagResource",
         "migrationhub-orchestrator:UntagResource",
         "migrationhub-orchestrator:UpdateTemplate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "migrationhub-orchestrator:CreateWorkflow",
        "migrationhub-orchestrator:DeleteTemplate",
        "migrationhub-orchestrator:GetTemplate",
        "migrationhub-orchestrator:GetTemplateStep",
        "migrationhub-orchestrator:GetTemplateStepGroup",
        "migrationhub-orchestrator:ListTagsForResource",
        "migrationhub-orchestrator:ListTemplateStepGroups",
        "migrationhub-orchestrator:ListTemplateSteps",
        "migrationhub-orchestrator:TagResource",
        "migrationhub-orchestrator:UntagResource",
        "migrationhub-orchestrator:UpdateTemplate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/migrationhub-orchestrator:template"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/migrationhub-orchestrator:template"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "migrationhub-orchestrator:CreateWorkflowStep",
         "migrationhub-orchestrator:CreateWorkflowStepGroup",
         "migrationhub-orchestrator:DeleteWorkflow",
         "migrationhub-orchestrator:DeleteWorkflowStep",
         "migrationhub-orchestrator:DeleteWorkflowStepGroup",
         "migrationhub-orchestrator:GetWorkflow",
         "migrationhub-orchestrator:GetWorkflowStep",
         "migrationhub-orchestrator:GetWorkflowStepGroup",
         "migrationhub-orchestrator:ListTagsForResource",
         "migrationhub-orchestrator:ListWorkflowStepGroups",
         "migrationhub-orchestrator:ListWorkflowSteps",
         "migrationhub-orchestrator:RetryWorkflowStep",
         "migrationhub-orchestrator:StartWorkflow",
         "migrationhub-orchestrator:StopWorkflow",
         "migrationhub-orchestrator:TagResource",
         "migrationhub-orchestrator:UntagResource",
         "migrationhub-orchestrator:UpdateWorkflow",
         "migrationhub-orchestrator:UpdateWorkflowStep",
         "migrationhub-orchestrator:UpdateWorkflowStepGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "migrationhub-orchestrator:CreateWorkflowStep",
        "migrationhub-orchestrator:CreateWorkflowStepGroup",
        "migrationhub-orchestrator:DeleteWorkflow",
        "migrationhub-orchestrator:DeleteWorkflowStep",
        "migrationhub-orchestrator:DeleteWorkflowStepGroup",
        "migrationhub-orchestrator:GetWorkflow",
        "migrationhub-orchestrator:GetWorkflowStep",
        "migrationhub-orchestrator:GetWorkflowStepGroup",
        "migrationhub-orchestrator:ListTagsForResource",
        "migrationhub-orchestrator:ListWorkflowStepGroups",
        "migrationhub-orchestrator:ListWorkflowSteps",
        "migrationhub-orchestrator:RetryWorkflowStep",
        "migrationhub-orchestrator:StartWorkflow",
        "migrationhub-orchestrator:StopWorkflow",
        "migrationhub-orchestrator:TagResource",
        "migrationhub-orchestrator:UntagResource",
        "migrationhub-orchestrator:UpdateWorkflow",
        "migrationhub-orchestrator:UpdateWorkflowStep",
        "migrationhub-orchestrator:UpdateWorkflowStepGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/migrationhub-orchestrator:workflow"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/migrationhub-orchestrator:workflow"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:CreateApp",
         "mobiletargeting:GetApps"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:CreateApp",
        "mobiletargeting:GetApps"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:apps"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:apps"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:CreateCampaign",
         "mobiletargeting:CreateExportJob",
         "mobiletargeting:CreateImportJob",
         "mobiletargeting:CreateSegment",
         "mobiletargeting:DeleteApp",
         "mobiletargeting:GetApp",
         "mobiletargeting:GetApplicationSettings",
         "mobiletargeting:GetCampaigns",
         "mobiletargeting:GetExportJobs",
         "mobiletargeting:GetImportJobs",
         "mobiletargeting:GetInAppMessages",
         "mobiletargeting:GetSegments",
         "mobiletargeting:ListJourneys",
         "mobiletargeting:ListTagsForResource",
         "mobiletargeting:TagResource",
         "mobiletargeting:UntagResource",
         "mobiletargeting:UpdateApplicationSettings",
         "mobiletargeting:UpdateEndpointsBatch"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:CreateCampaign",
        "mobiletargeting:CreateExportJob",
        "mobiletargeting:CreateImportJob",
        "mobiletargeting:CreateSegment",
        "mobiletargeting:DeleteApp",
        "mobiletargeting:GetApp",
        "mobiletargeting:GetApplicationSettings",
        "mobiletargeting:GetCampaigns",
        "mobiletargeting:GetExportJobs",
        "mobiletargeting:GetImportJobs",
        "mobiletargeting:GetInAppMessages",
        "mobiletargeting:GetSegments",
        "mobiletargeting:ListJourneys",
        "mobiletargeting:ListTagsForResource",
        "mobiletargeting:TagResource",
        "mobiletargeting:UntagResource",
        "mobiletargeting:UpdateApplicationSettings",
        "mobiletargeting:UpdateEndpointsBatch"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:app"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:app"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:CreateEmailTemplate",
         "mobiletargeting:CreateInAppTemplate",
         "mobiletargeting:CreatePushTemplate",
         "mobiletargeting:CreateSmsTemplate",
         "mobiletargeting:CreateVoiceTemplate",
         "mobiletargeting:DeleteEmailTemplate",
         "mobiletargeting:DeleteInAppTemplate",
         "mobiletargeting:DeletePushTemplate",
         "mobiletargeting:DeleteSmsTemplate",
         "mobiletargeting:DeleteVoiceTemplate",
         "mobiletargeting:GetEmailTemplate",
         "mobiletargeting:GetInAppTemplate",
         "mobiletargeting:GetPushTemplate",
         "mobiletargeting:GetSmsTemplate",
         "mobiletargeting:GetVoiceTemplate",
         "mobiletargeting:ListTagsForResource",
         "mobiletargeting:ListTemplateVersions",
         "mobiletargeting:TagResource",
         "mobiletargeting:UntagResource",
         "mobiletargeting:UpdateEmailTemplate",
         "mobiletargeting:UpdateInAppTemplate",
         "mobiletargeting:UpdatePushTemplate",
         "mobiletargeting:UpdateSmsTemplate",
         "mobiletargeting:UpdateTemplateActiveVersion",
         "mobiletargeting:UpdateVoiceTemplate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:CreateEmailTemplate",
        "mobiletargeting:CreateInAppTemplate",
        "mobiletargeting:CreatePushTemplate",
        "mobiletargeting:CreateSmsTemplate",
        "mobiletargeting:CreateVoiceTemplate",
        "mobiletargeting:DeleteEmailTemplate",
        "mobiletargeting:DeleteInAppTemplate",
        "mobiletargeting:DeletePushTemplate",
        "mobiletargeting:DeleteSmsTemplate",
        "mobiletargeting:DeleteVoiceTemplate",
        "mobiletargeting:GetEmailTemplate",
        "mobiletargeting:GetInAppTemplate",
        "mobiletargeting:GetPushTemplate",
        "mobiletargeting:GetSmsTemplate",
        "mobiletargeting:GetVoiceTemplate",
        "mobiletargeting:ListTagsForResource",
        "mobiletargeting:ListTemplateVersions",
        "mobiletargeting:TagResource",
        "mobiletargeting:UntagResource",
        "mobiletargeting:UpdateEmailTemplate",
        "mobiletargeting:UpdateInAppTemplate",
        "mobiletargeting:UpdatePushTemplate",
        "mobiletargeting:UpdateSmsTemplate",
        "mobiletargeting:UpdateTemplateActiveVersion",
        "mobiletargeting:UpdateVoiceTemplate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:template"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:template"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:CreateJourney"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:CreateJourney"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:journeys"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:journeys"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:CreateRecommenderConfiguration",
         "mobiletargeting:GetRecommenderConfigurations"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:CreateRecommenderConfiguration",
        "mobiletargeting:GetRecommenderConfigurations"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:recommenders"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:recommenders"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:DeleteAdmChannel",
         "mobiletargeting:DeleteApnsChannel",
         "mobiletargeting:DeleteApnsSandboxChannel",
         "mobiletargeting:DeleteApnsVoipChannel",
         "mobiletargeting:DeleteApnsVoipSandboxChannel",
         "mobiletargeting:DeleteBaiduChannel",
         "mobiletargeting:DeleteEmailChannel",
         "mobiletargeting:DeleteGcmChannel",
         "mobiletargeting:DeleteSmsChannel",
         "mobiletargeting:DeleteVoiceChannel",
         "mobiletargeting:GetAdmChannel",
         "mobiletargeting:GetApnsChannel",
         "mobiletargeting:GetApnsSandboxChannel",
         "mobiletargeting:GetApnsVoipChannel",
         "mobiletargeting:GetApnsVoipSandboxChannel",
         "mobiletargeting:GetBaiduChannel",
         "mobiletargeting:GetEmailChannel",
         "mobiletargeting:GetGcmChannel",
         "mobiletargeting:GetSmsChannel",
         "mobiletargeting:GetVoiceChannel",
         "mobiletargeting:UpdateAdmChannel",
         "mobiletargeting:UpdateApnsChannel",
         "mobiletargeting:UpdateApnsSandboxChannel",
         "mobiletargeting:UpdateApnsVoipChannel",
         "mobiletargeting:UpdateApnsVoipSandboxChannel",
         "mobiletargeting:UpdateBaiduChannel",
         "mobiletargeting:UpdateEmailChannel",
         "mobiletargeting:UpdateGcmChannel",
         "mobiletargeting:UpdateSmsChannel",
         "mobiletargeting:UpdateVoiceChannel"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:DeleteAdmChannel",
        "mobiletargeting:DeleteApnsChannel",
        "mobiletargeting:DeleteApnsSandboxChannel",
        "mobiletargeting:DeleteApnsVoipChannel",
        "mobiletargeting:DeleteApnsVoipSandboxChannel",
        "mobiletargeting:DeleteBaiduChannel",
        "mobiletargeting:DeleteEmailChannel",
        "mobiletargeting:DeleteGcmChannel",
        "mobiletargeting:DeleteSmsChannel",
        "mobiletargeting:DeleteVoiceChannel",
        "mobiletargeting:GetAdmChannel",
        "mobiletargeting:GetApnsChannel",
        "mobiletargeting:GetApnsSandboxChannel",
        "mobiletargeting:GetApnsVoipChannel",
        "mobiletargeting:GetApnsVoipSandboxChannel",
        "mobiletargeting:GetBaiduChannel",
        "mobiletargeting:GetEmailChannel",
        "mobiletargeting:GetGcmChannel",
        "mobiletargeting:GetSmsChannel",
        "mobiletargeting:GetVoiceChannel",
        "mobiletargeting:UpdateAdmChannel",
        "mobiletargeting:UpdateApnsChannel",
        "mobiletargeting:UpdateApnsSandboxChannel",
        "mobiletargeting:UpdateApnsVoipChannel",
        "mobiletargeting:UpdateApnsVoipSandboxChannel",
        "mobiletargeting:UpdateBaiduChannel",
        "mobiletargeting:UpdateEmailChannel",
        "mobiletargeting:UpdateGcmChannel",
        "mobiletargeting:UpdateSmsChannel",
        "mobiletargeting:UpdateVoiceChannel"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:channel"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:channel"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:DeleteCampaign",
         "mobiletargeting:GetCampaign",
         "mobiletargeting:GetCampaignActivities",
         "mobiletargeting:GetCampaignVersion",
         "mobiletargeting:GetCampaignVersions",
         "mobiletargeting:ListTagsForResource",
         "mobiletargeting:TagResource",
         "mobiletargeting:UntagResource",
         "mobiletargeting:UpdateCampaign"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:DeleteCampaign",
        "mobiletargeting:GetCampaign",
        "mobiletargeting:GetCampaignActivities",
        "mobiletargeting:GetCampaignVersion",
        "mobiletargeting:GetCampaignVersions",
        "mobiletargeting:ListTagsForResource",
        "mobiletargeting:TagResource",
        "mobiletargeting:UntagResource",
        "mobiletargeting:UpdateCampaign"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:campaign"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:campaign"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:DeleteEndpoint",
         "mobiletargeting:GetEndpoint",
         "mobiletargeting:UpdateEndpoint"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:DeleteEndpoint",
        "mobiletargeting:GetEndpoint",
        "mobiletargeting:UpdateEndpoint"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:endpoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:endpoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:DeleteEventStream",
         "mobiletargeting:GetEventStream",
         "mobiletargeting:PutEventStream"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:DeleteEventStream",
        "mobiletargeting:GetEventStream",
        "mobiletargeting:PutEventStream"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:event-stream"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:event-stream"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:DeleteJourney",
         "mobiletargeting:GetJourney",
         "mobiletargeting:GetJourneyRunExecutionActivityMetrics",
         "mobiletargeting:GetJourneyRunExecutionMetrics",
         "mobiletargeting:GetJourneyRuns",
         "mobiletargeting:ListTagsForResource",
         "mobiletargeting:TagResource",
         "mobiletargeting:UntagResource",
         "mobiletargeting:UpdateJourney",
         "mobiletargeting:UpdateJourneyState"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:DeleteJourney",
        "mobiletargeting:GetJourney",
        "mobiletargeting:GetJourneyRunExecutionActivityMetrics",
        "mobiletargeting:GetJourneyRunExecutionMetrics",
        "mobiletargeting:GetJourneyRuns",
        "mobiletargeting:ListTagsForResource",
        "mobiletargeting:TagResource",
        "mobiletargeting:UntagResource",
        "mobiletargeting:UpdateJourney",
        "mobiletargeting:UpdateJourneyState"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:journey"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:journey"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:DeleteRecommenderConfiguration",
         "mobiletargeting:GetRecommenderConfiguration",
         "mobiletargeting:UpdateRecommenderConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:DeleteRecommenderConfiguration",
        "mobiletargeting:GetRecommenderConfiguration",
        "mobiletargeting:UpdateRecommenderConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:recommender"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:recommender"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:DeleteSegment",
         "mobiletargeting:GetSegment",
         "mobiletargeting:GetSegmentExportJobs",
         "mobiletargeting:GetSegmentImportJobs",
         "mobiletargeting:GetSegmentVersion",
         "mobiletargeting:GetSegmentVersions",
         "mobiletargeting:ListTagsForResource",
         "mobiletargeting:TagResource",
         "mobiletargeting:UntagResource",
         "mobiletargeting:UpdateSegment"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:DeleteSegment",
        "mobiletargeting:GetSegment",
        "mobiletargeting:GetSegmentExportJobs",
        "mobiletargeting:GetSegmentImportJobs",
        "mobiletargeting:GetSegmentVersion",
        "mobiletargeting:GetSegmentVersions",
        "mobiletargeting:ListTagsForResource",
        "mobiletargeting:TagResource",
        "mobiletargeting:UntagResource",
        "mobiletargeting:UpdateSegment"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:segment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:segment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:DeleteUserEndpoints",
         "mobiletargeting:GetUserEndpoints"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:DeleteUserEndpoints",
        "mobiletargeting:GetUserEndpoints"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:user"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:user"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:GetApplicationDateRangeKpi"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:GetApplicationDateRangeKpi"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:application-metrics"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:application-metrics"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:GetCampaignDateRangeKpi"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:GetCampaignDateRangeKpi"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:campaign-metrics"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:campaign-metrics"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:GetChannels"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:GetChannels"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:channels"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:channels"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:GetExportJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:GetExportJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:export-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:export-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:GetImportJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:GetImportJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:import-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:import-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:GetJourneyDateRangeKpi"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:GetJourneyDateRangeKpi"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:journey-metrics"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:journey-metrics"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:GetJourneyExecutionActivityMetrics"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:GetJourneyExecutionActivityMetrics"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:journey-execution-activity-metrics"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:journey-execution-activity-metrics"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:GetJourneyExecutionMetrics"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:GetJourneyExecutionMetrics"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:journey-execution-metrics"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:journey-execution-metrics"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:GetReports"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:GetReports"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:reports"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:reports"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:ListTemplates"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:ListTemplates"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:templates"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:templates"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:PhoneNumberValidate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:PhoneNumberValidate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:phone-number-validate"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:phone-number-validate"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:PutEvents"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:PutEvents"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:events"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:events"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:RemoveAttributes"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:RemoveAttributes"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:attribute"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:attribute"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:SendMessages",
         "mobiletargeting:SendUsersMessages"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:SendMessages",
        "mobiletargeting:SendUsersMessages"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:messages"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:messages"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:SendOTPMessage"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:SendOTPMessage"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:otp"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:otp"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mobiletargeting:VerifyOTPMessage"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mobiletargeting:VerifyOTPMessage"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mobiletargeting:verify-otp"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mobiletargeting:verify-otp"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "monitron:AssociateProjectAdminUser",
         "monitron:CreateProjectUserAssociation",
         "monitron:CreateUserAccessRoleAssociation",
         "monitron:DeleteProject",
         "monitron:DeleteProjectUserAssociation",
         "monitron:DeleteUserAccessRoleAssociation",
         "monitron:DisassociateProjectAdminUser",
         "monitron:GetProject",
         "monitron:GetProjectAdminUser",
         "monitron:ListProjectAdminUsers",
         "monitron:ListProjectUserAssociations",
         "monitron:ListTagsForResource",
         "monitron:ListUserAccessRoleAssociations",
         "monitron:TagResource",
         "monitron:UntagResource",
         "monitron:UpdateProject"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "monitron:AssociateProjectAdminUser",
        "monitron:CreateProjectUserAssociation",
        "monitron:CreateUserAccessRoleAssociation",
        "monitron:DeleteProject",
        "monitron:DeleteProjectUserAssociation",
        "monitron:DeleteUserAccessRoleAssociation",
        "monitron:DisassociateProjectAdminUser",
        "monitron:GetProject",
        "monitron:GetProjectAdminUser",
        "monitron:ListProjectAdminUsers",
        "monitron:ListProjectUserAssociations",
        "monitron:ListTagsForResource",
        "monitron:ListUserAccessRoleAssociations",
        "monitron:TagResource",
        "monitron:UntagResource",
        "monitron:UpdateProject"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/monitron:project"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/monitron:project"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mq:CreateReplicaBroker",
         "mq:CreateTags",
         "mq:CreateUser",
         "mq:DeleteBroker",
         "mq:DeleteTags",
         "mq:DeleteUser",
         "mq:DescribeBroker",
         "mq:DescribeUser",
         "mq:ListTags",
         "mq:ListUsers",
         "mq:Promote",
         "mq:RebootBroker",
         "mq:UpdateBroker",
         "mq:UpdateUser"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mq:CreateReplicaBroker",
        "mq:CreateTags",
        "mq:CreateUser",
        "mq:DeleteBroker",
        "mq:DeleteTags",
        "mq:DeleteUser",
        "mq:DescribeBroker",
        "mq:DescribeUser",
        "mq:ListTags",
        "mq:ListUsers",
        "mq:Promote",
        "mq:RebootBroker",
        "mq:UpdateBroker",
        "mq:UpdateUser"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mq:brokers"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mq:brokers"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "mq:CreateTags",
         "mq:DeleteTags",
         "mq:DescribeConfiguration",
         "mq:DescribeConfigurationRevision",
         "mq:ListConfigurationRevisions",
         "mq:ListTags",
         "mq:UpdateConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "mq:CreateTags",
        "mq:DeleteTags",
        "mq:DescribeConfiguration",
        "mq:DescribeConfigurationRevision",
        "mq:ListConfigurationRevisions",
        "mq:ListTags",
        "mq:UpdateConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/mq:configurations"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/mq:configurations"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "neptune-db:CancelLoaderJob",
         "neptune-db:CancelMLDataProcessingJob",
         "neptune-db:CancelMLModelTrainingJob",
         "neptune-db:CancelMLModelTransformJob",
         "neptune-db:CancelQuery",
         "neptune-db:CreateMLEndpoint",
         "neptune-db:DeleteDataViaQuery",
         "neptune-db:DeleteMLEndpoint",
         "neptune-db:DeleteStatistics",
         "neptune-db:GetEngineStatus",
         "neptune-db:GetGraphSummary",
         "neptune-db:GetLoaderJobStatus",
         "neptune-db:GetMLDataProcessingJobStatus",
         "neptune-db:GetMLEndpointStatus",
         "neptune-db:GetMLModelTrainingJobStatus",
         "neptune-db:GetMLModelTransformJobStatus",
         "neptune-db:GetQueryStatus",
         "neptune-db:GetStatisticsStatus",
         "neptune-db:GetStreamRecords",
         "neptune-db:ListLoaderJobs",
         "neptune-db:ListMLDataProcessingJobs",
         "neptune-db:ListMLEndpoints",
         "neptune-db:ListMLModelTrainingJobs",
         "neptune-db:ListMLModelTransformJobs",
         "neptune-db:ManageStatistics",
         "neptune-db:ReadDataViaQuery",
         "neptune-db:ResetDatabase",
         "neptune-db:StartLoaderJob",
         "neptune-db:StartMLDataProcessingJob",
         "neptune-db:StartMLModelTrainingJob",
         "neptune-db:StartMLModelTransformJob",
         "neptune-db:WriteDataViaQuery",
         "neptune-db:connect"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "neptune-db:CancelLoaderJob",
        "neptune-db:CancelMLDataProcessingJob",
        "neptune-db:CancelMLModelTrainingJob",
        "neptune-db:CancelMLModelTransformJob",
        "neptune-db:CancelQuery",
        "neptune-db:CreateMLEndpoint",
        "neptune-db:DeleteDataViaQuery",
        "neptune-db:DeleteMLEndpoint",
        "neptune-db:DeleteStatistics",
        "neptune-db:GetEngineStatus",
        "neptune-db:GetGraphSummary",
        "neptune-db:GetLoaderJobStatus",
        "neptune-db:GetMLDataProcessingJobStatus",
        "neptune-db:GetMLEndpointStatus",
        "neptune-db:GetMLModelTrainingJobStatus",
        "neptune-db:GetMLModelTransformJobStatus",
        "neptune-db:GetQueryStatus",
        "neptune-db:GetStatisticsStatus",
        "neptune-db:GetStreamRecords",
        "neptune-db:ListLoaderJobs",
        "neptune-db:ListMLDataProcessingJobs",
        "neptune-db:ListMLEndpoints",
        "neptune-db:ListMLModelTrainingJobs",
        "neptune-db:ListMLModelTransformJobs",
        "neptune-db:ManageStatistics",
        "neptune-db:ReadDataViaQuery",
        "neptune-db:ResetDatabase",
        "neptune-db:StartLoaderJob",
        "neptune-db:StartMLDataProcessingJob",
        "neptune-db:StartMLModelTrainingJob",
        "neptune-db:StartMLModelTransformJob",
        "neptune-db:WriteDataViaQuery",
        "neptune-db:connect"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/neptune-db:database"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/neptune-db:database"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "neptune-graph:CancelExportTask",
         "neptune-graph:GetExportTask",
         "neptune-graph:ListExportTasks",
         "neptune-graph:StartExportTask"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "neptune-graph:CancelExportTask",
        "neptune-graph:GetExportTask",
        "neptune-graph:ListExportTasks",
        "neptune-graph:StartExportTask"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/neptune-graph:export-task"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/neptune-graph:export-task"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "neptune-graph:CancelImportTask",
         "neptune-graph:CreateGraphUsingImportTask",
         "neptune-graph:GetImportTask",
         "neptune-graph:ListImportTasks",
         "neptune-graph:StartImportTask"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "neptune-graph:CancelImportTask",
        "neptune-graph:CreateGraphUsingImportTask",
        "neptune-graph:GetImportTask",
        "neptune-graph:ListImportTasks",
        "neptune-graph:StartImportTask"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/neptune-graph:import-task"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/neptune-graph:import-task"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "neptune-graph:CancelQuery",
         "neptune-graph:CreateGraph",
         "neptune-graph:CreateGraphSnapshot",
         "neptune-graph:CreateGraphUsingImportTask",
         "neptune-graph:CreatePrivateGraphEndpoint",
         "neptune-graph:DeleteDataViaQuery",
         "neptune-graph:DeleteGraph",
         "neptune-graph:DeletePrivateGraphEndpoint",
         "neptune-graph:GetEngineStatus",
         "neptune-graph:GetGraph",
         "neptune-graph:GetGraphSummary",
         "neptune-graph:GetPrivateGraphEndpoint",
         "neptune-graph:GetQueryStatus",
         "neptune-graph:GetStatisticsStatus",
         "neptune-graph:ListGraphs",
         "neptune-graph:ListPrivateGraphEndpoints",
         "neptune-graph:ListQueries",
         "neptune-graph:ListTagsForResource",
         "neptune-graph:ReadDataViaQuery",
         "neptune-graph:ResetGraph",
         "neptune-graph:RestoreGraphFromSnapshot",
         "neptune-graph:StartExportTask",
         "neptune-graph:StartImportTask",
         "neptune-graph:TagResource",
         "neptune-graph:UntagResource",
         "neptune-graph:UpdateGraph",
         "neptune-graph:WriteDataViaQuery"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "neptune-graph:CancelQuery",
        "neptune-graph:CreateGraph",
        "neptune-graph:CreateGraphSnapshot",
        "neptune-graph:CreateGraphUsingImportTask",
        "neptune-graph:CreatePrivateGraphEndpoint",
        "neptune-graph:DeleteDataViaQuery",
        "neptune-graph:DeleteGraph",
        "neptune-graph:DeletePrivateGraphEndpoint",
        "neptune-graph:GetEngineStatus",
        "neptune-graph:GetGraph",
        "neptune-graph:GetGraphSummary",
        "neptune-graph:GetPrivateGraphEndpoint",
        "neptune-graph:GetQueryStatus",
        "neptune-graph:GetStatisticsStatus",
        "neptune-graph:ListGraphs",
        "neptune-graph:ListPrivateGraphEndpoints",
        "neptune-graph:ListQueries",
        "neptune-graph:ListTagsForResource",
        "neptune-graph:ReadDataViaQuery",
        "neptune-graph:ResetGraph",
        "neptune-graph:RestoreGraphFromSnapshot",
        "neptune-graph:StartExportTask",
        "neptune-graph:StartImportTask",
        "neptune-graph:TagResource",
        "neptune-graph:UntagResource",
        "neptune-graph:UpdateGraph",
        "neptune-graph:WriteDataViaQuery"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/neptune-graph:graph"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/neptune-graph:graph"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "neptune-graph:CreateGraphSnapshot",
         "neptune-graph:DeleteGraphSnapshot",
         "neptune-graph:GetGraphSnapshot",
         "neptune-graph:ListGraphSnapshots",
         "neptune-graph:ListTagsForResource",
         "neptune-graph:RestoreGraphFromSnapshot",
         "neptune-graph:TagResource",
         "neptune-graph:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "neptune-graph:CreateGraphSnapshot",
        "neptune-graph:DeleteGraphSnapshot",
        "neptune-graph:GetGraphSnapshot",
        "neptune-graph:ListGraphSnapshots",
        "neptune-graph:ListTagsForResource",
        "neptune-graph:RestoreGraphFromSnapshot",
        "neptune-graph:TagResource",
        "neptune-graph:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/neptune-graph:graph-snapshot"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/neptune-graph:graph-snapshot"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "network-firewall:AssociateFirewallPolicy",
         "network-firewall:AssociateSubnets",
         "network-firewall:CreateFirewall",
         "network-firewall:DeleteFirewall",
         "network-firewall:DescribeFirewall",
         "network-firewall:DescribeLoggingConfiguration",
         "network-firewall:DisassociateSubnets",
         "network-firewall:GetAnalysisReportResults",
         "network-firewall:ListAnalysisReports",
         "network-firewall:ListFirewalls",
         "network-firewall:ListTagsForResource",
         "network-firewall:StartAnalysisReport",
         "network-firewall:TagResource",
         "network-firewall:UntagResource",
         "network-firewall:UpdateFirewallAnalysisSettings",
         "network-firewall:UpdateFirewallDeleteProtection",
         "network-firewall:UpdateFirewallDescription",
         "network-firewall:UpdateFirewallEncryptionConfiguration",
         "network-firewall:UpdateFirewallPolicyChangeProtection",
         "network-firewall:UpdateLoggingConfiguration",
         "network-firewall:UpdateSubnetChangeProtection"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "network-firewall:AssociateFirewallPolicy",
        "network-firewall:AssociateSubnets",
        "network-firewall:CreateFirewall",
        "network-firewall:DeleteFirewall",
        "network-firewall:DescribeFirewall",
        "network-firewall:DescribeLoggingConfiguration",
        "network-firewall:DisassociateSubnets",
        "network-firewall:GetAnalysisReportResults",
        "network-firewall:ListAnalysisReports",
        "network-firewall:ListFirewalls",
        "network-firewall:ListTagsForResource",
        "network-firewall:StartAnalysisReport",
        "network-firewall:TagResource",
        "network-firewall:UntagResource",
        "network-firewall:UpdateFirewallAnalysisSettings",
        "network-firewall:UpdateFirewallDeleteProtection",
        "network-firewall:UpdateFirewallDescription",
        "network-firewall:UpdateFirewallEncryptionConfiguration",
        "network-firewall:UpdateFirewallPolicyChangeProtection",
        "network-firewall:UpdateLoggingConfiguration",
        "network-firewall:UpdateSubnetChangeProtection"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/network-firewall:Firewall"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/network-firewall:Firewall"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "network-firewall:AssociateFirewallPolicy",
         "network-firewall:CreateFirewall",
         "network-firewall:CreateFirewallPolicy",
         "network-firewall:DeleteFirewallPolicy",
         "network-firewall:DeleteResourcePolicy",
         "network-firewall:DescribeFirewallPolicy",
         "network-firewall:DescribeResourcePolicy",
         "network-firewall:ListFirewallPolicies",
         "network-firewall:ListTagsForResource",
         "network-firewall:PutResourcePolicy",
         "network-firewall:TagResource",
         "network-firewall:UntagResource",
         "network-firewall:UpdateFirewallPolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "network-firewall:AssociateFirewallPolicy",
        "network-firewall:CreateFirewall",
        "network-firewall:CreateFirewallPolicy",
        "network-firewall:DeleteFirewallPolicy",
        "network-firewall:DeleteResourcePolicy",
        "network-firewall:DescribeFirewallPolicy",
        "network-firewall:DescribeResourcePolicy",
        "network-firewall:ListFirewallPolicies",
        "network-firewall:ListTagsForResource",
        "network-firewall:PutResourcePolicy",
        "network-firewall:TagResource",
        "network-firewall:UntagResource",
        "network-firewall:UpdateFirewallPolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/network-firewall:FirewallPolicy"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/network-firewall:FirewallPolicy"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "network-firewall:CreateFirewallPolicy",
         "network-firewall:CreateRuleGroup",
         "network-firewall:DeleteResourcePolicy",
         "network-firewall:DeleteRuleGroup",
         "network-firewall:DescribeFirewallPolicy",
         "network-firewall:DescribeResourcePolicy",
         "network-firewall:DescribeRuleGroup",
         "network-firewall:DescribeRuleGroupMetadata",
         "network-firewall:ListTagsForResource",
         "network-firewall:PutResourcePolicy",
         "network-firewall:TagResource",
         "network-firewall:UntagResource",
         "network-firewall:UpdateFirewallPolicy",
         "network-firewall:UpdateRuleGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "network-firewall:CreateFirewallPolicy",
        "network-firewall:CreateRuleGroup",
        "network-firewall:DeleteResourcePolicy",
        "network-firewall:DeleteRuleGroup",
        "network-firewall:DescribeFirewallPolicy",
        "network-firewall:DescribeResourcePolicy",
        "network-firewall:DescribeRuleGroup",
        "network-firewall:DescribeRuleGroupMetadata",
        "network-firewall:ListTagsForResource",
        "network-firewall:PutResourcePolicy",
        "network-firewall:TagResource",
        "network-firewall:UntagResource",
        "network-firewall:UpdateFirewallPolicy",
        "network-firewall:UpdateRuleGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/network-firewall:StatefulRuleGroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/network-firewall:StatefulRuleGroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "network-firewall:CreateFirewallPolicy",
         "network-firewall:CreateRuleGroup",
         "network-firewall:DeleteResourcePolicy",
         "network-firewall:DeleteRuleGroup",
         "network-firewall:DescribeFirewallPolicy",
         "network-firewall:DescribeResourcePolicy",
         "network-firewall:DescribeRuleGroup",
         "network-firewall:DescribeRuleGroupMetadata",
         "network-firewall:ListTagsForResource",
         "network-firewall:PutResourcePolicy",
         "network-firewall:TagResource",
         "network-firewall:UntagResource",
         "network-firewall:UpdateFirewallPolicy",
         "network-firewall:UpdateRuleGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "network-firewall:CreateFirewallPolicy",
        "network-firewall:CreateRuleGroup",
        "network-firewall:DeleteResourcePolicy",
        "network-firewall:DeleteRuleGroup",
        "network-firewall:DescribeFirewallPolicy",
        "network-firewall:DescribeResourcePolicy",
        "network-firewall:DescribeRuleGroup",
        "network-firewall:DescribeRuleGroupMetadata",
        "network-firewall:ListTagsForResource",
        "network-firewall:PutResourcePolicy",
        "network-firewall:TagResource",
        "network-firewall:UntagResource",
        "network-firewall:UpdateFirewallPolicy",
        "network-firewall:UpdateRuleGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/network-firewall:StatelessRuleGroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/network-firewall:StatelessRuleGroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "network-firewall:CreateFirewallPolicy",
         "network-firewall:CreateTLSInspectionConfiguration",
         "network-firewall:DeleteTLSInspectionConfiguration",
         "network-firewall:DescribeFirewallPolicy",
         "network-firewall:DescribeTLSInspectionConfiguration",
         "network-firewall:ListTLSInspectionConfigurations",
         "network-firewall:ListTagsForResource",
         "network-firewall:TagResource",
         "network-firewall:UntagResource",
         "network-firewall:UpdateFirewallPolicy",
         "network-firewall:UpdateTLSInspectionConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "network-firewall:CreateFirewallPolicy",
        "network-firewall:CreateTLSInspectionConfiguration",
        "network-firewall:DeleteTLSInspectionConfiguration",
        "network-firewall:DescribeFirewallPolicy",
        "network-firewall:DescribeTLSInspectionConfiguration",
        "network-firewall:ListTLSInspectionConfigurations",
        "network-firewall:ListTagsForResource",
        "network-firewall:TagResource",
        "network-firewall:UntagResource",
        "network-firewall:UpdateFirewallPolicy",
        "network-firewall:UpdateTLSInspectionConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/network-firewall:TLSInspectionConfiguration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/network-firewall:TLSInspectionConfiguration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "networkflowmonitor:CreateMonitor",
         "networkflowmonitor:DeleteMonitor",
         "networkflowmonitor:GetMonitor",
         "networkflowmonitor:GetQueryResultsMonitorTopContributors",
         "networkflowmonitor:GetQueryStatusMonitorTopContributors",
         "networkflowmonitor:ListTagsForResource",
         "networkflowmonitor:StartQueryMonitorTopContributors",
         "networkflowmonitor:StopQueryMonitorTopContributors",
         "networkflowmonitor:TagResource",
         "networkflowmonitor:UntagResource",
         "networkflowmonitor:UpdateMonitor"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "networkflowmonitor:CreateMonitor",
        "networkflowmonitor:DeleteMonitor",
        "networkflowmonitor:GetMonitor",
        "networkflowmonitor:GetQueryResultsMonitorTopContributors",
        "networkflowmonitor:GetQueryStatusMonitorTopContributors",
        "networkflowmonitor:ListTagsForResource",
        "networkflowmonitor:StartQueryMonitorTopContributors",
        "networkflowmonitor:StopQueryMonitorTopContributors",
        "networkflowmonitor:TagResource",
        "networkflowmonitor:UntagResource",
        "networkflowmonitor:UpdateMonitor"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/networkflowmonitor:monitor"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/networkflowmonitor:monitor"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "networkflowmonitor:DeleteScope",
         "networkflowmonitor:GetQueryResultsWorkloadInsightsTopContributors",
         "networkflowmonitor:GetQueryResultsWorkloadInsightsTopContributorsData",
         "networkflowmonitor:GetQueryStatusWorkloadInsightsTopContributors",
         "networkflowmonitor:GetQueryStatusWorkloadInsightsTopContributorsData",
         "networkflowmonitor:GetScope",
         "networkflowmonitor:ListTagsForResource",
         "networkflowmonitor:StartQueryWorkloadInsightsTopContributors",
         "networkflowmonitor:StartQueryWorkloadInsightsTopContributorsData",
         "networkflowmonitor:StopQueryWorkloadInsightsTopContributors",
         "networkflowmonitor:StopQueryWorkloadInsightsTopContributorsData",
         "networkflowmonitor:TagResource",
         "networkflowmonitor:UntagResource",
         "networkflowmonitor:UpdateScope"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "networkflowmonitor:DeleteScope",
        "networkflowmonitor:GetQueryResultsWorkloadInsightsTopContributors",
        "networkflowmonitor:GetQueryResultsWorkloadInsightsTopContributorsData",
        "networkflowmonitor:GetQueryStatusWorkloadInsightsTopContributors",
        "networkflowmonitor:GetQueryStatusWorkloadInsightsTopContributorsData",
        "networkflowmonitor:GetScope",
        "networkflowmonitor:ListTagsForResource",
        "networkflowmonitor:StartQueryWorkloadInsightsTopContributors",
        "networkflowmonitor:StartQueryWorkloadInsightsTopContributorsData",
        "networkflowmonitor:StopQueryWorkloadInsightsTopContributors",
        "networkflowmonitor:StopQueryWorkloadInsightsTopContributorsData",
        "networkflowmonitor:TagResource",
        "networkflowmonitor:UntagResource",
        "networkflowmonitor:UpdateScope"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/networkflowmonitor:scope"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/networkflowmonitor:scope"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "networkmanager:AcceptAttachment",
         "networkmanager:CreateConnectAttachment",
         "networkmanager:CreateConnectPeer",
         "networkmanager:DeleteAttachment",
         "networkmanager:GetConnectAttachment",
         "networkmanager:GetDirectConnectGatewayAttachment",
         "networkmanager:GetSiteToSiteVpnAttachment",
         "networkmanager:GetTransitGatewayRouteTableAttachment",
         "networkmanager:GetVpcAttachment",
         "networkmanager:ListAttachments",
         "networkmanager:ListTagsForResource",
         "networkmanager:RejectAttachment",
         "networkmanager:TagResource",
         "networkmanager:UntagResource",
         "networkmanager:UpdateDirectConnectGatewayAttachment",
         "networkmanager:UpdateVpcAttachment"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "networkmanager:AcceptAttachment",
        "networkmanager:CreateConnectAttachment",
        "networkmanager:CreateConnectPeer",
        "networkmanager:DeleteAttachment",
        "networkmanager:GetConnectAttachment",
        "networkmanager:GetDirectConnectGatewayAttachment",
        "networkmanager:GetSiteToSiteVpnAttachment",
        "networkmanager:GetTransitGatewayRouteTableAttachment",
        "networkmanager:GetVpcAttachment",
        "networkmanager:ListAttachments",
        "networkmanager:ListTagsForResource",
        "networkmanager:RejectAttachment",
        "networkmanager:TagResource",
        "networkmanager:UntagResource",
        "networkmanager:UpdateDirectConnectGatewayAttachment",
        "networkmanager:UpdateVpcAttachment"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/networkmanager:attachment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/networkmanager:attachment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "networkmanager:AssociateConnectPeer",
         "networkmanager:AssociateCustomerGateway",
         "networkmanager:AssociateLink",
         "networkmanager:AssociateTransitGatewayConnectPeer",
         "networkmanager:DeleteDevice",
         "networkmanager:DisassociateLink",
         "networkmanager:GetDevices",
         "networkmanager:GetLinkAssociations",
         "networkmanager:ListTagsForResource",
         "networkmanager:TagResource",
         "networkmanager:UntagResource",
         "networkmanager:UpdateDevice"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "networkmanager:AssociateConnectPeer",
        "networkmanager:AssociateCustomerGateway",
        "networkmanager:AssociateLink",
        "networkmanager:AssociateTransitGatewayConnectPeer",
        "networkmanager:DeleteDevice",
        "networkmanager:DisassociateLink",
        "networkmanager:GetDevices",
        "networkmanager:GetLinkAssociations",
        "networkmanager:ListTagsForResource",
        "networkmanager:TagResource",
        "networkmanager:UntagResource",
        "networkmanager:UpdateDevice"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/networkmanager:device"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/networkmanager:device"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "networkmanager:AssociateConnectPeer",
         "networkmanager:AssociateCustomerGateway",
         "networkmanager:AssociateLink",
         "networkmanager:AssociateTransitGatewayConnectPeer",
         "networkmanager:CreateConnection",
         "networkmanager:CreateCoreNetwork",
         "networkmanager:CreateDevice",
         "networkmanager:CreateLink",
         "networkmanager:CreateSite",
         "networkmanager:DeleteConnection",
         "networkmanager:DeleteDevice",
         "networkmanager:DeleteGlobalNetwork",
         "networkmanager:DeleteLink",
         "networkmanager:DeleteSite",
         "networkmanager:DeregisterTransitGateway",
         "networkmanager:DescribeGlobalNetworks",
         "networkmanager:DisassociateConnectPeer",
         "networkmanager:DisassociateCustomerGateway",
         "networkmanager:DisassociateLink",
         "networkmanager:DisassociateTransitGatewayConnectPeer",
         "networkmanager:GetConnectPeerAssociations",
         "networkmanager:GetConnections",
         "networkmanager:GetCustomerGatewayAssociations",
         "networkmanager:GetDevices",
         "networkmanager:GetLinkAssociations",
         "networkmanager:GetLinks",
         "networkmanager:GetNetworkResourceCounts",
         "networkmanager:GetNetworkResourceRelationships",
         "networkmanager:GetNetworkResources",
         "networkmanager:GetNetworkRoutes",
         "networkmanager:GetNetworkTelemetry",
         "networkmanager:GetRouteAnalysis",
         "networkmanager:GetSites",
         "networkmanager:GetTransitGatewayConnectPeerAssociations",
         "networkmanager:GetTransitGatewayRegistrations",
         "networkmanager:ListTagsForResource",
         "networkmanager:RegisterTransitGateway",
         "networkmanager:StartRouteAnalysis",
         "networkmanager:TagResource",
         "networkmanager:UntagResource",
         "networkmanager:UpdateConnection",
         "networkmanager:UpdateDevice",
         "networkmanager:UpdateGlobalNetwork",
         "networkmanager:UpdateLink",
         "networkmanager:UpdateNetworkResourceMetadata",
         "networkmanager:UpdateSite"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "networkmanager:AssociateConnectPeer",
        "networkmanager:AssociateCustomerGateway",
        "networkmanager:AssociateLink",
        "networkmanager:AssociateTransitGatewayConnectPeer",
        "networkmanager:CreateConnection",
        "networkmanager:CreateCoreNetwork",
        "networkmanager:CreateDevice",
        "networkmanager:CreateLink",
        "networkmanager:CreateSite",
        "networkmanager:DeleteConnection",
        "networkmanager:DeleteDevice",
        "networkmanager:DeleteGlobalNetwork",
        "networkmanager:DeleteLink",
        "networkmanager:DeleteSite",
        "networkmanager:DeregisterTransitGateway",
        "networkmanager:DescribeGlobalNetworks",
        "networkmanager:DisassociateConnectPeer",
        "networkmanager:DisassociateCustomerGateway",
        "networkmanager:DisassociateLink",
        "networkmanager:DisassociateTransitGatewayConnectPeer",
        "networkmanager:GetConnectPeerAssociations",
        "networkmanager:GetConnections",
        "networkmanager:GetCustomerGatewayAssociations",
        "networkmanager:GetDevices",
        "networkmanager:GetLinkAssociations",
        "networkmanager:GetLinks",
        "networkmanager:GetNetworkResourceCounts",
        "networkmanager:GetNetworkResourceRelationships",
        "networkmanager:GetNetworkResources",
        "networkmanager:GetNetworkRoutes",
        "networkmanager:GetNetworkTelemetry",
        "networkmanager:GetRouteAnalysis",
        "networkmanager:GetSites",
        "networkmanager:GetTransitGatewayConnectPeerAssociations",
        "networkmanager:GetTransitGatewayRegistrations",
        "networkmanager:ListTagsForResource",
        "networkmanager:RegisterTransitGateway",
        "networkmanager:StartRouteAnalysis",
        "networkmanager:TagResource",
        "networkmanager:UntagResource",
        "networkmanager:UpdateConnection",
        "networkmanager:UpdateDevice",
        "networkmanager:UpdateGlobalNetwork",
        "networkmanager:UpdateLink",
        "networkmanager:UpdateNetworkResourceMetadata",
        "networkmanager:UpdateSite"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/networkmanager:global-network"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/networkmanager:global-network"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "networkmanager:AssociateCustomerGateway",
         "networkmanager:AssociateLink",
         "networkmanager:AssociateTransitGatewayConnectPeer",
         "networkmanager:DeleteLink",
         "networkmanager:DisassociateLink",
         "networkmanager:GetLinkAssociations",
         "networkmanager:GetLinks",
         "networkmanager:ListTagsForResource",
         "networkmanager:TagResource",
         "networkmanager:UntagResource",
         "networkmanager:UpdateLink"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "networkmanager:AssociateCustomerGateway",
        "networkmanager:AssociateLink",
        "networkmanager:AssociateTransitGatewayConnectPeer",
        "networkmanager:DeleteLink",
        "networkmanager:DisassociateLink",
        "networkmanager:GetLinkAssociations",
        "networkmanager:GetLinks",
        "networkmanager:ListTagsForResource",
        "networkmanager:TagResource",
        "networkmanager:UntagResource",
        "networkmanager:UpdateLink"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/networkmanager:link"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/networkmanager:link"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "networkmanager:CreateConnectAttachment",
         "networkmanager:CreateDirectConnectGatewayAttachment",
         "networkmanager:CreateSiteToSiteVpnAttachment",
         "networkmanager:CreateTransitGatewayPeering",
         "networkmanager:CreateVpcAttachment",
         "networkmanager:DeleteCoreNetwork",
         "networkmanager:DeleteCoreNetworkPolicyVersion",
         "networkmanager:DeleteResourcePolicy",
         "networkmanager:ExecuteCoreNetworkChangeSet",
         "networkmanager:GetCoreNetwork",
         "networkmanager:GetCoreNetworkChangeEvents",
         "networkmanager:GetCoreNetworkChangeSet",
         "networkmanager:GetCoreNetworkPolicy",
         "networkmanager:GetResourcePolicy",
         "networkmanager:ListCoreNetworkPolicyVersions",
         "networkmanager:ListTagsForResource",
         "networkmanager:PutCoreNetworkPolicy",
         "networkmanager:PutResourcePolicy",
         "networkmanager:RestoreCoreNetworkPolicyVersion",
         "networkmanager:TagResource",
         "networkmanager:UntagResource",
         "networkmanager:UpdateCoreNetwork"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "networkmanager:CreateConnectAttachment",
        "networkmanager:CreateDirectConnectGatewayAttachment",
        "networkmanager:CreateSiteToSiteVpnAttachment",
        "networkmanager:CreateTransitGatewayPeering",
        "networkmanager:CreateVpcAttachment",
        "networkmanager:DeleteCoreNetwork",
        "networkmanager:DeleteCoreNetworkPolicyVersion",
        "networkmanager:DeleteResourcePolicy",
        "networkmanager:ExecuteCoreNetworkChangeSet",
        "networkmanager:GetCoreNetwork",
        "networkmanager:GetCoreNetworkChangeEvents",
        "networkmanager:GetCoreNetworkChangeSet",
        "networkmanager:GetCoreNetworkPolicy",
        "networkmanager:GetResourcePolicy",
        "networkmanager:ListCoreNetworkPolicyVersions",
        "networkmanager:ListTagsForResource",
        "networkmanager:PutCoreNetworkPolicy",
        "networkmanager:PutResourcePolicy",
        "networkmanager:RestoreCoreNetworkPolicyVersion",
        "networkmanager:TagResource",
        "networkmanager:UntagResource",
        "networkmanager:UpdateCoreNetwork"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/networkmanager:core-network"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/networkmanager:core-network"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "networkmanager:CreateLink",
         "networkmanager:DeleteSite",
         "networkmanager:GetSites",
         "networkmanager:ListTagsForResource",
         "networkmanager:TagResource",
         "networkmanager:UntagResource",
         "networkmanager:UpdateSite"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "networkmanager:CreateLink",
        "networkmanager:DeleteSite",
        "networkmanager:GetSites",
        "networkmanager:ListTagsForResource",
        "networkmanager:TagResource",
        "networkmanager:UntagResource",
        "networkmanager:UpdateSite"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/networkmanager:site"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/networkmanager:site"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "networkmanager:CreateTransitGatewayRouteTableAttachment",
         "networkmanager:DeletePeering",
         "networkmanager:GetTransitGatewayPeering",
         "networkmanager:ListTagsForResource",
         "networkmanager:TagResource",
         "networkmanager:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "networkmanager:CreateTransitGatewayRouteTableAttachment",
        "networkmanager:DeletePeering",
        "networkmanager:GetTransitGatewayPeering",
        "networkmanager:ListTagsForResource",
        "networkmanager:TagResource",
        "networkmanager:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/networkmanager:peering"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/networkmanager:peering"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "networkmanager:DeleteConnectPeer",
         "networkmanager:GetConnectPeer",
         "networkmanager:ListConnectPeers",
         "networkmanager:ListTagsForResource",
         "networkmanager:TagResource",
         "networkmanager:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "networkmanager:DeleteConnectPeer",
        "networkmanager:GetConnectPeer",
        "networkmanager:ListConnectPeers",
        "networkmanager:ListTagsForResource",
        "networkmanager:TagResource",
        "networkmanager:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/networkmanager:connect-peer"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/networkmanager:connect-peer"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "networkmanager:DeleteConnection",
         "networkmanager:GetConnections",
         "networkmanager:ListTagsForResource",
         "networkmanager:TagResource",
         "networkmanager:UntagResource",
         "networkmanager:UpdateConnection"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "networkmanager:DeleteConnection",
        "networkmanager:GetConnections",
        "networkmanager:ListTagsForResource",
        "networkmanager:TagResource",
        "networkmanager:UntagResource",
        "networkmanager:UpdateConnection"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/networkmanager:connection"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/networkmanager:connection"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "networkmonitor:CreateMonitor",
         "networkmonitor:DeleteMonitor",
         "networkmonitor:GetMonitor",
         "networkmonitor:ListTagsForResource",
         "networkmonitor:TagResource",
         "networkmonitor:UntagResource",
         "networkmonitor:UpdateMonitor"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "networkmonitor:CreateMonitor",
        "networkmonitor:DeleteMonitor",
        "networkmonitor:GetMonitor",
        "networkmonitor:ListTagsForResource",
        "networkmonitor:TagResource",
        "networkmonitor:UntagResource",
        "networkmonitor:UpdateMonitor"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/networkmonitor:monitor"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/networkmonitor:monitor"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "networkmonitor:DeleteProbe",
         "networkmonitor:GetProbe",
         "networkmonitor:ListTagsForResource",
         "networkmonitor:TagResource",
         "networkmonitor:UntagResource",
         "networkmonitor:UpdateProbe"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "networkmonitor:DeleteProbe",
        "networkmonitor:GetProbe",
        "networkmonitor:ListTagsForResource",
        "networkmonitor:TagResource",
        "networkmonitor:UntagResource",
        "networkmonitor:UpdateProbe"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/networkmonitor:probe"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/networkmonitor:probe"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "nimble:AcceptEulas",
         "nimble:GetEula",
         "nimble:ListEulas"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "nimble:AcceptEulas",
        "nimble:GetEula",
        "nimble:ListEulas"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/nimble:eula"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/nimble:eula"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "nimble:CreateLaunchProfile",
         "nimble:CreateStreamingImage",
         "nimble:CreateStudio",
         "nimble:CreateStudioComponent",
         "nimble:DeleteStudio",
         "nimble:DeleteStudioMember",
         "nimble:GetStudio",
         "nimble:GetStudioMember",
         "nimble:ListLaunchProfiles",
         "nimble:ListStreamingImages",
         "nimble:ListStreamingSessionBackups",
         "nimble:ListStreamingSessions",
         "nimble:ListStudioComponents",
         "nimble:ListStudioMembers",
         "nimble:ListTagsForResource",
         "nimble:PutStudioLogEvents",
         "nimble:PutStudioMembers",
         "nimble:StartStudioSSOConfigurationRepair",
         "nimble:TagResource",
         "nimble:UntagResource",
         "nimble:UpdateStudio"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "nimble:CreateLaunchProfile",
        "nimble:CreateStreamingImage",
        "nimble:CreateStudio",
        "nimble:CreateStudioComponent",
        "nimble:DeleteStudio",
        "nimble:DeleteStudioMember",
        "nimble:GetStudio",
        "nimble:GetStudioMember",
        "nimble:ListLaunchProfiles",
        "nimble:ListStreamingImages",
        "nimble:ListStreamingSessionBackups",
        "nimble:ListStreamingSessions",
        "nimble:ListStudioComponents",
        "nimble:ListStudioMembers",
        "nimble:ListTagsForResource",
        "nimble:PutStudioLogEvents",
        "nimble:PutStudioMembers",
        "nimble:StartStudioSSOConfigurationRepair",
        "nimble:TagResource",
        "nimble:UntagResource",
        "nimble:UpdateStudio"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/nimble:studio"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/nimble:studio"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "nimble:CreateStreamingSession",
         "nimble:DeleteLaunchProfile",
         "nimble:DeleteLaunchProfileMember",
         "nimble:GetLaunchProfile",
         "nimble:GetLaunchProfileDetails",
         "nimble:GetLaunchProfileInitialization",
         "nimble:GetLaunchProfileMember",
         "nimble:ListLaunchProfileMembers",
         "nimble:ListTagsForResource",
         "nimble:PutLaunchProfileMembers",
         "nimble:TagResource",
         "nimble:UntagResource",
         "nimble:UpdateLaunchProfile",
         "nimble:UpdateLaunchProfileMember"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "nimble:CreateStreamingSession",
        "nimble:DeleteLaunchProfile",
        "nimble:DeleteLaunchProfileMember",
        "nimble:GetLaunchProfile",
        "nimble:GetLaunchProfileDetails",
        "nimble:GetLaunchProfileInitialization",
        "nimble:GetLaunchProfileMember",
        "nimble:ListLaunchProfileMembers",
        "nimble:ListTagsForResource",
        "nimble:PutLaunchProfileMembers",
        "nimble:TagResource",
        "nimble:UntagResource",
        "nimble:UpdateLaunchProfile",
        "nimble:UpdateLaunchProfileMember"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/nimble:launch-profile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/nimble:launch-profile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "nimble:CreateStreamingSessionStream",
         "nimble:DeleteStreamingSession",
         "nimble:GetStreamingSession",
         "nimble:GetStreamingSessionStream",
         "nimble:ListTagsForResource",
         "nimble:StartStreamingSession",
         "nimble:StopStreamingSession",
         "nimble:TagResource",
         "nimble:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "nimble:CreateStreamingSessionStream",
        "nimble:DeleteStreamingSession",
        "nimble:GetStreamingSession",
        "nimble:GetStreamingSessionStream",
        "nimble:ListTagsForResource",
        "nimble:StartStreamingSession",
        "nimble:StopStreamingSession",
        "nimble:TagResource",
        "nimble:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/nimble:streaming-session"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/nimble:streaming-session"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "nimble:DeleteStreamingImage",
         "nimble:GetStreamingImage",
         "nimble:ListTagsForResource",
         "nimble:TagResource",
         "nimble:UntagResource",
         "nimble:UpdateStreamingImage"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "nimble:DeleteStreamingImage",
        "nimble:GetStreamingImage",
        "nimble:ListTagsForResource",
        "nimble:TagResource",
        "nimble:UntagResource",
        "nimble:UpdateStreamingImage"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/nimble:streaming-image"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/nimble:streaming-image"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "nimble:DeleteStudioComponent",
         "nimble:GetStudioComponent",
         "nimble:ListTagsForResource",
         "nimble:TagResource",
         "nimble:UntagResource",
         "nimble:UpdateStudioComponent"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "nimble:DeleteStudioComponent",
        "nimble:GetStudioComponent",
        "nimble:ListTagsForResource",
        "nimble:TagResource",
        "nimble:UntagResource",
        "nimble:UpdateStudioComponent"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/nimble:studio-component"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/nimble:studio-component"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "nimble:GetStreamingSessionBackup",
         "nimble:ListTagsForResource",
         "nimble:StartStreamingSession",
         "nimble:TagResource",
         "nimble:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "nimble:GetStreamingSessionBackup",
        "nimble:ListTagsForResource",
        "nimble:StartStreamingSession",
        "nimble:TagResource",
        "nimble:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/nimble:streaming-session-backup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/nimble:streaming-session-backup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "nimble:ListEulaAcceptances"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "nimble:ListEulaAcceptances"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/nimble:eula-acceptance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/nimble:eula-acceptance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "notifications:AssociateChannel",
         "notifications:DeleteNotificationConfiguration",
         "notifications:DisassociateChannel",
         "notifications:GetNotificationConfiguration",
         "notifications:ListChannels",
         "notifications:TagResource",
         "notifications:UntagResource",
         "notifications:UpdateNotificationConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "notifications:AssociateChannel",
        "notifications:DeleteNotificationConfiguration",
        "notifications:DisassociateChannel",
        "notifications:GetNotificationConfiguration",
        "notifications:ListChannels",
        "notifications:TagResource",
        "notifications:UntagResource",
        "notifications:UpdateNotificationConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/notifications:NotificationConfiguration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/notifications:NotificationConfiguration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "notifications:AssociateManagedNotificationAccountContact",
         "notifications:AssociateManagedNotificationAdditionalChannel",
         "notifications:DisassociateManagedNotificationAccountContact",
         "notifications:DisassociateManagedNotificationAdditionalChannel",
         "notifications:GetManagedNotificationConfiguration",
         "notifications:ListManagedNotificationChannelAssociations"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "notifications:AssociateManagedNotificationAccountContact",
        "notifications:AssociateManagedNotificationAdditionalChannel",
        "notifications:DisassociateManagedNotificationAccountContact",
        "notifications:DisassociateManagedNotificationAdditionalChannel",
        "notifications:GetManagedNotificationConfiguration",
        "notifications:ListManagedNotificationChannelAssociations"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/notifications:ManagedNotificationConfiguration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/notifications:ManagedNotificationConfiguration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "notifications:DeleteEventRule",
         "notifications:GetEventRule",
         "notifications:UpdateEventRule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "notifications:DeleteEventRule",
        "notifications:GetEventRule",
        "notifications:UpdateEventRule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/notifications:EventRule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/notifications:EventRule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "notifications:GetManagedNotificationChildEvent"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "notifications:GetManagedNotificationChildEvent"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/notifications:ManagedNotificationChildEvent"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/notifications:ManagedNotificationChildEvent"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "notifications:GetManagedNotificationEvent"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "notifications:GetManagedNotificationEvent"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/notifications:ManagedNotificationEvent"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/notifications:ManagedNotificationEvent"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "notifications:GetNotificationEvent"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "notifications:GetNotificationEvent"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/notifications:NotificationEvent"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/notifications:NotificationEvent"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "notifications-contacts:ActivateEmailContact",
         "notifications-contacts:DeleteEmailContact",
         "notifications-contacts:GetEmailContact",
         "notifications-contacts:SendActivationCode",
         "notifications-contacts:TagResource",
         "notifications-contacts:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "notifications-contacts:ActivateEmailContact",
        "notifications-contacts:DeleteEmailContact",
        "notifications-contacts:GetEmailContact",
        "notifications-contacts:SendActivationCode",
        "notifications-contacts:TagResource",
        "notifications-contacts:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/notifications-contacts:EmailContactResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/notifications-contacts:EmailContactResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "oam:CreateLink",
         "oam:DeleteSink",
         "oam:GetSink",
         "oam:GetSinkPolicy",
         "oam:ListAttachedLinks",
         "oam:ListTagsForResource",
         "oam:PutSinkPolicy",
         "oam:TagResource",
         "oam:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "oam:CreateLink",
        "oam:DeleteSink",
        "oam:GetSink",
        "oam:GetSinkPolicy",
        "oam:ListAttachedLinks",
        "oam:ListTagsForResource",
        "oam:PutSinkPolicy",
        "oam:TagResource",
        "oam:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/oam:Sink"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/oam:Sink"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "oam:DeleteLink",
         "oam:GetLink",
         "oam:ListTagsForResource",
         "oam:TagResource",
         "oam:UntagResource",
         "oam:UpdateLink"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "oam:DeleteLink",
        "oam:GetLink",
        "oam:ListTagsForResource",
        "oam:TagResource",
        "oam:UntagResource",
        "oam:UpdateLink"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/oam:Link"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/oam:Link"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "omics:AbortMultipartReadSetUpload",
         "omics:BatchDeleteReadSet",
         "omics:CompleteMultipartReadSetUpload",
         "omics:CreateMultipartReadSetUpload",
         "omics:DeleteS3AccessPolicy",
         "omics:DeleteSequenceStore",
         "omics:GetReadSet",
         "omics:GetReadSetActivationJob",
         "omics:GetReadSetExportJob",
         "omics:GetReadSetImportJob",
         "omics:GetReadSetMetadata",
         "omics:GetS3AccessPolicy",
         "omics:GetSequenceStore",
         "omics:ListMultipartReadSetUploads",
         "omics:ListReadSetActivationJobs",
         "omics:ListReadSetExportJobs",
         "omics:ListReadSetImportJobs",
         "omics:ListReadSetUploadParts",
         "omics:ListReadSets",
         "omics:PutS3AccessPolicy",
         "omics:StartReadSetActivationJob",
         "omics:StartReadSetExportJob",
         "omics:StartReadSetImportJob",
         "omics:TagResource",
         "omics:UntagResource",
         "omics:UpdateSequenceStore",
         "omics:UploadReadSetPart"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "omics:AbortMultipartReadSetUpload",
        "omics:BatchDeleteReadSet",
        "omics:CompleteMultipartReadSetUpload",
        "omics:CreateMultipartReadSetUpload",
        "omics:DeleteS3AccessPolicy",
        "omics:DeleteSequenceStore",
        "omics:GetReadSet",
        "omics:GetReadSetActivationJob",
        "omics:GetReadSetExportJob",
        "omics:GetReadSetImportJob",
        "omics:GetReadSetMetadata",
        "omics:GetS3AccessPolicy",
        "omics:GetSequenceStore",
        "omics:ListMultipartReadSetUploads",
        "omics:ListReadSetActivationJobs",
        "omics:ListReadSetExportJobs",
        "omics:ListReadSetImportJobs",
        "omics:ListReadSetUploadParts",
        "omics:ListReadSets",
        "omics:PutS3AccessPolicy",
        "omics:StartReadSetActivationJob",
        "omics:StartReadSetExportJob",
        "omics:StartReadSetImportJob",
        "omics:TagResource",
        "omics:UntagResource",
        "omics:UpdateSequenceStore",
        "omics:UploadReadSetPart"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/omics:sequenceStore"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/omics:sequenceStore"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "omics:CancelRun",
         "omics:DeleteRun",
         "omics:GetRun",
         "omics:GetRunTask",
         "omics:ListRunTasks",
         "omics:StartRun",
         "omics:TagResource",
         "omics:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "omics:CancelRun",
        "omics:DeleteRun",
        "omics:GetRun",
        "omics:GetRunTask",
        "omics:ListRunTasks",
        "omics:StartRun",
        "omics:TagResource",
        "omics:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/omics:run"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/omics:run"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "omics:CreateAnnotationStoreVersion",
         "omics:DeleteAnnotationStore",
         "omics:DeleteAnnotationStoreVersions",
         "omics:GetAnnotationStore",
         "omics:ListAnnotationStoreVersions",
         "omics:StartAnnotationImportJob",
         "omics:TagResource",
         "omics:UntagResource",
         "omics:UpdateAnnotationStore"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "omics:CreateAnnotationStoreVersion",
        "omics:DeleteAnnotationStore",
        "omics:DeleteAnnotationStoreVersions",
        "omics:GetAnnotationStore",
        "omics:ListAnnotationStoreVersions",
        "omics:StartAnnotationImportJob",
        "omics:TagResource",
        "omics:UntagResource",
        "omics:UpdateAnnotationStore"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/omics:AnnotationStore"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/omics:AnnotationStore"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "omics:DeleteAnnotationStoreVersions",
         "omics:GetAnnotationStoreVersion",
         "omics:StartAnnotationImportJob",
         "omics:TagResource",
         "omics:UntagResource",
         "omics:UpdateAnnotationStoreVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "omics:DeleteAnnotationStoreVersions",
        "omics:GetAnnotationStoreVersion",
        "omics:StartAnnotationImportJob",
        "omics:TagResource",
        "omics:UntagResource",
        "omics:UpdateAnnotationStoreVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/omics:AnnotationStoreVersion"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/omics:AnnotationStoreVersion"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "omics:DeleteReference",
         "omics:GetReference",
         "omics:GetReferenceMetadata",
         "omics:TagResource",
         "omics:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "omics:DeleteReference",
        "omics:GetReference",
        "omics:GetReferenceMetadata",
        "omics:TagResource",
        "omics:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/omics:reference"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/omics:reference"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "omics:DeleteReference",
         "omics:DeleteReferenceStore",
         "omics:GetReference",
         "omics:GetReferenceImportJob",
         "omics:GetReferenceMetadata",
         "omics:GetReferenceStore",
         "omics:ListReferenceImportJobs",
         "omics:ListReferences",
         "omics:StartReferenceImportJob",
         "omics:TagResource",
         "omics:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "omics:DeleteReference",
        "omics:DeleteReferenceStore",
        "omics:GetReference",
        "omics:GetReferenceImportJob",
        "omics:GetReferenceMetadata",
        "omics:GetReferenceStore",
        "omics:ListReferenceImportJobs",
        "omics:ListReferences",
        "omics:StartReferenceImportJob",
        "omics:TagResource",
        "omics:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/omics:referenceStore"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/omics:referenceStore"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "omics:DeleteRunCache",
         "omics:GetRunCache",
         "omics:StartRun",
         "omics:TagResource",
         "omics:UntagResource",
         "omics:UpdateRunCache"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "omics:DeleteRunCache",
        "omics:GetRunCache",
        "omics:StartRun",
        "omics:TagResource",
        "omics:UntagResource",
        "omics:UpdateRunCache"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/omics:runCache"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/omics:runCache"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "omics:DeleteRunGroup",
         "omics:GetRunGroup",
         "omics:StartRun",
         "omics:TagResource",
         "omics:UntagResource",
         "omics:UpdateRunGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "omics:DeleteRunGroup",
        "omics:GetRunGroup",
        "omics:StartRun",
        "omics:TagResource",
        "omics:UntagResource",
        "omics:UpdateRunGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/omics:runGroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/omics:runGroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "omics:DeleteVariantStore",
         "omics:GetVariantStore",
         "omics:StartVariantImportJob",
         "omics:TagResource",
         "omics:UntagResource",
         "omics:UpdateVariantStore"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "omics:DeleteVariantStore",
        "omics:GetVariantStore",
        "omics:StartVariantImportJob",
        "omics:TagResource",
        "omics:UntagResource",
        "omics:UpdateVariantStore"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/omics:VariantStore"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/omics:VariantStore"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "omics:DeleteWorkflow",
         "omics:GetWorkflow",
         "omics:StartRun",
         "omics:TagResource",
         "omics:UntagResource",
         "omics:UpdateWorkflow"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "omics:DeleteWorkflow",
        "omics:GetWorkflow",
        "omics:StartRun",
        "omics:TagResource",
        "omics:UntagResource",
        "omics:UpdateWorkflow"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/omics:workflow"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/omics:workflow"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "omics:GetReadSet",
         "omics:GetReadSetMetadata",
         "omics:TagResource",
         "omics:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "omics:GetReadSet",
        "omics:GetReadSetMetadata",
        "omics:TagResource",
        "omics:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/omics:readSet"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/omics:readSet"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "omics:GetRunTask"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "omics:GetRunTask"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/omics:TaskResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/omics:TaskResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "one:CreateDeviceActivationQrCode",
         "one:CreateDeviceInstanceConfiguration",
         "one:DeleteAssociatedDevice",
         "one:DeleteDeviceInstance",
         "one:GetDeviceInstance",
         "one:ListTagsForResource",
         "one:RebootDevice",
         "one:TagResource",
         "one:UntagResource",
         "one:UpdateDeviceInstance"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "one:CreateDeviceActivationQrCode",
        "one:CreateDeviceInstanceConfiguration",
        "one:DeleteAssociatedDevice",
        "one:DeleteDeviceInstance",
        "one:GetDeviceInstance",
        "one:ListTagsForResource",
        "one:RebootDevice",
        "one:TagResource",
        "one:UntagResource",
        "one:UpdateDeviceInstance"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/one:device-instance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/one:device-instance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "one:DeleteDeviceConfigurationTemplate",
         "one:GetDeviceConfigurationTemplate",
         "one:ListTagsForResource",
         "one:TagResource",
         "one:UntagResource",
         "one:UpdateDeviceConfigurationTemplate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "one:DeleteDeviceConfigurationTemplate",
        "one:GetDeviceConfigurationTemplate",
        "one:ListTagsForResource",
        "one:TagResource",
        "one:UntagResource",
        "one:UpdateDeviceConfigurationTemplate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/one:device-configuration-template"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/one:device-configuration-template"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "one:DeleteSite",
         "one:GetSite",
         "one:GetSiteAddress",
         "one:ListTagsForResource",
         "one:TagResource",
         "one:UntagResource",
         "one:UpdateSite",
         "one:UpdateSiteAddress"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "one:DeleteSite",
        "one:GetSite",
        "one:GetSiteAddress",
        "one:ListTagsForResource",
        "one:TagResource",
        "one:UntagResource",
        "one:UpdateSite",
        "one:UpdateSiteAddress"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/one:site"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/one:site"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "one:DeleteUser"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "one:DeleteUser"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/one:user"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/one:user"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "one:GetDeviceInstanceConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "one:GetDeviceInstanceConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/one:configuration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/one:configuration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "opensearch:ApplicationAccessAll"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "opensearch:ApplicationAccessAll"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/opensearch:application"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/opensearch:application"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "opensearch:CancelDirectQuery",
         "opensearch:GetDirectQuery",
         "opensearch:GetDirectQueryResult",
         "opensearch:StartDirectQuery"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "opensearch:CancelDirectQuery",
        "opensearch:GetDirectQuery",
        "opensearch:GetDirectQueryResult",
        "opensearch:StartDirectQuery"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/opensearch:datasource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/opensearch:datasource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "opsworks:AssignInstance",
         "opsworks:AssignVolume",
         "opsworks:AssociateElasticIp",
         "opsworks:AttachElasticLoadBalancer",
         "opsworks:CloneStack",
         "opsworks:CreateApp",
         "opsworks:CreateDeployment",
         "opsworks:CreateInstance",
         "opsworks:CreateLayer",
         "opsworks:DeleteApp",
         "opsworks:DeleteInstance",
         "opsworks:DeleteLayer",
         "opsworks:DeleteStack",
         "opsworks:DeregisterEcsCluster",
         "opsworks:DeregisterElasticIp",
         "opsworks:DeregisterInstance",
         "opsworks:DeregisterRdsDbInstance",
         "opsworks:DeregisterVolume",
         "opsworks:DescribeAgentVersions",
         "opsworks:DescribeApps",
         "opsworks:DescribeCommands",
         "opsworks:DescribeDeployments",
         "opsworks:DescribeEcsClusters",
         "opsworks:DescribeElasticIps",
         "opsworks:DescribeElasticLoadBalancers",
         "opsworks:DescribeInstances",
         "opsworks:DescribeLayers",
         "opsworks:DescribeLoadBasedAutoScaling",
         "opsworks:DescribePermissions",
         "opsworks:DescribeRaidArrays",
         "opsworks:DescribeRdsDbInstances",
         "opsworks:DescribeServiceErrors",
         "opsworks:DescribeStackProvisioningParameters",
         "opsworks:DescribeStackSummary",
         "opsworks:DescribeStacks",
         "opsworks:DescribeTimeBasedAutoScaling",
         "opsworks:DescribeVolumes",
         "opsworks:DetachElasticLoadBalancer",
         "opsworks:DisassociateElasticIp",
         "opsworks:GetHostnameSuggestion",
         "opsworks:GrantAccess",
         "opsworks:ListTags",
         "opsworks:RebootInstance",
         "opsworks:RegisterEcsCluster",
         "opsworks:RegisterElasticIp",
         "opsworks:RegisterInstance",
         "opsworks:RegisterRdsDbInstance",
         "opsworks:RegisterVolume",
         "opsworks:SetLoadBasedAutoScaling",
         "opsworks:SetPermission",
         "opsworks:SetTimeBasedAutoScaling",
         "opsworks:StartInstance",
         "opsworks:StartStack",
         "opsworks:StopInstance",
         "opsworks:StopStack",
         "opsworks:TagResource",
         "opsworks:UnassignInstance",
         "opsworks:UnassignVolume",
         "opsworks:UntagResource",
         "opsworks:UpdateApp",
         "opsworks:UpdateElasticIp",
         "opsworks:UpdateInstance",
         "opsworks:UpdateLayer",
         "opsworks:UpdateRdsDbInstance",
         "opsworks:UpdateStack",
         "opsworks:UpdateVolume"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "opsworks:AssignInstance",
        "opsworks:AssignVolume",
        "opsworks:AssociateElasticIp",
        "opsworks:AttachElasticLoadBalancer",
        "opsworks:CloneStack",
        "opsworks:CreateApp",
        "opsworks:CreateDeployment",
        "opsworks:CreateInstance",
        "opsworks:CreateLayer",
        "opsworks:DeleteApp",
        "opsworks:DeleteInstance",
        "opsworks:DeleteLayer",
        "opsworks:DeleteStack",
        "opsworks:DeregisterEcsCluster",
        "opsworks:DeregisterElasticIp",
        "opsworks:DeregisterInstance",
        "opsworks:DeregisterRdsDbInstance",
        "opsworks:DeregisterVolume",
        "opsworks:DescribeAgentVersions",
        "opsworks:DescribeApps",
        "opsworks:DescribeCommands",
        "opsworks:DescribeDeployments",
        "opsworks:DescribeEcsClusters",
        "opsworks:DescribeElasticIps",
        "opsworks:DescribeElasticLoadBalancers",
        "opsworks:DescribeInstances",
        "opsworks:DescribeLayers",
        "opsworks:DescribeLoadBasedAutoScaling",
        "opsworks:DescribePermissions",
        "opsworks:DescribeRaidArrays",
        "opsworks:DescribeRdsDbInstances",
        "opsworks:DescribeServiceErrors",
        "opsworks:DescribeStackProvisioningParameters",
        "opsworks:DescribeStackSummary",
        "opsworks:DescribeStacks",
        "opsworks:DescribeTimeBasedAutoScaling",
        "opsworks:DescribeVolumes",
        "opsworks:DetachElasticLoadBalancer",
        "opsworks:DisassociateElasticIp",
        "opsworks:GetHostnameSuggestion",
        "opsworks:GrantAccess",
        "opsworks:ListTags",
        "opsworks:RebootInstance",
        "opsworks:RegisterEcsCluster",
        "opsworks:RegisterElasticIp",
        "opsworks:RegisterInstance",
        "opsworks:RegisterRdsDbInstance",
        "opsworks:RegisterVolume",
        "opsworks:SetLoadBasedAutoScaling",
        "opsworks:SetPermission",
        "opsworks:SetTimeBasedAutoScaling",
        "opsworks:StartInstance",
        "opsworks:StartStack",
        "opsworks:StopInstance",
        "opsworks:StopStack",
        "opsworks:TagResource",
        "opsworks:UnassignInstance",
        "opsworks:UnassignVolume",
        "opsworks:UntagResource",
        "opsworks:UpdateApp",
        "opsworks:UpdateElasticIp",
        "opsworks:UpdateInstance",
        "opsworks:UpdateLayer",
        "opsworks:UpdateRdsDbInstance",
        "opsworks:UpdateStack",
        "opsworks:UpdateVolume"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/opsworks:stack"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/opsworks:stack"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "organizations:AcceptHandshake",
         "organizations:CancelHandshake",
         "organizations:DeclineHandshake",
         "organizations:DescribeHandshake"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "organizations:AcceptHandshake",
        "organizations:CancelHandshake",
        "organizations:DeclineHandshake",
        "organizations:DescribeHandshake"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/organizations:handshake"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/organizations:handshake"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "organizations:AttachPolicy",
         "organizations:CloseAccount",
         "organizations:DeregisterDelegatedAdministrator",
         "organizations:DescribeAccount",
         "organizations:DescribeEffectivePolicy",
         "organizations:DetachPolicy",
         "organizations:InviteAccountToOrganization",
         "organizations:ListDelegatedServicesForAccount",
         "organizations:ListParents",
         "organizations:ListPoliciesForTarget",
         "organizations:ListTagsForResource",
         "organizations:MoveAccount",
         "organizations:RegisterDelegatedAdministrator",
         "organizations:RemoveAccountFromOrganization",
         "organizations:TagResource",
         "organizations:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "organizations:AttachPolicy",
        "organizations:CloseAccount",
        "organizations:DeregisterDelegatedAdministrator",
        "organizations:DescribeAccount",
        "organizations:DescribeEffectivePolicy",
        "organizations:DetachPolicy",
        "organizations:InviteAccountToOrganization",
        "organizations:ListDelegatedServicesForAccount",
        "organizations:ListParents",
        "organizations:ListPoliciesForTarget",
        "organizations:ListTagsForResource",
        "organizations:MoveAccount",
        "organizations:RegisterDelegatedAdministrator",
        "organizations:RemoveAccountFromOrganization",
        "organizations:TagResource",
        "organizations:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/organizations:account"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/organizations:account"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "organizations:AttachPolicy",
         "organizations:CreateOrganizationalUnit",
         "organizations:DeleteOrganizationalUnit",
         "organizations:DescribeOrganizationalUnit",
         "organizations:DetachPolicy",
         "organizations:ListAccountsForParent",
         "organizations:ListChildren",
         "organizations:ListOrganizationalUnitsForParent",
         "organizations:ListParents",
         "organizations:ListPoliciesForTarget",
         "organizations:ListTagsForResource",
         "organizations:MoveAccount",
         "organizations:TagResource",
         "organizations:UntagResource",
         "organizations:UpdateOrganizationalUnit"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "organizations:AttachPolicy",
        "organizations:CreateOrganizationalUnit",
        "organizations:DeleteOrganizationalUnit",
        "organizations:DescribeOrganizationalUnit",
        "organizations:DetachPolicy",
        "organizations:ListAccountsForParent",
        "organizations:ListChildren",
        "organizations:ListOrganizationalUnitsForParent",
        "organizations:ListParents",
        "organizations:ListPoliciesForTarget",
        "organizations:ListTagsForResource",
        "organizations:MoveAccount",
        "organizations:TagResource",
        "organizations:UntagResource",
        "organizations:UpdateOrganizationalUnit"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/organizations:organizationalunit"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/organizations:organizationalunit"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "organizations:AttachPolicy",
         "organizations:DeletePolicy",
         "organizations:DescribePolicy",
         "organizations:DetachPolicy",
         "organizations:ListTagsForResource",
         "organizations:ListTargetsForPolicy",
         "organizations:TagResource",
         "organizations:UntagResource",
         "organizations:UpdatePolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "organizations:AttachPolicy",
        "organizations:DeletePolicy",
        "organizations:DescribePolicy",
        "organizations:DetachPolicy",
        "organizations:ListTagsForResource",
        "organizations:ListTargetsForPolicy",
        "organizations:TagResource",
        "organizations:UntagResource",
        "organizations:UpdatePolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/organizations:policy"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/organizations:policy"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "organizations:AttachPolicy",
         "organizations:CreateOrganizationalUnit",
         "organizations:DetachPolicy",
         "organizations:DisablePolicyType",
         "organizations:EnablePolicyType",
         "organizations:ListAccountsForParent",
         "organizations:ListChildren",
         "organizations:ListOrganizationalUnitsForParent",
         "organizations:ListPoliciesForTarget",
         "organizations:ListTagsForResource",
         "organizations:MoveAccount",
         "organizations:TagResource",
         "organizations:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "organizations:AttachPolicy",
        "organizations:CreateOrganizationalUnit",
        "organizations:DetachPolicy",
        "organizations:DisablePolicyType",
        "organizations:EnablePolicyType",
        "organizations:ListAccountsForParent",
        "organizations:ListChildren",
        "organizations:ListOrganizationalUnitsForParent",
        "organizations:ListPoliciesForTarget",
        "organizations:ListTagsForResource",
        "organizations:MoveAccount",
        "organizations:TagResource",
        "organizations:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/organizations:root"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/organizations:root"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "organizations:ListTagsForResource",
         "organizations:PutResourcePolicy",
         "organizations:TagResource",
         "organizations:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "organizations:ListTagsForResource",
        "organizations:PutResourcePolicy",
        "organizations:TagResource",
        "organizations:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/organizations:resourcepolicy"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/organizations:resourcepolicy"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "osis:DeletePipeline",
         "osis:GetPipeline",
         "osis:GetPipelineChangeProgress",
         "osis:Ingest",
         "osis:ListTagsForResource",
         "osis:StartPipeline",
         "osis:StopPipeline",
         "osis:TagResource",
         "osis:UntagResource",
         "osis:UpdatePipeline"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "osis:DeletePipeline",
        "osis:GetPipeline",
        "osis:GetPipelineChangeProgress",
        "osis:Ingest",
        "osis:ListTagsForResource",
        "osis:StartPipeline",
        "osis:StopPipeline",
        "osis:TagResource",
        "osis:UntagResource",
        "osis:UpdatePipeline"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/osis:pipeline"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/osis:pipeline"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "osis:GetPipelineBlueprint"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "osis:GetPipelineBlueprint"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/osis:pipeline-blueprint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/osis:pipeline-blueprint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "outposts:CancelCapacityTask",
         "outposts:CreateOrder",
         "outposts:DeleteOutpost",
         "outposts:GetCapacityTask",
         "outposts:GetOutpost",
         "outposts:GetOutpostInstanceTypes",
         "outposts:GetOutpostSupportedInstanceTypes",
         "outposts:ListAssetInstances",
         "outposts:ListBlockingInstancesForCapacityTask",
         "outposts:StartCapacityTask",
         "outposts:TagResource",
         "outposts:UntagResource",
         "outposts:UpdateOutpost"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "outposts:CancelCapacityTask",
        "outposts:CreateOrder",
        "outposts:DeleteOutpost",
        "outposts:GetCapacityTask",
        "outposts:GetOutpost",
        "outposts:GetOutpostInstanceTypes",
        "outposts:GetOutpostSupportedInstanceTypes",
        "outposts:ListAssetInstances",
        "outposts:ListBlockingInstancesForCapacityTask",
        "outposts:StartCapacityTask",
        "outposts:TagResource",
        "outposts:UntagResource",
        "outposts:UpdateOutpost"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/outposts:outpost"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/outposts:outpost"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "outposts:CreateOutpost",
         "outposts:DeleteSite",
         "outposts:GetSite",
         "outposts:GetSiteAddress",
         "outposts:TagResource",
         "outposts:UntagResource",
         "outposts:UpdateSite",
         "outposts:UpdateSiteAddress",
         "outposts:UpdateSiteRackPhysicalProperties"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "outposts:CreateOutpost",
        "outposts:DeleteSite",
        "outposts:GetSite",
        "outposts:GetSiteAddress",
        "outposts:TagResource",
        "outposts:UntagResource",
        "outposts:UpdateSite",
        "outposts:UpdateSiteAddress",
        "outposts:UpdateSiteRackPhysicalProperties"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/outposts:site"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/outposts:site"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "panorama:DeleteDevice",
         "panorama:DescribeDevice",
         "panorama:ListApplicationInstances",
         "panorama:ListDevicesJobs",
         "panorama:ListTagsForResource",
         "panorama:TagResource",
         "panorama:UntagResource",
         "panorama:UpdateDeviceMetadata"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "panorama:DeleteDevice",
        "panorama:DescribeDevice",
        "panorama:ListApplicationInstances",
        "panorama:ListDevicesJobs",
        "panorama:ListTagsForResource",
        "panorama:TagResource",
        "panorama:UntagResource",
        "panorama:UpdateDeviceMetadata"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/panorama:device"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/panorama:device"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "panorama:DeletePackage",
         "panorama:DeregisterPackageVersion",
         "panorama:DescribePackage",
         "panorama:DescribePackageVersion",
         "panorama:ListTagsForResource",
         "panorama:RegisterPackageVersion",
         "panorama:TagResource",
         "panorama:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "panorama:DeletePackage",
        "panorama:DeregisterPackageVersion",
        "panorama:DescribePackage",
        "panorama:DescribePackageVersion",
        "panorama:ListTagsForResource",
        "panorama:RegisterPackageVersion",
        "panorama:TagResource",
        "panorama:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/panorama:package"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/panorama:package"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "panorama:DescribeApplicationInstance",
         "panorama:DescribeApplicationInstanceDetails",
         "panorama:ListApplicationInstanceDependencies",
         "panorama:ListApplicationInstanceNodeInstances",
         "panorama:ListTagsForResource",
         "panorama:RemoveApplicationInstance",
         "panorama:SignalApplicationInstanceNodeInstances",
         "panorama:TagResource",
         "panorama:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "panorama:DescribeApplicationInstance",
        "panorama:DescribeApplicationInstanceDetails",
        "panorama:ListApplicationInstanceDependencies",
        "panorama:ListApplicationInstanceNodeInstances",
        "panorama:ListTagsForResource",
        "panorama:RemoveApplicationInstance",
        "panorama:SignalApplicationInstanceNodeInstances",
        "panorama:TagResource",
        "panorama:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/panorama:applicationInstance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/panorama:applicationInstance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "partnercentral:AcceptEngagementInvitation",
         "partnercentral:GetEngagementInvitation",
         "partnercentral:RejectEngagementInvitation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "partnercentral:AcceptEngagementInvitation",
        "partnercentral:GetEngagementInvitation",
        "partnercentral:RejectEngagementInvitation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/partnercentral:engagement-invitation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/partnercentral:engagement-invitation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "partnercentral:AssignOpportunity",
         "partnercentral:AssociateOpportunity",
         "partnercentral:DisassociateOpportunity",
         "partnercentral:GetAwsOpportunitySummary",
         "partnercentral:GetOpportunity",
         "partnercentral:SubmitOpportunity",
         "partnercentral:UpdateOpportunity"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "partnercentral:AssignOpportunity",
        "partnercentral:AssociateOpportunity",
        "partnercentral:DisassociateOpportunity",
        "partnercentral:GetAwsOpportunitySummary",
        "partnercentral:GetOpportunity",
        "partnercentral:SubmitOpportunity",
        "partnercentral:UpdateOpportunity"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/partnercentral:Opportunity"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/partnercentral:Opportunity"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "partnercentral:CreateResourceSnapshot",
         "partnercentral:GetResourceSnapshot",
         "partnercentral:ListEngagementResourceAssociations",
         "partnercentral:ListResourceSnapshots"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "partnercentral:CreateResourceSnapshot",
        "partnercentral:GetResourceSnapshot",
        "partnercentral:ListEngagementResourceAssociations",
        "partnercentral:ListResourceSnapshots"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/partnercentral:ResourceSnapshot"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/partnercentral:ResourceSnapshot"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "partnercentral:DeleteResourceSnapshotJob",
         "partnercentral:GetResourceSnapshotJob",
         "partnercentral:StartResourceSnapshotJob",
         "partnercentral:StopResourceSnapshotJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "partnercentral:DeleteResourceSnapshotJob",
        "partnercentral:GetResourceSnapshotJob",
        "partnercentral:StartResourceSnapshotJob",
        "partnercentral:StopResourceSnapshotJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/partnercentral:resource-snapshot-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/partnercentral:resource-snapshot-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "partnercentral:GetEngagement",
         "partnercentral:ListEngagementMembers"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "partnercentral:GetEngagement",
        "partnercentral:ListEngagementMembers"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/partnercentral:Engagement"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/partnercentral:Engagement"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "payment-cryptography:CreateAlias",
         "payment-cryptography:DeleteAlias",
         "payment-cryptography:GenerateMacEmvPinChange",
         "payment-cryptography:GetAlias",
         "payment-cryptography:UpdateAlias"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "payment-cryptography:CreateAlias",
        "payment-cryptography:DeleteAlias",
        "payment-cryptography:GenerateMacEmvPinChange",
        "payment-cryptography:GetAlias",
        "payment-cryptography:UpdateAlias"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/payment-cryptography:alias"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/payment-cryptography:alias"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "payment-cryptography:CreateAlias",
         "payment-cryptography:DeleteKey",
         "payment-cryptography:ExportKey",
         "payment-cryptography:GenerateMacEmvPinChange",
         "payment-cryptography:GetAlias",
         "payment-cryptography:GetKey",
         "payment-cryptography:GetPublicKeyCertificate",
         "payment-cryptography:ListTagsForResource",
         "payment-cryptography:RestoreKey",
         "payment-cryptography:StartKeyUsage",
         "payment-cryptography:StopKeyUsage",
         "payment-cryptography:TagResource",
         "payment-cryptography:UntagResource",
         "payment-cryptography:UpdateAlias"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "payment-cryptography:CreateAlias",
        "payment-cryptography:DeleteKey",
        "payment-cryptography:ExportKey",
        "payment-cryptography:GenerateMacEmvPinChange",
        "payment-cryptography:GetAlias",
        "payment-cryptography:GetKey",
        "payment-cryptography:GetPublicKeyCertificate",
        "payment-cryptography:ListTagsForResource",
        "payment-cryptography:RestoreKey",
        "payment-cryptography:StartKeyUsage",
        "payment-cryptography:StopKeyUsage",
        "payment-cryptography:TagResource",
        "payment-cryptography:UntagResource",
        "payment-cryptography:UpdateAlias"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/payment-cryptography:key"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/payment-cryptography:key"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "payments:GetPaymentInstrument",
         "payments:ListTagsForResource",
         "payments:TagResource",
         "payments:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "payments:GetPaymentInstrument",
        "payments:ListTagsForResource",
        "payments:TagResource",
        "payments:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/payments:payment-instrument"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/payments:payment-instrument"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "pca-connector-ad:CreateServicePrincipalName",
         "pca-connector-ad:DeleteDirectoryRegistration",
         "pca-connector-ad:DeleteServicePrincipalName",
         "pca-connector-ad:GetDirectoryRegistration",
         "pca-connector-ad:GetServicePrincipalName",
         "pca-connector-ad:ListServicePrincipalNames",
         "pca-connector-ad:TagResource",
         "pca-connector-ad:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "pca-connector-ad:CreateServicePrincipalName",
        "pca-connector-ad:DeleteDirectoryRegistration",
        "pca-connector-ad:DeleteServicePrincipalName",
        "pca-connector-ad:GetDirectoryRegistration",
        "pca-connector-ad:GetServicePrincipalName",
        "pca-connector-ad:ListServicePrincipalNames",
        "pca-connector-ad:TagResource",
        "pca-connector-ad:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/pca-connector-ad:DirectoryRegistration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/pca-connector-ad:DirectoryRegistration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "pca-connector-ad:CreateTemplate",
         "pca-connector-ad:DeleteConnector",
         "pca-connector-ad:GetConnector",
         "pca-connector-ad:ListTemplates",
         "pca-connector-ad:TagResource",
         "pca-connector-ad:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "pca-connector-ad:CreateTemplate",
        "pca-connector-ad:DeleteConnector",
        "pca-connector-ad:GetConnector",
        "pca-connector-ad:ListTemplates",
        "pca-connector-ad:TagResource",
        "pca-connector-ad:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/pca-connector-ad:Connector"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/pca-connector-ad:Connector"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "pca-connector-ad:CreateTemplateGroupAccessControlEntry",
         "pca-connector-ad:DeleteTemplate",
         "pca-connector-ad:DeleteTemplateGroupAccessControlEntry",
         "pca-connector-ad:GetTemplate",
         "pca-connector-ad:GetTemplateGroupAccessControlEntry",
         "pca-connector-ad:ListTemplateGroupAccessControlEntries",
         "pca-connector-ad:TagResource",
         "pca-connector-ad:UntagResource",
         "pca-connector-ad:UpdateTemplate",
         "pca-connector-ad:UpdateTemplateGroupAccessControlEntry"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "pca-connector-ad:CreateTemplateGroupAccessControlEntry",
        "pca-connector-ad:DeleteTemplate",
        "pca-connector-ad:DeleteTemplateGroupAccessControlEntry",
        "pca-connector-ad:GetTemplate",
        "pca-connector-ad:GetTemplateGroupAccessControlEntry",
        "pca-connector-ad:ListTemplateGroupAccessControlEntries",
        "pca-connector-ad:TagResource",
        "pca-connector-ad:UntagResource",
        "pca-connector-ad:UpdateTemplate",
        "pca-connector-ad:UpdateTemplateGroupAccessControlEntry"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/pca-connector-ad:Template"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/pca-connector-ad:Template"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "pca-connector-scep:DeleteChallenge",
         "pca-connector-scep:GetChallengeMetadata",
         "pca-connector-scep:GetChallengePassword",
         "pca-connector-scep:TagResource",
         "pca-connector-scep:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "pca-connector-scep:DeleteChallenge",
        "pca-connector-scep:GetChallengeMetadata",
        "pca-connector-scep:GetChallengePassword",
        "pca-connector-scep:TagResource",
        "pca-connector-scep:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/pca-connector-scep:Challenge"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/pca-connector-scep:Challenge"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "pca-connector-scep:DeleteConnector",
         "pca-connector-scep:GetConnector",
         "pca-connector-scep:TagResource",
         "pca-connector-scep:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "pca-connector-scep:DeleteConnector",
        "pca-connector-scep:GetConnector",
        "pca-connector-scep:TagResource",
        "pca-connector-scep:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/pca-connector-scep:Connector"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/pca-connector-scep:Connector"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "pcs:AllowVendedLogDeliveryForResource",
         "pcs:CreateComputeNodeGroup",
         "pcs:CreateQueue",
         "pcs:DeleteCluster",
         "pcs:DeleteComputeNodeGroup",
         "pcs:DeleteQueue",
         "pcs:GetCluster",
         "pcs:GetComputeNodeGroup",
         "pcs:GetQueue",
         "pcs:ListComputeNodeGroups",
         "pcs:ListQueues",
         "pcs:RegisterComputeNodeGroupInstance",
         "pcs:TagResource",
         "pcs:UntagResource",
         "pcs:UpdateComputeNodeGroup",
         "pcs:UpdateQueue"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "pcs:AllowVendedLogDeliveryForResource",
        "pcs:CreateComputeNodeGroup",
        "pcs:CreateQueue",
        "pcs:DeleteCluster",
        "pcs:DeleteComputeNodeGroup",
        "pcs:DeleteQueue",
        "pcs:GetCluster",
        "pcs:GetComputeNodeGroup",
        "pcs:GetQueue",
        "pcs:ListComputeNodeGroups",
        "pcs:ListQueues",
        "pcs:RegisterComputeNodeGroupInstance",
        "pcs:TagResource",
        "pcs:UntagResource",
        "pcs:UpdateComputeNodeGroup",
        "pcs:UpdateQueue"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/pcs:cluster"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/pcs:cluster"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "pcs:DeleteComputeNodeGroup",
         "pcs:GetComputeNodeGroup",
         "pcs:TagResource",
         "pcs:UntagResource",
         "pcs:UpdateComputeNodeGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "pcs:DeleteComputeNodeGroup",
        "pcs:GetComputeNodeGroup",
        "pcs:TagResource",
        "pcs:UntagResource",
        "pcs:UpdateComputeNodeGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/pcs:computenodegroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/pcs:computenodegroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "pcs:DeleteQueue",
         "pcs:GetQueue",
         "pcs:TagResource",
         "pcs:UntagResource",
         "pcs:UpdateQueue"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "pcs:DeleteQueue",
        "pcs:GetQueue",
        "pcs:TagResource",
        "pcs:UntagResource",
        "pcs:UpdateQueue"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/pcs:queue"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/pcs:queue"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "personalize:CreateBatchInferenceJob",
         "personalize:DescribeBatchInferenceJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "personalize:CreateBatchInferenceJob",
        "personalize:DescribeBatchInferenceJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/personalize:batchInferenceJob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/personalize:batchInferenceJob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "personalize:CreateBatchSegmentJob",
         "personalize:DescribeBatchSegmentJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "personalize:CreateBatchSegmentJob",
        "personalize:DescribeBatchSegmentJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/personalize:batchSegmentJob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/personalize:batchSegmentJob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "personalize:CreateCampaign",
         "personalize:DeleteCampaign",
         "personalize:DescribeCampaign",
         "personalize:GetActionRecommendations",
         "personalize:GetPersonalizedRanking",
         "personalize:GetRecommendations",
         "personalize:UpdateCampaign"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "personalize:CreateCampaign",
        "personalize:DeleteCampaign",
        "personalize:DescribeCampaign",
        "personalize:GetActionRecommendations",
        "personalize:GetPersonalizedRanking",
        "personalize:GetRecommendations",
        "personalize:UpdateCampaign"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/personalize:campaign"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/personalize:campaign"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "personalize:CreateDataDeletionJob",
         "personalize:DescribeDataDeletionJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "personalize:CreateDataDeletionJob",
        "personalize:DescribeDataDeletionJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/personalize:dataDeletionJob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/personalize:dataDeletionJob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "personalize:CreateDataInsightsJob",
         "personalize:DescribeDataInsightsJob",
         "personalize:GetDataInsights"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "personalize:CreateDataInsightsJob",
        "personalize:DescribeDataInsightsJob",
        "personalize:GetDataInsights"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/personalize:dataInsightsJob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/personalize:dataInsightsJob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "personalize:CreateDataset",
         "personalize:DeleteDataset",
         "personalize:DescribeDataset",
         "personalize:PutActions",
         "personalize:PutItems",
         "personalize:PutUsers",
         "personalize:UpdateDataset"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "personalize:CreateDataset",
        "personalize:DeleteDataset",
        "personalize:DescribeDataset",
        "personalize:PutActions",
        "personalize:PutItems",
        "personalize:PutUsers",
        "personalize:UpdateDataset"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/personalize:dataset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/personalize:dataset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "personalize:CreateDatasetExportJob",
         "personalize:DescribeDatasetExportJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "personalize:CreateDatasetExportJob",
        "personalize:DescribeDatasetExportJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/personalize:datasetExportJob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/personalize:datasetExportJob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "personalize:CreateDatasetGroup",
         "personalize:DeleteDatasetGroup",
         "personalize:DescribeDatasetGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "personalize:CreateDatasetGroup",
        "personalize:DeleteDatasetGroup",
        "personalize:DescribeDatasetGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/personalize:datasetGroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/personalize:datasetGroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "personalize:CreateDatasetImportJob",
         "personalize:DescribeDatasetImportJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "personalize:CreateDatasetImportJob",
        "personalize:DescribeDatasetImportJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/personalize:datasetImportJob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/personalize:datasetImportJob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "personalize:CreateEventTracker",
         "personalize:DeleteEventTracker",
         "personalize:DescribeEventTracker"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "personalize:CreateEventTracker",
        "personalize:DeleteEventTracker",
        "personalize:DescribeEventTracker"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/personalize:eventTracker"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/personalize:eventTracker"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "personalize:CreateFilter",
         "personalize:DeleteFilter",
         "personalize:DescribeFilter"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "personalize:CreateFilter",
        "personalize:DeleteFilter",
        "personalize:DescribeFilter"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/personalize:filter"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/personalize:filter"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "personalize:CreateMetricAttribution",
         "personalize:DeleteMetricAttribution",
         "personalize:DescribeMetricAttribution",
         "personalize:UpdateMetricAttribution"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "personalize:CreateMetricAttribution",
        "personalize:DeleteMetricAttribution",
        "personalize:DescribeMetricAttribution",
        "personalize:UpdateMetricAttribution"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/personalize:metricAttribution"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/personalize:metricAttribution"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "personalize:CreateRecommender",
         "personalize:DeleteRecommender",
         "personalize:DescribeRecommender",
         "personalize:StartRecommender",
         "personalize:StopRecommender",
         "personalize:UpdateRecommender"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "personalize:CreateRecommender",
        "personalize:DeleteRecommender",
        "personalize:DescribeRecommender",
        "personalize:StartRecommender",
        "personalize:StopRecommender",
        "personalize:UpdateRecommender"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/personalize:recommender"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/personalize:recommender"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "personalize:CreateSchema",
         "personalize:DeleteSchema",
         "personalize:DescribeSchema"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "personalize:CreateSchema",
        "personalize:DeleteSchema",
        "personalize:DescribeSchema"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/personalize:schema"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/personalize:schema"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "personalize:CreateSolution",
         "personalize:CreateSolutionVersion",
         "personalize:DeleteSolution",
         "personalize:DescribeSolution",
         "personalize:DescribeSolutionVersion",
         "personalize:GetSolutionMetrics",
         "personalize:StopSolutionVersionCreation",
         "personalize:UpdateSolution"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "personalize:CreateSolution",
        "personalize:CreateSolutionVersion",
        "personalize:DeleteSolution",
        "personalize:DescribeSolution",
        "personalize:DescribeSolutionVersion",
        "personalize:GetSolutionMetrics",
        "personalize:StopSolutionVersionCreation",
        "personalize:UpdateSolution"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/personalize:solution"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/personalize:solution"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "personalize:DescribeAlgorithm"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "personalize:DescribeAlgorithm"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/personalize:algorithm"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/personalize:algorithm"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "personalize:DescribeFeatureTransformation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "personalize:DescribeFeatureTransformation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/personalize:featureTransformation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/personalize:featureTransformation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "personalize:DescribeRecipe"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "personalize:DescribeRecipe"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/personalize:recipe"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/personalize:recipe"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "pi:CreatePerformanceAnalysisReport",
         "pi:DeletePerformanceAnalysisReport",
         "pi:GetPerformanceAnalysisReport",
         "pi:ListPerformanceAnalysisReports",
         "pi:ListTagsForResource",
         "pi:TagResource",
         "pi:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "pi:CreatePerformanceAnalysisReport",
        "pi:DeletePerformanceAnalysisReport",
        "pi:GetPerformanceAnalysisReport",
        "pi:ListPerformanceAnalysisReports",
        "pi:ListTagsForResource",
        "pi:TagResource",
        "pi:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/pi:perf-reports-resource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/pi:perf-reports-resource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "pi:DescribeDimensionKeys",
         "pi:GetDimensionKeyDetails",
         "pi:GetResourceMetadata",
         "pi:GetResourceMetrics",
         "pi:ListAvailableResourceDimensions",
         "pi:ListAvailableResourceMetrics"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "pi:DescribeDimensionKeys",
        "pi:GetDimensionKeyDetails",
        "pi:GetResourceMetadata",
        "pi:GetResourceMetrics",
        "pi:ListAvailableResourceDimensions",
        "pi:ListAvailableResourceMetrics"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/pi:metric-resource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/pi:metric-resource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "pipes:CreatePipe",
         "pipes:DeletePipe",
         "pipes:DescribePipe",
         "pipes:ListTagsForResource",
         "pipes:StartPipe",
         "pipes:StopPipe",
         "pipes:TagResource",
         "pipes:UntagResource",
         "pipes:UpdatePipe"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "pipes:CreatePipe",
        "pipes:DeletePipe",
        "pipes:DescribePipe",
        "pipes:ListTagsForResource",
        "pipes:StartPipe",
        "pipes:StopPipe",
        "pipes:TagResource",
        "pipes:UntagResource",
        "pipes:UpdatePipe"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/pipes:pipe"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/pipes:pipe"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "polly:DeleteLexicon",
         "polly:GetLexicon",
         "polly:PutLexicon",
         "polly:StartSpeechSynthesisTask",
         "polly:SynthesizeSpeech"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "polly:DeleteLexicon",
        "polly:GetLexicon",
        "polly:PutLexicon",
        "polly:StartSpeechSynthesisTask",
        "polly:SynthesizeSpeech"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/polly:lexicon"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/polly:lexicon"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "private-networks:AcknowledgeOrderReceipt",
         "private-networks:ActivateNetworkSite",
         "private-networks:GetOrder",
         "private-networks:TagResource",
         "private-networks:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "private-networks:AcknowledgeOrderReceipt",
        "private-networks:ActivateNetworkSite",
        "private-networks:GetOrder",
        "private-networks:TagResource",
        "private-networks:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/private-networks:order"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/private-networks:order"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "private-networks:ActivateDeviceIdentifier",
         "private-networks:DeactivateDeviceIdentifier",
         "private-networks:GetDeviceIdentifier",
         "private-networks:TagResource",
         "private-networks:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "private-networks:ActivateDeviceIdentifier",
        "private-networks:DeactivateDeviceIdentifier",
        "private-networks:GetDeviceIdentifier",
        "private-networks:TagResource",
        "private-networks:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/private-networks:device-identifier"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/private-networks:device-identifier"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "private-networks:ActivateNetworkSite",
         "private-networks:DeleteNetworkSite",
         "private-networks:GetNetworkSite",
         "private-networks:TagResource",
         "private-networks:UntagResource",
         "private-networks:UpdateNetworkSite",
         "private-networks:UpdateNetworkSitePlan"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "private-networks:ActivateNetworkSite",
        "private-networks:DeleteNetworkSite",
        "private-networks:GetNetworkSite",
        "private-networks:TagResource",
        "private-networks:UntagResource",
        "private-networks:UpdateNetworkSite",
        "private-networks:UpdateNetworkSitePlan"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/private-networks:network-site"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/private-networks:network-site"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "private-networks:ConfigureAccessPoint",
         "private-networks:GetNetworkResource",
         "private-networks:StartNetworkResourceUpdate",
         "private-networks:TagResource",
         "private-networks:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "private-networks:ConfigureAccessPoint",
        "private-networks:GetNetworkResource",
        "private-networks:StartNetworkResourceUpdate",
        "private-networks:TagResource",
        "private-networks:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/private-networks:network-resource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/private-networks:network-resource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "private-networks:CreateNetwork",
         "private-networks:CreateNetworkSite",
         "private-networks:DeleteNetwork",
         "private-networks:GetNetwork",
         "private-networks:ListDeviceIdentifiers",
         "private-networks:ListNetworkResources",
         "private-networks:ListNetworkSites",
         "private-networks:ListOrders",
         "private-networks:TagResource",
         "private-networks:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "private-networks:CreateNetwork",
        "private-networks:CreateNetworkSite",
        "private-networks:DeleteNetwork",
        "private-networks:GetNetwork",
        "private-networks:ListDeviceIdentifiers",
        "private-networks:ListNetworkResources",
        "private-networks:ListNetworkSites",
        "private-networks:ListOrders",
        "private-networks:TagResource",
        "private-networks:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/private-networks:network"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/private-networks:network"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "profile:AddProfileKey",
         "profile:BatchGetCalculatedAttributeForProfile",
         "profile:BatchGetProfile",
         "profile:CreateCalculatedAttributeDefinition",
         "profile:CreateDomain",
         "profile:CreateEventStream",
         "profile:CreateEventTrigger",
         "profile:CreateIntegrationWorkflow",
         "profile:CreateProfile",
         "profile:CreateSegmentDefinition",
         "profile:CreateSegmentEstimate",
         "profile:CreateSegmentSnapshot",
         "profile:CreateSnapshot",
         "profile:DeleteCalculatedAttributeDefinition",
         "profile:DeleteDomain",
         "profile:DeleteEventStream",
         "profile:DeleteEventTrigger",
         "profile:DeleteIntegration",
         "profile:DeleteProfile",
         "profile:DeleteProfileKey",
         "profile:DeleteProfileObject",
         "profile:DeleteProfileObjectType",
         "profile:DeleteSegmentDefinition",
         "profile:DeleteWorkflow",
         "profile:DetectProfileObjectType",
         "profile:GetAutoMergingPreview",
         "profile:GetCalculatedAttributeDefinition",
         "profile:GetCalculatedAttributeForProfile",
         "profile:GetDomain",
         "profile:GetEventStream",
         "profile:GetEventTrigger",
         "profile:GetIdentityResolutionJob",
         "profile:GetIntegration",
         "profile:GetMatches",
         "profile:GetProfileObjectType",
         "profile:GetSegmentDefinition",
         "profile:GetSegmentEstimate",
         "profile:GetSegmentMembership",
         "profile:GetSegmentSnapshot",
         "profile:GetSimilarProfiles",
         "profile:GetSnapshot",
         "profile:GetWorkflow",
         "profile:GetWorkflowSteps",
         "profile:ListCalculatedAttributeDefinitions",
         "profile:ListCalculatedAttributesForProfile",
         "profile:ListEventStreams",
         "profile:ListEventTriggers",
         "profile:ListIdentityResolutionJobs",
         "profile:ListIntegrations",
         "profile:ListObjectTypeAttributes",
         "profile:ListProfileAttributeValues",
         "profile:ListProfileObjectTypes",
         "profile:ListProfileObjects",
         "profile:ListRuleBasedMatches",
         "profile:ListSegmentDefinitions",
         "profile:ListTagsForResource",
         "profile:ListWorkflows",
         "profile:MergeProfiles",
         "profile:PutIntegration",
         "profile:PutProfileObject",
         "profile:PutProfileObjectType",
         "profile:SearchProfiles",
         "profile:TagResource",
         "profile:UntagResource",
         "profile:UpdateCalculatedAttributeDefinition",
         "profile:UpdateDomain",
         "profile:UpdateEventTrigger",
         "profile:UpdateProfile"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "profile:AddProfileKey",
        "profile:BatchGetCalculatedAttributeForProfile",
        "profile:BatchGetProfile",
        "profile:CreateCalculatedAttributeDefinition",
        "profile:CreateDomain",
        "profile:CreateEventStream",
        "profile:CreateEventTrigger",
        "profile:CreateIntegrationWorkflow",
        "profile:CreateProfile",
        "profile:CreateSegmentDefinition",
        "profile:CreateSegmentEstimate",
        "profile:CreateSegmentSnapshot",
        "profile:CreateSnapshot",
        "profile:DeleteCalculatedAttributeDefinition",
        "profile:DeleteDomain",
        "profile:DeleteEventStream",
        "profile:DeleteEventTrigger",
        "profile:DeleteIntegration",
        "profile:DeleteProfile",
        "profile:DeleteProfileKey",
        "profile:DeleteProfileObject",
        "profile:DeleteProfileObjectType",
        "profile:DeleteSegmentDefinition",
        "profile:DeleteWorkflow",
        "profile:DetectProfileObjectType",
        "profile:GetAutoMergingPreview",
        "profile:GetCalculatedAttributeDefinition",
        "profile:GetCalculatedAttributeForProfile",
        "profile:GetDomain",
        "profile:GetEventStream",
        "profile:GetEventTrigger",
        "profile:GetIdentityResolutionJob",
        "profile:GetIntegration",
        "profile:GetMatches",
        "profile:GetProfileObjectType",
        "profile:GetSegmentDefinition",
        "profile:GetSegmentEstimate",
        "profile:GetSegmentMembership",
        "profile:GetSegmentSnapshot",
        "profile:GetSimilarProfiles",
        "profile:GetSnapshot",
        "profile:GetWorkflow",
        "profile:GetWorkflowSteps",
        "profile:ListCalculatedAttributeDefinitions",
        "profile:ListCalculatedAttributesForProfile",
        "profile:ListEventStreams",
        "profile:ListEventTriggers",
        "profile:ListIdentityResolutionJobs",
        "profile:ListIntegrations",
        "profile:ListObjectTypeAttributes",
        "profile:ListProfileAttributeValues",
        "profile:ListProfileObjectTypes",
        "profile:ListProfileObjects",
        "profile:ListRuleBasedMatches",
        "profile:ListSegmentDefinitions",
        "profile:ListTagsForResource",
        "profile:ListWorkflows",
        "profile:MergeProfiles",
        "profile:PutIntegration",
        "profile:PutProfileObject",
        "profile:PutProfileObjectType",
        "profile:SearchProfiles",
        "profile:TagResource",
        "profile:UntagResource",
        "profile:UpdateCalculatedAttributeDefinition",
        "profile:UpdateDomain",
        "profile:UpdateEventTrigger",
        "profile:UpdateProfile"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/profile:domains"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/profile:domains"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "profile:BatchGetCalculatedAttributeForProfile",
         "profile:CreateCalculatedAttributeDefinition",
         "profile:DeleteCalculatedAttributeDefinition",
         "profile:GetCalculatedAttributeDefinition",
         "profile:GetCalculatedAttributeForProfile",
         "profile:ListTagsForResource",
         "profile:TagResource",
         "profile:UntagResource",
         "profile:UpdateCalculatedAttributeDefinition"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "profile:BatchGetCalculatedAttributeForProfile",
        "profile:CreateCalculatedAttributeDefinition",
        "profile:DeleteCalculatedAttributeDefinition",
        "profile:GetCalculatedAttributeDefinition",
        "profile:GetCalculatedAttributeForProfile",
        "profile:ListTagsForResource",
        "profile:TagResource",
        "profile:UntagResource",
        "profile:UpdateCalculatedAttributeDefinition"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/profile:calculated-attributes"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/profile:calculated-attributes"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "profile:CreateEventStream",
         "profile:DeleteEventStream",
         "profile:GetEventStream",
         "profile:ListTagsForResource",
         "profile:TagResource",
         "profile:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "profile:CreateEventStream",
        "profile:DeleteEventStream",
        "profile:GetEventStream",
        "profile:ListTagsForResource",
        "profile:TagResource",
        "profile:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/profile:event-streams"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/profile:event-streams"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "profile:CreateEventTrigger",
         "profile:DeleteEventTrigger",
         "profile:GetEventTrigger",
         "profile:UpdateEventTrigger"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "profile:CreateEventTrigger",
        "profile:DeleteEventTrigger",
        "profile:GetEventTrigger",
        "profile:UpdateEventTrigger"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/profile:event-triggers"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/profile:event-triggers"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "profile:CreateIntegrationWorkflow",
         "profile:DeleteIntegration",
         "profile:GetIntegration",
         "profile:ListTagsForResource",
         "profile:PutIntegration",
         "profile:TagResource",
         "profile:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "profile:CreateIntegrationWorkflow",
        "profile:DeleteIntegration",
        "profile:GetIntegration",
        "profile:ListTagsForResource",
        "profile:PutIntegration",
        "profile:TagResource",
        "profile:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/profile:integrations"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/profile:integrations"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "profile:CreateSegmentDefinition",
         "profile:CreateSegmentSnapshot",
         "profile:DeleteSegmentDefinition",
         "profile:GetSegmentDefinition",
         "profile:GetSegmentMembership",
         "profile:GetSegmentSnapshot"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "profile:CreateSegmentDefinition",
        "profile:CreateSegmentSnapshot",
        "profile:DeleteSegmentDefinition",
        "profile:GetSegmentDefinition",
        "profile:GetSegmentMembership",
        "profile:GetSegmentSnapshot"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/profile:segment-definitions"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/profile:segment-definitions"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "profile:DeleteProfileObject",
         "profile:DeleteProfileObjectType",
         "profile:GetProfileObjectType",
         "profile:ListObjectTypeAttributes",
         "profile:ListProfileObjects",
         "profile:ListTagsForResource",
         "profile:PutProfileObject",
         "profile:PutProfileObjectType",
         "profile:TagResource",
         "profile:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "profile:DeleteProfileObject",
        "profile:DeleteProfileObjectType",
        "profile:GetProfileObjectType",
        "profile:ListObjectTypeAttributes",
        "profile:ListProfileObjects",
        "profile:ListTagsForResource",
        "profile:PutProfileObject",
        "profile:PutProfileObjectType",
        "profile:TagResource",
        "profile:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/profile:object-types"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/profile:object-types"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "proton:AcceptEnvironmentAccountConnection",
         "proton:DeleteEnvironmentAccountConnection",
         "proton:GetEnvironmentAccountConnection",
         "proton:ListTagsForResource",
         "proton:RejectEnvironmentAccountConnection",
         "proton:TagResource",
         "proton:UntagResource",
         "proton:UpdateEnvironmentAccountConnection"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "proton:AcceptEnvironmentAccountConnection",
        "proton:DeleteEnvironmentAccountConnection",
        "proton:GetEnvironmentAccountConnection",
        "proton:ListTagsForResource",
        "proton:RejectEnvironmentAccountConnection",
        "proton:TagResource",
        "proton:UntagResource",
        "proton:UpdateEnvironmentAccountConnection"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/proton:environment-account-connection"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/proton:environment-account-connection"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "proton:CancelComponentDeployment",
         "proton:CreateComponent",
         "proton:DeleteComponent",
         "proton:GetComponent",
         "proton:ListComponentOutputs",
         "proton:ListComponentProvisionedResources",
         "proton:ListTagsForResource",
         "proton:TagResource",
         "proton:UntagResource",
         "proton:UpdateComponent"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "proton:CancelComponentDeployment",
        "proton:CreateComponent",
        "proton:DeleteComponent",
        "proton:GetComponent",
        "proton:ListComponentOutputs",
        "proton:ListComponentProvisionedResources",
        "proton:ListTagsForResource",
        "proton:TagResource",
        "proton:UntagResource",
        "proton:UpdateComponent"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/proton:component"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/proton:component"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "proton:CancelEnvironmentDeployment",
         "proton:CreateEnvironment",
         "proton:DeleteEnvironment",
         "proton:GetEnvironment",
         "proton:ListComponents",
         "proton:ListEnvironmentOutputs",
         "proton:ListEnvironmentProvisionedResources",
         "proton:ListTagsForResource",
         "proton:NotifyResourceDeploymentStatusChange",
         "proton:TagResource",
         "proton:UntagResource",
         "proton:UpdateEnvironment"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "proton:CancelEnvironmentDeployment",
        "proton:CreateEnvironment",
        "proton:DeleteEnvironment",
        "proton:GetEnvironment",
        "proton:ListComponents",
        "proton:ListEnvironmentOutputs",
        "proton:ListEnvironmentProvisionedResources",
        "proton:ListTagsForResource",
        "proton:NotifyResourceDeploymentStatusChange",
        "proton:TagResource",
        "proton:UntagResource",
        "proton:UpdateEnvironment"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/proton:environment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/proton:environment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "proton:CancelServiceInstanceDeployment",
         "proton:CreateServiceInstance",
         "proton:GetServiceInstance",
         "proton:ListComponents",
         "proton:ListServiceInstanceOutputs",
         "proton:ListServiceInstanceProvisionedResources",
         "proton:ListTagsForResource",
         "proton:NotifyResourceDeploymentStatusChange",
         "proton:TagResource",
         "proton:UntagResource",
         "proton:UpdateServiceInstance"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "proton:CancelServiceInstanceDeployment",
        "proton:CreateServiceInstance",
        "proton:GetServiceInstance",
        "proton:ListComponents",
        "proton:ListServiceInstanceOutputs",
        "proton:ListServiceInstanceProvisionedResources",
        "proton:ListTagsForResource",
        "proton:NotifyResourceDeploymentStatusChange",
        "proton:TagResource",
        "proton:UntagResource",
        "proton:UpdateServiceInstance"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/proton:service-instance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/proton:service-instance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "proton:CancelServicePipelineDeployment",
         "proton:CreateService",
         "proton:DeleteService",
         "proton:GetService",
         "proton:ListComponents",
         "proton:ListServiceInstanceOutputs",
         "proton:ListServiceInstanceProvisionedResources",
         "proton:ListServicePipelineOutputs",
         "proton:ListServicePipelineProvisionedResources",
         "proton:ListTagsForResource",
         "proton:TagResource",
         "proton:UntagResource",
         "proton:UpdateService",
         "proton:UpdateServicePipeline"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "proton:CancelServicePipelineDeployment",
        "proton:CreateService",
        "proton:DeleteService",
        "proton:GetService",
        "proton:ListComponents",
        "proton:ListServiceInstanceOutputs",
        "proton:ListServiceInstanceProvisionedResources",
        "proton:ListServicePipelineOutputs",
        "proton:ListServicePipelineProvisionedResources",
        "proton:ListTagsForResource",
        "proton:TagResource",
        "proton:UntagResource",
        "proton:UpdateService",
        "proton:UpdateServicePipeline"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/proton:service"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/proton:service"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "proton:CreateEnvironmentTemplate",
         "proton:CreateEnvironmentTemplateMajorVersion",
         "proton:CreateEnvironmentTemplateMinorVersion",
         "proton:CreateEnvironmentTemplateVersion",
         "proton:DeleteEnvironmentTemplate",
         "proton:DeleteEnvironmentTemplateMajorVersion",
         "proton:DeleteEnvironmentTemplateMinorVersion",
         "proton:DeleteEnvironmentTemplateVersion",
         "proton:GetEnvironmentTemplate",
         "proton:GetEnvironmentTemplateMajorVersion",
         "proton:GetEnvironmentTemplateMinorVersion",
         "proton:GetEnvironmentTemplateVersion",
         "proton:ListEnvironmentTemplateMajorVersions",
         "proton:ListEnvironmentTemplateMinorVersions",
         "proton:ListEnvironmentTemplateVersions",
         "proton:ListTagsForResource",
         "proton:TagResource",
         "proton:UntagResource",
         "proton:UpdateEnvironmentTemplate",
         "proton:UpdateEnvironmentTemplateMajorVersion",
         "proton:UpdateEnvironmentTemplateMinorVersion",
         "proton:UpdateEnvironmentTemplateVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "proton:CreateEnvironmentTemplate",
        "proton:CreateEnvironmentTemplateMajorVersion",
        "proton:CreateEnvironmentTemplateMinorVersion",
        "proton:CreateEnvironmentTemplateVersion",
        "proton:DeleteEnvironmentTemplate",
        "proton:DeleteEnvironmentTemplateMajorVersion",
        "proton:DeleteEnvironmentTemplateMinorVersion",
        "proton:DeleteEnvironmentTemplateVersion",
        "proton:GetEnvironmentTemplate",
        "proton:GetEnvironmentTemplateMajorVersion",
        "proton:GetEnvironmentTemplateMinorVersion",
        "proton:GetEnvironmentTemplateVersion",
        "proton:ListEnvironmentTemplateMajorVersions",
        "proton:ListEnvironmentTemplateMinorVersions",
        "proton:ListEnvironmentTemplateVersions",
        "proton:ListTagsForResource",
        "proton:TagResource",
        "proton:UntagResource",
        "proton:UpdateEnvironmentTemplate",
        "proton:UpdateEnvironmentTemplateMajorVersion",
        "proton:UpdateEnvironmentTemplateMinorVersion",
        "proton:UpdateEnvironmentTemplateVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/proton:environment-template"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/proton:environment-template"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "proton:CreateRepository",
         "proton:DeleteRepository",
         "proton:GetRepository",
         "proton:ListTagsForResource",
         "proton:TagResource",
         "proton:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "proton:CreateRepository",
        "proton:DeleteRepository",
        "proton:GetRepository",
        "proton:ListTagsForResource",
        "proton:TagResource",
        "proton:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/proton:repository"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/proton:repository"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "proton:CreateServiceTemplate",
         "proton:CreateServiceTemplateMajorVersion",
         "proton:CreateServiceTemplateMinorVersion",
         "proton:CreateServiceTemplateVersion",
         "proton:DeleteServiceTemplate",
         "proton:DeleteServiceTemplateMajorVersion",
         "proton:DeleteServiceTemplateMinorVersion",
         "proton:DeleteServiceTemplateVersion",
         "proton:GetServiceTemplate",
         "proton:GetServiceTemplateMajorVersion",
         "proton:GetServiceTemplateMinorVersion",
         "proton:GetServiceTemplateVersion",
         "proton:ListServiceTemplateMajorVersions",
         "proton:ListServiceTemplateMinorVersions",
         "proton:ListServiceTemplateVersions",
         "proton:ListTagsForResource",
         "proton:TagResource",
         "proton:UntagResource",
         "proton:UpdateServiceTemplate",
         "proton:UpdateServiceTemplateMajorVersion",
         "proton:UpdateServiceTemplateMinorVersion",
         "proton:UpdateServiceTemplateVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "proton:CreateServiceTemplate",
        "proton:CreateServiceTemplateMajorVersion",
        "proton:CreateServiceTemplateMinorVersion",
        "proton:CreateServiceTemplateVersion",
        "proton:DeleteServiceTemplate",
        "proton:DeleteServiceTemplateMajorVersion",
        "proton:DeleteServiceTemplateMinorVersion",
        "proton:DeleteServiceTemplateVersion",
        "proton:GetServiceTemplate",
        "proton:GetServiceTemplateMajorVersion",
        "proton:GetServiceTemplateMinorVersion",
        "proton:GetServiceTemplateVersion",
        "proton:ListServiceTemplateMajorVersions",
        "proton:ListServiceTemplateMinorVersions",
        "proton:ListServiceTemplateVersions",
        "proton:ListTagsForResource",
        "proton:TagResource",
        "proton:UntagResource",
        "proton:UpdateServiceTemplate",
        "proton:UpdateServiceTemplateMajorVersion",
        "proton:UpdateServiceTemplateMinorVersion",
        "proton:UpdateServiceTemplateVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/proton:service-template"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/proton:service-template"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "proton:DeleteDeployment",
         "proton:GetDeployment",
         "proton:ListComponentOutputs",
         "proton:ListEnvironmentOutputs",
         "proton:ListServiceInstanceOutputs",
         "proton:ListServicePipelineOutputs"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "proton:DeleteDeployment",
        "proton:GetDeployment",
        "proton:ListComponentOutputs",
        "proton:ListEnvironmentOutputs",
        "proton:ListServiceInstanceOutputs",
        "proton:ListServicePipelineOutputs"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/proton:deployment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/proton:deployment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "proton:ListTagsForResource",
         "proton:TagResource",
         "proton:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "proton:ListTagsForResource",
        "proton:TagResource",
        "proton:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/proton:environment-template-major-version"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/proton:environment-template-major-version"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "proton:ListTagsForResource",
         "proton:TagResource",
         "proton:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "proton:ListTagsForResource",
        "proton:TagResource",
        "proton:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/proton:environment-template-minor-version"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/proton:environment-template-minor-version"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "proton:ListTagsForResource",
         "proton:TagResource",
         "proton:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "proton:ListTagsForResource",
        "proton:TagResource",
        "proton:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/proton:environment-template-version"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/proton:environment-template-version"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "proton:ListTagsForResource",
         "proton:TagResource",
         "proton:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "proton:ListTagsForResource",
        "proton:TagResource",
        "proton:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/proton:service-template-major-version"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/proton:service-template-major-version"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "proton:ListTagsForResource",
         "proton:TagResource",
         "proton:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "proton:ListTagsForResource",
        "proton:TagResource",
        "proton:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/proton:service-template-minor-version"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/proton:service-template-minor-version"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "proton:ListTagsForResource",
         "proton:TagResource",
         "proton:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "proton:ListTagsForResource",
        "proton:TagResource",
        "proton:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/proton:service-template-version"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/proton:service-template-version"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "purchase-orders:AddPurchaseOrder",
         "purchase-orders:DeletePurchaseOrder",
         "purchase-orders:GetPurchaseOrder",
         "purchase-orders:ListPurchaseOrderInvoices",
         "purchase-orders:ListTagsForResource",
         "purchase-orders:ModifyPurchaseOrders",
         "purchase-orders:TagResource",
         "purchase-orders:UntagResource",
         "purchase-orders:UpdatePurchaseOrder",
         "purchase-orders:UpdatePurchaseOrderStatus",
         "purchase-orders:ViewPurchaseOrders"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "purchase-orders:AddPurchaseOrder",
        "purchase-orders:DeletePurchaseOrder",
        "purchase-orders:GetPurchaseOrder",
        "purchase-orders:ListPurchaseOrderInvoices",
        "purchase-orders:ListTagsForResource",
        "purchase-orders:ModifyPurchaseOrders",
        "purchase-orders:TagResource",
        "purchase-orders:UntagResource",
        "purchase-orders:UpdatePurchaseOrder",
        "purchase-orders:UpdatePurchaseOrderStatus",
        "purchase-orders:ViewPurchaseOrders"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/purchase-orders:purchase-order"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/purchase-orders:purchase-order"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "q:CreateAssignment",
         "q:DeleteAssignment"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "q:CreateAssignment",
        "q:DeleteAssignment"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/q:profile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/q:profile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "q:CreatePlugin",
         "q:DeletePlugin",
         "q:GetPlugin",
         "q:ListPlugins",
         "q:ListTagsForResource",
         "q:TagResource",
         "q:UntagResource",
         "q:UsePlugin"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "q:CreatePlugin",
        "q:DeletePlugin",
        "q:GetPlugin",
        "q:ListPlugins",
        "q:ListTagsForResource",
        "q:TagResource",
        "q:UntagResource",
        "q:UsePlugin"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/q:plugin"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/q:plugin"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "qapps:AssociateLibraryItemReview",
         "qapps:AssociateQAppWithUser",
         "qapps:CopyQApp",
         "qapps:CreateLibraryItem",
         "qapps:CreateLibraryItemReview",
         "qapps:CreatePresignedUrl",
         "qapps:DeleteLibraryItem",
         "qapps:DeleteQApp",
         "qapps:DescribeQAppPermissions",
         "qapps:DisassociateLibraryItemReview",
         "qapps:DisassociateQAppFromUser",
         "qapps:GetLibraryItem",
         "qapps:GetQApp",
         "qapps:ImportDocument",
         "qapps:ImportDocumentToQApp",
         "qapps:ListTagsForResource",
         "qapps:StartQAppSession",
         "qapps:TagResource",
         "qapps:UntagResource",
         "qapps:UpdateLibraryItem",
         "qapps:UpdateLibraryItemMetadata",
         "qapps:UpdateQApp",
         "qapps:UpdateQAppPermissions"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "qapps:AssociateLibraryItemReview",
        "qapps:AssociateQAppWithUser",
        "qapps:CopyQApp",
        "qapps:CreateLibraryItem",
        "qapps:CreateLibraryItemReview",
        "qapps:CreatePresignedUrl",
        "qapps:DeleteLibraryItem",
        "qapps:DeleteQApp",
        "qapps:DescribeQAppPermissions",
        "qapps:DisassociateLibraryItemReview",
        "qapps:DisassociateQAppFromUser",
        "qapps:GetLibraryItem",
        "qapps:GetQApp",
        "qapps:ImportDocument",
        "qapps:ImportDocumentToQApp",
        "qapps:ListTagsForResource",
        "qapps:StartQAppSession",
        "qapps:TagResource",
        "qapps:UntagResource",
        "qapps:UpdateLibraryItem",
        "qapps:UpdateLibraryItemMetadata",
        "qapps:UpdateQApp",
        "qapps:UpdateQAppPermissions"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/qapps:qapp"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/qapps:qapp"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "qapps:AssociateQAppWithUser",
         "qapps:BatchCreateCategory",
         "qapps:BatchDeleteCategory",
         "qapps:BatchUpdateCategory",
         "qapps:CopyQApp",
         "qapps:CreateLibraryItem",
         "qapps:CreateLibraryItemReview",
         "qapps:CreateQApp",
         "qapps:CreateSubscriptionToken",
         "qapps:DeleteLibraryItem",
         "qapps:DeleteQApp",
         "qapps:DescribeQAppPermissions",
         "qapps:DisassociateQAppFromUser",
         "qapps:GetLibraryItem",
         "qapps:GetQApp",
         "qapps:ImportDocumentToQApp",
         "qapps:ImportDocumentToQAppSession",
         "qapps:ListCategories",
         "qapps:ListLibraryItems",
         "qapps:ListQApps",
         "qapps:PredictProblemStatementFromConversation",
         "qapps:PredictQApp",
         "qapps:PredictQAppFromProblemStatement",
         "qapps:StartQAppSession",
         "qapps:StopQAppSession",
         "qapps:UpdateLibraryItem",
         "qapps:UpdateQApp",
         "qapps:UpdateQAppPermissions"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "qapps:AssociateQAppWithUser",
        "qapps:BatchCreateCategory",
        "qapps:BatchDeleteCategory",
        "qapps:BatchUpdateCategory",
        "qapps:CopyQApp",
        "qapps:CreateLibraryItem",
        "qapps:CreateLibraryItemReview",
        "qapps:CreateQApp",
        "qapps:CreateSubscriptionToken",
        "qapps:DeleteLibraryItem",
        "qapps:DeleteQApp",
        "qapps:DescribeQAppPermissions",
        "qapps:DisassociateQAppFromUser",
        "qapps:GetLibraryItem",
        "qapps:GetQApp",
        "qapps:ImportDocumentToQApp",
        "qapps:ImportDocumentToQAppSession",
        "qapps:ListCategories",
        "qapps:ListLibraryItems",
        "qapps:ListQApps",
        "qapps:PredictProblemStatementFromConversation",
        "qapps:PredictQApp",
        "qapps:PredictQAppFromProblemStatement",
        "qapps:StartQAppSession",
        "qapps:StopQAppSession",
        "qapps:UpdateLibraryItem",
        "qapps:UpdateQApp",
        "qapps:UpdateQAppPermissions"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/qapps:application"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/qapps:application"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "qapps:CreatePresignedUrl",
         "qapps:ExportQAppSessionData",
         "qapps:GetQAppSession",
         "qapps:GetQAppSessionMetadata",
         "qapps:ImportDocument",
         "qapps:ImportDocumentToQAppSession",
         "qapps:ListQAppSessionData",
         "qapps:ListTagsForResource",
         "qapps:StopQAppSession",
         "qapps:TagResource",
         "qapps:UntagResource",
         "qapps:UpdateQAppSession",
         "qapps:UpdateQAppSessionMetadata"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "qapps:CreatePresignedUrl",
        "qapps:ExportQAppSessionData",
        "qapps:GetQAppSession",
        "qapps:GetQAppSessionMetadata",
        "qapps:ImportDocument",
        "qapps:ImportDocumentToQAppSession",
        "qapps:ListQAppSessionData",
        "qapps:ListTagsForResource",
        "qapps:StopQAppSession",
        "qapps:TagResource",
        "qapps:UntagResource",
        "qapps:UpdateQAppSession",
        "qapps:UpdateQAppSessionMetadata"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/qapps:qapp-session"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/qapps:qapp-session"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "qbusiness:AllowVendedLogDeliveryForResource",
         "qbusiness:AssociatePermission",
         "qbusiness:BatchDeleteDocument",
         "qbusiness:BatchPutDocument",
         "qbusiness:CancelSubscription",
         "qbusiness:Chat",
         "qbusiness:ChatSync",
         "qbusiness:CreateDataAccessor",
         "qbusiness:CreateDataSource",
         "qbusiness:CreateIndex",
         "qbusiness:CreateIntegration",
         "qbusiness:CreatePlugin",
         "qbusiness:CreateRetriever",
         "qbusiness:CreateSubscription",
         "qbusiness:CreateUser",
         "qbusiness:CreateWebExperience",
         "qbusiness:DeleteApplication",
         "qbusiness:DeleteAttachment",
         "qbusiness:DeleteChatControlsConfiguration",
         "qbusiness:DeleteConversation",
         "qbusiness:DeleteDataAccessor",
         "qbusiness:DeleteDataSource",
         "qbusiness:DeleteGroup",
         "qbusiness:DeleteIndex",
         "qbusiness:DeleteIntegration",
         "qbusiness:DeletePlugin",
         "qbusiness:DeleteRetriever",
         "qbusiness:DeleteUser",
         "qbusiness:DeleteWebExperience",
         "qbusiness:DisableAclOnDataSource",
         "qbusiness:DisassociatePermission",
         "qbusiness:GetApplication",
         "qbusiness:GetChatControlsConfiguration",
         "qbusiness:GetDataAccessor",
         "qbusiness:GetDataSource",
         "qbusiness:GetGroup",
         "qbusiness:GetIndex",
         "qbusiness:GetIntegration",
         "qbusiness:GetMedia",
         "qbusiness:GetPlugin",
         "qbusiness:GetPolicy",
         "qbusiness:GetRetriever",
         "qbusiness:GetUser",
         "qbusiness:GetWebExperience",
         "qbusiness:ListAttachments",
         "qbusiness:ListConversations",
         "qbusiness:ListDataAccessors",
         "qbusiness:ListDataSourceSyncJobs",
         "qbusiness:ListDataSources",
         "qbusiness:ListDocuments",
         "qbusiness:ListGroups",
         "qbusiness:ListIndices",
         "qbusiness:ListIntegrations",
         "qbusiness:ListMessages",
         "qbusiness:ListPluginActions",
         "qbusiness:ListPlugins",
         "qbusiness:ListRetrievers",
         "qbusiness:ListSubscriptions",
         "qbusiness:ListTagsForResource",
         "qbusiness:ListWebExperiences",
         "qbusiness:PutFeedback",
         "qbusiness:PutGroup",
         "qbusiness:PutResourcePolicy",
         "qbusiness:SearchRelevantContent",
         "qbusiness:StartDataSourceSyncJob",
         "qbusiness:StartDeployment",
         "qbusiness:StopDataSourceSyncJob",
         "qbusiness:TagResource",
         "qbusiness:UntagResource",
         "qbusiness:UpdateApplication",
         "qbusiness:UpdateChatControlsConfiguration",
         "qbusiness:UpdateDataAccessor",
         "qbusiness:UpdateDataSource",
         "qbusiness:UpdateIndex",
         "qbusiness:UpdateIntegration",
         "qbusiness:UpdatePlugin",
         "qbusiness:UpdateRetriever",
         "qbusiness:UpdateSubscription",
         "qbusiness:UpdateUser",
         "qbusiness:UpdateWebExperience"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "qbusiness:AllowVendedLogDeliveryForResource",
        "qbusiness:AssociatePermission",
        "qbusiness:BatchDeleteDocument",
        "qbusiness:BatchPutDocument",
        "qbusiness:CancelSubscription",
        "qbusiness:Chat",
        "qbusiness:ChatSync",
        "qbusiness:CreateDataAccessor",
        "qbusiness:CreateDataSource",
        "qbusiness:CreateIndex",
        "qbusiness:CreateIntegration",
        "qbusiness:CreatePlugin",
        "qbusiness:CreateRetriever",
        "qbusiness:CreateSubscription",
        "qbusiness:CreateUser",
        "qbusiness:CreateWebExperience",
        "qbusiness:DeleteApplication",
        "qbusiness:DeleteAttachment",
        "qbusiness:DeleteChatControlsConfiguration",
        "qbusiness:DeleteConversation",
        "qbusiness:DeleteDataAccessor",
        "qbusiness:DeleteDataSource",
        "qbusiness:DeleteGroup",
        "qbusiness:DeleteIndex",
        "qbusiness:DeleteIntegration",
        "qbusiness:DeletePlugin",
        "qbusiness:DeleteRetriever",
        "qbusiness:DeleteUser",
        "qbusiness:DeleteWebExperience",
        "qbusiness:DisableAclOnDataSource",
        "qbusiness:DisassociatePermission",
        "qbusiness:GetApplication",
        "qbusiness:GetChatControlsConfiguration",
        "qbusiness:GetDataAccessor",
        "qbusiness:GetDataSource",
        "qbusiness:GetGroup",
        "qbusiness:GetIndex",
        "qbusiness:GetIntegration",
        "qbusiness:GetMedia",
        "qbusiness:GetPlugin",
        "qbusiness:GetPolicy",
        "qbusiness:GetRetriever",
        "qbusiness:GetUser",
        "qbusiness:GetWebExperience",
        "qbusiness:ListAttachments",
        "qbusiness:ListConversations",
        "qbusiness:ListDataAccessors",
        "qbusiness:ListDataSourceSyncJobs",
        "qbusiness:ListDataSources",
        "qbusiness:ListDocuments",
        "qbusiness:ListGroups",
        "qbusiness:ListIndices",
        "qbusiness:ListIntegrations",
        "qbusiness:ListMessages",
        "qbusiness:ListPluginActions",
        "qbusiness:ListPlugins",
        "qbusiness:ListRetrievers",
        "qbusiness:ListSubscriptions",
        "qbusiness:ListTagsForResource",
        "qbusiness:ListWebExperiences",
        "qbusiness:PutFeedback",
        "qbusiness:PutGroup",
        "qbusiness:PutResourcePolicy",
        "qbusiness:SearchRelevantContent",
        "qbusiness:StartDataSourceSyncJob",
        "qbusiness:StartDeployment",
        "qbusiness:StopDataSourceSyncJob",
        "qbusiness:TagResource",
        "qbusiness:UntagResource",
        "qbusiness:UpdateApplication",
        "qbusiness:UpdateChatControlsConfiguration",
        "qbusiness:UpdateDataAccessor",
        "qbusiness:UpdateDataSource",
        "qbusiness:UpdateIndex",
        "qbusiness:UpdateIntegration",
        "qbusiness:UpdatePlugin",
        "qbusiness:UpdateRetriever",
        "qbusiness:UpdateSubscription",
        "qbusiness:UpdateUser",
        "qbusiness:UpdateWebExperience"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/qbusiness:application"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/qbusiness:application"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "qbusiness:BatchDeleteDocument",
         "qbusiness:BatchPutDocument",
         "qbusiness:CreateDataSource",
         "qbusiness:DeleteDataSource",
         "qbusiness:DeleteGroup",
         "qbusiness:DeleteIndex",
         "qbusiness:GetDataSource",
         "qbusiness:GetGroup",
         "qbusiness:GetIndex",
         "qbusiness:ListDataSourceSyncJobs",
         "qbusiness:ListDataSources",
         "qbusiness:ListDocuments",
         "qbusiness:ListGroups",
         "qbusiness:ListTagsForResource",
         "qbusiness:PutGroup",
         "qbusiness:StartDataSourceSyncJob",
         "qbusiness:StopDataSourceSyncJob",
         "qbusiness:TagResource",
         "qbusiness:UntagResource",
         "qbusiness:UpdateDataSource",
         "qbusiness:UpdateIndex"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "qbusiness:BatchDeleteDocument",
        "qbusiness:BatchPutDocument",
        "qbusiness:CreateDataSource",
        "qbusiness:DeleteDataSource",
        "qbusiness:DeleteGroup",
        "qbusiness:DeleteIndex",
        "qbusiness:GetDataSource",
        "qbusiness:GetGroup",
        "qbusiness:GetIndex",
        "qbusiness:ListDataSourceSyncJobs",
        "qbusiness:ListDataSources",
        "qbusiness:ListDocuments",
        "qbusiness:ListGroups",
        "qbusiness:ListTagsForResource",
        "qbusiness:PutGroup",
        "qbusiness:StartDataSourceSyncJob",
        "qbusiness:StopDataSourceSyncJob",
        "qbusiness:TagResource",
        "qbusiness:UntagResource",
        "qbusiness:UpdateDataSource",
        "qbusiness:UpdateIndex"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/qbusiness:index"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/qbusiness:index"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "qbusiness:CancelSubscription",
         "qbusiness:UpdateSubscription"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "qbusiness:CancelSubscription",
        "qbusiness:UpdateSubscription"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/qbusiness:subscription"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/qbusiness:subscription"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "qbusiness:DeleteDataAccessor",
         "qbusiness:GetDataAccessor",
         "qbusiness:ListTagsForResource",
         "qbusiness:TagResource",
         "qbusiness:UntagResource",
         "qbusiness:UpdateDataAccessor"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "qbusiness:DeleteDataAccessor",
        "qbusiness:GetDataAccessor",
        "qbusiness:ListTagsForResource",
        "qbusiness:TagResource",
        "qbusiness:UntagResource",
        "qbusiness:UpdateDataAccessor"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/qbusiness:data-accessor"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/qbusiness:data-accessor"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "qbusiness:DeleteDataSource",
         "qbusiness:GetDataSource",
         "qbusiness:ListDataSourceSyncJobs",
         "qbusiness:ListTagsForResource",
         "qbusiness:StartDataSourceSyncJob",
         "qbusiness:StopDataSourceSyncJob",
         "qbusiness:TagResource",
         "qbusiness:UntagResource",
         "qbusiness:UpdateDataSource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "qbusiness:DeleteDataSource",
        "qbusiness:GetDataSource",
        "qbusiness:ListDataSourceSyncJobs",
        "qbusiness:ListTagsForResource",
        "qbusiness:StartDataSourceSyncJob",
        "qbusiness:StopDataSourceSyncJob",
        "qbusiness:TagResource",
        "qbusiness:UntagResource",
        "qbusiness:UpdateDataSource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/qbusiness:data-source"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/qbusiness:data-source"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "qbusiness:DeleteIntegration",
         "qbusiness:GetIntegration",
         "qbusiness:ListTagsForResource",
         "qbusiness:StartDeployment",
         "qbusiness:TagResource",
         "qbusiness:UntagResource",
         "qbusiness:UpdateIntegration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "qbusiness:DeleteIntegration",
        "qbusiness:GetIntegration",
        "qbusiness:ListTagsForResource",
        "qbusiness:StartDeployment",
        "qbusiness:TagResource",
        "qbusiness:UntagResource",
        "qbusiness:UpdateIntegration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/qbusiness:integration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/qbusiness:integration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "qbusiness:DeletePlugin",
         "qbusiness:GetPlugin",
         "qbusiness:ListPluginActions",
         "qbusiness:ListTagsForResource",
         "qbusiness:TagResource",
         "qbusiness:UntagResource",
         "qbusiness:UpdatePlugin"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "qbusiness:DeletePlugin",
        "qbusiness:GetPlugin",
        "qbusiness:ListPluginActions",
        "qbusiness:ListTagsForResource",
        "qbusiness:TagResource",
        "qbusiness:UntagResource",
        "qbusiness:UpdatePlugin"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/qbusiness:plugin"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/qbusiness:plugin"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "qbusiness:DeleteRetriever",
         "qbusiness:GetRetriever",
         "qbusiness:ListTagsForResource",
         "qbusiness:TagResource",
         "qbusiness:UntagResource",
         "qbusiness:UpdateRetriever"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "qbusiness:DeleteRetriever",
        "qbusiness:GetRetriever",
        "qbusiness:ListTagsForResource",
        "qbusiness:TagResource",
        "qbusiness:UntagResource",
        "qbusiness:UpdateRetriever"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/qbusiness:retriever"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/qbusiness:retriever"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "qbusiness:DeleteWebExperience",
         "qbusiness:GetWebExperience",
         "qbusiness:ListTagsForResource",
         "qbusiness:TagResource",
         "qbusiness:UntagResource",
         "qbusiness:UpdateWebExperience"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "qbusiness:DeleteWebExperience",
        "qbusiness:GetWebExperience",
        "qbusiness:ListTagsForResource",
        "qbusiness:TagResource",
        "qbusiness:UntagResource",
        "qbusiness:UpdateWebExperience"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/qbusiness:web-experience"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/qbusiness:web-experience"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "qbusiness:GetLicense"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "qbusiness:GetLicense"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/qbusiness:user-license"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/qbusiness:user-license"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "qdeveloper:ExportArtifact",
         "qdeveloper:ImportArtifact",
         "qdeveloper:ListTagsForResource",
         "qdeveloper:TagResource",
         "qdeveloper:TransformCode",
         "qdeveloper:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "qdeveloper:ExportArtifact",
        "qdeveloper:ImportArtifact",
        "qdeveloper:ListTagsForResource",
        "qdeveloper:TagResource",
        "qdeveloper:TransformCode",
        "qdeveloper:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/qdeveloper:codeTransformation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/qdeveloper:codeTransformation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "qldb:CancelJournalKinesisStream",
         "qldb:DescribeJournalKinesisStream",
         "qldb:ListJournalKinesisStreamsForLedger",
         "qldb:ListTagsForResource",
         "qldb:StreamJournalToKinesis",
         "qldb:TagResource",
         "qldb:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "qldb:CancelJournalKinesisStream",
        "qldb:DescribeJournalKinesisStream",
        "qldb:ListJournalKinesisStreamsForLedger",
        "qldb:ListTagsForResource",
        "qldb:StreamJournalToKinesis",
        "qldb:TagResource",
        "qldb:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/qldb:stream"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/qldb:stream"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "qldb:CreateLedger",
         "qldb:DeleteLedger",
         "qldb:DescribeJournalS3Export",
         "qldb:DescribeLedger",
         "qldb:ExecuteStatement",
         "qldb:ExportJournalToS3",
         "qldb:GetBlock",
         "qldb:GetDigest",
         "qldb:GetRevision",
         "qldb:InsertSampleData",
         "qldb:ListJournalS3ExportsForLedger",
         "qldb:ListTagsForResource",
         "qldb:SendCommand",
         "qldb:ShowCatalog",
         "qldb:TagResource",
         "qldb:UntagResource",
         "qldb:UpdateLedger",
         "qldb:UpdateLedgerPermissionsMode"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "qldb:CreateLedger",
        "qldb:DeleteLedger",
        "qldb:DescribeJournalS3Export",
        "qldb:DescribeLedger",
        "qldb:ExecuteStatement",
        "qldb:ExportJournalToS3",
        "qldb:GetBlock",
        "qldb:GetDigest",
        "qldb:GetRevision",
        "qldb:InsertSampleData",
        "qldb:ListJournalS3ExportsForLedger",
        "qldb:ListTagsForResource",
        "qldb:SendCommand",
        "qldb:ShowCatalog",
        "qldb:TagResource",
        "qldb:UntagResource",
        "qldb:UpdateLedger",
        "qldb:UpdateLedgerPermissionsMode"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/qldb:ledger"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/qldb:ledger"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "qldb:ListTagsForResource",
         "qldb:PartiQLSelect",
         "qldb:TagResource",
         "qldb:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "qldb:ListTagsForResource",
        "qldb:PartiQLSelect",
        "qldb:TagResource",
        "qldb:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/qldb:catalog"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/qldb:catalog"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "qldb:ListTagsForResource",
         "qldb:PartiQLCreateIndex",
         "qldb:PartiQLCreateTable",
         "qldb:PartiQLDelete",
         "qldb:PartiQLDropIndex",
         "qldb:PartiQLDropTable",
         "qldb:PartiQLHistoryFunction",
         "qldb:PartiQLInsert",
         "qldb:PartiQLRedact",
         "qldb:PartiQLSelect",
         "qldb:PartiQLUndropTable",
         "qldb:PartiQLUpdate",
         "qldb:TagResource",
         "qldb:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "qldb:ListTagsForResource",
        "qldb:PartiQLCreateIndex",
        "qldb:PartiQLCreateTable",
        "qldb:PartiQLDelete",
        "qldb:PartiQLDropIndex",
        "qldb:PartiQLDropTable",
        "qldb:PartiQLHistoryFunction",
        "qldb:PartiQLInsert",
        "qldb:PartiQLRedact",
        "qldb:PartiQLSelect",
        "qldb:PartiQLUndropTable",
        "qldb:PartiQLUpdate",
        "qldb:TagResource",
        "qldb:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/qldb:table"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/qldb:table"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "quicksight:BatchCreateTopicReviewedAnswer",
         "quicksight:BatchDeleteTopicReviewedAnswer",
         "quicksight:CreateTopicRefreshSchedule",
         "quicksight:DeleteTopic",
         "quicksight:DeleteTopicRefreshSchedule",
         "quicksight:DescribeTopic",
         "quicksight:DescribeTopicPermissions",
         "quicksight:DescribeTopicRefresh",
         "quicksight:DescribeTopicRefreshSchedule",
         "quicksight:GenerateEmbedUrlForAnonymousUser",
         "quicksight:ListFoldersForResource",
         "quicksight:ListTagsForResource",
         "quicksight:PredictQAResults",
         "quicksight:SearchTopics",
         "quicksight:TagResource",
         "quicksight:UntagResource",
         "quicksight:UpdateTopic",
         "quicksight:UpdateTopicPermissions",
         "quicksight:UpdateTopicRefreshSchedule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "quicksight:BatchCreateTopicReviewedAnswer",
        "quicksight:BatchDeleteTopicReviewedAnswer",
        "quicksight:CreateTopicRefreshSchedule",
        "quicksight:DeleteTopic",
        "quicksight:DeleteTopicRefreshSchedule",
        "quicksight:DescribeTopic",
        "quicksight:DescribeTopicPermissions",
        "quicksight:DescribeTopicRefresh",
        "quicksight:DescribeTopicRefreshSchedule",
        "quicksight:GenerateEmbedUrlForAnonymousUser",
        "quicksight:ListFoldersForResource",
        "quicksight:ListTagsForResource",
        "quicksight:PredictQAResults",
        "quicksight:SearchTopics",
        "quicksight:TagResource",
        "quicksight:UntagResource",
        "quicksight:UpdateTopic",
        "quicksight:UpdateTopicPermissions",
        "quicksight:UpdateTopicRefreshSchedule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/quicksight:topic"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/quicksight:topic"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "quicksight:CancelIngestion",
         "quicksight:CreateIngestion",
         "quicksight:DescribeIngestion",
         "quicksight:TagResource",
         "quicksight:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "quicksight:CancelIngestion",
        "quicksight:CreateIngestion",
        "quicksight:DescribeIngestion",
        "quicksight:TagResource",
        "quicksight:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/quicksight:ingestion"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/quicksight:ingestion"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "quicksight:CreateAdmin",
         "quicksight:CreateReader",
         "quicksight:CreateUser",
         "quicksight:DeleteUser",
         "quicksight:DeleteUserByPrincipalId",
         "quicksight:DeleteUserCustomPermission",
         "quicksight:DescribeUser",
         "quicksight:GenerateEmbedUrlForRegisteredUser",
         "quicksight:GetAuthCode",
         "quicksight:ListUserGroups",
         "quicksight:ListUsers",
         "quicksight:RegisterUser",
         "quicksight:SearchUsers",
         "quicksight:UpdateUser",
         "quicksight:UpdateUserCustomPermission"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "quicksight:CreateAdmin",
        "quicksight:CreateReader",
        "quicksight:CreateUser",
        "quicksight:DeleteUser",
        "quicksight:DeleteUserByPrincipalId",
        "quicksight:DeleteUserCustomPermission",
        "quicksight:DescribeUser",
        "quicksight:GenerateEmbedUrlForRegisteredUser",
        "quicksight:GetAuthCode",
        "quicksight:ListUserGroups",
        "quicksight:ListUsers",
        "quicksight:RegisterUser",
        "quicksight:SearchUsers",
        "quicksight:UpdateUser",
        "quicksight:UpdateUserCustomPermission"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/quicksight:user"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/quicksight:user"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "quicksight:CreateAnalysis",
         "quicksight:CreateFolderMembership",
         "quicksight:DeleteAnalysis",
         "quicksight:DeleteFolderMembership",
         "quicksight:DescribeAnalysis",
         "quicksight:DescribeAnalysisPermissions",
         "quicksight:ListAnalyses",
         "quicksight:ListFoldersForResource",
         "quicksight:ListTagsForResource",
         "quicksight:RestoreAnalysis",
         "quicksight:SearchAnalyses",
         "quicksight:TagResource",
         "quicksight:UntagResource",
         "quicksight:UpdateAnalysis",
         "quicksight:UpdateAnalysisPermissions"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "quicksight:CreateAnalysis",
        "quicksight:CreateFolderMembership",
        "quicksight:DeleteAnalysis",
        "quicksight:DeleteFolderMembership",
        "quicksight:DescribeAnalysis",
        "quicksight:DescribeAnalysisPermissions",
        "quicksight:ListAnalyses",
        "quicksight:ListFoldersForResource",
        "quicksight:ListTagsForResource",
        "quicksight:RestoreAnalysis",
        "quicksight:SearchAnalyses",
        "quicksight:TagResource",
        "quicksight:UntagResource",
        "quicksight:UpdateAnalysis",
        "quicksight:UpdateAnalysisPermissions"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/quicksight:analysis"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/quicksight:analysis"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "quicksight:CreateBrand",
         "quicksight:DeleteBrand",
         "quicksight:DescribeBrand",
         "quicksight:DescribeBrandPublishedVersion",
         "quicksight:ListTagsForResource",
         "quicksight:TagResource",
         "quicksight:UntagResource",
         "quicksight:UpdateBrand",
         "quicksight:UpdateBrandPublishedVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "quicksight:CreateBrand",
        "quicksight:DeleteBrand",
        "quicksight:DescribeBrand",
        "quicksight:DescribeBrandPublishedVersion",
        "quicksight:ListTagsForResource",
        "quicksight:TagResource",
        "quicksight:UntagResource",
        "quicksight:UpdateBrand",
        "quicksight:UpdateBrandPublishedVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/quicksight:brand"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/quicksight:brand"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "quicksight:CreateCustomPermissions",
         "quicksight:DescribeCustomPermissions",
         "quicksight:ListTagsForResource",
         "quicksight:TagResource",
         "quicksight:UntagResource",
         "quicksight:UpdateCustomPermissions"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "quicksight:CreateCustomPermissions",
        "quicksight:DescribeCustomPermissions",
        "quicksight:ListTagsForResource",
        "quicksight:TagResource",
        "quicksight:UntagResource",
        "quicksight:UpdateCustomPermissions"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/quicksight:custompermissions"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/quicksight:custompermissions"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "quicksight:CreateDashboard",
         "quicksight:CreateFolderMembership",
         "quicksight:DeleteDashboard",
         "quicksight:DeleteFolderMembership",
         "quicksight:DescribeDashboard",
         "quicksight:DescribeDashboardPermissions",
         "quicksight:GenerateEmbedUrlForAnonymousUser",
         "quicksight:GetDashboardEmbedUrl",
         "quicksight:ListDashboardVersions",
         "quicksight:ListDashboards",
         "quicksight:ListFoldersForResource",
         "quicksight:ListTagsForResource",
         "quicksight:PredictQAResults",
         "quicksight:SearchDashboards",
         "quicksight:TagResource",
         "quicksight:UntagResource",
         "quicksight:UpdateDashboard",
         "quicksight:UpdateDashboardLinks",
         "quicksight:UpdateDashboardPermissions",
         "quicksight:UpdateDashboardPublishedVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "quicksight:CreateDashboard",
        "quicksight:CreateFolderMembership",
        "quicksight:DeleteDashboard",
        "quicksight:DeleteFolderMembership",
        "quicksight:DescribeDashboard",
        "quicksight:DescribeDashboardPermissions",
        "quicksight:GenerateEmbedUrlForAnonymousUser",
        "quicksight:GetDashboardEmbedUrl",
        "quicksight:ListDashboardVersions",
        "quicksight:ListDashboards",
        "quicksight:ListFoldersForResource",
        "quicksight:ListTagsForResource",
        "quicksight:PredictQAResults",
        "quicksight:SearchDashboards",
        "quicksight:TagResource",
        "quicksight:UntagResource",
        "quicksight:UpdateDashboard",
        "quicksight:UpdateDashboardLinks",
        "quicksight:UpdateDashboardPermissions",
        "quicksight:UpdateDashboardPublishedVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/quicksight:dashboard"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/quicksight:dashboard"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "quicksight:CreateDataSet",
         "quicksight:DeleteDataSource",
         "quicksight:DescribeDataSource",
         "quicksight:DescribeDataSourcePermissions",
         "quicksight:ListFoldersForResource",
         "quicksight:ListTagsForResource",
         "quicksight:PassDataSource",
         "quicksight:SearchDataSources",
         "quicksight:TagResource",
         "quicksight:UntagResource",
         "quicksight:UpdateDataSet",
         "quicksight:UpdateDataSource",
         "quicksight:UpdateDataSourcePermissions"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "quicksight:CreateDataSet",
        "quicksight:DeleteDataSource",
        "quicksight:DescribeDataSource",
        "quicksight:DescribeDataSourcePermissions",
        "quicksight:ListFoldersForResource",
        "quicksight:ListTagsForResource",
        "quicksight:PassDataSource",
        "quicksight:SearchDataSources",
        "quicksight:TagResource",
        "quicksight:UntagResource",
        "quicksight:UpdateDataSet",
        "quicksight:UpdateDataSource",
        "quicksight:UpdateDataSourcePermissions"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/quicksight:datasource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/quicksight:datasource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "quicksight:CreateEmailCustomizationTemplate",
         "quicksight:DeleteEmailCustomizationTemplate",
         "quicksight:DescribeEmailCustomizationTemplate",
         "quicksight:UpdateEmailCustomizationTemplate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "quicksight:CreateEmailCustomizationTemplate",
        "quicksight:DeleteEmailCustomizationTemplate",
        "quicksight:DescribeEmailCustomizationTemplate",
        "quicksight:UpdateEmailCustomizationTemplate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/quicksight:emailCustomizationTemplate"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/quicksight:emailCustomizationTemplate"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "quicksight:CreateFolder",
         "quicksight:CreateFolderMembership",
         "quicksight:DeleteFolder",
         "quicksight:DeleteFolderMembership",
         "quicksight:DescribeFolder",
         "quicksight:DescribeFolderPermissions",
         "quicksight:DescribeFolderResolvedPermissions",
         "quicksight:ListFolderMembers",
         "quicksight:ListFolders",
         "quicksight:ListTagsForResource",
         "quicksight:SearchFolders",
         "quicksight:TagResource",
         "quicksight:UntagResource",
         "quicksight:UpdateFolder",
         "quicksight:UpdateFolderPermissions"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "quicksight:CreateFolder",
        "quicksight:CreateFolderMembership",
        "quicksight:DeleteFolder",
        "quicksight:DeleteFolderMembership",
        "quicksight:DescribeFolder",
        "quicksight:DescribeFolderPermissions",
        "quicksight:DescribeFolderResolvedPermissions",
        "quicksight:ListFolderMembers",
        "quicksight:ListFolders",
        "quicksight:ListTagsForResource",
        "quicksight:SearchFolders",
        "quicksight:TagResource",
        "quicksight:UntagResource",
        "quicksight:UpdateFolder",
        "quicksight:UpdateFolderPermissions"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/quicksight:folder"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/quicksight:folder"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "quicksight:CreateFolderMembership",
         "quicksight:CreateTopic",
         "quicksight:DeleteDataSet",
         "quicksight:DeleteDataSetRefreshProperties",
         "quicksight:DeleteFolderMembership",
         "quicksight:DescribeDataSet",
         "quicksight:DescribeDataSetPermissions",
         "quicksight:DescribeDataSetRefreshProperties",
         "quicksight:ListFoldersForResource",
         "quicksight:ListTagsForResource",
         "quicksight:PassDataSet",
         "quicksight:PutDataSetRefreshProperties",
         "quicksight:SearchDataSets",
         "quicksight:TagResource",
         "quicksight:UntagResource",
         "quicksight:UpdateDataSet",
         "quicksight:UpdateDataSetPermissions",
         "quicksight:UpdateTopic"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "quicksight:CreateFolderMembership",
        "quicksight:CreateTopic",
        "quicksight:DeleteDataSet",
        "quicksight:DeleteDataSetRefreshProperties",
        "quicksight:DeleteFolderMembership",
        "quicksight:DescribeDataSet",
        "quicksight:DescribeDataSetPermissions",
        "quicksight:DescribeDataSetRefreshProperties",
        "quicksight:ListFoldersForResource",
        "quicksight:ListTagsForResource",
        "quicksight:PassDataSet",
        "quicksight:PutDataSetRefreshProperties",
        "quicksight:SearchDataSets",
        "quicksight:TagResource",
        "quicksight:UntagResource",
        "quicksight:UpdateDataSet",
        "quicksight:UpdateDataSetPermissions",
        "quicksight:UpdateTopic"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/quicksight:dataset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/quicksight:dataset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "quicksight:CreateGroup",
         "quicksight:CreateGroupMembership",
         "quicksight:DeleteGroup",
         "quicksight:DeleteGroupMembership",
         "quicksight:DescribeGroup",
         "quicksight:DescribeGroupMembership",
         "quicksight:ListGroupMemberships",
         "quicksight:ListGroups",
         "quicksight:SearchGroups",
         "quicksight:UpdateGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "quicksight:CreateGroup",
        "quicksight:CreateGroupMembership",
        "quicksight:DeleteGroup",
        "quicksight:DeleteGroupMembership",
        "quicksight:DescribeGroup",
        "quicksight:DescribeGroupMembership",
        "quicksight:ListGroupMemberships",
        "quicksight:ListGroups",
        "quicksight:SearchGroups",
        "quicksight:UpdateGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/quicksight:group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/quicksight:group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "quicksight:CreateIAMPolicyAssignment",
         "quicksight:DeleteIAMPolicyAssignment",
         "quicksight:DescribeIAMPolicyAssignment",
         "quicksight:ListIAMPolicyAssignments",
         "quicksight:ListIAMPolicyAssignmentsForUser",
         "quicksight:UpdateIAMPolicyAssignment"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "quicksight:CreateIAMPolicyAssignment",
        "quicksight:DeleteIAMPolicyAssignment",
        "quicksight:DescribeIAMPolicyAssignment",
        "quicksight:ListIAMPolicyAssignments",
        "quicksight:ListIAMPolicyAssignmentsForUser",
        "quicksight:UpdateIAMPolicyAssignment"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/quicksight:assignment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/quicksight:assignment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "quicksight:CreateNamespace",
         "quicksight:DeleteNamespace",
         "quicksight:DescribeNamespace",
         "quicksight:GenerateEmbedUrlForAnonymousUser"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "quicksight:CreateNamespace",
        "quicksight:DeleteNamespace",
        "quicksight:DescribeNamespace",
        "quicksight:GenerateEmbedUrlForAnonymousUser"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/quicksight:namespace"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/quicksight:namespace"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "quicksight:CreateRefreshSchedule",
         "quicksight:DeleteRefreshSchedule",
         "quicksight:DescribeRefreshSchedule",
         "quicksight:UpdateRefreshSchedule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "quicksight:CreateRefreshSchedule",
        "quicksight:DeleteRefreshSchedule",
        "quicksight:DescribeRefreshSchedule",
        "quicksight:UpdateRefreshSchedule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/quicksight:refreshschedule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/quicksight:refreshschedule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "quicksight:CreateTemplate",
         "quicksight:CreateTemplateAlias",
         "quicksight:DeleteTemplate",
         "quicksight:DeleteTemplateAlias",
         "quicksight:DescribeTemplate",
         "quicksight:DescribeTemplateAlias",
         "quicksight:DescribeTemplatePermissions",
         "quicksight:ListTagsForResource",
         "quicksight:ListTemplateAliases",
         "quicksight:ListTemplateVersions",
         "quicksight:ListTemplates",
         "quicksight:TagResource",
         "quicksight:UntagResource",
         "quicksight:UpdateTemplate",
         "quicksight:UpdateTemplateAlias",
         "quicksight:UpdateTemplatePermissions"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "quicksight:CreateTemplate",
        "quicksight:CreateTemplateAlias",
        "quicksight:DeleteTemplate",
        "quicksight:DeleteTemplateAlias",
        "quicksight:DescribeTemplate",
        "quicksight:DescribeTemplateAlias",
        "quicksight:DescribeTemplatePermissions",
        "quicksight:ListTagsForResource",
        "quicksight:ListTemplateAliases",
        "quicksight:ListTemplateVersions",
        "quicksight:ListTemplates",
        "quicksight:TagResource",
        "quicksight:UntagResource",
        "quicksight:UpdateTemplate",
        "quicksight:UpdateTemplateAlias",
        "quicksight:UpdateTemplatePermissions"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/quicksight:template"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/quicksight:template"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "quicksight:CreateTheme",
         "quicksight:CreateThemeAlias",
         "quicksight:DeleteTheme",
         "quicksight:DeleteThemeAlias",
         "quicksight:DescribeTheme",
         "quicksight:DescribeThemeAlias",
         "quicksight:DescribeThemePermissions",
         "quicksight:GenerateEmbedUrlForAnonymousUser",
         "quicksight:ListTagsForResource",
         "quicksight:ListThemeAliases",
         "quicksight:ListThemeVersions",
         "quicksight:ListThemes",
         "quicksight:TagResource",
         "quicksight:UntagResource",
         "quicksight:UpdateTheme",
         "quicksight:UpdateThemeAlias",
         "quicksight:UpdateThemePermissions"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "quicksight:CreateTheme",
        "quicksight:CreateThemeAlias",
        "quicksight:DeleteTheme",
        "quicksight:DeleteThemeAlias",
        "quicksight:DescribeTheme",
        "quicksight:DescribeThemeAlias",
        "quicksight:DescribeThemePermissions",
        "quicksight:GenerateEmbedUrlForAnonymousUser",
        "quicksight:ListTagsForResource",
        "quicksight:ListThemeAliases",
        "quicksight:ListThemeVersions",
        "quicksight:ListThemes",
        "quicksight:TagResource",
        "quicksight:UntagResource",
        "quicksight:UpdateTheme",
        "quicksight:UpdateThemeAlias",
        "quicksight:UpdateThemePermissions"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/quicksight:theme"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/quicksight:theme"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "quicksight:DeleteAccountCustomization",
         "quicksight:DescribeAccountCustomization",
         "quicksight:ListTagsForResource",
         "quicksight:TagResource",
         "quicksight:UntagResource",
         "quicksight:UpdateAccountCustomization"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "quicksight:DeleteAccountCustomization",
        "quicksight:DescribeAccountCustomization",
        "quicksight:ListTagsForResource",
        "quicksight:TagResource",
        "quicksight:UntagResource",
        "quicksight:UpdateAccountCustomization"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/quicksight:customization"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/quicksight:customization"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "quicksight:DeleteAccountSubscription",
         "quicksight:DescribeAccountSubscription"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "quicksight:DeleteAccountSubscription",
        "quicksight:DescribeAccountSubscription"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/quicksight:account"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/quicksight:account"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "quicksight:DeleteVPCConnection",
         "quicksight:DescribeVPCConnection",
         "quicksight:TagResource",
         "quicksight:UntagResource",
         "quicksight:UpdateVPCConnection"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "quicksight:DeleteVPCConnection",
        "quicksight:DescribeVPCConnection",
        "quicksight:TagResource",
        "quicksight:UntagResource",
        "quicksight:UpdateVPCConnection"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/quicksight:vpcconnection"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/quicksight:vpcconnection"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "quicksight:DescribeAssetBundleExportJob",
         "quicksight:ListAssetBundleExportJobs",
         "quicksight:StartAssetBundleExportJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "quicksight:DescribeAssetBundleExportJob",
        "quicksight:ListAssetBundleExportJobs",
        "quicksight:StartAssetBundleExportJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/quicksight:assetBundleExportJob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/quicksight:assetBundleExportJob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "quicksight:DescribeAssetBundleImportJob",
         "quicksight:ListAssetBundleImportJobs",
         "quicksight:StartAssetBundleImportJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "quicksight:DescribeAssetBundleImportJob",
        "quicksight:ListAssetBundleImportJobs",
        "quicksight:StartAssetBundleImportJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/quicksight:assetBundleImportJob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/quicksight:assetBundleImportJob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "quicksight:DescribeDashboardSnapshotJob",
         "quicksight:DescribeDashboardSnapshotJobResult",
         "quicksight:StartDashboardSnapshotJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "quicksight:DescribeDashboardSnapshotJob",
        "quicksight:DescribeDashboardSnapshotJobResult",
        "quicksight:StartDashboardSnapshotJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/quicksight:dashboardSnapshotJob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/quicksight:dashboardSnapshotJob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ram:AcceptResourceShareInvitation",
         "ram:ListPendingInvitationResources",
         "ram:RejectResourceShareInvitation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ram:AcceptResourceShareInvitation",
        "ram:ListPendingInvitationResources",
        "ram:RejectResourceShareInvitation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ram:resource-share-invitation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ram:resource-share-invitation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ram:AssociateResourceShare",
         "ram:AssociateResourceSharePermission",
         "ram:DeleteResourceShare",
         "ram:DisassociateResourceShare",
         "ram:DisassociateResourceSharePermission",
         "ram:ListResourceSharePermissions",
         "ram:PromoteResourceShareCreatedFromPolicy",
         "ram:TagResource",
         "ram:UntagResource",
         "ram:UpdateResourceShare"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ram:AssociateResourceShare",
        "ram:AssociateResourceSharePermission",
        "ram:DeleteResourceShare",
        "ram:DisassociateResourceShare",
        "ram:DisassociateResourceSharePermission",
        "ram:ListResourceSharePermissions",
        "ram:PromoteResourceShareCreatedFromPolicy",
        "ram:TagResource",
        "ram:UntagResource",
        "ram:UpdateResourceShare"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ram:resource-share"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ram:resource-share"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ram:AssociateResourceSharePermission",
         "ram:CreatePermissionVersion",
         "ram:DeletePermission",
         "ram:DeletePermissionVersion",
         "ram:DisassociateResourceSharePermission",
         "ram:GetPermission",
         "ram:ListPermissionAssociations",
         "ram:PromotePermissionCreatedFromPolicy",
         "ram:ReplacePermissionAssociations",
         "ram:SetDefaultPermissionVersion",
         "ram:TagResource",
         "ram:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ram:AssociateResourceSharePermission",
        "ram:CreatePermissionVersion",
        "ram:DeletePermission",
        "ram:DeletePermissionVersion",
        "ram:DisassociateResourceSharePermission",
        "ram:GetPermission",
        "ram:ListPermissionAssociations",
        "ram:PromotePermissionCreatedFromPolicy",
        "ram:ReplacePermissionAssociations",
        "ram:SetDefaultPermissionVersion",
        "ram:TagResource",
        "ram:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ram:customer-managed-permission"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ram:customer-managed-permission"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ram:AssociateResourceSharePermission",
         "ram:DisassociateResourceSharePermission",
         "ram:GetPermission",
         "ram:ListPermissionAssociations",
         "ram:ReplacePermissionAssociations"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ram:AssociateResourceSharePermission",
        "ram:DisassociateResourceSharePermission",
        "ram:GetPermission",
        "ram:ListPermissionAssociations",
        "ram:ReplacePermissionAssociations"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ram:permission"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ram:permission"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rbin:CreateRule",
         "rbin:DeleteRule",
         "rbin:GetRule",
         "rbin:ListTagsForResource",
         "rbin:LockRule",
         "rbin:TagResource",
         "rbin:UnlockRule",
         "rbin:UntagResource",
         "rbin:UpdateRule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rbin:CreateRule",
        "rbin:DeleteRule",
        "rbin:GetRule",
        "rbin:ListTagsForResource",
        "rbin:LockRule",
        "rbin:TagResource",
        "rbin:UnlockRule",
        "rbin:UntagResource",
        "rbin:UpdateRule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rbin:rule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rbin:rule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rds:AddRoleToDBCluster",
         "rds:AddTagsToResource",
         "rds:ApplyPendingMaintenanceAction",
         "rds:BacktrackDBCluster",
         "rds:CreateBlueGreenDeployment",
         "rds:CreateDBCluster",
         "rds:CreateDBClusterEndpoint",
         "rds:CreateDBClusterSnapshot",
         "rds:CreateDBInstance",
         "rds:CreateDBInstanceReadReplica",
         "rds:CreateDBShardGroup",
         "rds:CreateGlobalCluster",
         "rds:CreateIntegration",
         "rds:DeleteDBCluster",
         "rds:DeregisterDBProxyTargets",
         "rds:DescribeDBClusterAutomatedBackups",
         "rds:DescribeDBClusterBacktracks",
         "rds:DescribeDBClusterEndpoints",
         "rds:DescribeDBClusterSnapshots",
         "rds:DescribeDBClusters",
         "rds:DescribeExportTasks",
         "rds:DescribePendingMaintenanceActions",
         "rds:DisableHttpEndpoint",
         "rds:EnableHttpEndpoint",
         "rds:FailoverDBCluster",
         "rds:FailoverGlobalCluster",
         "rds:ListTagsForResource",
         "rds:ModifyCurrentDBClusterCapacity",
         "rds:ModifyDBCluster",
         "rds:PromoteReadReplicaDBCluster",
         "rds:RebootDBCluster",
         "rds:RemoveFromGlobalCluster",
         "rds:RemoveRoleFromDBCluster",
         "rds:RemoveTagsFromResource",
         "rds:RestoreDBClusterFromS3",
         "rds:RestoreDBClusterFromSnapshot",
         "rds:RestoreDBClusterToPointInTime",
         "rds:StartActivityStream",
         "rds:StartDBCluster",
         "rds:StartExportTask",
         "rds:StopActivityStream",
         "rds:StopDBCluster",
         "rds:SwitchoverGlobalCluster"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rds:AddRoleToDBCluster",
        "rds:AddTagsToResource",
        "rds:ApplyPendingMaintenanceAction",
        "rds:BacktrackDBCluster",
        "rds:CreateBlueGreenDeployment",
        "rds:CreateDBCluster",
        "rds:CreateDBClusterEndpoint",
        "rds:CreateDBClusterSnapshot",
        "rds:CreateDBInstance",
        "rds:CreateDBInstanceReadReplica",
        "rds:CreateDBShardGroup",
        "rds:CreateGlobalCluster",
        "rds:CreateIntegration",
        "rds:DeleteDBCluster",
        "rds:DeregisterDBProxyTargets",
        "rds:DescribeDBClusterAutomatedBackups",
        "rds:DescribeDBClusterBacktracks",
        "rds:DescribeDBClusterEndpoints",
        "rds:DescribeDBClusterSnapshots",
        "rds:DescribeDBClusters",
        "rds:DescribeExportTasks",
        "rds:DescribePendingMaintenanceActions",
        "rds:DisableHttpEndpoint",
        "rds:EnableHttpEndpoint",
        "rds:FailoverDBCluster",
        "rds:FailoverGlobalCluster",
        "rds:ListTagsForResource",
        "rds:ModifyCurrentDBClusterCapacity",
        "rds:ModifyDBCluster",
        "rds:PromoteReadReplicaDBCluster",
        "rds:RebootDBCluster",
        "rds:RemoveFromGlobalCluster",
        "rds:RemoveRoleFromDBCluster",
        "rds:RemoveTagsFromResource",
        "rds:RestoreDBClusterFromS3",
        "rds:RestoreDBClusterFromSnapshot",
        "rds:RestoreDBClusterToPointInTime",
        "rds:StartActivityStream",
        "rds:StartDBCluster",
        "rds:StartExportTask",
        "rds:StopActivityStream",
        "rds:StopDBCluster",
        "rds:SwitchoverGlobalCluster"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rds:cluster"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rds:cluster"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rds:AddRoleToDBInstance",
         "rds:AddTagsToResource",
         "rds:ApplyPendingMaintenanceAction",
         "rds:CreateBlueGreenDeployment",
         "rds:CreateDBCluster",
         "rds:CreateDBInstance",
         "rds:CreateDBInstanceReadReplica",
         "rds:CreateDBSnapshot",
         "rds:CreateTenantDatabase",
         "rds:DeleteDBInstance",
         "rds:DeleteTenantDatabase",
         "rds:DeregisterDBProxyTargets",
         "rds:DescribeDBInstanceAutomatedBackups",
         "rds:DescribeDBInstances",
         "rds:DescribeDBLogFiles",
         "rds:DescribeDBSnapshotTenantDatabases",
         "rds:DescribeDBSnapshots",
         "rds:DescribePendingMaintenanceActions",
         "rds:DescribeTenantDatabases",
         "rds:DescribeValidDBInstanceModifications",
         "rds:DownloadCompleteDBLogFile",
         "rds:DownloadDBLogFilePortion",
         "rds:ListTagsForResource",
         "rds:ModifyActivityStream",
         "rds:ModifyDBInstance",
         "rds:ModifyTenantDatabase",
         "rds:PromoteReadReplica",
         "rds:RebootDBInstance",
         "rds:RemoveRoleFromDBInstance",
         "rds:RemoveTagsFromResource",
         "rds:RestoreDBInstanceFromDBSnapshot",
         "rds:RestoreDBInstanceFromS3",
         "rds:RestoreDBInstanceToPointInTime",
         "rds:StartActivityStream",
         "rds:StartDBInstance",
         "rds:StartDBInstanceAutomatedBackupsReplication",
         "rds:StopActivityStream",
         "rds:StopDBInstance",
         "rds:StopDBInstanceAutomatedBackupsReplication",
         "rds:SwitchoverReadReplica"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rds:AddRoleToDBInstance",
        "rds:AddTagsToResource",
        "rds:ApplyPendingMaintenanceAction",
        "rds:CreateBlueGreenDeployment",
        "rds:CreateDBCluster",
        "rds:CreateDBInstance",
        "rds:CreateDBInstanceReadReplica",
        "rds:CreateDBSnapshot",
        "rds:CreateTenantDatabase",
        "rds:DeleteDBInstance",
        "rds:DeleteTenantDatabase",
        "rds:DeregisterDBProxyTargets",
        "rds:DescribeDBInstanceAutomatedBackups",
        "rds:DescribeDBInstances",
        "rds:DescribeDBLogFiles",
        "rds:DescribeDBSnapshotTenantDatabases",
        "rds:DescribeDBSnapshots",
        "rds:DescribePendingMaintenanceActions",
        "rds:DescribeTenantDatabases",
        "rds:DescribeValidDBInstanceModifications",
        "rds:DownloadCompleteDBLogFile",
        "rds:DownloadDBLogFilePortion",
        "rds:ListTagsForResource",
        "rds:ModifyActivityStream",
        "rds:ModifyDBInstance",
        "rds:ModifyTenantDatabase",
        "rds:PromoteReadReplica",
        "rds:RebootDBInstance",
        "rds:RemoveRoleFromDBInstance",
        "rds:RemoveTagsFromResource",
        "rds:RestoreDBInstanceFromDBSnapshot",
        "rds:RestoreDBInstanceFromS3",
        "rds:RestoreDBInstanceToPointInTime",
        "rds:StartActivityStream",
        "rds:StartDBInstance",
        "rds:StartDBInstanceAutomatedBackupsReplication",
        "rds:StopActivityStream",
        "rds:StopDBInstance",
        "rds:StopDBInstanceAutomatedBackupsReplication",
        "rds:SwitchoverReadReplica"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rds:db"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rds:db"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rds:AddSourceIdentifierToSubscription",
         "rds:AddTagsToResource",
         "rds:CreateEventSubscription",
         "rds:DeleteEventSubscription",
         "rds:DescribeEventSubscriptions",
         "rds:ListTagsForResource",
         "rds:ModifyEventSubscription",
         "rds:RemoveSourceIdentifierFromSubscription",
         "rds:RemoveTagsFromResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rds:AddSourceIdentifierToSubscription",
        "rds:AddTagsToResource",
        "rds:CreateEventSubscription",
        "rds:DeleteEventSubscription",
        "rds:DescribeEventSubscriptions",
        "rds:ListTagsForResource",
        "rds:ModifyEventSubscription",
        "rds:RemoveSourceIdentifierFromSubscription",
        "rds:RemoveTagsFromResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rds:es"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rds:es"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rds:AddTagsToResource",
         "rds:CopyCustomDBEngineVersion",
         "rds:CreateCustomDBEngineVersion",
         "rds:DeleteCustomDBEngineVersion",
         "rds:ListTagsForResource",
         "rds:ModifyCustomDBEngineVersion",
         "rds:RemoveTagsFromResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rds:AddTagsToResource",
        "rds:CopyCustomDBEngineVersion",
        "rds:CreateCustomDBEngineVersion",
        "rds:DeleteCustomDBEngineVersion",
        "rds:ListTagsForResource",
        "rds:ModifyCustomDBEngineVersion",
        "rds:RemoveTagsFromResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rds:cev"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rds:cev"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rds:AddTagsToResource",
         "rds:CreateDBClusterEndpoint",
         "rds:DeleteDBClusterEndpoint",
         "rds:DescribeDBClusterEndpoints",
         "rds:ListTagsForResource",
         "rds:ModifyDBClusterEndpoint",
         "rds:RemoveTagsFromResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rds:AddTagsToResource",
        "rds:CreateDBClusterEndpoint",
        "rds:DeleteDBClusterEndpoint",
        "rds:DescribeDBClusterEndpoints",
        "rds:ListTagsForResource",
        "rds:ModifyDBClusterEndpoint",
        "rds:RemoveTagsFromResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rds:cluster-endpoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rds:cluster-endpoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rds:AddTagsToResource",
         "rds:CopyDBClusterParameterGroup",
         "rds:CreateBlueGreenDeployment",
         "rds:CreateDBCluster",
         "rds:CreateDBClusterParameterGroup",
         "rds:DeleteDBClusterParameterGroup",
         "rds:DescribeDBClusterParameterGroups",
         "rds:DescribeDBClusterParameters",
         "rds:ListTagsForResource",
         "rds:ModifyDBCluster",
         "rds:ModifyDBClusterParameterGroup",
         "rds:RemoveTagsFromResource",
         "rds:ResetDBClusterParameterGroup",
         "rds:RestoreDBClusterFromS3",
         "rds:RestoreDBClusterFromSnapshot",
         "rds:RestoreDBClusterToPointInTime"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rds:AddTagsToResource",
        "rds:CopyDBClusterParameterGroup",
        "rds:CreateBlueGreenDeployment",
        "rds:CreateDBCluster",
        "rds:CreateDBClusterParameterGroup",
        "rds:DeleteDBClusterParameterGroup",
        "rds:DescribeDBClusterParameterGroups",
        "rds:DescribeDBClusterParameters",
        "rds:ListTagsForResource",
        "rds:ModifyDBCluster",
        "rds:ModifyDBClusterParameterGroup",
        "rds:RemoveTagsFromResource",
        "rds:ResetDBClusterParameterGroup",
        "rds:RestoreDBClusterFromS3",
        "rds:RestoreDBClusterFromSnapshot",
        "rds:RestoreDBClusterToPointInTime"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rds:cluster-pg"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rds:cluster-pg"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rds:AddTagsToResource",
         "rds:CopyDBClusterSnapshot",
         "rds:CreateDBClusterSnapshot",
         "rds:DeleteDBCluster",
         "rds:DeleteDBClusterSnapshot",
         "rds:DescribeDBClusterSnapshotAttributes",
         "rds:DescribeDBClusterSnapshots",
         "rds:DescribeExportTasks",
         "rds:ListTagsForResource",
         "rds:ModifyDBClusterSnapshotAttribute",
         "rds:RemoveTagsFromResource",
         "rds:RestoreDBClusterFromSnapshot",
         "rds:RestoreDBInstanceFromDBSnapshot",
         "rds:StartExportTask"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rds:AddTagsToResource",
        "rds:CopyDBClusterSnapshot",
        "rds:CreateDBClusterSnapshot",
        "rds:DeleteDBCluster",
        "rds:DeleteDBClusterSnapshot",
        "rds:DescribeDBClusterSnapshotAttributes",
        "rds:DescribeDBClusterSnapshots",
        "rds:DescribeExportTasks",
        "rds:ListTagsForResource",
        "rds:ModifyDBClusterSnapshotAttribute",
        "rds:RemoveTagsFromResource",
        "rds:RestoreDBClusterFromSnapshot",
        "rds:RestoreDBInstanceFromDBSnapshot",
        "rds:StartExportTask"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rds:cluster-snapshot"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rds:cluster-snapshot"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rds:AddTagsToResource",
         "rds:CreateBlueGreenDeployment",
         "rds:DeleteBlueGreenDeployment",
         "rds:DescribeBlueGreenDeployments",
         "rds:RemoveTagsFromResource",
         "rds:SwitchoverBlueGreenDeployment"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rds:AddTagsToResource",
        "rds:CreateBlueGreenDeployment",
        "rds:DeleteBlueGreenDeployment",
        "rds:DescribeBlueGreenDeployments",
        "rds:RemoveTagsFromResource",
        "rds:SwitchoverBlueGreenDeployment"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rds:deployment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rds:deployment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rds:AddTagsToResource",
         "rds:CreateIntegration",
         "rds:DeleteIntegration",
         "rds:DescribeIntegrations",
         "rds:ListTagsForResource",
         "rds:ModifyIntegration",
         "rds:RemoveTagsFromResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rds:AddTagsToResource",
        "rds:CreateIntegration",
        "rds:DeleteIntegration",
        "rds:DescribeIntegrations",
        "rds:ListTagsForResource",
        "rds:ModifyIntegration",
        "rds:RemoveTagsFromResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rds:integration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rds:integration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rds:AddTagsToResource",
         "rds:CopyOptionGroup",
         "rds:CreateDBCluster",
         "rds:CreateDBInstance",
         "rds:CreateDBInstanceReadReplica",
         "rds:CreateOptionGroup",
         "rds:DeleteOptionGroup",
         "rds:DescribeOptionGroups",
         "rds:ListTagsForResource",
         "rds:ModifyDBCluster",
         "rds:ModifyDBInstance",
         "rds:ModifyDBSnapshot",
         "rds:ModifyOptionGroup",
         "rds:RemoveTagsFromResource",
         "rds:RestoreDBClusterFromS3",
         "rds:RestoreDBClusterFromSnapshot",
         "rds:RestoreDBClusterToPointInTime",
         "rds:RestoreDBInstanceFromDBSnapshot",
         "rds:RestoreDBInstanceFromS3",
         "rds:RestoreDBInstanceToPointInTime"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rds:AddTagsToResource",
        "rds:CopyOptionGroup",
        "rds:CreateDBCluster",
        "rds:CreateDBInstance",
        "rds:CreateDBInstanceReadReplica",
        "rds:CreateOptionGroup",
        "rds:DeleteOptionGroup",
        "rds:DescribeOptionGroups",
        "rds:ListTagsForResource",
        "rds:ModifyDBCluster",
        "rds:ModifyDBInstance",
        "rds:ModifyDBSnapshot",
        "rds:ModifyOptionGroup",
        "rds:RemoveTagsFromResource",
        "rds:RestoreDBClusterFromS3",
        "rds:RestoreDBClusterFromSnapshot",
        "rds:RestoreDBClusterToPointInTime",
        "rds:RestoreDBInstanceFromDBSnapshot",
        "rds:RestoreDBInstanceFromS3",
        "rds:RestoreDBInstanceToPointInTime"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rds:og"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rds:og"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rds:AddTagsToResource",
         "rds:CopyDBParameterGroup",
         "rds:CreateBlueGreenDeployment",
         "rds:CreateDBInstance",
         "rds:CreateDBInstanceReadReplica",
         "rds:CreateDBParameterGroup",
         "rds:DeleteDBParameterGroup",
         "rds:DescribeDBParameterGroups",
         "rds:DescribeDBParameters",
         "rds:ListTagsForResource",
         "rds:ModifyDBCluster",
         "rds:ModifyDBInstance",
         "rds:ModifyDBParameterGroup",
         "rds:RemoveTagsFromResource",
         "rds:ResetDBParameterGroup",
         "rds:RestoreDBInstanceFromDBSnapshot",
         "rds:RestoreDBInstanceFromS3",
         "rds:RestoreDBInstanceToPointInTime"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rds:AddTagsToResource",
        "rds:CopyDBParameterGroup",
        "rds:CreateBlueGreenDeployment",
        "rds:CreateDBInstance",
        "rds:CreateDBInstanceReadReplica",
        "rds:CreateDBParameterGroup",
        "rds:DeleteDBParameterGroup",
        "rds:DescribeDBParameterGroups",
        "rds:DescribeDBParameters",
        "rds:ListTagsForResource",
        "rds:ModifyDBCluster",
        "rds:ModifyDBInstance",
        "rds:ModifyDBParameterGroup",
        "rds:RemoveTagsFromResource",
        "rds:ResetDBParameterGroup",
        "rds:RestoreDBInstanceFromDBSnapshot",
        "rds:RestoreDBInstanceFromS3",
        "rds:RestoreDBInstanceToPointInTime"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rds:pg"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rds:pg"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rds:AddTagsToResource",
         "rds:CreateDBProxyEndpoint",
         "rds:DeleteDBProxy",
         "rds:DeregisterDBProxyTargets",
         "rds:DescribeDBProxies",
         "rds:DescribeDBProxyEndpoints",
         "rds:DescribeDBProxyTargetGroups",
         "rds:DescribeDBProxyTargets",
         "rds:ListTagsForResource",
         "rds:ModifyDBProxy",
         "rds:RemoveTagsFromResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rds:AddTagsToResource",
        "rds:CreateDBProxyEndpoint",
        "rds:DeleteDBProxy",
        "rds:DeregisterDBProxyTargets",
        "rds:DescribeDBProxies",
        "rds:DescribeDBProxyEndpoints",
        "rds:DescribeDBProxyTargetGroups",
        "rds:DescribeDBProxyTargets",
        "rds:ListTagsForResource",
        "rds:ModifyDBProxy",
        "rds:RemoveTagsFromResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rds:proxy"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rds:proxy"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rds:AddTagsToResource",
         "rds:CreateDBProxyEndpoint",
         "rds:DeleteDBProxyEndpoint",
         "rds:DescribeDBProxyEndpoints",
         "rds:ListTagsForResource",
         "rds:ModifyDBProxyEndpoint",
         "rds:RemoveTagsFromResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rds:AddTagsToResource",
        "rds:CreateDBProxyEndpoint",
        "rds:DeleteDBProxyEndpoint",
        "rds:DescribeDBProxyEndpoints",
        "rds:ListTagsForResource",
        "rds:ModifyDBProxyEndpoint",
        "rds:RemoveTagsFromResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rds:proxy-endpoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rds:proxy-endpoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rds:AddTagsToResource",
         "rds:DescribeReservedDBInstances",
         "rds:ListTagsForResource",
         "rds:PurchaseReservedDBInstancesOffering",
         "rds:RemoveTagsFromResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rds:AddTagsToResource",
        "rds:DescribeReservedDBInstances",
        "rds:ListTagsForResource",
        "rds:PurchaseReservedDBInstancesOffering",
        "rds:RemoveTagsFromResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rds:ri"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rds:ri"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rds:AddTagsToResource",
         "rds:AuthorizeDBSecurityGroupIngress",
         "rds:CreateDBInstance",
         "rds:CreateDBSecurityGroup",
         "rds:DeleteDBSecurityGroup",
         "rds:DescribeDBSecurityGroups",
         "rds:ListTagsForResource",
         "rds:ModifyDBInstance",
         "rds:RemoveTagsFromResource",
         "rds:RestoreDBInstanceFromS3",
         "rds:RevokeDBSecurityGroupIngress"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rds:AddTagsToResource",
        "rds:AuthorizeDBSecurityGroupIngress",
        "rds:CreateDBInstance",
        "rds:CreateDBSecurityGroup",
        "rds:DeleteDBSecurityGroup",
        "rds:DescribeDBSecurityGroups",
        "rds:ListTagsForResource",
        "rds:ModifyDBInstance",
        "rds:RemoveTagsFromResource",
        "rds:RestoreDBInstanceFromS3",
        "rds:RevokeDBSecurityGroupIngress"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rds:secgrp"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rds:secgrp"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rds:AddTagsToResource",
         "rds:CreateDBShardGroup",
         "rds:DeleteDBShardGroup",
         "rds:DescribeDBShardGroups",
         "rds:ListTagsForResource",
         "rds:ModifyDBShardGroup",
         "rds:RebootDBShardGroup",
         "rds:RemoveTagsFromResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rds:AddTagsToResource",
        "rds:CreateDBShardGroup",
        "rds:DeleteDBShardGroup",
        "rds:DescribeDBShardGroups",
        "rds:ListTagsForResource",
        "rds:ModifyDBShardGroup",
        "rds:RebootDBShardGroup",
        "rds:RemoveTagsFromResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rds:shardgrp"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rds:shardgrp"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rds:AddTagsToResource",
         "rds:CopyDBSnapshot",
         "rds:CreateDBSnapshot",
         "rds:DeleteDBSnapshot",
         "rds:DescribeDBSnapshotAttributes",
         "rds:DescribeDBSnapshotTenantDatabases",
         "rds:DescribeDBSnapshots",
         "rds:DescribeExportTasks",
         "rds:ListTagsForResource",
         "rds:ModifyDBSnapshot",
         "rds:ModifyDBSnapshotAttribute",
         "rds:RemoveTagsFromResource",
         "rds:RestoreDBClusterFromSnapshot",
         "rds:RestoreDBInstanceFromDBSnapshot",
         "rds:StartExportTask",
         "rds:StopDBInstance"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rds:AddTagsToResource",
        "rds:CopyDBSnapshot",
        "rds:CreateDBSnapshot",
        "rds:DeleteDBSnapshot",
        "rds:DescribeDBSnapshotAttributes",
        "rds:DescribeDBSnapshotTenantDatabases",
        "rds:DescribeDBSnapshots",
        "rds:DescribeExportTasks",
        "rds:ListTagsForResource",
        "rds:ModifyDBSnapshot",
        "rds:ModifyDBSnapshotAttribute",
        "rds:RemoveTagsFromResource",
        "rds:RestoreDBClusterFromSnapshot",
        "rds:RestoreDBInstanceFromDBSnapshot",
        "rds:StartExportTask",
        "rds:StopDBInstance"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rds:snapshot"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rds:snapshot"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rds:AddTagsToResource",
         "rds:DescribeDBSnapshotTenantDatabases",
         "rds:ListTagsForResource",
         "rds:RemoveTagsFromResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rds:AddTagsToResource",
        "rds:DescribeDBSnapshotTenantDatabases",
        "rds:ListTagsForResource",
        "rds:RemoveTagsFromResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rds:snapshot-tenant-database"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rds:snapshot-tenant-database"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rds:AddTagsToResource",
         "rds:CreateDBCluster",
         "rds:CreateDBInstance",
         "rds:CreateDBInstanceReadReplica",
         "rds:CreateDBSubnetGroup",
         "rds:DeleteDBSubnetGroup",
         "rds:DescribeDBSubnetGroups",
         "rds:ListTagsForResource",
         "rds:ModifyDBInstance",
         "rds:ModifyDBSubnetGroup",
         "rds:RemoveTagsFromResource",
         "rds:RestoreDBClusterFromS3",
         "rds:RestoreDBClusterFromSnapshot",
         "rds:RestoreDBClusterToPointInTime",
         "rds:RestoreDBInstanceFromDBSnapshot",
         "rds:RestoreDBInstanceFromS3",
         "rds:RestoreDBInstanceToPointInTime"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rds:AddTagsToResource",
        "rds:CreateDBCluster",
        "rds:CreateDBInstance",
        "rds:CreateDBInstanceReadReplica",
        "rds:CreateDBSubnetGroup",
        "rds:DeleteDBSubnetGroup",
        "rds:DescribeDBSubnetGroups",
        "rds:ListTagsForResource",
        "rds:ModifyDBInstance",
        "rds:ModifyDBSubnetGroup",
        "rds:RemoveTagsFromResource",
        "rds:RestoreDBClusterFromS3",
        "rds:RestoreDBClusterFromSnapshot",
        "rds:RestoreDBClusterToPointInTime",
        "rds:RestoreDBInstanceFromDBSnapshot",
        "rds:RestoreDBInstanceFromS3",
        "rds:RestoreDBInstanceToPointInTime"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rds:subgrp"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rds:subgrp"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rds:AddTagsToResource",
         "rds:DeregisterDBProxyTargets",
         "rds:DescribeDBProxyTargets",
         "rds:ListTagsForResource",
         "rds:ModifyDBProxyTargetGroup",
         "rds:RegisterDBProxyTargets",
         "rds:RemoveTagsFromResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rds:AddTagsToResource",
        "rds:DeregisterDBProxyTargets",
        "rds:DescribeDBProxyTargets",
        "rds:ListTagsForResource",
        "rds:ModifyDBProxyTargetGroup",
        "rds:RegisterDBProxyTargets",
        "rds:RemoveTagsFromResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rds:target-group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rds:target-group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rds:AddTagsToResource",
         "rds:CreateTenantDatabase",
         "rds:DeleteTenantDatabase",
         "rds:DescribeTenantDatabases",
         "rds:ListTagsForResource",
         "rds:ModifyTenantDatabase",
         "rds:RemoveTagsFromResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rds:AddTagsToResource",
        "rds:CreateTenantDatabase",
        "rds:DeleteTenantDatabase",
        "rds:DescribeTenantDatabases",
        "rds:ListTagsForResource",
        "rds:ModifyTenantDatabase",
        "rds:RemoveTagsFromResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rds:tenant-database"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rds:tenant-database"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rds:CreateDBCluster",
         "rds:CreateGlobalCluster",
         "rds:DeleteGlobalCluster",
         "rds:DescribeGlobalClusters",
         "rds:FailoverGlobalCluster",
         "rds:ModifyGlobalCluster",
         "rds:RemoveFromGlobalCluster",
         "rds:SwitchoverGlobalCluster"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rds:CreateDBCluster",
        "rds:CreateGlobalCluster",
        "rds:DeleteGlobalCluster",
        "rds:DescribeGlobalClusters",
        "rds:FailoverGlobalCluster",
        "rds:ModifyGlobalCluster",
        "rds:RemoveFromGlobalCluster",
        "rds:SwitchoverGlobalCluster"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rds:global-cluster"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rds:global-cluster"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rds:DeleteDBClusterAutomatedBackup",
         "rds:DescribeDBClusterAutomatedBackups",
         "rds:RestoreDBClusterToPointInTime"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rds:DeleteDBClusterAutomatedBackup",
        "rds:DescribeDBClusterAutomatedBackups",
        "rds:RestoreDBClusterToPointInTime"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rds:cluster-auto-backup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rds:cluster-auto-backup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rds:DeleteDBInstanceAutomatedBackup",
         "rds:DescribeDBInstanceAutomatedBackups",
         "rds:RestoreDBInstanceToPointInTime",
         "rds:StartDBInstanceAutomatedBackupsReplication"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rds:DeleteDBInstanceAutomatedBackup",
        "rds:DescribeDBInstanceAutomatedBackups",
        "rds:RestoreDBInstanceToPointInTime",
        "rds:StartDBInstanceAutomatedBackupsReplication"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rds:auto-backup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rds:auto-backup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rds-data:BatchExecuteStatement",
         "rds-data:BeginTransaction",
         "rds-data:CommitTransaction",
         "rds-data:ExecuteSql",
         "rds-data:ExecuteStatement",
         "rds-data:RollbackTransaction"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rds-data:BatchExecuteStatement",
        "rds-data:BeginTransaction",
        "rds-data:CommitTransaction",
        "rds-data:ExecuteSql",
        "rds-data:ExecuteStatement",
        "rds-data:RollbackTransaction"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rds-data:cluster"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rds-data:cluster"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rds-db:connect"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rds-db:connect"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rds-db:db-user"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rds-db:db-user"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift:AssociateDataShareConsumer",
         "redshift:AuthorizeDataShare",
         "redshift:DeauthorizeDataShare",
         "redshift:DisassociateDataShareConsumer",
         "redshift:RejectDataShare"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift:AssociateDataShareConsumer",
        "redshift:AuthorizeDataShare",
        "redshift:DeauthorizeDataShare",
        "redshift:DisassociateDataShareConsumer",
        "redshift:RejectDataShare"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift:datashare"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift:datashare"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift:AuthorizeClusterSecurityGroupIngress",
         "redshift:CreateClusterSecurityGroup",
         "redshift:CreateTags",
         "redshift:DeleteClusterSecurityGroup",
         "redshift:DeleteTags",
         "redshift:DescribeTags",
         "redshift:RevokeClusterSecurityGroupIngress"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift:AuthorizeClusterSecurityGroupIngress",
        "redshift:CreateClusterSecurityGroup",
        "redshift:CreateTags",
        "redshift:DeleteClusterSecurityGroup",
        "redshift:DeleteTags",
        "redshift:DescribeTags",
        "redshift:RevokeClusterSecurityGroupIngress"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift:securitygroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift:securitygroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift:AuthorizeClusterSecurityGroupIngress",
         "redshift:CreateTags",
         "redshift:DeleteTags",
         "redshift:DescribeTags",
         "redshift:RevokeClusterSecurityGroupIngress"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift:AuthorizeClusterSecurityGroupIngress",
        "redshift:CreateTags",
        "redshift:DeleteTags",
        "redshift:DescribeTags",
        "redshift:RevokeClusterSecurityGroupIngress"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift:securitygroupingress-ec2securitygroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift:securitygroupingress-ec2securitygroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift:AuthorizeInboundIntegration",
         "redshift:CreateIntegration",
         "redshift:CreateTags",
         "redshift:DeleteIntegration",
         "redshift:DeleteTags",
         "redshift:DescribeIntegrations",
         "redshift:DescribeTags",
         "redshift:ModifyIntegration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift:AuthorizeInboundIntegration",
        "redshift:CreateIntegration",
        "redshift:CreateTags",
        "redshift:DeleteIntegration",
        "redshift:DeleteTags",
        "redshift:DescribeIntegrations",
        "redshift:DescribeTags",
        "redshift:ModifyIntegration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift:integration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift:integration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift:AuthorizeSnapshotAccess",
         "redshift:BatchDeleteClusterSnapshots",
         "redshift:BatchModifyClusterSnapshots",
         "redshift:CopyClusterSnapshot",
         "redshift:CreateClusterSnapshot",
         "redshift:CreateTags",
         "redshift:DeleteClusterSnapshot",
         "redshift:DeleteTags",
         "redshift:DescribeTags",
         "redshift:ModifyClusterSnapshot",
         "redshift:RestoreFromClusterSnapshot",
         "redshift:RestoreTableFromClusterSnapshot",
         "redshift:RevokeSnapshotAccess"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift:AuthorizeSnapshotAccess",
        "redshift:BatchDeleteClusterSnapshots",
        "redshift:BatchModifyClusterSnapshots",
        "redshift:CopyClusterSnapshot",
        "redshift:CreateClusterSnapshot",
        "redshift:CreateTags",
        "redshift:DeleteClusterSnapshot",
        "redshift:DeleteTags",
        "redshift:DescribeTags",
        "redshift:ModifyClusterSnapshot",
        "redshift:RestoreFromClusterSnapshot",
        "redshift:RestoreTableFromClusterSnapshot",
        "redshift:RevokeSnapshotAccess"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift:snapshot"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift:snapshot"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift:CancelResize",
         "redshift:CreateCluster",
         "redshift:CreateCustomDomainAssociation",
         "redshift:CreateTags",
         "redshift:DeleteCluster",
         "redshift:DeleteCustomDomainAssociation",
         "redshift:DeleteTags",
         "redshift:DescribeLoggingStatus",
         "redshift:DescribeResize",
         "redshift:DescribeTags",
         "redshift:DisableLogging",
         "redshift:DisableSnapshotCopy",
         "redshift:EnableLogging",
         "redshift:EnableSnapshotCopy",
         "redshift:FailoverPrimaryCompute",
         "redshift:ModifyAquaConfiguration",
         "redshift:ModifyCluster",
         "redshift:ModifyClusterDbRevision",
         "redshift:ModifyClusterIamRoles",
         "redshift:ModifyClusterSnapshotSchedule",
         "redshift:ModifyCustomDomainAssociation",
         "redshift:ModifySnapshotCopyRetentionPeriod",
         "redshift:PauseCluster",
         "redshift:RebootCluster",
         "redshift:ResizeCluster",
         "redshift:RestoreFromClusterSnapshot",
         "redshift:RestoreTableFromClusterSnapshot",
         "redshift:ResumeCluster",
         "redshift:RotateEncryptionKey"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift:CancelResize",
        "redshift:CreateCluster",
        "redshift:CreateCustomDomainAssociation",
        "redshift:CreateTags",
        "redshift:DeleteCluster",
        "redshift:DeleteCustomDomainAssociation",
        "redshift:DeleteTags",
        "redshift:DescribeLoggingStatus",
        "redshift:DescribeResize",
        "redshift:DescribeTags",
        "redshift:DisableLogging",
        "redshift:DisableSnapshotCopy",
        "redshift:EnableLogging",
        "redshift:EnableSnapshotCopy",
        "redshift:FailoverPrimaryCompute",
        "redshift:ModifyAquaConfiguration",
        "redshift:ModifyCluster",
        "redshift:ModifyClusterDbRevision",
        "redshift:ModifyClusterIamRoles",
        "redshift:ModifyClusterSnapshotSchedule",
        "redshift:ModifyCustomDomainAssociation",
        "redshift:ModifySnapshotCopyRetentionPeriod",
        "redshift:PauseCluster",
        "redshift:RebootCluster",
        "redshift:ResizeCluster",
        "redshift:RestoreFromClusterSnapshot",
        "redshift:RestoreTableFromClusterSnapshot",
        "redshift:ResumeCluster",
        "redshift:RotateEncryptionKey"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift:cluster"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift:cluster"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift:CreateClusterParameterGroup",
         "redshift:CreateTags",
         "redshift:DeleteClusterParameterGroup",
         "redshift:DeleteTags",
         "redshift:DescribeClusterParameters",
         "redshift:DescribeTags",
         "redshift:ModifyClusterParameterGroup",
         "redshift:ResetClusterParameterGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift:CreateClusterParameterGroup",
        "redshift:CreateTags",
        "redshift:DeleteClusterParameterGroup",
        "redshift:DeleteTags",
        "redshift:DescribeClusterParameters",
        "redshift:DescribeTags",
        "redshift:ModifyClusterParameterGroup",
        "redshift:ResetClusterParameterGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift:parametergroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift:parametergroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift:CreateClusterSubnetGroup",
         "redshift:CreateTags",
         "redshift:DeleteClusterSubnetGroup",
         "redshift:DeleteTags",
         "redshift:DescribeTags",
         "redshift:ModifyClusterSubnetGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift:CreateClusterSubnetGroup",
        "redshift:CreateTags",
        "redshift:DeleteClusterSubnetGroup",
        "redshift:DeleteTags",
        "redshift:DescribeTags",
        "redshift:ModifyClusterSubnetGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift:subnetgroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift:subnetgroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift:CreateClusterUser",
         "redshift:GetClusterCredentials"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift:CreateClusterUser",
        "redshift:GetClusterCredentials"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift:dbuser"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift:dbuser"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift:CreateEventSubscription",
         "redshift:CreateTags",
         "redshift:DeleteEventSubscription",
         "redshift:DeleteTags",
         "redshift:DescribeTags",
         "redshift:ModifyEventSubscription"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift:CreateEventSubscription",
        "redshift:CreateTags",
        "redshift:DeleteEventSubscription",
        "redshift:DeleteTags",
        "redshift:DescribeTags",
        "redshift:ModifyEventSubscription"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift:eventsubscription"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift:eventsubscription"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift:CreateHsmClientCertificate",
         "redshift:CreateTags",
         "redshift:DeleteHsmClientCertificate",
         "redshift:DeleteTags",
         "redshift:DescribeTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift:CreateHsmClientCertificate",
        "redshift:CreateTags",
        "redshift:DeleteHsmClientCertificate",
        "redshift:DeleteTags",
        "redshift:DescribeTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift:hsmclientcertificate"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift:hsmclientcertificate"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift:CreateHsmConfiguration",
         "redshift:CreateTags",
         "redshift:DeleteHsmConfiguration",
         "redshift:DeleteTags",
         "redshift:DescribeTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift:CreateHsmConfiguration",
        "redshift:CreateTags",
        "redshift:DeleteHsmConfiguration",
        "redshift:DeleteTags",
        "redshift:DescribeTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift:hsmconfiguration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift:hsmconfiguration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift:CreateSnapshotCopyGrant",
         "redshift:CreateTags",
         "redshift:DeleteSnapshotCopyGrant",
         "redshift:DeleteTags",
         "redshift:DescribeTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift:CreateSnapshotCopyGrant",
        "redshift:CreateTags",
        "redshift:DeleteSnapshotCopyGrant",
        "redshift:DeleteTags",
        "redshift:DescribeTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift:snapshotcopygrant"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift:snapshotcopygrant"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift:CreateSnapshotSchedule",
         "redshift:CreateTags",
         "redshift:DeleteSnapshotSchedule",
         "redshift:DeleteTags",
         "redshift:DescribeSnapshotSchedules",
         "redshift:DescribeTags",
         "redshift:ModifySnapshotSchedule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift:CreateSnapshotSchedule",
        "redshift:CreateTags",
        "redshift:DeleteSnapshotSchedule",
        "redshift:DeleteTags",
        "redshift:DescribeSnapshotSchedules",
        "redshift:DescribeTags",
        "redshift:ModifySnapshotSchedule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift:snapshotschedule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift:snapshotschedule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift:CreateTags",
         "redshift:DeleteTags",
         "redshift:DescribeTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift:CreateTags",
        "redshift:DeleteTags",
        "redshift:DescribeTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift:securitygroupingress-cidr"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift:securitygroupingress-cidr"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift:CreateTags",
         "redshift:CreateUsageLimit",
         "redshift:DeleteTags",
         "redshift:DeleteUsageLimit",
         "redshift:DescribeTags",
         "redshift:DescribeUsageLimits",
         "redshift:ModifyUsageLimit"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift:CreateTags",
        "redshift:CreateUsageLimit",
        "redshift:DeleteTags",
        "redshift:DeleteUsageLimit",
        "redshift:DescribeTags",
        "redshift:DescribeUsageLimits",
        "redshift:ModifyUsageLimit"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift:usagelimit"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift:usagelimit"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift:DeleteQev2IdcApplication",
         "redshift:ModifyQev2IdcApplication"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift:DeleteQev2IdcApplication",
        "redshift:ModifyQev2IdcApplication"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift:qev2idcapplication"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift:qev2idcapplication"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift:DeleteRedshiftIdcApplication",
         "redshift:ModifyRedshiftIdcApplication"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift:DeleteRedshiftIdcApplication",
        "redshift:ModifyRedshiftIdcApplication"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift:redshiftidcapplication"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift:redshiftidcapplication"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift:DeleteResourcePolicy",
         "redshift:GetResourcePolicy",
         "redshift:PutResourcePolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift:DeleteResourcePolicy",
        "redshift:GetResourcePolicy",
        "redshift:PutResourcePolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift:namespace"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift:namespace"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift:GetClusterCredentials",
         "redshift:JoinGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift:GetClusterCredentials",
        "redshift:JoinGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift:dbgroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift:dbgroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift:GetClusterCredentials",
         "redshift:GetClusterCredentialsWithIAM"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift:GetClusterCredentials",
        "redshift:GetClusterCredentialsWithIAM"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift:dbname"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift:dbname"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift-data:BatchExecuteStatement",
         "redshift-data:DescribeTable",
         "redshift-data:ExecuteStatement",
         "redshift-data:ListDatabases",
         "redshift-data:ListSchemas",
         "redshift-data:ListTables"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift-data:BatchExecuteStatement",
        "redshift-data:DescribeTable",
        "redshift-data:ExecuteStatement",
        "redshift-data:ListDatabases",
        "redshift-data:ListSchemas",
        "redshift-data:ListTables"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift-data:cluster"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift-data:cluster"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift-data:BatchExecuteStatement",
         "redshift-data:DescribeTable",
         "redshift-data:ExecuteStatement",
         "redshift-data:ListDatabases",
         "redshift-data:ListSchemas",
         "redshift-data:ListTables"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift-data:BatchExecuteStatement",
        "redshift-data:DescribeTable",
        "redshift-data:ExecuteStatement",
        "redshift-data:ListDatabases",
        "redshift-data:ListSchemas",
        "redshift-data:ListTables"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift-data:workgroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift-data:workgroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift-data:GetStagingBucketLocation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift-data:GetStagingBucketLocation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift-data:managed-workgroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift-data:managed-workgroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift-serverless:ConvertRecoveryPointToSnapshot",
         "redshift-serverless:GetRecoveryPoint",
         "redshift-serverless:RestoreFromRecoveryPoint",
         "redshift-serverless:RestoreTableFromRecoveryPoint",
         "redshift-serverless:TagResource",
         "redshift-serverless:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift-serverless:ConvertRecoveryPointToSnapshot",
        "redshift-serverless:GetRecoveryPoint",
        "redshift-serverless:RestoreFromRecoveryPoint",
        "redshift-serverless:RestoreTableFromRecoveryPoint",
        "redshift-serverless:TagResource",
        "redshift-serverless:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift-serverless:recoveryPoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift-serverless:recoveryPoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift-serverless:ConvertRecoveryPointToSnapshot",
         "redshift-serverless:CreateSnapshot",
         "redshift-serverless:DeleteSnapshot",
         "redshift-serverless:GetSnapshot",
         "redshift-serverless:ListSnapshots",
         "redshift-serverless:RestoreFromSnapshot",
         "redshift-serverless:RestoreTableFromSnapshot",
         "redshift-serverless:TagResource",
         "redshift-serverless:UntagResource",
         "redshift-serverless:UpdateSnapshot"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift-serverless:ConvertRecoveryPointToSnapshot",
        "redshift-serverless:CreateSnapshot",
        "redshift-serverless:DeleteSnapshot",
        "redshift-serverless:GetSnapshot",
        "redshift-serverless:ListSnapshots",
        "redshift-serverless:RestoreFromSnapshot",
        "redshift-serverless:RestoreTableFromSnapshot",
        "redshift-serverless:TagResource",
        "redshift-serverless:UntagResource",
        "redshift-serverless:UpdateSnapshot"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift-serverless:snapshot"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift-serverless:snapshot"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift-serverless:CreateCustomDomainAssociation",
         "redshift-serverless:CreateWorkgroup",
         "redshift-serverless:DeleteCustomDomainAssociation",
         "redshift-serverless:DeleteWorkgroup",
         "redshift-serverless:GetCredentials",
         "redshift-serverless:GetCustomDomainAssociation",
         "redshift-serverless:GetWorkgroup",
         "redshift-serverless:ListTagsForResource",
         "redshift-serverless:TagResource",
         "redshift-serverless:UntagResource",
         "redshift-serverless:UpdateCustomDomainAssociation",
         "redshift-serverless:UpdateWorkgroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift-serverless:CreateCustomDomainAssociation",
        "redshift-serverless:CreateWorkgroup",
        "redshift-serverless:DeleteCustomDomainAssociation",
        "redshift-serverless:DeleteWorkgroup",
        "redshift-serverless:GetCredentials",
        "redshift-serverless:GetCustomDomainAssociation",
        "redshift-serverless:GetWorkgroup",
        "redshift-serverless:ListTagsForResource",
        "redshift-serverless:TagResource",
        "redshift-serverless:UntagResource",
        "redshift-serverless:UpdateCustomDomainAssociation",
        "redshift-serverless:UpdateWorkgroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift-serverless:workgroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift-serverless:workgroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift-serverless:CreateEndpointAccess",
         "redshift-serverless:DeleteEndpointAccess",
         "redshift-serverless:GetEndpointAccess",
         "redshift-serverless:ListEndpointAccess",
         "redshift-serverless:UpdateEndpointAccess"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift-serverless:CreateEndpointAccess",
        "redshift-serverless:DeleteEndpointAccess",
        "redshift-serverless:GetEndpointAccess",
        "redshift-serverless:ListEndpointAccess",
        "redshift-serverless:UpdateEndpointAccess"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift-serverless:endpointAccess"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift-serverless:endpointAccess"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift-serverless:CreateNamespace",
         "redshift-serverless:CreateScheduledAction",
         "redshift-serverless:CreateSnapshotCopyConfiguration",
         "redshift-serverless:DeleteNamespace",
         "redshift-serverless:GetNamespace",
         "redshift-serverless:ListRecoveryPoints",
         "redshift-serverless:ListSnapshotCopyConfigurations",
         "redshift-serverless:ListTagsForResource",
         "redshift-serverless:RestoreTableFromRecoveryPoint",
         "redshift-serverless:RestoreTableFromSnapshot",
         "redshift-serverless:TagResource",
         "redshift-serverless:UntagResource",
         "redshift-serverless:UpdateNamespace"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift-serverless:CreateNamespace",
        "redshift-serverless:CreateScheduledAction",
        "redshift-serverless:CreateSnapshotCopyConfiguration",
        "redshift-serverless:DeleteNamespace",
        "redshift-serverless:GetNamespace",
        "redshift-serverless:ListRecoveryPoints",
        "redshift-serverless:ListSnapshotCopyConfigurations",
        "redshift-serverless:ListTagsForResource",
        "redshift-serverless:RestoreTableFromRecoveryPoint",
        "redshift-serverless:RestoreTableFromSnapshot",
        "redshift-serverless:TagResource",
        "redshift-serverless:UntagResource",
        "redshift-serverless:UpdateNamespace"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift-serverless:namespace"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift-serverless:namespace"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "redshift-serverless:GetManagedWorkgroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "redshift-serverless:GetManagedWorkgroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/redshift-serverless:managed-workgroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/redshift-serverless:managed-workgroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "refactor-spaces:DeleteApplication",
         "refactor-spaces:GetApplication",
         "refactor-spaces:ListApplications",
         "refactor-spaces:TagResource",
         "refactor-spaces:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "refactor-spaces:DeleteApplication",
        "refactor-spaces:GetApplication",
        "refactor-spaces:ListApplications",
        "refactor-spaces:TagResource",
        "refactor-spaces:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/refactor-spaces:application"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/refactor-spaces:application"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "refactor-spaces:DeleteEnvironment",
         "refactor-spaces:GetEnvironment",
         "refactor-spaces:ListEnvironmentVpcs",
         "refactor-spaces:ListServices",
         "refactor-spaces:TagResource",
         "refactor-spaces:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "refactor-spaces:DeleteEnvironment",
        "refactor-spaces:GetEnvironment",
        "refactor-spaces:ListEnvironmentVpcs",
        "refactor-spaces:ListServices",
        "refactor-spaces:TagResource",
        "refactor-spaces:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/refactor-spaces:environment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/refactor-spaces:environment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "refactor-spaces:DeleteRoute",
         "refactor-spaces:GetRoute",
         "refactor-spaces:ListRoutes",
         "refactor-spaces:TagResource",
         "refactor-spaces:UntagResource",
         "refactor-spaces:UpdateRoute"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "refactor-spaces:DeleteRoute",
        "refactor-spaces:GetRoute",
        "refactor-spaces:ListRoutes",
        "refactor-spaces:TagResource",
        "refactor-spaces:UntagResource",
        "refactor-spaces:UpdateRoute"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/refactor-spaces:route"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/refactor-spaces:route"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "refactor-spaces:DeleteService",
         "refactor-spaces:GetService",
         "refactor-spaces:TagResource",
         "refactor-spaces:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "refactor-spaces:DeleteService",
        "refactor-spaces:GetService",
        "refactor-spaces:TagResource",
        "refactor-spaces:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/refactor-spaces:service"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/refactor-spaces:service"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rekognition:AssociateFaces",
         "rekognition:CreateStreamProcessor",
         "rekognition:CreateUser",
         "rekognition:DeleteCollection",
         "rekognition:DeleteFaces",
         "rekognition:DeleteUser",
         "rekognition:DescribeCollection",
         "rekognition:DisassociateFaces",
         "rekognition:IndexFaces",
         "rekognition:ListFaces",
         "rekognition:ListTagsForResource",
         "rekognition:ListUsers",
         "rekognition:SearchFaces",
         "rekognition:SearchFacesByImage",
         "rekognition:SearchUsers",
         "rekognition:SearchUsersByImage",
         "rekognition:StartFaceSearch",
         "rekognition:TagResource",
         "rekognition:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rekognition:AssociateFaces",
        "rekognition:CreateStreamProcessor",
        "rekognition:CreateUser",
        "rekognition:DeleteCollection",
        "rekognition:DeleteFaces",
        "rekognition:DeleteUser",
        "rekognition:DescribeCollection",
        "rekognition:DisassociateFaces",
        "rekognition:IndexFaces",
        "rekognition:ListFaces",
        "rekognition:ListTagsForResource",
        "rekognition:ListUsers",
        "rekognition:SearchFaces",
        "rekognition:SearchFacesByImage",
        "rekognition:SearchUsers",
        "rekognition:SearchUsersByImage",
        "rekognition:StartFaceSearch",
        "rekognition:TagResource",
        "rekognition:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rekognition:collection"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rekognition:collection"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rekognition:CopyProjectVersion",
         "rekognition:CreateDataset",
         "rekognition:CreateProject",
         "rekognition:CreateProjectVersion",
         "rekognition:DeleteProject",
         "rekognition:DeleteProjectPolicy",
         "rekognition:DescribeProjectVersions",
         "rekognition:ListProjectPolicies",
         "rekognition:ListTagsForResource",
         "rekognition:PutProjectPolicy",
         "rekognition:TagResource",
         "rekognition:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rekognition:CopyProjectVersion",
        "rekognition:CreateDataset",
        "rekognition:CreateProject",
        "rekognition:CreateProjectVersion",
        "rekognition:DeleteProject",
        "rekognition:DeleteProjectPolicy",
        "rekognition:DescribeProjectVersions",
        "rekognition:ListProjectPolicies",
        "rekognition:ListTagsForResource",
        "rekognition:PutProjectPolicy",
        "rekognition:TagResource",
        "rekognition:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rekognition:project"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rekognition:project"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rekognition:CopyProjectVersion",
         "rekognition:DeleteProjectVersion",
         "rekognition:DetectCustomLabels",
         "rekognition:DetectModerationLabels",
         "rekognition:ListTagsForResource",
         "rekognition:StartMediaAnalysisJob",
         "rekognition:StartProjectVersion",
         "rekognition:StopProjectVersion",
         "rekognition:TagResource",
         "rekognition:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rekognition:CopyProjectVersion",
        "rekognition:DeleteProjectVersion",
        "rekognition:DetectCustomLabels",
        "rekognition:DetectModerationLabels",
        "rekognition:ListTagsForResource",
        "rekognition:StartMediaAnalysisJob",
        "rekognition:StartProjectVersion",
        "rekognition:StopProjectVersion",
        "rekognition:TagResource",
        "rekognition:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rekognition:projectversion"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rekognition:projectversion"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rekognition:DeleteDataset",
         "rekognition:DescribeDataset",
         "rekognition:DistributeDatasetEntries",
         "rekognition:ListDatasetEntries",
         "rekognition:ListDatasetLabels",
         "rekognition:ListTagsForResource",
         "rekognition:TagResource",
         "rekognition:UntagResource",
         "rekognition:UpdateDatasetEntries"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rekognition:DeleteDataset",
        "rekognition:DescribeDataset",
        "rekognition:DistributeDatasetEntries",
        "rekognition:ListDatasetEntries",
        "rekognition:ListDatasetLabels",
        "rekognition:ListTagsForResource",
        "rekognition:TagResource",
        "rekognition:UntagResource",
        "rekognition:UpdateDatasetEntries"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rekognition:dataset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rekognition:dataset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rekognition:DeleteStreamProcessor",
         "rekognition:DescribeStreamProcessor",
         "rekognition:ListStreamProcessors",
         "rekognition:ListTagsForResource",
         "rekognition:StartStreamProcessor",
         "rekognition:StopStreamProcessor",
         "rekognition:TagResource",
         "rekognition:UntagResource",
         "rekognition:UpdateStreamProcessor"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rekognition:DeleteStreamProcessor",
        "rekognition:DescribeStreamProcessor",
        "rekognition:ListStreamProcessors",
        "rekognition:ListTagsForResource",
        "rekognition:StartStreamProcessor",
        "rekognition:StopStreamProcessor",
        "rekognition:TagResource",
        "rekognition:UntagResource",
        "rekognition:UpdateStreamProcessor"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rekognition:streamprocessor"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rekognition:streamprocessor"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "repostspace:BatchAddRole",
         "repostspace:BatchRemoveRole",
         "repostspace:DeleteSpace",
         "repostspace:DeregisterAdmin",
         "repostspace:GetSpace",
         "repostspace:ListTagsForResource",
         "repostspace:RegisterAdmin",
         "repostspace:SendInvites",
         "repostspace:TagResource",
         "repostspace:UntagResource",
         "repostspace:UpdateSpace"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "repostspace:BatchAddRole",
        "repostspace:BatchRemoveRole",
        "repostspace:DeleteSpace",
        "repostspace:DeregisterAdmin",
        "repostspace:GetSpace",
        "repostspace:ListTagsForResource",
        "repostspace:RegisterAdmin",
        "repostspace:SendInvites",
        "repostspace:TagResource",
        "repostspace:UntagResource",
        "repostspace:UpdateSpace"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/repostspace:space"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/repostspace:space"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "resiliencehub:AcceptResourceGroupingRecommendations",
         "resiliencehub:AddDraftAppVersionResourceMappings",
         "resiliencehub:BatchUpdateRecommendationStatus",
         "resiliencehub:CreateAppVersionAppComponent",
         "resiliencehub:CreateAppVersionResource",
         "resiliencehub:CreateRecommendationTemplate",
         "resiliencehub:DeleteApp",
         "resiliencehub:DeleteAppAssessment",
         "resiliencehub:DeleteAppInputSource",
         "resiliencehub:DeleteAppVersionAppComponent",
         "resiliencehub:DeleteAppVersionResource",
         "resiliencehub:DeleteRecommendationTemplate",
         "resiliencehub:DescribeApp",
         "resiliencehub:DescribeAppAssessment",
         "resiliencehub:DescribeAppVersion",
         "resiliencehub:DescribeAppVersionAppComponent",
         "resiliencehub:DescribeAppVersionResource",
         "resiliencehub:DescribeAppVersionResourcesResolutionStatus",
         "resiliencehub:DescribeAppVersionTemplate",
         "resiliencehub:DescribeDraftAppVersionResourcesImportStatus",
         "resiliencehub:DescribeResourceGroupingRecommendationTask",
         "resiliencehub:ImportResourcesToDraftAppVersion",
         "resiliencehub:ListAlarmRecommendations",
         "resiliencehub:ListAppAssessmentComplianceDrifts",
         "resiliencehub:ListAppAssessmentResourceDrifts",
         "resiliencehub:ListAppComponentCompliances",
         "resiliencehub:ListAppComponentRecommendations",
         "resiliencehub:ListAppInputSources",
         "resiliencehub:ListAppVersionAppComponents",
         "resiliencehub:ListAppVersionResourceMappings",
         "resiliencehub:ListAppVersionResources",
         "resiliencehub:ListAppVersions",
         "resiliencehub:ListRecommendationTemplates",
         "resiliencehub:ListResourceGroupingRecommendations",
         "resiliencehub:ListSopRecommendations",
         "resiliencehub:ListTestRecommendations",
         "resiliencehub:ListUnsupportedAppVersionResources",
         "resiliencehub:PublishAppVersion",
         "resiliencehub:PutDraftAppVersionTemplate",
         "resiliencehub:RejectResourceGroupingRecommendations",
         "resiliencehub:RemoveDraftAppVersionResourceMappings",
         "resiliencehub:ResolveAppVersionResources",
         "resiliencehub:StartAppAssessment",
         "resiliencehub:StartResourceGroupingRecommendationTask",
         "resiliencehub:TagResource",
         "resiliencehub:UntagResource",
         "resiliencehub:UpdateApp",
         "resiliencehub:UpdateAppVersion",
         "resiliencehub:UpdateAppVersionAppComponent",
         "resiliencehub:UpdateAppVersionResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "resiliencehub:AcceptResourceGroupingRecommendations",
        "resiliencehub:AddDraftAppVersionResourceMappings",
        "resiliencehub:BatchUpdateRecommendationStatus",
        "resiliencehub:CreateAppVersionAppComponent",
        "resiliencehub:CreateAppVersionResource",
        "resiliencehub:CreateRecommendationTemplate",
        "resiliencehub:DeleteApp",
        "resiliencehub:DeleteAppAssessment",
        "resiliencehub:DeleteAppInputSource",
        "resiliencehub:DeleteAppVersionAppComponent",
        "resiliencehub:DeleteAppVersionResource",
        "resiliencehub:DeleteRecommendationTemplate",
        "resiliencehub:DescribeApp",
        "resiliencehub:DescribeAppAssessment",
        "resiliencehub:DescribeAppVersion",
        "resiliencehub:DescribeAppVersionAppComponent",
        "resiliencehub:DescribeAppVersionResource",
        "resiliencehub:DescribeAppVersionResourcesResolutionStatus",
        "resiliencehub:DescribeAppVersionTemplate",
        "resiliencehub:DescribeDraftAppVersionResourcesImportStatus",
        "resiliencehub:DescribeResourceGroupingRecommendationTask",
        "resiliencehub:ImportResourcesToDraftAppVersion",
        "resiliencehub:ListAlarmRecommendations",
        "resiliencehub:ListAppAssessmentComplianceDrifts",
        "resiliencehub:ListAppAssessmentResourceDrifts",
        "resiliencehub:ListAppComponentCompliances",
        "resiliencehub:ListAppComponentRecommendations",
        "resiliencehub:ListAppInputSources",
        "resiliencehub:ListAppVersionAppComponents",
        "resiliencehub:ListAppVersionResourceMappings",
        "resiliencehub:ListAppVersionResources",
        "resiliencehub:ListAppVersions",
        "resiliencehub:ListRecommendationTemplates",
        "resiliencehub:ListResourceGroupingRecommendations",
        "resiliencehub:ListSopRecommendations",
        "resiliencehub:ListTestRecommendations",
        "resiliencehub:ListUnsupportedAppVersionResources",
        "resiliencehub:PublishAppVersion",
        "resiliencehub:PutDraftAppVersionTemplate",
        "resiliencehub:RejectResourceGroupingRecommendations",
        "resiliencehub:RemoveDraftAppVersionResourceMappings",
        "resiliencehub:ResolveAppVersionResources",
        "resiliencehub:StartAppAssessment",
        "resiliencehub:StartResourceGroupingRecommendationTask",
        "resiliencehub:TagResource",
        "resiliencehub:UntagResource",
        "resiliencehub:UpdateApp",
        "resiliencehub:UpdateAppVersion",
        "resiliencehub:UpdateAppVersionAppComponent",
        "resiliencehub:UpdateAppVersionResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/resiliencehub:application"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/resiliencehub:application"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "resiliencehub:DeleteResiliencyPolicy",
         "resiliencehub:DescribeResiliencyPolicy",
         "resiliencehub:TagResource",
         "resiliencehub:UntagResource",
         "resiliencehub:UpdateResiliencyPolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "resiliencehub:DeleteResiliencyPolicy",
        "resiliencehub:DescribeResiliencyPolicy",
        "resiliencehub:TagResource",
        "resiliencehub:UntagResource",
        "resiliencehub:UpdateResiliencyPolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/resiliencehub:resiliency-policy"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/resiliencehub:resiliency-policy"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "resiliencehub:TagResource",
         "resiliencehub:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "resiliencehub:TagResource",
        "resiliencehub:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/resiliencehub:app-assessment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/resiliencehub:app-assessment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "resiliencehub:TagResource",
         "resiliencehub:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "resiliencehub:TagResource",
        "resiliencehub:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/resiliencehub:recommendation-template"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/resiliencehub:recommendation-template"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "resource-explorer-2:DeleteIndex",
         "resource-explorer-2:ListTagsForResource",
         "resource-explorer-2:TagResource",
         "resource-explorer-2:UntagResource",
         "resource-explorer-2:UpdateIndexType"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "resource-explorer-2:DeleteIndex",
        "resource-explorer-2:ListTagsForResource",
        "resource-explorer-2:TagResource",
        "resource-explorer-2:UntagResource",
        "resource-explorer-2:UpdateIndexType"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/resource-explorer-2:index"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/resource-explorer-2:index"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "resource-explorer-2:DeleteResourcePolicy",
         "resource-explorer-2:DeleteView",
         "resource-explorer-2:GetResourcePolicy",
         "resource-explorer-2:GetView",
         "resource-explorer-2:ListTagsForResource",
         "resource-explorer-2:PutResourcePolicy",
         "resource-explorer-2:Search",
         "resource-explorer-2:TagResource",
         "resource-explorer-2:UntagResource",
         "resource-explorer-2:UpdateView"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "resource-explorer-2:DeleteResourcePolicy",
        "resource-explorer-2:DeleteView",
        "resource-explorer-2:GetResourcePolicy",
        "resource-explorer-2:GetView",
        "resource-explorer-2:ListTagsForResource",
        "resource-explorer-2:PutResourcePolicy",
        "resource-explorer-2:Search",
        "resource-explorer-2:TagResource",
        "resource-explorer-2:UntagResource",
        "resource-explorer-2:UpdateView"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/resource-explorer-2:view"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/resource-explorer-2:view"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "resource-explorer-2:GetManagedView"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "resource-explorer-2:GetManagedView"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/resource-explorer-2:managed-view"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/resource-explorer-2:managed-view"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "resource-groups:AssociateResource",
         "resource-groups:CancelTagSyncTask",
         "resource-groups:DeleteGroup",
         "resource-groups:DeleteGroupPolicy",
         "resource-groups:DisassociateResource",
         "resource-groups:GetGroup",
         "resource-groups:GetGroupConfiguration",
         "resource-groups:GetGroupPolicy",
         "resource-groups:GetGroupQuery",
         "resource-groups:GetTagSyncTask",
         "resource-groups:GetTags",
         "resource-groups:GroupResources",
         "resource-groups:ListGroupResources",
         "resource-groups:ListGroupingStatuses",
         "resource-groups:ListTagSyncTasks",
         "resource-groups:PutGroupConfiguration",
         "resource-groups:PutGroupPolicy",
         "resource-groups:StartTagSyncTask",
         "resource-groups:Tag",
         "resource-groups:UngroupResources",
         "resource-groups:Untag",
         "resource-groups:UpdateGroup",
         "resource-groups:UpdateGroupQuery"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "resource-groups:AssociateResource",
        "resource-groups:CancelTagSyncTask",
        "resource-groups:DeleteGroup",
        "resource-groups:DeleteGroupPolicy",
        "resource-groups:DisassociateResource",
        "resource-groups:GetGroup",
        "resource-groups:GetGroupConfiguration",
        "resource-groups:GetGroupPolicy",
        "resource-groups:GetGroupQuery",
        "resource-groups:GetTagSyncTask",
        "resource-groups:GetTags",
        "resource-groups:GroupResources",
        "resource-groups:ListGroupResources",
        "resource-groups:ListGroupingStatuses",
        "resource-groups:ListTagSyncTasks",
        "resource-groups:PutGroupConfiguration",
        "resource-groups:PutGroupPolicy",
        "resource-groups:StartTagSyncTask",
        "resource-groups:Tag",
        "resource-groups:UngroupResources",
        "resource-groups:Untag",
        "resource-groups:UpdateGroup",
        "resource-groups:UpdateGroupQuery"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/resource-groups:group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/resource-groups:group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "robomaker:CancelDeploymentJob",
         "robomaker:DescribeDeploymentJob",
         "robomaker:ListTagsForResource",
         "robomaker:TagResource",
         "robomaker:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "robomaker:CancelDeploymentJob",
        "robomaker:DescribeDeploymentJob",
        "robomaker:ListTagsForResource",
        "robomaker:TagResource",
        "robomaker:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/robomaker:deploymentJob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/robomaker:deploymentJob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "robomaker:CancelSimulationJob",
         "robomaker:DescribeSimulationJob",
         "robomaker:ListTagsForResource",
         "robomaker:RestartSimulationJob",
         "robomaker:TagResource",
         "robomaker:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "robomaker:CancelSimulationJob",
        "robomaker:DescribeSimulationJob",
        "robomaker:ListTagsForResource",
        "robomaker:RestartSimulationJob",
        "robomaker:TagResource",
        "robomaker:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/robomaker:simulationJob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/robomaker:simulationJob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "robomaker:CancelSimulationJobBatch",
         "robomaker:DescribeSimulationJobBatch",
         "robomaker:ListTagsForResource",
         "robomaker:TagResource",
         "robomaker:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "robomaker:CancelSimulationJobBatch",
        "robomaker:DescribeSimulationJobBatch",
        "robomaker:ListTagsForResource",
        "robomaker:TagResource",
        "robomaker:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/robomaker:simulationJobBatch"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/robomaker:simulationJobBatch"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "robomaker:CancelWorldExportJob",
         "robomaker:DescribeWorldExportJob",
         "robomaker:ListTagsForResource",
         "robomaker:TagResource",
         "robomaker:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "robomaker:CancelWorldExportJob",
        "robomaker:DescribeWorldExportJob",
        "robomaker:ListTagsForResource",
        "robomaker:TagResource",
        "robomaker:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/robomaker:worldExportJob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/robomaker:worldExportJob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "robomaker:CancelWorldGenerationJob",
         "robomaker:DescribeWorldGenerationJob",
         "robomaker:ListTagsForResource",
         "robomaker:TagResource",
         "robomaker:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "robomaker:CancelWorldGenerationJob",
        "robomaker:DescribeWorldGenerationJob",
        "robomaker:ListTagsForResource",
        "robomaker:TagResource",
        "robomaker:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/robomaker:worldGenerationJob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/robomaker:worldGenerationJob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "robomaker:CreateRobotApplicationVersion",
         "robomaker:DeleteRobotApplication",
         "robomaker:DescribeRobotApplication",
         "robomaker:ListTagsForResource",
         "robomaker:TagResource",
         "robomaker:UntagResource",
         "robomaker:UpdateRobotApplication"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "robomaker:CreateRobotApplicationVersion",
        "robomaker:DeleteRobotApplication",
        "robomaker:DescribeRobotApplication",
        "robomaker:ListTagsForResource",
        "robomaker:TagResource",
        "robomaker:UntagResource",
        "robomaker:UpdateRobotApplication"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/robomaker:robotApplication"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/robomaker:robotApplication"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "robomaker:CreateSimulationApplicationVersion",
         "robomaker:DeleteSimulationApplication",
         "robomaker:DescribeSimulationApplication",
         "robomaker:ListTagsForResource",
         "robomaker:TagResource",
         "robomaker:UntagResource",
         "robomaker:UpdateSimulationApplication"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "robomaker:CreateSimulationApplicationVersion",
        "robomaker:DeleteSimulationApplication",
        "robomaker:DescribeSimulationApplication",
        "robomaker:ListTagsForResource",
        "robomaker:TagResource",
        "robomaker:UntagResource",
        "robomaker:UpdateSimulationApplication"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/robomaker:simulationApplication"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/robomaker:simulationApplication"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "robomaker:CreateWorldExportJob",
         "robomaker:DescribeWorld",
         "robomaker:ListTagsForResource",
         "robomaker:TagResource",
         "robomaker:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "robomaker:CreateWorldExportJob",
        "robomaker:DescribeWorld",
        "robomaker:ListTagsForResource",
        "robomaker:TagResource",
        "robomaker:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/robomaker:world"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/robomaker:world"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "robomaker:CreateWorldGenerationJob",
         "robomaker:DeleteWorldTemplate",
         "robomaker:DescribeWorldTemplate",
         "robomaker:GetWorldTemplateBody",
         "robomaker:ListTagsForResource",
         "robomaker:TagResource",
         "robomaker:UntagResource",
         "robomaker:UpdateWorldTemplate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "robomaker:CreateWorldGenerationJob",
        "robomaker:DeleteWorldTemplate",
        "robomaker:DescribeWorldTemplate",
        "robomaker:GetWorldTemplateBody",
        "robomaker:ListTagsForResource",
        "robomaker:TagResource",
        "robomaker:UntagResource",
        "robomaker:UpdateWorldTemplate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/robomaker:worldTemplate"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/robomaker:worldTemplate"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "robomaker:DeleteFleet",
         "robomaker:DeregisterRobot",
         "robomaker:DescribeFleet",
         "robomaker:ListTagsForResource",
         "robomaker:RegisterRobot",
         "robomaker:SyncDeploymentJob",
         "robomaker:TagResource",
         "robomaker:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "robomaker:DeleteFleet",
        "robomaker:DeregisterRobot",
        "robomaker:DescribeFleet",
        "robomaker:ListTagsForResource",
        "robomaker:RegisterRobot",
        "robomaker:SyncDeploymentJob",
        "robomaker:TagResource",
        "robomaker:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/robomaker:deploymentFleet"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/robomaker:deploymentFleet"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "robomaker:DeleteRobot",
         "robomaker:DeregisterRobot",
         "robomaker:DescribeRobot",
         "robomaker:ListTagsForResource",
         "robomaker:RegisterRobot",
         "robomaker:TagResource",
         "robomaker:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "robomaker:DeleteRobot",
        "robomaker:DeregisterRobot",
        "robomaker:DescribeRobot",
        "robomaker:ListTagsForResource",
        "robomaker:RegisterRobot",
        "robomaker:TagResource",
        "robomaker:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/robomaker:robot"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/robomaker:robot"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rolesanywhere:DeleteAttributeMapping",
         "rolesanywhere:DeleteProfile",
         "rolesanywhere:DisableProfile",
         "rolesanywhere:EnableProfile",
         "rolesanywhere:GetProfile",
         "rolesanywhere:PutAttributeMapping",
         "rolesanywhere:TagResource",
         "rolesanywhere:UntagResource",
         "rolesanywhere:UpdateProfile"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rolesanywhere:DeleteAttributeMapping",
        "rolesanywhere:DeleteProfile",
        "rolesanywhere:DisableProfile",
        "rolesanywhere:EnableProfile",
        "rolesanywhere:GetProfile",
        "rolesanywhere:PutAttributeMapping",
        "rolesanywhere:TagResource",
        "rolesanywhere:UntagResource",
        "rolesanywhere:UpdateProfile"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rolesanywhere:profile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rolesanywhere:profile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rolesanywhere:DeleteCrl",
         "rolesanywhere:DisableCrl",
         "rolesanywhere:EnableCrl",
         "rolesanywhere:GetCrl",
         "rolesanywhere:TagResource",
         "rolesanywhere:UntagResource",
         "rolesanywhere:UpdateCrl"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rolesanywhere:DeleteCrl",
        "rolesanywhere:DisableCrl",
        "rolesanywhere:EnableCrl",
        "rolesanywhere:GetCrl",
        "rolesanywhere:TagResource",
        "rolesanywhere:UntagResource",
        "rolesanywhere:UpdateCrl"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rolesanywhere:crl"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rolesanywhere:crl"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rolesanywhere:DeleteTrustAnchor",
         "rolesanywhere:DisableTrustAnchor",
         "rolesanywhere:EnableTrustAnchor",
         "rolesanywhere:GetTrustAnchor",
         "rolesanywhere:PutNotificationSettings",
         "rolesanywhere:ResetNotificationSettings",
         "rolesanywhere:TagResource",
         "rolesanywhere:UntagResource",
         "rolesanywhere:UpdateTrustAnchor"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rolesanywhere:DeleteTrustAnchor",
        "rolesanywhere:DisableTrustAnchor",
        "rolesanywhere:EnableTrustAnchor",
        "rolesanywhere:GetTrustAnchor",
        "rolesanywhere:PutNotificationSettings",
        "rolesanywhere:ResetNotificationSettings",
        "rolesanywhere:TagResource",
        "rolesanywhere:UntagResource",
        "rolesanywhere:UpdateTrustAnchor"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rolesanywhere:trust-anchor"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rolesanywhere:trust-anchor"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rolesanywhere:GetSubject",
         "rolesanywhere:TagResource",
         "rolesanywhere:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rolesanywhere:GetSubject",
        "rolesanywhere:TagResource",
        "rolesanywhere:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rolesanywhere:subject"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rolesanywhere:subject"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53:ActivateKeySigningKey",
         "route53:AssociateVPCWithHostedZone",
         "route53:ChangeResourceRecordSets",
         "route53:ChangeTagsForResource",
         "route53:CreateKeySigningKey",
         "route53:CreateQueryLoggingConfig",
         "route53:CreateTrafficPolicyInstance",
         "route53:CreateVPCAssociationAuthorization",
         "route53:DeactivateKeySigningKey",
         "route53:DeleteHostedZone",
         "route53:DeleteKeySigningKey",
         "route53:DeleteVPCAssociationAuthorization",
         "route53:DisableHostedZoneDNSSEC",
         "route53:DisassociateVPCFromHostedZone",
         "route53:EnableHostedZoneDNSSEC",
         "route53:GetDNSSEC",
         "route53:GetHostedZone",
         "route53:GetHostedZoneLimit",
         "route53:ListQueryLoggingConfigs",
         "route53:ListResourceRecordSets",
         "route53:ListTagsForResource",
         "route53:ListTagsForResources",
         "route53:ListTrafficPolicyInstancesByHostedZone",
         "route53:ListVPCAssociationAuthorizations",
         "route53:UpdateHostedZoneComment"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53:ActivateKeySigningKey",
        "route53:AssociateVPCWithHostedZone",
        "route53:ChangeResourceRecordSets",
        "route53:ChangeTagsForResource",
        "route53:CreateKeySigningKey",
        "route53:CreateQueryLoggingConfig",
        "route53:CreateTrafficPolicyInstance",
        "route53:CreateVPCAssociationAuthorization",
        "route53:DeactivateKeySigningKey",
        "route53:DeleteHostedZone",
        "route53:DeleteKeySigningKey",
        "route53:DeleteVPCAssociationAuthorization",
        "route53:DisableHostedZoneDNSSEC",
        "route53:DisassociateVPCFromHostedZone",
        "route53:EnableHostedZoneDNSSEC",
        "route53:GetDNSSEC",
        "route53:GetHostedZone",
        "route53:GetHostedZoneLimit",
        "route53:ListQueryLoggingConfigs",
        "route53:ListResourceRecordSets",
        "route53:ListTagsForResource",
        "route53:ListTagsForResources",
        "route53:ListTrafficPolicyInstancesByHostedZone",
        "route53:ListVPCAssociationAuthorizations",
        "route53:UpdateHostedZoneComment"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53:hostedzone"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53:hostedzone"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53:ChangeCidrCollection",
         "route53:DeleteCidrCollection",
         "route53:ListCidrBlocks",
         "route53:ListCidrLocations"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53:ChangeCidrCollection",
        "route53:DeleteCidrCollection",
        "route53:ListCidrBlocks",
        "route53:ListCidrLocations"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53:cidrcollection"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53:cidrcollection"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53:ChangeTagsForResource",
         "route53:DeleteHealthCheck",
         "route53:GetHealthCheck",
         "route53:GetHealthCheckLastFailureReason",
         "route53:GetHealthCheckStatus",
         "route53:ListTagsForResource",
         "route53:ListTagsForResources",
         "route53:UpdateHealthCheck"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53:ChangeTagsForResource",
        "route53:DeleteHealthCheck",
        "route53:GetHealthCheck",
        "route53:GetHealthCheckLastFailureReason",
        "route53:GetHealthCheckStatus",
        "route53:ListTagsForResource",
        "route53:ListTagsForResources",
        "route53:UpdateHealthCheck"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53:healthcheck"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53:healthcheck"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53:CreateTrafficPolicyInstance",
         "route53:CreateTrafficPolicyVersion",
         "route53:DeleteTrafficPolicy",
         "route53:GetTrafficPolicy",
         "route53:ListTrafficPolicyInstancesByPolicy",
         "route53:ListTrafficPolicyVersions",
         "route53:UpdateTrafficPolicyComment"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53:CreateTrafficPolicyInstance",
        "route53:CreateTrafficPolicyVersion",
        "route53:DeleteTrafficPolicy",
        "route53:GetTrafficPolicy",
        "route53:ListTrafficPolicyInstancesByPolicy",
        "route53:ListTrafficPolicyVersions",
        "route53:UpdateTrafficPolicyComment"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53:trafficpolicy"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53:trafficpolicy"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53:DeleteQueryLoggingConfig",
         "route53:GetQueryLoggingConfig"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53:DeleteQueryLoggingConfig",
        "route53:GetQueryLoggingConfig"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53:queryloggingconfig"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53:queryloggingconfig"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53:DeleteReusableDelegationSet",
         "route53:GetReusableDelegationSet",
         "route53:GetReusableDelegationSetLimit"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53:DeleteReusableDelegationSet",
        "route53:GetReusableDelegationSet",
        "route53:GetReusableDelegationSetLimit"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53:delegationset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53:delegationset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53:DeleteTrafficPolicyInstance",
         "route53:GetTrafficPolicyInstance",
         "route53:UpdateTrafficPolicyInstance"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53:DeleteTrafficPolicyInstance",
        "route53:GetTrafficPolicyInstance",
        "route53:UpdateTrafficPolicyInstance"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53:trafficpolicyinstance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53:trafficpolicyinstance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53:GetChange"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53:GetChange"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53:change"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53:change"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53-recovery-cluster:GetRoutingControlState",
         "route53-recovery-cluster:UpdateRoutingControlState",
         "route53-recovery-cluster:UpdateRoutingControlStates"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53-recovery-cluster:GetRoutingControlState",
        "route53-recovery-cluster:UpdateRoutingControlState",
        "route53-recovery-cluster:UpdateRoutingControlStates"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53-recovery-cluster:routingcontrol"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53-recovery-cluster:routingcontrol"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53-recovery-control-config:CreateCluster",
         "route53-recovery-control-config:DeleteCluster",
         "route53-recovery-control-config:DescribeCluster",
         "route53-recovery-control-config:GetResourcePolicy",
         "route53-recovery-control-config:TagResource",
         "route53-recovery-control-config:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53-recovery-control-config:CreateCluster",
        "route53-recovery-control-config:DeleteCluster",
        "route53-recovery-control-config:DescribeCluster",
        "route53-recovery-control-config:GetResourcePolicy",
        "route53-recovery-control-config:TagResource",
        "route53-recovery-control-config:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53-recovery-control-config:cluster"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53-recovery-control-config:cluster"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53-recovery-control-config:CreateControlPanel",
         "route53-recovery-control-config:DeleteControlPanel",
         "route53-recovery-control-config:DescribeControlPanel",
         "route53-recovery-control-config:ListSafetyRules",
         "route53-recovery-control-config:TagResource",
         "route53-recovery-control-config:UntagResource",
         "route53-recovery-control-config:UpdateControlPanel"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53-recovery-control-config:CreateControlPanel",
        "route53-recovery-control-config:DeleteControlPanel",
        "route53-recovery-control-config:DescribeControlPanel",
        "route53-recovery-control-config:ListSafetyRules",
        "route53-recovery-control-config:TagResource",
        "route53-recovery-control-config:UntagResource",
        "route53-recovery-control-config:UpdateControlPanel"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53-recovery-control-config:controlpanel"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53-recovery-control-config:controlpanel"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53-recovery-control-config:CreateRoutingControl",
         "route53-recovery-control-config:DeleteRoutingControl",
         "route53-recovery-control-config:DescribeRoutingControl",
         "route53-recovery-control-config:DescribeRoutingControlByName",
         "route53-recovery-control-config:UpdateRoutingControl"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53-recovery-control-config:CreateRoutingControl",
        "route53-recovery-control-config:DeleteRoutingControl",
        "route53-recovery-control-config:DescribeRoutingControl",
        "route53-recovery-control-config:DescribeRoutingControlByName",
        "route53-recovery-control-config:UpdateRoutingControl"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53-recovery-control-config:routingcontrol"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53-recovery-control-config:routingcontrol"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53-recovery-control-config:CreateSafetyRule",
         "route53-recovery-control-config:DeleteSafetyRule",
         "route53-recovery-control-config:DescribeSafetyRule",
         "route53-recovery-control-config:TagResource",
         "route53-recovery-control-config:UntagResource",
         "route53-recovery-control-config:UpdateSafetyRule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53-recovery-control-config:CreateSafetyRule",
        "route53-recovery-control-config:DeleteSafetyRule",
        "route53-recovery-control-config:DescribeSafetyRule",
        "route53-recovery-control-config:TagResource",
        "route53-recovery-control-config:UntagResource",
        "route53-recovery-control-config:UpdateSafetyRule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53-recovery-control-config:safetyrule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53-recovery-control-config:safetyrule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53-recovery-readiness:CreateCell",
         "route53-recovery-readiness:DeleteCell",
         "route53-recovery-readiness:GetCell",
         "route53-recovery-readiness:GetCellReadinessSummary",
         "route53-recovery-readiness:TagResource",
         "route53-recovery-readiness:UntagResource",
         "route53-recovery-readiness:UpdateCell"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53-recovery-readiness:CreateCell",
        "route53-recovery-readiness:DeleteCell",
        "route53-recovery-readiness:GetCell",
        "route53-recovery-readiness:GetCellReadinessSummary",
        "route53-recovery-readiness:TagResource",
        "route53-recovery-readiness:UntagResource",
        "route53-recovery-readiness:UpdateCell"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53-recovery-readiness:cell"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53-recovery-readiness:cell"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53-recovery-readiness:CreateReadinessCheck",
         "route53-recovery-readiness:DeleteReadinessCheck",
         "route53-recovery-readiness:GetReadinessCheck",
         "route53-recovery-readiness:GetReadinessCheckResourceStatus",
         "route53-recovery-readiness:GetReadinessCheckStatus",
         "route53-recovery-readiness:TagResource",
         "route53-recovery-readiness:UntagResource",
         "route53-recovery-readiness:UpdateReadinessCheck"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53-recovery-readiness:CreateReadinessCheck",
        "route53-recovery-readiness:DeleteReadinessCheck",
        "route53-recovery-readiness:GetReadinessCheck",
        "route53-recovery-readiness:GetReadinessCheckResourceStatus",
        "route53-recovery-readiness:GetReadinessCheckStatus",
        "route53-recovery-readiness:TagResource",
        "route53-recovery-readiness:UntagResource",
        "route53-recovery-readiness:UpdateReadinessCheck"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53-recovery-readiness:readinesscheck"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53-recovery-readiness:readinesscheck"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53-recovery-readiness:CreateRecoveryGroup",
         "route53-recovery-readiness:DeleteRecoveryGroup",
         "route53-recovery-readiness:GetArchitectureRecommendations",
         "route53-recovery-readiness:GetRecoveryGroup",
         "route53-recovery-readiness:GetRecoveryGroupReadinessSummary",
         "route53-recovery-readiness:TagResource",
         "route53-recovery-readiness:UntagResource",
         "route53-recovery-readiness:UpdateRecoveryGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53-recovery-readiness:CreateRecoveryGroup",
        "route53-recovery-readiness:DeleteRecoveryGroup",
        "route53-recovery-readiness:GetArchitectureRecommendations",
        "route53-recovery-readiness:GetRecoveryGroup",
        "route53-recovery-readiness:GetRecoveryGroupReadinessSummary",
        "route53-recovery-readiness:TagResource",
        "route53-recovery-readiness:UntagResource",
        "route53-recovery-readiness:UpdateRecoveryGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53-recovery-readiness:recoverygroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53-recovery-readiness:recoverygroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53-recovery-readiness:CreateResourceSet",
         "route53-recovery-readiness:DeleteResourceSet",
         "route53-recovery-readiness:GetResourceSet",
         "route53-recovery-readiness:TagResource",
         "route53-recovery-readiness:UntagResource",
         "route53-recovery-readiness:UpdateResourceSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53-recovery-readiness:CreateResourceSet",
        "route53-recovery-readiness:DeleteResourceSet",
        "route53-recovery-readiness:GetResourceSet",
        "route53-recovery-readiness:TagResource",
        "route53-recovery-readiness:UntagResource",
        "route53-recovery-readiness:UpdateResourceSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53-recovery-readiness:resourceset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53-recovery-readiness:resourceset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53profiles:GetProfilePolicy",
         "route53profiles:PutProfilePolicy",
         "route53profiles:TagResource",
         "route53profiles:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53profiles:GetProfilePolicy",
        "route53profiles:PutProfilePolicy",
        "route53profiles:TagResource",
        "route53profiles:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53profiles:profile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53profiles:profile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53profiles:TagResource",
         "route53profiles:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53profiles:TagResource",
        "route53profiles:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53profiles:profile-association"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53profiles:profile-association"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53resolver:AssociateFirewallRuleGroup",
         "route53resolver:DisassociateFirewallRuleGroup",
         "route53resolver:GetFirewallRuleGroupAssociation",
         "route53resolver:ListTagsForResource",
         "route53resolver:TagResource",
         "route53resolver:UntagResource",
         "route53resolver:UpdateFirewallRuleGroupAssociation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53resolver:AssociateFirewallRuleGroup",
        "route53resolver:DisassociateFirewallRuleGroup",
        "route53resolver:GetFirewallRuleGroupAssociation",
        "route53resolver:ListTagsForResource",
        "route53resolver:TagResource",
        "route53resolver:UntagResource",
        "route53resolver:UpdateFirewallRuleGroupAssociation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53resolver:firewall-rule-group-association"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53resolver:firewall-rule-group-association"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53resolver:AssociateResolverEndpointIpAddress",
         "route53resolver:CreateResolverEndpoint",
         "route53resolver:DeleteResolverEndpoint",
         "route53resolver:DisassociateResolverEndpointIpAddress",
         "route53resolver:GetResolverEndpoint",
         "route53resolver:ListResolverEndpointIpAddresses",
         "route53resolver:ListTagsForResource",
         "route53resolver:TagResource",
         "route53resolver:UntagResource",
         "route53resolver:UpdateResolverEndpoint"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53resolver:AssociateResolverEndpointIpAddress",
        "route53resolver:CreateResolverEndpoint",
        "route53resolver:DeleteResolverEndpoint",
        "route53resolver:DisassociateResolverEndpointIpAddress",
        "route53resolver:GetResolverEndpoint",
        "route53resolver:ListResolverEndpointIpAddresses",
        "route53resolver:ListTagsForResource",
        "route53resolver:TagResource",
        "route53resolver:UntagResource",
        "route53resolver:UpdateResolverEndpoint"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53resolver:resolver-endpoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53resolver:resolver-endpoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53resolver:AssociateResolverQueryLogConfig",
         "route53resolver:DeleteResolverQueryLogConfig",
         "route53resolver:DisassociateResolverQueryLogConfig",
         "route53resolver:GetResolverQueryLogConfig",
         "route53resolver:GetResolverQueryLogConfigPolicy",
         "route53resolver:ListTagsForResource",
         "route53resolver:PutResolverQueryLogConfigPolicy",
         "route53resolver:TagResource",
         "route53resolver:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53resolver:AssociateResolverQueryLogConfig",
        "route53resolver:DeleteResolverQueryLogConfig",
        "route53resolver:DisassociateResolverQueryLogConfig",
        "route53resolver:GetResolverQueryLogConfig",
        "route53resolver:GetResolverQueryLogConfigPolicy",
        "route53resolver:ListTagsForResource",
        "route53resolver:PutResolverQueryLogConfigPolicy",
        "route53resolver:TagResource",
        "route53resolver:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53resolver:resolver-query-log-config"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53resolver:resolver-query-log-config"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53resolver:AssociateResolverRule",
         "route53resolver:CreateResolverRule",
         "route53resolver:DeleteResolverRule",
         "route53resolver:DisassociateResolverRule",
         "route53resolver:GetResolverRule",
         "route53resolver:GetResolverRuleAssociation",
         "route53resolver:GetResolverRulePolicy",
         "route53resolver:ListTagsForResource",
         "route53resolver:PutResolverRulePolicy",
         "route53resolver:TagResource",
         "route53resolver:UntagResource",
         "route53resolver:UpdateResolverRule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53resolver:AssociateResolverRule",
        "route53resolver:CreateResolverRule",
        "route53resolver:DeleteResolverRule",
        "route53resolver:DisassociateResolverRule",
        "route53resolver:GetResolverRule",
        "route53resolver:GetResolverRuleAssociation",
        "route53resolver:GetResolverRulePolicy",
        "route53resolver:ListTagsForResource",
        "route53resolver:PutResolverRulePolicy",
        "route53resolver:TagResource",
        "route53resolver:UntagResource",
        "route53resolver:UpdateResolverRule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53resolver:resolver-rule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53resolver:resolver-rule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53resolver:CreateFirewallDomainList",
         "route53resolver:CreateFirewallRule",
         "route53resolver:DeleteFirewallDomainList",
         "route53resolver:DeleteFirewallRule",
         "route53resolver:GetFirewallDomainList",
         "route53resolver:ImportFirewallDomains",
         "route53resolver:ListFirewallDomains",
         "route53resolver:ListTagsForResource",
         "route53resolver:TagResource",
         "route53resolver:UntagResource",
         "route53resolver:UpdateFirewallDomains",
         "route53resolver:UpdateFirewallRule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53resolver:CreateFirewallDomainList",
        "route53resolver:CreateFirewallRule",
        "route53resolver:DeleteFirewallDomainList",
        "route53resolver:DeleteFirewallRule",
        "route53resolver:GetFirewallDomainList",
        "route53resolver:ImportFirewallDomains",
        "route53resolver:ListFirewallDomains",
        "route53resolver:ListTagsForResource",
        "route53resolver:TagResource",
        "route53resolver:UntagResource",
        "route53resolver:UpdateFirewallDomains",
        "route53resolver:UpdateFirewallRule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53resolver:firewall-domain-list"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53resolver:firewall-domain-list"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53resolver:CreateFirewallRule",
         "route53resolver:CreateFirewallRuleGroup",
         "route53resolver:DeleteFirewallRule",
         "route53resolver:DeleteFirewallRuleGroup",
         "route53resolver:GetFirewallRuleGroup",
         "route53resolver:GetFirewallRuleGroupPolicy",
         "route53resolver:ListFirewallRules",
         "route53resolver:ListTagsForResource",
         "route53resolver:PutFirewallRuleGroupPolicy",
         "route53resolver:TagResource",
         "route53resolver:UntagResource",
         "route53resolver:UpdateFirewallRule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53resolver:CreateFirewallRule",
        "route53resolver:CreateFirewallRuleGroup",
        "route53resolver:DeleteFirewallRule",
        "route53resolver:DeleteFirewallRuleGroup",
        "route53resolver:GetFirewallRuleGroup",
        "route53resolver:GetFirewallRuleGroupPolicy",
        "route53resolver:ListFirewallRules",
        "route53resolver:ListTagsForResource",
        "route53resolver:PutFirewallRuleGroupPolicy",
        "route53resolver:TagResource",
        "route53resolver:UntagResource",
        "route53resolver:UpdateFirewallRule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53resolver:firewall-rule-group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53resolver:firewall-rule-group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53resolver:CreateOutpostResolver",
         "route53resolver:DeleteOutpostResolver",
         "route53resolver:GetOutpostResolver",
         "route53resolver:ListTagsForResource",
         "route53resolver:TagResource",
         "route53resolver:UntagResource",
         "route53resolver:UpdateOutpostResolver"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53resolver:CreateOutpostResolver",
        "route53resolver:DeleteOutpostResolver",
        "route53resolver:GetOutpostResolver",
        "route53resolver:ListTagsForResource",
        "route53resolver:TagResource",
        "route53resolver:UntagResource",
        "route53resolver:UpdateOutpostResolver"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53resolver:outpost-resolver"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53resolver:outpost-resolver"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53resolver:GetFirewallConfig",
         "route53resolver:TagResource",
         "route53resolver:UntagResource",
         "route53resolver:UpdateFirewallConfig"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53resolver:GetFirewallConfig",
        "route53resolver:TagResource",
        "route53resolver:UntagResource",
        "route53resolver:UpdateFirewallConfig"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53resolver:firewall-config"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53resolver:firewall-config"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53resolver:GetResolverConfig",
         "route53resolver:ListResolverConfigs",
         "route53resolver:UpdateResolverConfig"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53resolver:GetResolverConfig",
        "route53resolver:ListResolverConfigs",
        "route53resolver:UpdateResolverConfig"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53resolver:resolver-config"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53resolver:resolver-config"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "route53resolver:GetResolverDnssecConfig",
         "route53resolver:ListResolverDnssecConfigs",
         "route53resolver:TagResource",
         "route53resolver:UntagResource",
         "route53resolver:UpdateResolverDnssecConfig"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "route53resolver:GetResolverDnssecConfig",
        "route53resolver:ListResolverDnssecConfigs",
        "route53resolver:TagResource",
        "route53resolver:UntagResource",
        "route53resolver:UpdateResolverDnssecConfig"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/route53resolver:resolver-dnssec-config"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/route53resolver:resolver-dnssec-config"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "rum:BatchCreateRumMetricDefinitions",
         "rum:BatchDeleteRumMetricDefinitions",
         "rum:BatchGetRumMetricDefinitions",
         "rum:CreateAppMonitor",
         "rum:DeleteAppMonitor",
         "rum:DeleteResourcePolicy",
         "rum:DeleteRumMetricsDestination",
         "rum:GetAppMonitor",
         "rum:GetAppMonitorData",
         "rum:GetResourcePolicy",
         "rum:ListRumMetricsDestinations",
         "rum:PutResourcePolicy",
         "rum:PutRumEvents",
         "rum:PutRumMetricsDestination",
         "rum:TagResource",
         "rum:UntagResource",
         "rum:UpdateAppMonitor",
         "rum:UpdateRumMetricDefinition"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "rum:BatchCreateRumMetricDefinitions",
        "rum:BatchDeleteRumMetricDefinitions",
        "rum:BatchGetRumMetricDefinitions",
        "rum:CreateAppMonitor",
        "rum:DeleteAppMonitor",
        "rum:DeleteResourcePolicy",
        "rum:DeleteRumMetricsDestination",
        "rum:GetAppMonitor",
        "rum:GetAppMonitorData",
        "rum:GetResourcePolicy",
        "rum:ListRumMetricsDestinations",
        "rum:PutResourcePolicy",
        "rum:PutRumEvents",
        "rum:PutRumMetricsDestination",
        "rum:TagResource",
        "rum:UntagResource",
        "rum:UpdateAppMonitor",
        "rum:UpdateRumMetricDefinition"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/rum:AppMonitorResource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/rum:AppMonitorResource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "s3:AbortMultipartUpload",
         "s3:BypassGovernanceRetention",
         "s3:DeleteObject",
         "s3:DeleteObjectTagging",
         "s3:DeleteObjectVersion",
         "s3:DeleteObjectVersionTagging",
         "s3:GetObject",
         "s3:GetObjectAcl",
         "s3:GetObjectAttributes",
         "s3:GetObjectLegalHold",
         "s3:GetObjectRetention",
         "s3:GetObjectTagging",
         "s3:GetObjectTorrent",
         "s3:GetObjectVersion",
         "s3:GetObjectVersionAcl",
         "s3:GetObjectVersionAttributes",
         "s3:GetObjectVersionForReplication",
         "s3:GetObjectVersionTagging",
         "s3:GetObjectVersionTorrent",
         "s3:InitiateReplication",
         "s3:ListMultipartUploadParts",
         "s3:ObjectOwnerOverrideToBucketOwner",
         "s3:PutObject",
         "s3:PutObjectAcl",
         "s3:PutObjectLegalHold",
         "s3:PutObjectRetention",
         "s3:PutObjectTagging",
         "s3:PutObjectVersionAcl",
         "s3:PutObjectVersionTagging",
         "s3:ReplicateDelete",
         "s3:ReplicateObject",
         "s3:ReplicateTags",
         "s3:RestoreObject"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "s3:AbortMultipartUpload",
        "s3:BypassGovernanceRetention",
        "s3:DeleteObject",
        "s3:DeleteObjectTagging",
        "s3:DeleteObjectVersion",
        "s3:DeleteObjectVersionTagging",
        "s3:GetObject",
        "s3:GetObjectAcl",
        "s3:GetObjectAttributes",
        "s3:GetObjectLegalHold",
        "s3:GetObjectRetention",
        "s3:GetObjectTagging",
        "s3:GetObjectTorrent",
        "s3:GetObjectVersion",
        "s3:GetObjectVersionAcl",
        "s3:GetObjectVersionAttributes",
        "s3:GetObjectVersionForReplication",
        "s3:GetObjectVersionTagging",
        "s3:GetObjectVersionTorrent",
        "s3:InitiateReplication",
        "s3:ListMultipartUploadParts",
        "s3:ObjectOwnerOverrideToBucketOwner",
        "s3:PutObject",
        "s3:PutObjectAcl",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionAcl",
        "s3:PutObjectVersionTagging",
        "s3:ReplicateDelete",
        "s3:ReplicateObject",
        "s3:ReplicateTags",
        "s3:RestoreObject"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/s3:object"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/s3:object"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "s3:AssociateAccessGrantsIdentityCenter",
         "s3:CreateAccessGrantsInstance",
         "s3:CreateAccessGrantsLocation",
         "s3:DeleteAccessGrantsInstance",
         "s3:DeleteAccessGrantsInstanceResourcePolicy",
         "s3:DissociateAccessGrantsIdentityCenter",
         "s3:GetAccessGrantsInstance",
         "s3:GetAccessGrantsInstanceForPrefix",
         "s3:GetAccessGrantsInstanceResourcePolicy",
         "s3:GetDataAccess",
         "s3:ListAccessGrants",
         "s3:ListAccessGrantsLocations",
         "s3:ListCallerAccessGrants",
         "s3:ListTagsForResource",
         "s3:PutAccessGrantsInstanceResourcePolicy",
         "s3:TagResource",
         "s3:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "s3:AssociateAccessGrantsIdentityCenter",
        "s3:CreateAccessGrantsInstance",
        "s3:CreateAccessGrantsLocation",
        "s3:DeleteAccessGrantsInstance",
        "s3:DeleteAccessGrantsInstanceResourcePolicy",
        "s3:DissociateAccessGrantsIdentityCenter",
        "s3:GetAccessGrantsInstance",
        "s3:GetAccessGrantsInstanceForPrefix",
        "s3:GetAccessGrantsInstanceResourcePolicy",
        "s3:GetDataAccess",
        "s3:ListAccessGrants",
        "s3:ListAccessGrantsLocations",
        "s3:ListCallerAccessGrants",
        "s3:ListTagsForResource",
        "s3:PutAccessGrantsInstanceResourcePolicy",
        "s3:TagResource",
        "s3:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/s3:accessgrantsinstance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/s3:accessgrantsinstance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "s3:CreateAccessGrant",
         "s3:DeleteAccessGrantsLocation",
         "s3:GetAccessGrantsLocation",
         "s3:ListTagsForResource",
         "s3:TagResource",
         "s3:UntagResource",
         "s3:UpdateAccessGrantsLocation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "s3:CreateAccessGrant",
        "s3:DeleteAccessGrantsLocation",
        "s3:GetAccessGrantsLocation",
        "s3:ListTagsForResource",
        "s3:TagResource",
        "s3:UntagResource",
        "s3:UpdateAccessGrantsLocation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/s3:accessgrantslocation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/s3:accessgrantslocation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "s3:CreateAccessPoint",
         "s3:DeleteAccessPoint",
         "s3:DeleteAccessPointPolicy",
         "s3:GetAccessPointPolicy",
         "s3:GetAccessPointPolicyStatus",
         "s3:GetObjectAttributes",
         "s3:PutAccessPointPolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "s3:CreateAccessPoint",
        "s3:DeleteAccessPoint",
        "s3:DeleteAccessPointPolicy",
        "s3:GetAccessPointPolicy",
        "s3:GetAccessPointPolicyStatus",
        "s3:GetObjectAttributes",
        "s3:PutAccessPointPolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/s3:accesspoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/s3:accesspoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "s3:CreateAccessPointForObjectLambda",
         "s3:DeleteAccessPointForObjectLambda",
         "s3:DeleteAccessPointPolicyForObjectLambda",
         "s3:GetAccessPointConfigurationForObjectLambda",
         "s3:GetAccessPointForObjectLambda",
         "s3:GetAccessPointPolicyForObjectLambda",
         "s3:GetAccessPointPolicyStatusForObjectLambda",
         "s3:PutAccessPointConfigurationForObjectLambda",
         "s3:PutAccessPointPolicyForObjectLambda"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "s3:CreateAccessPointForObjectLambda",
        "s3:DeleteAccessPointForObjectLambda",
        "s3:DeleteAccessPointPolicyForObjectLambda",
        "s3:GetAccessPointConfigurationForObjectLambda",
        "s3:GetAccessPointForObjectLambda",
        "s3:GetAccessPointPolicyForObjectLambda",
        "s3:GetAccessPointPolicyStatusForObjectLambda",
        "s3:PutAccessPointConfigurationForObjectLambda",
        "s3:PutAccessPointPolicyForObjectLambda"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/s3:objectlambdaaccesspoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/s3:objectlambdaaccesspoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "s3:CreateBucket",
         "s3:CreateBucketMetadataTableConfiguration",
         "s3:DeleteBucket",
         "s3:DeleteBucketMetadataTableConfiguration",
         "s3:DeleteBucketPolicy",
         "s3:DeleteBucketWebsite",
         "s3:GetAccelerateConfiguration",
         "s3:GetAnalyticsConfiguration",
         "s3:GetBucketAcl",
         "s3:GetBucketCORS",
         "s3:GetBucketLocation",
         "s3:GetBucketLogging",
         "s3:GetBucketMetadataTableConfiguration",
         "s3:GetBucketNotification",
         "s3:GetBucketObjectLockConfiguration",
         "s3:GetBucketOwnershipControls",
         "s3:GetBucketPolicy",
         "s3:GetBucketPolicyStatus",
         "s3:GetBucketPublicAccessBlock",
         "s3:GetBucketRequestPayment",
         "s3:GetBucketTagging",
         "s3:GetBucketVersioning",
         "s3:GetBucketWebsite",
         "s3:GetEncryptionConfiguration",
         "s3:GetIntelligentTieringConfiguration",
         "s3:GetInventoryConfiguration",
         "s3:GetLifecycleConfiguration",
         "s3:GetMetricsConfiguration",
         "s3:GetReplicationConfiguration",
         "s3:ListBucket",
         "s3:ListBucketMultipartUploads",
         "s3:ListBucketVersions",
         "s3:PauseReplication",
         "s3:PutAccelerateConfiguration",
         "s3:PutAnalyticsConfiguration",
         "s3:PutBucketAcl",
         "s3:PutBucketCORS",
         "s3:PutBucketLogging",
         "s3:PutBucketNotification",
         "s3:PutBucketObjectLockConfiguration",
         "s3:PutBucketOwnershipControls",
         "s3:PutBucketPolicy",
         "s3:PutBucketPublicAccessBlock",
         "s3:PutBucketRequestPayment",
         "s3:PutBucketTagging",
         "s3:PutBucketVersioning",
         "s3:PutBucketWebsite",
         "s3:PutEncryptionConfiguration",
         "s3:PutIntelligentTieringConfiguration",
         "s3:PutInventoryConfiguration",
         "s3:PutLifecycleConfiguration",
         "s3:PutMetricsConfiguration",
         "s3:PutReplicationConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "s3:CreateBucket",
        "s3:CreateBucketMetadataTableConfiguration",
        "s3:DeleteBucket",
        "s3:DeleteBucketMetadataTableConfiguration",
        "s3:DeleteBucketPolicy",
        "s3:DeleteBucketWebsite",
        "s3:GetAccelerateConfiguration",
        "s3:GetAnalyticsConfiguration",
        "s3:GetBucketAcl",
        "s3:GetBucketCORS",
        "s3:GetBucketLocation",
        "s3:GetBucketLogging",
        "s3:GetBucketMetadataTableConfiguration",
        "s3:GetBucketNotification",
        "s3:GetBucketObjectLockConfiguration",
        "s3:GetBucketOwnershipControls",
        "s3:GetBucketPolicy",
        "s3:GetBucketPolicyStatus",
        "s3:GetBucketPublicAccessBlock",
        "s3:GetBucketRequestPayment",
        "s3:GetBucketTagging",
        "s3:GetBucketVersioning",
        "s3:GetBucketWebsite",
        "s3:GetEncryptionConfiguration",
        "s3:GetIntelligentTieringConfiguration",
        "s3:GetInventoryConfiguration",
        "s3:GetLifecycleConfiguration",
        "s3:GetMetricsConfiguration",
        "s3:GetReplicationConfiguration",
        "s3:ListBucket",
        "s3:ListBucketMultipartUploads",
        "s3:ListBucketVersions",
        "s3:PauseReplication",
        "s3:PutAccelerateConfiguration",
        "s3:PutAnalyticsConfiguration",
        "s3:PutBucketAcl",
        "s3:PutBucketCORS",
        "s3:PutBucketLogging",
        "s3:PutBucketNotification",
        "s3:PutBucketObjectLockConfiguration",
        "s3:PutBucketOwnershipControls",
        "s3:PutBucketPolicy",
        "s3:PutBucketPublicAccessBlock",
        "s3:PutBucketRequestPayment",
        "s3:PutBucketTagging",
        "s3:PutBucketVersioning",
        "s3:PutBucketWebsite",
        "s3:PutEncryptionConfiguration",
        "s3:PutIntelligentTieringConfiguration",
        "s3:PutInventoryConfiguration",
        "s3:PutLifecycleConfiguration",
        "s3:PutMetricsConfiguration",
        "s3:PutReplicationConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/s3:bucket"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/s3:bucket"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "s3:CreateMultiRegionAccessPoint",
         "s3:DeleteMultiRegionAccessPoint",
         "s3:GetMultiRegionAccessPoint",
         "s3:GetMultiRegionAccessPointPolicy",
         "s3:GetMultiRegionAccessPointPolicyStatus",
         "s3:GetMultiRegionAccessPointRoutes",
         "s3:PutMultiRegionAccessPointPolicy",
         "s3:SubmitMultiRegionAccessPointRoutes"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "s3:CreateMultiRegionAccessPoint",
        "s3:DeleteMultiRegionAccessPoint",
        "s3:GetMultiRegionAccessPoint",
        "s3:GetMultiRegionAccessPointPolicy",
        "s3:GetMultiRegionAccessPointPolicyStatus",
        "s3:GetMultiRegionAccessPointRoutes",
        "s3:PutMultiRegionAccessPointPolicy",
        "s3:SubmitMultiRegionAccessPointRoutes"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/s3:multiregionaccesspoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/s3:multiregionaccesspoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "s3:DeleteAccessGrant",
         "s3:GetAccessGrant",
         "s3:ListTagsForResource",
         "s3:TagResource",
         "s3:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "s3:DeleteAccessGrant",
        "s3:GetAccessGrant",
        "s3:ListTagsForResource",
        "s3:TagResource",
        "s3:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/s3:accessgrant"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/s3:accessgrant"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "s3:DeleteJobTagging",
         "s3:DescribeJob",
         "s3:GetJobTagging",
         "s3:PutJobTagging",
         "s3:UpdateJobPriority",
         "s3:UpdateJobStatus"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "s3:DeleteJobTagging",
        "s3:DescribeJob",
        "s3:GetJobTagging",
        "s3:PutJobTagging",
        "s3:UpdateJobPriority",
        "s3:UpdateJobStatus"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/s3:job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/s3:job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "s3:DeleteStorageLensConfiguration",
         "s3:DeleteStorageLensConfigurationTagging",
         "s3:GetStorageLensConfiguration",
         "s3:GetStorageLensConfigurationTagging",
         "s3:GetStorageLensDashboard",
         "s3:PutStorageLensConfigurationTagging"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "s3:DeleteStorageLensConfiguration",
        "s3:DeleteStorageLensConfigurationTagging",
        "s3:GetStorageLensConfiguration",
        "s3:GetStorageLensConfigurationTagging",
        "s3:GetStorageLensDashboard",
        "s3:PutStorageLensConfigurationTagging"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/s3:storagelensconfiguration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/s3:storagelensconfiguration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "s3:DeleteStorageLensGroup",
         "s3:GetStorageLensGroup",
         "s3:ListTagsForResource",
         "s3:TagResource",
         "s3:UntagResource",
         "s3:UpdateStorageLensGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "s3:DeleteStorageLensGroup",
        "s3:GetStorageLensGroup",
        "s3:ListTagsForResource",
        "s3:TagResource",
        "s3:UntagResource",
        "s3:UpdateStorageLensGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/s3:storagelensgroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/s3:storagelensgroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "s3:DescribeMultiRegionAccessPointOperation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "s3:DescribeMultiRegionAccessPointOperation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/s3:multiregionaccesspointrequestarn"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/s3:multiregionaccesspointrequestarn"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "s3-object-lambda:AbortMultipartUpload",
         "s3-object-lambda:DeleteObject",
         "s3-object-lambda:DeleteObjectTagging",
         "s3-object-lambda:DeleteObjectVersion",
         "s3-object-lambda:DeleteObjectVersionTagging",
         "s3-object-lambda:GetObject",
         "s3-object-lambda:GetObjectAcl",
         "s3-object-lambda:GetObjectLegalHold",
         "s3-object-lambda:GetObjectRetention",
         "s3-object-lambda:GetObjectTagging",
         "s3-object-lambda:GetObjectVersion",
         "s3-object-lambda:GetObjectVersionAcl",
         "s3-object-lambda:GetObjectVersionTagging",
         "s3-object-lambda:ListBucket",
         "s3-object-lambda:ListBucketMultipartUploads",
         "s3-object-lambda:ListBucketVersions",
         "s3-object-lambda:ListMultipartUploadParts",
         "s3-object-lambda:PutObject",
         "s3-object-lambda:PutObjectAcl",
         "s3-object-lambda:PutObjectLegalHold",
         "s3-object-lambda:PutObjectRetention",
         "s3-object-lambda:PutObjectTagging",
         "s3-object-lambda:PutObjectVersionAcl",
         "s3-object-lambda:PutObjectVersionTagging",
         "s3-object-lambda:RestoreObject",
         "s3-object-lambda:WriteGetObjectResponse"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "s3-object-lambda:AbortMultipartUpload",
        "s3-object-lambda:DeleteObject",
        "s3-object-lambda:DeleteObjectTagging",
        "s3-object-lambda:DeleteObjectVersion",
        "s3-object-lambda:DeleteObjectVersionTagging",
        "s3-object-lambda:GetObject",
        "s3-object-lambda:GetObjectAcl",
        "s3-object-lambda:GetObjectLegalHold",
        "s3-object-lambda:GetObjectRetention",
        "s3-object-lambda:GetObjectTagging",
        "s3-object-lambda:GetObjectVersion",
        "s3-object-lambda:GetObjectVersionAcl",
        "s3-object-lambda:GetObjectVersionTagging",
        "s3-object-lambda:ListBucket",
        "s3-object-lambda:ListBucketMultipartUploads",
        "s3-object-lambda:ListBucketVersions",
        "s3-object-lambda:ListMultipartUploadParts",
        "s3-object-lambda:PutObject",
        "s3-object-lambda:PutObjectAcl",
        "s3-object-lambda:PutObjectLegalHold",
        "s3-object-lambda:PutObjectRetention",
        "s3-object-lambda:PutObjectTagging",
        "s3-object-lambda:PutObjectVersionAcl",
        "s3-object-lambda:PutObjectVersionTagging",
        "s3-object-lambda:RestoreObject",
        "s3-object-lambda:WriteGetObjectResponse"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/s3-object-lambda:objectlambdaaccesspoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/s3-object-lambda:objectlambdaaccesspoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "s3-outposts:AbortMultipartUpload",
         "s3-outposts:DeleteObject",
         "s3-outposts:DeleteObjectTagging",
         "s3-outposts:DeleteObjectVersion",
         "s3-outposts:DeleteObjectVersionTagging",
         "s3-outposts:GetObject",
         "s3-outposts:GetObjectTagging",
         "s3-outposts:GetObjectVersion",
         "s3-outposts:GetObjectVersionForReplication",
         "s3-outposts:GetObjectVersionTagging",
         "s3-outposts:ListMultipartUploadParts",
         "s3-outposts:PutObject",
         "s3-outposts:PutObjectAcl",
         "s3-outposts:PutObjectTagging",
         "s3-outposts:PutObjectVersionTagging",
         "s3-outposts:ReplicateDelete",
         "s3-outposts:ReplicateObject",
         "s3-outposts:ReplicateTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "s3-outposts:AbortMultipartUpload",
        "s3-outposts:DeleteObject",
        "s3-outposts:DeleteObjectTagging",
        "s3-outposts:DeleteObjectVersion",
        "s3-outposts:DeleteObjectVersionTagging",
        "s3-outposts:GetObject",
        "s3-outposts:GetObjectTagging",
        "s3-outposts:GetObjectVersion",
        "s3-outposts:GetObjectVersionForReplication",
        "s3-outposts:GetObjectVersionTagging",
        "s3-outposts:ListMultipartUploadParts",
        "s3-outposts:PutObject",
        "s3-outposts:PutObjectAcl",
        "s3-outposts:PutObjectTagging",
        "s3-outposts:PutObjectVersionTagging",
        "s3-outposts:ReplicateDelete",
        "s3-outposts:ReplicateObject",
        "s3-outposts:ReplicateTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/s3-outposts:object"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/s3-outposts:object"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "s3-outposts:CreateAccessPoint",
         "s3-outposts:DeleteAccessPoint",
         "s3-outposts:DeleteAccessPointPolicy",
         "s3-outposts:GetAccessPointPolicy",
         "s3-outposts:ListBucket",
         "s3-outposts:ListBucketMultipartUploads",
         "s3-outposts:PutAccessPointPolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "s3-outposts:CreateAccessPoint",
        "s3-outposts:DeleteAccessPoint",
        "s3-outposts:DeleteAccessPointPolicy",
        "s3-outposts:GetAccessPointPolicy",
        "s3-outposts:ListBucket",
        "s3-outposts:ListBucketMultipartUploads",
        "s3-outposts:PutAccessPointPolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/s3-outposts:accesspoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/s3-outposts:accesspoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "s3-outposts:CreateBucket",
         "s3-outposts:DeleteBucket",
         "s3-outposts:DeleteBucketPolicy",
         "s3-outposts:GetBucket",
         "s3-outposts:GetBucketPolicy",
         "s3-outposts:GetBucketTagging",
         "s3-outposts:GetBucketVersioning",
         "s3-outposts:GetLifecycleConfiguration",
         "s3-outposts:GetReplicationConfiguration",
         "s3-outposts:ListBucket",
         "s3-outposts:ListBucketMultipartUploads",
         "s3-outposts:ListBucketVersions",
         "s3-outposts:PutBucketPolicy",
         "s3-outposts:PutBucketTagging",
         "s3-outposts:PutBucketVersioning",
         "s3-outposts:PutLifecycleConfiguration",
         "s3-outposts:PutReplicationConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "s3-outposts:CreateBucket",
        "s3-outposts:DeleteBucket",
        "s3-outposts:DeleteBucketPolicy",
        "s3-outposts:GetBucket",
        "s3-outposts:GetBucketPolicy",
        "s3-outposts:GetBucketTagging",
        "s3-outposts:GetBucketVersioning",
        "s3-outposts:GetLifecycleConfiguration",
        "s3-outposts:GetReplicationConfiguration",
        "s3-outposts:ListBucket",
        "s3-outposts:ListBucketMultipartUploads",
        "s3-outposts:ListBucketVersions",
        "s3-outposts:PutBucketPolicy",
        "s3-outposts:PutBucketTagging",
        "s3-outposts:PutBucketVersioning",
        "s3-outposts:PutLifecycleConfiguration",
        "s3-outposts:PutReplicationConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/s3-outposts:bucket"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/s3-outposts:bucket"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "s3-outposts:CreateEndpoint",
         "s3-outposts:DeleteEndpoint"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "s3-outposts:CreateEndpoint",
        "s3-outposts:DeleteEndpoint"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/s3-outposts:endpoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/s3-outposts:endpoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "s3express:CreateBucket",
         "s3express:CreateSession",
         "s3express:DeleteBucket",
         "s3express:DeleteBucketPolicy",
         "s3express:GetBucketPolicy",
         "s3express:GetEncryptionConfiguration",
         "s3express:GetLifecycleConfiguration",
         "s3express:PutBucketPolicy",
         "s3express:PutEncryptionConfiguration",
         "s3express:PutLifecycleConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "s3express:CreateBucket",
        "s3express:CreateSession",
        "s3express:DeleteBucket",
        "s3express:DeleteBucketPolicy",
        "s3express:GetBucketPolicy",
        "s3express:GetEncryptionConfiguration",
        "s3express:GetLifecycleConfiguration",
        "s3express:PutBucketPolicy",
        "s3express:PutEncryptionConfiguration",
        "s3express:PutLifecycleConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/s3express:bucket"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/s3express:bucket"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "s3tables:CreateNamespace",
         "s3tables:CreateTable",
         "s3tables:CreateTableBucket",
         "s3tables:DeleteNamespace",
         "s3tables:DeleteTableBucket",
         "s3tables:DeleteTableBucketPolicy",
         "s3tables:GetNamespace",
         "s3tables:GetTableBucket",
         "s3tables:GetTableBucketMaintenanceConfiguration",
         "s3tables:GetTableBucketPolicy",
         "s3tables:ListNamespaces",
         "s3tables:ListTables",
         "s3tables:PutTableBucketMaintenanceConfiguration",
         "s3tables:PutTableBucketPolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "s3tables:CreateNamespace",
        "s3tables:CreateTable",
        "s3tables:CreateTableBucket",
        "s3tables:DeleteNamespace",
        "s3tables:DeleteTableBucket",
        "s3tables:DeleteTableBucketPolicy",
        "s3tables:GetNamespace",
        "s3tables:GetTableBucket",
        "s3tables:GetTableBucketMaintenanceConfiguration",
        "s3tables:GetTableBucketPolicy",
        "s3tables:ListNamespaces",
        "s3tables:ListTables",
        "s3tables:PutTableBucketMaintenanceConfiguration",
        "s3tables:PutTableBucketPolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/s3tables:TableBucket"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/s3tables:TableBucket"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "s3tables:DeleteTable",
         "s3tables:DeleteTablePolicy",
         "s3tables:GetTable",
         "s3tables:GetTableData",
         "s3tables:GetTableMaintenanceConfiguration",
         "s3tables:GetTableMaintenanceJobStatus",
         "s3tables:GetTableMetadataLocation",
         "s3tables:GetTablePolicy",
         "s3tables:PutTableData",
         "s3tables:PutTableMaintenanceConfiguration",
         "s3tables:PutTablePolicy",
         "s3tables:RenameTable",
         "s3tables:UpdateTableMetadataLocation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "s3tables:DeleteTable",
        "s3tables:DeleteTablePolicy",
        "s3tables:GetTable",
        "s3tables:GetTableData",
        "s3tables:GetTableMaintenanceConfiguration",
        "s3tables:GetTableMaintenanceJobStatus",
        "s3tables:GetTableMetadataLocation",
        "s3tables:GetTablePolicy",
        "s3tables:PutTableData",
        "s3tables:PutTableMaintenanceConfiguration",
        "s3tables:PutTablePolicy",
        "s3tables:RenameTable",
        "s3tables:UpdateTableMetadataLocation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/s3tables:Table"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/s3tables:Table"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddAssociation",
         "sagemaker:AddTags",
         "sagemaker:CreateAction",
         "sagemaker:DeleteAction",
         "sagemaker:DeleteAssociation",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeAction",
         "sagemaker:ListTags",
         "sagemaker:UpdateAction"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddAssociation",
        "sagemaker:AddTags",
        "sagemaker:CreateAction",
        "sagemaker:DeleteAction",
        "sagemaker:DeleteAssociation",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeAction",
        "sagemaker:ListTags",
        "sagemaker:UpdateAction"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:action"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:action"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddAssociation",
         "sagemaker:AddTags",
         "sagemaker:CreateArtifact",
         "sagemaker:DeleteArtifact",
         "sagemaker:DeleteAssociation",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeArtifact",
         "sagemaker:ListTags",
         "sagemaker:UpdateArtifact"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddAssociation",
        "sagemaker:AddTags",
        "sagemaker:CreateArtifact",
        "sagemaker:DeleteArtifact",
        "sagemaker:DeleteAssociation",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeArtifact",
        "sagemaker:ListTags",
        "sagemaker:UpdateArtifact"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:artifact"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:artifact"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddAssociation",
         "sagemaker:AddTags",
         "sagemaker:CreateContext",
         "sagemaker:DeleteAssociation",
         "sagemaker:DeleteContext",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeContext",
         "sagemaker:ListTags",
         "sagemaker:UpdateContext"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddAssociation",
        "sagemaker:AddTags",
        "sagemaker:CreateContext",
        "sagemaker:DeleteAssociation",
        "sagemaker:DeleteContext",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeContext",
        "sagemaker:ListTags",
        "sagemaker:UpdateContext"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:context"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:context"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddAssociation",
         "sagemaker:AddTags",
         "sagemaker:CreateExperiment",
         "sagemaker:CreateTrial",
         "sagemaker:DeleteAssociation",
         "sagemaker:DeleteExperiment",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeExperiment",
         "sagemaker:ListTags",
         "sagemaker:UpdateExperiment"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddAssociation",
        "sagemaker:AddTags",
        "sagemaker:CreateExperiment",
        "sagemaker:CreateTrial",
        "sagemaker:DeleteAssociation",
        "sagemaker:DeleteExperiment",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeExperiment",
        "sagemaker:ListTags",
        "sagemaker:UpdateExperiment"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:experiment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:experiment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddAssociation",
         "sagemaker:AddTags",
         "sagemaker:AssociateTrialComponent",
         "sagemaker:BatchGetMetrics",
         "sagemaker:BatchPutMetrics",
         "sagemaker:CreateTrialComponent",
         "sagemaker:DeleteAssociation",
         "sagemaker:DeleteTags",
         "sagemaker:DeleteTrialComponent",
         "sagemaker:DescribeTrialComponent",
         "sagemaker:DisassociateTrialComponent",
         "sagemaker:ListTags",
         "sagemaker:UpdateTrialComponent"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddAssociation",
        "sagemaker:AddTags",
        "sagemaker:AssociateTrialComponent",
        "sagemaker:BatchGetMetrics",
        "sagemaker:BatchPutMetrics",
        "sagemaker:CreateTrialComponent",
        "sagemaker:DeleteAssociation",
        "sagemaker:DeleteTags",
        "sagemaker:DeleteTrialComponent",
        "sagemaker:DescribeTrialComponent",
        "sagemaker:DisassociateTrialComponent",
        "sagemaker:ListTags",
        "sagemaker:UpdateTrialComponent"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:experiment-trial-component"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:experiment-trial-component"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateAlgorithm",
         "sagemaker:DeleteAlgorithm",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeAlgorithm",
         "sagemaker:ListTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateAlgorithm",
        "sagemaker:DeleteAlgorithm",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeAlgorithm",
        "sagemaker:ListTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:algorithm"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:algorithm"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateApp",
         "sagemaker:DeleteApp",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeApp",
         "sagemaker:ListTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateApp",
        "sagemaker:DeleteApp",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeApp",
        "sagemaker:ListTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:app"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:app"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateAppImageConfig",
         "sagemaker:DeleteAppImageConfig",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeAppImageConfig",
         "sagemaker:ListTags",
         "sagemaker:UpdateAppImageConfig"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateAppImageConfig",
        "sagemaker:DeleteAppImageConfig",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeAppImageConfig",
        "sagemaker:ListTags",
        "sagemaker:UpdateAppImageConfig"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:app-image-config"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:app-image-config"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateAutoMLJob",
         "sagemaker:CreateAutoMLJobV2",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeAutoMLJob",
         "sagemaker:DescribeAutoMLJobV2",
         "sagemaker:ListTags",
         "sagemaker:StopAutoMLJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateAutoMLJob",
        "sagemaker:CreateAutoMLJobV2",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeAutoMLJob",
        "sagemaker:DescribeAutoMLJobV2",
        "sagemaker:ListTags",
        "sagemaker:StopAutoMLJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:automl-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:automl-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:BatchDeleteClusterNodes",
         "sagemaker:CreateCluster",
         "sagemaker:CreateClusterSchedulerConfig",
         "sagemaker:CreateComputeQuota",
         "sagemaker:DeleteCluster",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeCluster",
         "sagemaker:DescribeClusterNode",
         "sagemaker:ListClusterNodes",
         "sagemaker:ListTags",
         "sagemaker:UpdateCluster",
         "sagemaker:UpdateClusterSoftware"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:BatchDeleteClusterNodes",
        "sagemaker:CreateCluster",
        "sagemaker:CreateClusterSchedulerConfig",
        "sagemaker:CreateComputeQuota",
        "sagemaker:DeleteCluster",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeCluster",
        "sagemaker:DescribeClusterNode",
        "sagemaker:ListClusterNodes",
        "sagemaker:ListTags",
        "sagemaker:UpdateCluster",
        "sagemaker:UpdateClusterSoftware"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:cluster"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:cluster"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateClusterSchedulerConfig",
         "sagemaker:DeleteClusterSchedulerConfig",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeClusterSchedulerConfig",
         "sagemaker:ListTags",
         "sagemaker:UpdateClusterSchedulerConfig"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateClusterSchedulerConfig",
        "sagemaker:DeleteClusterSchedulerConfig",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeClusterSchedulerConfig",
        "sagemaker:ListTags",
        "sagemaker:UpdateClusterSchedulerConfig"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:cluster-scheduler-config"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:cluster-scheduler-config"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateCodeRepository",
         "sagemaker:DeleteCodeRepository",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeCodeRepository",
         "sagemaker:ListTags",
         "sagemaker:UpdateCodeRepository"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateCodeRepository",
        "sagemaker:DeleteCodeRepository",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeCodeRepository",
        "sagemaker:ListTags",
        "sagemaker:UpdateCodeRepository"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:code-repository"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:code-repository"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateCompilationJob",
         "sagemaker:DeleteCompilationJob",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeCompilationJob",
         "sagemaker:ListTags",
         "sagemaker:StopCompilationJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateCompilationJob",
        "sagemaker:DeleteCompilationJob",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeCompilationJob",
        "sagemaker:ListTags",
        "sagemaker:StopCompilationJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:compilation-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:compilation-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateComputeQuota",
         "sagemaker:DeleteComputeQuota",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeComputeQuota",
         "sagemaker:ListTags",
         "sagemaker:UpdateComputeQuota"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateComputeQuota",
        "sagemaker:DeleteComputeQuota",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeComputeQuota",
        "sagemaker:ListTags",
        "sagemaker:UpdateComputeQuota"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:compute-quota"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:compute-quota"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateDataQualityJobDefinition",
         "sagemaker:DeleteDataQualityJobDefinition",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeDataQualityJobDefinition",
         "sagemaker:ListTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateDataQualityJobDefinition",
        "sagemaker:DeleteDataQualityJobDefinition",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeDataQualityJobDefinition",
        "sagemaker:ListTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:data-quality-job-definition"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:data-quality-job-definition"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:DeleteTags",
         "sagemaker:DeregisterDevices",
         "sagemaker:DescribeDevice",
         "sagemaker:GetDeployments",
         "sagemaker:GetDeviceRegistration",
         "sagemaker:ListTags",
         "sagemaker:RegisterDevices",
         "sagemaker:SendHeartbeat",
         "sagemaker:UpdateDevices"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:DeleteTags",
        "sagemaker:DeregisterDevices",
        "sagemaker:DescribeDevice",
        "sagemaker:GetDeployments",
        "sagemaker:GetDeviceRegistration",
        "sagemaker:ListTags",
        "sagemaker:RegisterDevices",
        "sagemaker:SendHeartbeat",
        "sagemaker:UpdateDevices"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:device"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:device"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateDeviceFleet",
         "sagemaker:DeleteDeviceFleet",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeDeviceFleet",
         "sagemaker:GetDeviceFleetReport",
         "sagemaker:ListTags",
         "sagemaker:UpdateDeviceFleet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateDeviceFleet",
        "sagemaker:DeleteDeviceFleet",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeDeviceFleet",
        "sagemaker:GetDeviceFleetReport",
        "sagemaker:ListTags",
        "sagemaker:UpdateDeviceFleet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:device-fleet"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:device-fleet"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateDomain",
         "sagemaker:DeleteDomain",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeDomain",
         "sagemaker:ListTags",
         "sagemaker:UpdateDomain"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateDomain",
        "sagemaker:DeleteDomain",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeDomain",
        "sagemaker:ListTags",
        "sagemaker:UpdateDomain"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:domain"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:domain"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateEdgeDeploymentPlan",
         "sagemaker:CreateEdgeDeploymentStage",
         "sagemaker:DeleteEdgeDeploymentPlan",
         "sagemaker:DeleteEdgeDeploymentStage",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeEdgeDeploymentPlan",
         "sagemaker:ListTags",
         "sagemaker:StartEdgeDeploymentStage",
         "sagemaker:StopEdgeDeploymentStage"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateEdgeDeploymentPlan",
        "sagemaker:CreateEdgeDeploymentStage",
        "sagemaker:DeleteEdgeDeploymentPlan",
        "sagemaker:DeleteEdgeDeploymentStage",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeEdgeDeploymentPlan",
        "sagemaker:ListTags",
        "sagemaker:StartEdgeDeploymentStage",
        "sagemaker:StopEdgeDeploymentStage"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:edge-deployment-plan"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:edge-deployment-plan"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateEdgePackagingJob",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeEdgePackagingJob",
         "sagemaker:ListTags",
         "sagemaker:StopEdgePackagingJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateEdgePackagingJob",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeEdgePackagingJob",
        "sagemaker:ListTags",
        "sagemaker:StopEdgePackagingJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:edge-packaging-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:edge-packaging-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateEndpoint",
         "sagemaker:CreateInferenceComponent",
         "sagemaker:DeleteEndpoint",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeEndpoint",
         "sagemaker:InvokeEndpoint",
         "sagemaker:InvokeEndpointAsync",
         "sagemaker:InvokeEndpointWithResponseStream",
         "sagemaker:ListTags",
         "sagemaker:UpdateEndpoint",
         "sagemaker:UpdateEndpointWeightsAndCapacities"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateEndpoint",
        "sagemaker:CreateInferenceComponent",
        "sagemaker:DeleteEndpoint",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeEndpoint",
        "sagemaker:InvokeEndpoint",
        "sagemaker:InvokeEndpointAsync",
        "sagemaker:InvokeEndpointWithResponseStream",
        "sagemaker:ListTags",
        "sagemaker:UpdateEndpoint",
        "sagemaker:UpdateEndpointWeightsAndCapacities"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:endpoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:endpoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateEndpoint",
         "sagemaker:CreateEndpointConfig",
         "sagemaker:DeleteEndpointConfig",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeEndpointConfig",
         "sagemaker:ListTags",
         "sagemaker:UpdateEndpoint"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateEndpoint",
        "sagemaker:CreateEndpointConfig",
        "sagemaker:DeleteEndpointConfig",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeEndpointConfig",
        "sagemaker:ListTags",
        "sagemaker:UpdateEndpoint"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:endpoint-config"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:endpoint-config"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:AssociateTrialComponent",
         "sagemaker:CreateTrial",
         "sagemaker:DeleteTags",
         "sagemaker:DeleteTrial",
         "sagemaker:DescribeTrial",
         "sagemaker:DisassociateTrialComponent",
         "sagemaker:ListTags",
         "sagemaker:UpdateTrial"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:AssociateTrialComponent",
        "sagemaker:CreateTrial",
        "sagemaker:DeleteTags",
        "sagemaker:DeleteTrial",
        "sagemaker:DescribeTrial",
        "sagemaker:DisassociateTrialComponent",
        "sagemaker:ListTags",
        "sagemaker:UpdateTrial"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:experiment-trial"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:experiment-trial"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:BatchGetRecord",
         "sagemaker:CreateFeatureGroup",
         "sagemaker:DeleteFeatureGroup",
         "sagemaker:DeleteRecord",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeFeatureGroup",
         "sagemaker:DescribeFeatureMetadata",
         "sagemaker:GetRecord",
         "sagemaker:ListTags",
         "sagemaker:PutRecord",
         "sagemaker:UpdateFeatureGroup",
         "sagemaker:UpdateFeatureMetadata"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:BatchGetRecord",
        "sagemaker:CreateFeatureGroup",
        "sagemaker:DeleteFeatureGroup",
        "sagemaker:DeleteRecord",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeFeatureGroup",
        "sagemaker:DescribeFeatureMetadata",
        "sagemaker:GetRecord",
        "sagemaker:ListTags",
        "sagemaker:PutRecord",
        "sagemaker:UpdateFeatureGroup",
        "sagemaker:UpdateFeatureMetadata"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:feature-group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:feature-group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateFlowDefinition",
         "sagemaker:DeleteFlowDefinition",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeFlowDefinition",
         "sagemaker:ListTags",
         "sagemaker:StartHumanLoop"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateFlowDefinition",
        "sagemaker:DeleteFlowDefinition",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeFlowDefinition",
        "sagemaker:ListTags",
        "sagemaker:StartHumanLoop"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:flow-definition"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:flow-definition"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateHub",
         "sagemaker:CreateHubContentReference",
         "sagemaker:DeleteHub",
         "sagemaker:DeleteHubContent",
         "sagemaker:DeleteHubContentReference",
         "sagemaker:DeleteTags",
         "sagemaker:DeployHubModel",
         "sagemaker:DescribeHub",
         "sagemaker:DescribeHubContent",
         "sagemaker:ImportHubContent",
         "sagemaker:ListHubContentVersions",
         "sagemaker:ListHubContents",
         "sagemaker:ListTags",
         "sagemaker:TrainHubModel",
         "sagemaker:UpdateHub",
         "sagemaker:UpdateHubContent",
         "sagemaker:UpdateHubContentReference"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateHub",
        "sagemaker:CreateHubContentReference",
        "sagemaker:DeleteHub",
        "sagemaker:DeleteHubContent",
        "sagemaker:DeleteHubContentReference",
        "sagemaker:DeleteTags",
        "sagemaker:DeployHubModel",
        "sagemaker:DescribeHub",
        "sagemaker:DescribeHubContent",
        "sagemaker:ImportHubContent",
        "sagemaker:ListHubContentVersions",
        "sagemaker:ListHubContents",
        "sagemaker:ListTags",
        "sagemaker:TrainHubModel",
        "sagemaker:UpdateHub",
        "sagemaker:UpdateHubContent",
        "sagemaker:UpdateHubContentReference"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:hub"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:hub"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateHubContentReference",
         "sagemaker:DeleteHubContent",
         "sagemaker:DeleteHubContentReference",
         "sagemaker:DeleteTags",
         "sagemaker:DeployHubModel",
         "sagemaker:DescribeHubContent",
         "sagemaker:ImportHubContent",
         "sagemaker:ListHubContentVersions",
         "sagemaker:ListTags",
         "sagemaker:TrainHubModel",
         "sagemaker:UpdateHubContent",
         "sagemaker:UpdateHubContentReference"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateHubContentReference",
        "sagemaker:DeleteHubContent",
        "sagemaker:DeleteHubContentReference",
        "sagemaker:DeleteTags",
        "sagemaker:DeployHubModel",
        "sagemaker:DescribeHubContent",
        "sagemaker:ImportHubContent",
        "sagemaker:ListHubContentVersions",
        "sagemaker:ListTags",
        "sagemaker:TrainHubModel",
        "sagemaker:UpdateHubContent",
        "sagemaker:UpdateHubContentReference"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:hub-content"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:hub-content"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateHumanTaskUi",
         "sagemaker:DeleteHumanTaskUi",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeHumanTaskUi",
         "sagemaker:ListTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateHumanTaskUi",
        "sagemaker:DeleteHumanTaskUi",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeHumanTaskUi",
        "sagemaker:ListTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:human-task-ui"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:human-task-ui"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateHyperParameterTuningJob",
         "sagemaker:DeleteHyperParameterTuningJob",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeHyperParameterTuningJob",
         "sagemaker:ListTags",
         "sagemaker:ListTrainingJobsForHyperParameterTuningJob",
         "sagemaker:StopHyperParameterTuningJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateHyperParameterTuningJob",
        "sagemaker:DeleteHyperParameterTuningJob",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeHyperParameterTuningJob",
        "sagemaker:ListTags",
        "sagemaker:ListTrainingJobsForHyperParameterTuningJob",
        "sagemaker:StopHyperParameterTuningJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:hyper-parameter-tuning-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:hyper-parameter-tuning-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateImage",
         "sagemaker:CreateImageVersion",
         "sagemaker:DeleteImage",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeImage",
         "sagemaker:ListAliases",
         "sagemaker:ListImageVersions",
         "sagemaker:ListTags",
         "sagemaker:UpdateImage"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateImage",
        "sagemaker:CreateImageVersion",
        "sagemaker:DeleteImage",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeImage",
        "sagemaker:ListAliases",
        "sagemaker:ListImageVersions",
        "sagemaker:ListTags",
        "sagemaker:UpdateImage"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:image"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:image"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateInferenceComponent",
         "sagemaker:DeleteInferenceComponent",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeInferenceComponent",
         "sagemaker:InvokeEndpoint",
         "sagemaker:InvokeEndpointWithResponseStream",
         "sagemaker:ListTags",
         "sagemaker:UpdateInferenceComponent",
         "sagemaker:UpdateInferenceComponentRuntimeConfig"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateInferenceComponent",
        "sagemaker:DeleteInferenceComponent",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeInferenceComponent",
        "sagemaker:InvokeEndpoint",
        "sagemaker:InvokeEndpointWithResponseStream",
        "sagemaker:ListTags",
        "sagemaker:UpdateInferenceComponent",
        "sagemaker:UpdateInferenceComponentRuntimeConfig"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:inference-component"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:inference-component"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateInferenceRecommendationsJob",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeInferenceRecommendationsJob",
         "sagemaker:GetScalingConfigurationRecommendation",
         "sagemaker:ListTags",
         "sagemaker:StopInferenceRecommendationsJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateInferenceRecommendationsJob",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeInferenceRecommendationsJob",
        "sagemaker:GetScalingConfigurationRecommendation",
        "sagemaker:ListTags",
        "sagemaker:StopInferenceRecommendationsJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:inference-recommendations-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:inference-recommendations-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateLabelingJob",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeLabelingJob",
         "sagemaker:ListTags",
         "sagemaker:StopLabelingJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateLabelingJob",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeLabelingJob",
        "sagemaker:ListTags",
        "sagemaker:StopLabelingJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:labeling-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:labeling-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateMlflowTrackingServer",
         "sagemaker:CreatePresignedMlflowTrackingServerUrl",
         "sagemaker:DeleteMlflowTrackingServer",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeMlflowTrackingServer",
         "sagemaker:ListTags",
         "sagemaker:StartMlflowTrackingServer",
         "sagemaker:StopMlflowTrackingServer",
         "sagemaker:UpdateMlflowTrackingServer"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateMlflowTrackingServer",
        "sagemaker:CreatePresignedMlflowTrackingServerUrl",
        "sagemaker:DeleteMlflowTrackingServer",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeMlflowTrackingServer",
        "sagemaker:ListTags",
        "sagemaker:StartMlflowTrackingServer",
        "sagemaker:StopMlflowTrackingServer",
        "sagemaker:UpdateMlflowTrackingServer"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:mlflow-tracking-server"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:mlflow-tracking-server"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateModel",
         "sagemaker:DeleteModel",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeModel",
         "sagemaker:ListTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateModel",
        "sagemaker:DeleteModel",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeModel",
        "sagemaker:ListTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:model"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:model"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateModelBiasJobDefinition",
         "sagemaker:DeleteModelBiasJobDefinition",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeModelBiasJobDefinition",
         "sagemaker:ListTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateModelBiasJobDefinition",
        "sagemaker:DeleteModelBiasJobDefinition",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeModelBiasJobDefinition",
        "sagemaker:ListTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:model-bias-job-definition"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:model-bias-job-definition"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateModelCard",
         "sagemaker:CreateModelCardExportJob",
         "sagemaker:DeleteModelCard",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeModelCard",
         "sagemaker:ListModelCardExportJobs",
         "sagemaker:ListModelCardVersions",
         "sagemaker:ListTags",
         "sagemaker:UpdateModelCard"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateModelCard",
        "sagemaker:CreateModelCardExportJob",
        "sagemaker:DeleteModelCard",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeModelCard",
        "sagemaker:ListModelCardExportJobs",
        "sagemaker:ListModelCardVersions",
        "sagemaker:ListTags",
        "sagemaker:UpdateModelCard"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:model-card"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:model-card"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateModelExplainabilityJobDefinition",
         "sagemaker:DeleteModelExplainabilityJobDefinition",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeModelExplainabilityJobDefinition",
         "sagemaker:ListTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateModelExplainabilityJobDefinition",
        "sagemaker:DeleteModelExplainabilityJobDefinition",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeModelExplainabilityJobDefinition",
        "sagemaker:ListTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:model-explainability-job-definition"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:model-explainability-job-definition"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:BatchDescribeModelPackage",
         "sagemaker:CreateModelPackage",
         "sagemaker:DeleteModelPackage",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeModelPackage",
         "sagemaker:ListModelPackages",
         "sagemaker:ListTags",
         "sagemaker:UpdateModelPackage"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:BatchDescribeModelPackage",
        "sagemaker:CreateModelPackage",
        "sagemaker:DeleteModelPackage",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeModelPackage",
        "sagemaker:ListModelPackages",
        "sagemaker:ListTags",
        "sagemaker:UpdateModelPackage"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:model-package"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:model-package"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateModelPackage",
         "sagemaker:CreateModelPackageGroup",
         "sagemaker:DeleteModelPackageGroup",
         "sagemaker:DeleteModelPackageGroupPolicy",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeModelPackageGroup",
         "sagemaker:GetModelPackageGroupPolicy",
         "sagemaker:ListTags",
         "sagemaker:PutModelPackageGroupPolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateModelPackage",
        "sagemaker:CreateModelPackageGroup",
        "sagemaker:DeleteModelPackageGroup",
        "sagemaker:DeleteModelPackageGroupPolicy",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeModelPackageGroup",
        "sagemaker:GetModelPackageGroupPolicy",
        "sagemaker:ListTags",
        "sagemaker:PutModelPackageGroupPolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:model-package-group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:model-package-group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateModelQualityJobDefinition",
         "sagemaker:DeleteModelQualityJobDefinition",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeModelQualityJobDefinition",
         "sagemaker:ListTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateModelQualityJobDefinition",
        "sagemaker:DeleteModelQualityJobDefinition",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeModelQualityJobDefinition",
        "sagemaker:ListTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:model-quality-job-definition"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:model-quality-job-definition"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateMonitoringSchedule",
         "sagemaker:DeleteMonitoringSchedule",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeMonitoringSchedule",
         "sagemaker:ListTags",
         "sagemaker:StartMonitoringSchedule",
         "sagemaker:StopMonitoringSchedule",
         "sagemaker:UpdateMonitoringAlert",
         "sagemaker:UpdateMonitoringSchedule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateMonitoringSchedule",
        "sagemaker:DeleteMonitoringSchedule",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeMonitoringSchedule",
        "sagemaker:ListTags",
        "sagemaker:StartMonitoringSchedule",
        "sagemaker:StopMonitoringSchedule",
        "sagemaker:UpdateMonitoringAlert",
        "sagemaker:UpdateMonitoringSchedule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:monitoring-schedule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:monitoring-schedule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateNotebookInstance",
         "sagemaker:CreatePresignedNotebookInstanceUrl",
         "sagemaker:DeleteNotebookInstance",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeNotebookInstance",
         "sagemaker:ListTags",
         "sagemaker:StartNotebookInstance",
         "sagemaker:StopNotebookInstance",
         "sagemaker:UpdateNotebookInstance"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateNotebookInstance",
        "sagemaker:CreatePresignedNotebookInstanceUrl",
        "sagemaker:DeleteNotebookInstance",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeNotebookInstance",
        "sagemaker:ListTags",
        "sagemaker:StartNotebookInstance",
        "sagemaker:StopNotebookInstance",
        "sagemaker:UpdateNotebookInstance"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:notebook-instance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:notebook-instance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateOptimizationJob",
         "sagemaker:DeleteOptimizationJob",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeOptimizationJob",
         "sagemaker:ListTags",
         "sagemaker:StopOptimizationJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateOptimizationJob",
        "sagemaker:DeleteOptimizationJob",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeOptimizationJob",
        "sagemaker:ListTags",
        "sagemaker:StopOptimizationJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:optimization-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:optimization-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CallPartnerAppApi",
         "sagemaker:CreatePartnerApp",
         "sagemaker:CreatePartnerAppPresignedUrl",
         "sagemaker:DeletePartnerApp",
         "sagemaker:DeleteTags",
         "sagemaker:DescribePartnerApp",
         "sagemaker:ListTags",
         "sagemaker:UpdatePartnerApp"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CallPartnerAppApi",
        "sagemaker:CreatePartnerApp",
        "sagemaker:CreatePartnerAppPresignedUrl",
        "sagemaker:DeletePartnerApp",
        "sagemaker:DeleteTags",
        "sagemaker:DescribePartnerApp",
        "sagemaker:ListTags",
        "sagemaker:UpdatePartnerApp"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:partner-app"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:partner-app"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreatePipeline",
         "sagemaker:DeletePipeline",
         "sagemaker:DeleteTags",
         "sagemaker:DescribePipeline",
         "sagemaker:ListPipelineExecutions",
         "sagemaker:ListTags",
         "sagemaker:StartPipelineExecution",
         "sagemaker:UpdatePipeline"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreatePipeline",
        "sagemaker:DeletePipeline",
        "sagemaker:DeleteTags",
        "sagemaker:DescribePipeline",
        "sagemaker:ListPipelineExecutions",
        "sagemaker:ListTags",
        "sagemaker:StartPipelineExecution",
        "sagemaker:UpdatePipeline"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:pipeline"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:pipeline"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateProcessingJob",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeProcessingJob",
         "sagemaker:DisassociateTrialComponent",
         "sagemaker:ListTags",
         "sagemaker:StopProcessingJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateProcessingJob",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeProcessingJob",
        "sagemaker:DisassociateTrialComponent",
        "sagemaker:ListTags",
        "sagemaker:StopProcessingJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:processing-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:processing-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateProject",
         "sagemaker:DeleteProject",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeProject",
         "sagemaker:ListTags",
         "sagemaker:UpdateProject"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateProject",
        "sagemaker:DeleteProject",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeProject",
        "sagemaker:ListTags",
        "sagemaker:UpdateProject"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:project"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:project"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateCluster",
         "sagemaker:CreateReservedCapacity",
         "sagemaker:CreateTrainingJob",
         "sagemaker:DeleteTags",
         "sagemaker:ListTags",
         "sagemaker:UpdateCluster"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateCluster",
        "sagemaker:CreateReservedCapacity",
        "sagemaker:CreateTrainingJob",
        "sagemaker:DeleteTags",
        "sagemaker:ListTags",
        "sagemaker:UpdateCluster"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:reserved-capacity"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:reserved-capacity"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateSpace",
         "sagemaker:DeleteSpace",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeSpace",
         "sagemaker:ListTags",
         "sagemaker:UpdateSpace"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateSpace",
        "sagemaker:DeleteSpace",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeSpace",
        "sagemaker:ListTags",
        "sagemaker:UpdateSpace"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:space"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:space"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateStudioLifecycleConfig",
         "sagemaker:DeleteStudioLifecycleConfig",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeStudioLifecycleConfig",
         "sagemaker:ListTags"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateStudioLifecycleConfig",
        "sagemaker:DeleteStudioLifecycleConfig",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeStudioLifecycleConfig",
        "sagemaker:ListTags"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:studio-lifecycle-config"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:studio-lifecycle-config"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:BatchGetMetrics",
         "sagemaker:BatchPutMetrics",
         "sagemaker:CreateTrainingJob",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeTrainingJob",
         "sagemaker:ListTags",
         "sagemaker:StopTrainingJob",
         "sagemaker:UpdateTrainingJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:BatchGetMetrics",
        "sagemaker:BatchPutMetrics",
        "sagemaker:CreateTrainingJob",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeTrainingJob",
        "sagemaker:ListTags",
        "sagemaker:StopTrainingJob",
        "sagemaker:UpdateTrainingJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:training-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:training-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateCluster",
         "sagemaker:CreateTrainingJob",
         "sagemaker:CreateTrainingPlan",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeTrainingPlan",
         "sagemaker:ListTags",
         "sagemaker:UpdateCluster"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateCluster",
        "sagemaker:CreateTrainingJob",
        "sagemaker:CreateTrainingPlan",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeTrainingPlan",
        "sagemaker:ListTags",
        "sagemaker:UpdateCluster"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:training-plan"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:training-plan"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateTransformJob",
         "sagemaker:DeleteTags",
         "sagemaker:DescribeTransformJob",
         "sagemaker:ListTags",
         "sagemaker:StopTransformJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateTransformJob",
        "sagemaker:DeleteTags",
        "sagemaker:DescribeTransformJob",
        "sagemaker:ListTags",
        "sagemaker:StopTransformJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:transform-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:transform-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreatePresignedDomainUrl",
         "sagemaker:CreateUserProfile",
         "sagemaker:DeleteTags",
         "sagemaker:DeleteUserProfile",
         "sagemaker:DescribeUserProfile",
         "sagemaker:ListTags",
         "sagemaker:UpdateUserProfile"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreatePresignedDomainUrl",
        "sagemaker:CreateUserProfile",
        "sagemaker:DeleteTags",
        "sagemaker:DeleteUserProfile",
        "sagemaker:DescribeUserProfile",
        "sagemaker:ListTags",
        "sagemaker:UpdateUserProfile"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:user-profile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:user-profile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:AddTags",
         "sagemaker:CreateWorkteam",
         "sagemaker:DeleteTags",
         "sagemaker:DeleteWorkteam",
         "sagemaker:DescribeSubscribedWorkteam",
         "sagemaker:DescribeWorkteam",
         "sagemaker:ListLabelingJobsForWorkteam",
         "sagemaker:ListTags",
         "sagemaker:UpdateWorkteam"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:AddTags",
        "sagemaker:CreateWorkteam",
        "sagemaker:DeleteTags",
        "sagemaker:DeleteWorkteam",
        "sagemaker:DescribeSubscribedWorkteam",
        "sagemaker:DescribeWorkteam",
        "sagemaker:ListLabelingJobsForWorkteam",
        "sagemaker:ListTags",
        "sagemaker:UpdateWorkteam"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:workteam"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:workteam"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:CreateInferenceExperiment",
         "sagemaker:DeleteInferenceExperiment",
         "sagemaker:DescribeInferenceExperiment",
         "sagemaker:StartInferenceExperiment",
         "sagemaker:StopInferenceExperiment",
         "sagemaker:UpdateInferenceExperiment"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:CreateInferenceExperiment",
        "sagemaker:DeleteInferenceExperiment",
        "sagemaker:DescribeInferenceExperiment",
        "sagemaker:StartInferenceExperiment",
        "sagemaker:StopInferenceExperiment",
        "sagemaker:UpdateInferenceExperiment"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:inference-experiment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:inference-experiment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:CreateNotebookInstanceLifecycleConfig",
         "sagemaker:DeleteNotebookInstanceLifecycleConfig",
         "sagemaker:DescribeNotebookInstanceLifecycleConfig",
         "sagemaker:UpdateNotebookInstanceLifecycleConfig"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:CreateNotebookInstanceLifecycleConfig",
        "sagemaker:DeleteNotebookInstanceLifecycleConfig",
        "sagemaker:DescribeNotebookInstanceLifecycleConfig",
        "sagemaker:UpdateNotebookInstanceLifecycleConfig"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:notebook-instance-lifecycle-config"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:notebook-instance-lifecycle-config"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:CreateSharedModel",
         "sagemaker:DescribeSharedModel",
         "sagemaker:ListSharedModelVersions",
         "sagemaker:UpdateSharedModel"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:CreateSharedModel",
        "sagemaker:DescribeSharedModel",
        "sagemaker:ListSharedModelVersions",
        "sagemaker:UpdateSharedModel"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:shared-model"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:shared-model"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:CreateWorkforce",
         "sagemaker:DeleteWorkforce",
         "sagemaker:DescribeWorkforce",
         "sagemaker:UpdateWorkforce"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:CreateWorkforce",
        "sagemaker:DeleteWorkforce",
        "sagemaker:DescribeWorkforce",
        "sagemaker:UpdateWorkforce"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:workforce"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:workforce"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:DeleteHumanLoop",
         "sagemaker:DescribeHumanLoop",
         "sagemaker:StopHumanLoop"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:DeleteHumanLoop",
        "sagemaker:DescribeHumanLoop",
        "sagemaker:StopHumanLoop"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:human-loop"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:human-loop"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:DeleteImageVersion",
         "sagemaker:DescribeImageVersion",
         "sagemaker:ListAliases",
         "sagemaker:UpdateImageVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:DeleteImageVersion",
        "sagemaker:DescribeImageVersion",
        "sagemaker:ListAliases",
        "sagemaker:UpdateImageVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:image-version"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:image-version"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:DescribeModelCardExportJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:DescribeModelCardExportJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:model-card-export-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:model-card-export-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:DescribePipelineDefinitionForExecution",
         "sagemaker:DescribePipelineExecution",
         "sagemaker:ListPipelineExecutionSteps",
         "sagemaker:ListPipelineParametersForExecution",
         "sagemaker:RetryPipelineExecution",
         "sagemaker:SendPipelineExecutionStepFailure",
         "sagemaker:SendPipelineExecutionStepSuccess",
         "sagemaker:StopPipelineExecution",
         "sagemaker:UpdatePipelineExecution"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:DescribePipelineDefinitionForExecution",
        "sagemaker:DescribePipelineExecution",
        "sagemaker:ListPipelineExecutionSteps",
        "sagemaker:ListPipelineParametersForExecution",
        "sagemaker:RetryPipelineExecution",
        "sagemaker:SendPipelineExecutionStepFailure",
        "sagemaker:SendPipelineExecutionStepSuccess",
        "sagemaker:StopPipelineExecution",
        "sagemaker:UpdatePipelineExecution"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:pipeline-execution"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:pipeline-execution"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:SendSharedModelEvent"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:SendSharedModelEvent"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:shared-model-event"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:shared-model-event"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker:UpdateMonitoringAlert"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker:UpdateMonitoringAlert"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker:monitoring-schedule-alert"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker:monitoring-schedule-alert"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker-geospatial:DeleteEarthObservationJob",
         "sagemaker-geospatial:ExportEarthObservationJob",
         "sagemaker-geospatial:GetEarthObservationJob",
         "sagemaker-geospatial:GetTile",
         "sagemaker-geospatial:ListTagsForResource",
         "sagemaker-geospatial:StartEarthObservationJob",
         "sagemaker-geospatial:StopEarthObservationJob",
         "sagemaker-geospatial:TagResource",
         "sagemaker-geospatial:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker-geospatial:DeleteEarthObservationJob",
        "sagemaker-geospatial:ExportEarthObservationJob",
        "sagemaker-geospatial:GetEarthObservationJob",
        "sagemaker-geospatial:GetTile",
        "sagemaker-geospatial:ListTagsForResource",
        "sagemaker-geospatial:StartEarthObservationJob",
        "sagemaker-geospatial:StopEarthObservationJob",
        "sagemaker-geospatial:TagResource",
        "sagemaker-geospatial:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker-geospatial:EarthObservationJob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker-geospatial:EarthObservationJob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker-geospatial:DeleteVectorEnrichmentJob",
         "sagemaker-geospatial:ExportVectorEnrichmentJob",
         "sagemaker-geospatial:GetVectorEnrichmentJob",
         "sagemaker-geospatial:ListTagsForResource",
         "sagemaker-geospatial:StartVectorEnrichmentJob",
         "sagemaker-geospatial:StopVectorEnrichmentJob",
         "sagemaker-geospatial:TagResource",
         "sagemaker-geospatial:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker-geospatial:DeleteVectorEnrichmentJob",
        "sagemaker-geospatial:ExportVectorEnrichmentJob",
        "sagemaker-geospatial:GetVectorEnrichmentJob",
        "sagemaker-geospatial:ListTagsForResource",
        "sagemaker-geospatial:StartVectorEnrichmentJob",
        "sagemaker-geospatial:StopVectorEnrichmentJob",
        "sagemaker-geospatial:TagResource",
        "sagemaker-geospatial:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker-geospatial:VectorEnrichmentJob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker-geospatial:VectorEnrichmentJob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker-geospatial:GetRasterDataCollection",
         "sagemaker-geospatial:ListTagsForResource",
         "sagemaker-geospatial:TagResource",
         "sagemaker-geospatial:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker-geospatial:GetRasterDataCollection",
        "sagemaker-geospatial:ListTagsForResource",
        "sagemaker-geospatial:TagResource",
        "sagemaker-geospatial:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker-geospatial:RasterDataCollection"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker-geospatial:RasterDataCollection"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sagemaker-mlflow:CreateExperiment",
         "sagemaker-mlflow:CreateModelVersion",
         "sagemaker-mlflow:CreateRegisteredModel",
         "sagemaker-mlflow:CreateRun",
         "sagemaker-mlflow:DeleteExperiment",
         "sagemaker-mlflow:DeleteModelVersion",
         "sagemaker-mlflow:DeleteModelVersionTag",
         "sagemaker-mlflow:DeleteRegisteredModel",
         "sagemaker-mlflow:DeleteRegisteredModelAlias",
         "sagemaker-mlflow:DeleteRegisteredModelTag",
         "sagemaker-mlflow:DeleteRun",
         "sagemaker-mlflow:DeleteTag",
         "sagemaker-mlflow:DeleteTraceTag",
         "sagemaker-mlflow:DeleteTraces",
         "sagemaker-mlflow:EndTrace",
         "sagemaker-mlflow:GetDownloadURIForModelVersionArtifacts",
         "sagemaker-mlflow:GetExperiment",
         "sagemaker-mlflow:GetExperimentByName",
         "sagemaker-mlflow:GetLatestModelVersions",
         "sagemaker-mlflow:GetMetricHistory",
         "sagemaker-mlflow:GetModelVersion",
         "sagemaker-mlflow:GetModelVersionByAlias",
         "sagemaker-mlflow:GetRegisteredModel",
         "sagemaker-mlflow:GetRun",
         "sagemaker-mlflow:GetTraceInfo",
         "sagemaker-mlflow:ListArtifacts",
         "sagemaker-mlflow:LogBatch",
         "sagemaker-mlflow:LogInputs",
         "sagemaker-mlflow:LogMetric",
         "sagemaker-mlflow:LogModel",
         "sagemaker-mlflow:LogParam",
         "sagemaker-mlflow:RenameRegisteredModel",
         "sagemaker-mlflow:RestoreExperiment",
         "sagemaker-mlflow:RestoreRun",
         "sagemaker-mlflow:SearchExperiments",
         "sagemaker-mlflow:SearchModelVersions",
         "sagemaker-mlflow:SearchRegisteredModels",
         "sagemaker-mlflow:SearchRuns",
         "sagemaker-mlflow:SearchTraces",
         "sagemaker-mlflow:SetExperimentTag",
         "sagemaker-mlflow:SetModelVersionTag",
         "sagemaker-mlflow:SetRegisteredModelAlias",
         "sagemaker-mlflow:SetRegisteredModelTag",
         "sagemaker-mlflow:SetTag",
         "sagemaker-mlflow:SetTraceTag",
         "sagemaker-mlflow:StartTrace",
         "sagemaker-mlflow:TransitionModelVersionStage",
         "sagemaker-mlflow:UpdateExperiment",
         "sagemaker-mlflow:UpdateModelVersion",
         "sagemaker-mlflow:UpdateRegisteredModel",
         "sagemaker-mlflow:UpdateRun"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sagemaker-mlflow:CreateExperiment",
        "sagemaker-mlflow:CreateModelVersion",
        "sagemaker-mlflow:CreateRegisteredModel",
        "sagemaker-mlflow:CreateRun",
        "sagemaker-mlflow:DeleteExperiment",
        "sagemaker-mlflow:DeleteModelVersion",
        "sagemaker-mlflow:DeleteModelVersionTag",
        "sagemaker-mlflow:DeleteRegisteredModel",
        "sagemaker-mlflow:DeleteRegisteredModelAlias",
        "sagemaker-mlflow:DeleteRegisteredModelTag",
        "sagemaker-mlflow:DeleteRun",
        "sagemaker-mlflow:DeleteTag",
        "sagemaker-mlflow:DeleteTraceTag",
        "sagemaker-mlflow:DeleteTraces",
        "sagemaker-mlflow:EndTrace",
        "sagemaker-mlflow:GetDownloadURIForModelVersionArtifacts",
        "sagemaker-mlflow:GetExperiment",
        "sagemaker-mlflow:GetExperimentByName",
        "sagemaker-mlflow:GetLatestModelVersions",
        "sagemaker-mlflow:GetMetricHistory",
        "sagemaker-mlflow:GetModelVersion",
        "sagemaker-mlflow:GetModelVersionByAlias",
        "sagemaker-mlflow:GetRegisteredModel",
        "sagemaker-mlflow:GetRun",
        "sagemaker-mlflow:GetTraceInfo",
        "sagemaker-mlflow:ListArtifacts",
        "sagemaker-mlflow:LogBatch",
        "sagemaker-mlflow:LogInputs",
        "sagemaker-mlflow:LogMetric",
        "sagemaker-mlflow:LogModel",
        "sagemaker-mlflow:LogParam",
        "sagemaker-mlflow:RenameRegisteredModel",
        "sagemaker-mlflow:RestoreExperiment",
        "sagemaker-mlflow:RestoreRun",
        "sagemaker-mlflow:SearchExperiments",
        "sagemaker-mlflow:SearchModelVersions",
        "sagemaker-mlflow:SearchRegisteredModels",
        "sagemaker-mlflow:SearchRuns",
        "sagemaker-mlflow:SearchTraces",
        "sagemaker-mlflow:SetExperimentTag",
        "sagemaker-mlflow:SetModelVersionTag",
        "sagemaker-mlflow:SetRegisteredModelAlias",
        "sagemaker-mlflow:SetRegisteredModelTag",
        "sagemaker-mlflow:SetTag",
        "sagemaker-mlflow:SetTraceTag",
        "sagemaker-mlflow:StartTrace",
        "sagemaker-mlflow:TransitionModelVersionStage",
        "sagemaker-mlflow:UpdateExperiment",
        "sagemaker-mlflow:UpdateModelVersion",
        "sagemaker-mlflow:UpdateRegisteredModel",
        "sagemaker-mlflow:UpdateRun"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sagemaker-mlflow:mlflow-tracking-server"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sagemaker-mlflow:mlflow-tracking-server"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "savingsplans:DeleteQueuedSavingsPlan",
         "savingsplans:DescribeSavingsPlanRates",
         "savingsplans:DescribeSavingsPlans",
         "savingsplans:ListTagsForResource",
         "savingsplans:ReturnSavingsPlan",
         "savingsplans:TagResource",
         "savingsplans:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "savingsplans:DeleteQueuedSavingsPlan",
        "savingsplans:DescribeSavingsPlanRates",
        "savingsplans:DescribeSavingsPlans",
        "savingsplans:ListTagsForResource",
        "savingsplans:ReturnSavingsPlan",
        "savingsplans:TagResource",
        "savingsplans:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/savingsplans:savingsplan"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/savingsplans:savingsplan"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "scheduler:CreateSchedule",
         "scheduler:DeleteSchedule",
         "scheduler:GetSchedule",
         "scheduler:UpdateSchedule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "scheduler:CreateSchedule",
        "scheduler:DeleteSchedule",
        "scheduler:GetSchedule",
        "scheduler:UpdateSchedule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/scheduler:schedule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/scheduler:schedule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "scheduler:CreateScheduleGroup",
         "scheduler:DeleteScheduleGroup",
         "scheduler:GetScheduleGroup",
         "scheduler:ListTagsForResource",
         "scheduler:TagResource",
         "scheduler:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "scheduler:CreateScheduleGroup",
        "scheduler:DeleteScheduleGroup",
        "scheduler:GetScheduleGroup",
        "scheduler:ListTagsForResource",
        "scheduler:TagResource",
        "scheduler:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/scheduler:schedule-group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/scheduler:schedule-group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "schemas:CreateRegistry",
         "schemas:DeleteRegistry",
         "schemas:DeleteResourcePolicy",
         "schemas:DescribeRegistry",
         "schemas:ExportSchema",
         "schemas:GetResourcePolicy",
         "schemas:ListRegistries",
         "schemas:ListTagsForResource",
         "schemas:PutResourcePolicy",
         "schemas:TagResource",
         "schemas:UntagResource",
         "schemas:UpdateRegistry"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "schemas:CreateRegistry",
        "schemas:DeleteRegistry",
        "schemas:DeleteResourcePolicy",
        "schemas:DescribeRegistry",
        "schemas:ExportSchema",
        "schemas:GetResourcePolicy",
        "schemas:ListRegistries",
        "schemas:ListTagsForResource",
        "schemas:PutResourcePolicy",
        "schemas:TagResource",
        "schemas:UntagResource",
        "schemas:UpdateRegistry"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/schemas:registry"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/schemas:registry"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "schemas:CreateSchema",
         "schemas:DeleteSchema",
         "schemas:DeleteSchemaVersion",
         "schemas:DescribeCodeBinding",
         "schemas:DescribeSchema",
         "schemas:ExportSchema",
         "schemas:GetCodeBindingSource",
         "schemas:ListSchemaVersions",
         "schemas:ListSchemas",
         "schemas:ListTagsForResource",
         "schemas:PutCodeBinding",
         "schemas:SearchSchemas",
         "schemas:TagResource",
         "schemas:UntagResource",
         "schemas:UpdateSchema"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "schemas:CreateSchema",
        "schemas:DeleteSchema",
        "schemas:DeleteSchemaVersion",
        "schemas:DescribeCodeBinding",
        "schemas:DescribeSchema",
        "schemas:ExportSchema",
        "schemas:GetCodeBindingSource",
        "schemas:ListSchemaVersions",
        "schemas:ListSchemas",
        "schemas:ListTagsForResource",
        "schemas:PutCodeBinding",
        "schemas:SearchSchemas",
        "schemas:TagResource",
        "schemas:UntagResource",
        "schemas:UpdateSchema"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/schemas:schema"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/schemas:schema"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "schemas:DeleteDiscoverer",
         "schemas:DescribeDiscoverer",
         "schemas:ListDiscoverers",
         "schemas:ListTagsForResource",
         "schemas:StartDiscoverer",
         "schemas:StopDiscoverer",
         "schemas:TagResource",
         "schemas:UntagResource",
         "schemas:UpdateDiscoverer"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "schemas:DeleteDiscoverer",
        "schemas:DescribeDiscoverer",
        "schemas:ListDiscoverers",
        "schemas:ListTagsForResource",
        "schemas:StartDiscoverer",
        "schemas:StopDiscoverer",
        "schemas:TagResource",
        "schemas:UntagResource",
        "schemas:UpdateDiscoverer"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/schemas:discoverer"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/schemas:discoverer"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "scn:AssignAdminPermissionsToUser",
         "scn:CreateBillOfMaterialsImportJob",
         "scn:CreateDataIntegrationFlow",
         "scn:CreateDataLakeDataset",
         "scn:CreateInstance",
         "scn:CreateSSOApplication",
         "scn:DeleteInstance",
         "scn:DeleteSSOApplication",
         "scn:DescribeInstance",
         "scn:GetInstance",
         "scn:ListAdminUsers",
         "scn:ListDataIntegrationFlows",
         "scn:ListDataLakeDatasets",
         "scn:ListInstances",
         "scn:ListTagsForResource",
         "scn:RemoveAdminPermissionsForUser",
         "scn:SendDataIntegrationEvent",
         "scn:TagResource",
         "scn:UntagResource",
         "scn:UpdateInstance"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "scn:AssignAdminPermissionsToUser",
        "scn:CreateBillOfMaterialsImportJob",
        "scn:CreateDataIntegrationFlow",
        "scn:CreateDataLakeDataset",
        "scn:CreateInstance",
        "scn:CreateSSOApplication",
        "scn:DeleteInstance",
        "scn:DeleteSSOApplication",
        "scn:DescribeInstance",
        "scn:GetInstance",
        "scn:ListAdminUsers",
        "scn:ListDataIntegrationFlows",
        "scn:ListDataLakeDatasets",
        "scn:ListInstances",
        "scn:ListTagsForResource",
        "scn:RemoveAdminPermissionsForUser",
        "scn:SendDataIntegrationEvent",
        "scn:TagResource",
        "scn:UntagResource",
        "scn:UpdateInstance"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/scn:instance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/scn:instance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "scn:DeleteDataIntegrationFlow",
         "scn:GetDataIntegrationFlow",
         "scn:UpdateDataIntegrationFlow"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "scn:DeleteDataIntegrationFlow",
        "scn:GetDataIntegrationFlow",
        "scn:UpdateDataIntegrationFlow"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/scn:data-integration-flow"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/scn:data-integration-flow"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "scn:DeleteDataLakeDataset",
         "scn:GetDataLakeDataset",
         "scn:UpdateDataLakeDataset"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "scn:DeleteDataLakeDataset",
        "scn:GetDataLakeDataset",
        "scn:UpdateDataLakeDataset"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/scn:dataset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/scn:dataset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "scn:GetBillOfMaterialsImportJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "scn:GetBillOfMaterialsImportJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/scn:bill-of-materials-import-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/scn:bill-of-materials-import-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sdb:BatchDeleteAttributes",
         "sdb:BatchPutAttributes",
         "sdb:CreateDomain",
         "sdb:DeleteAttributes",
         "sdb:DeleteDomain",
         "sdb:DomainMetadata",
         "sdb:GetAttributes",
         "sdb:PutAttributes",
         "sdb:Select"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sdb:BatchDeleteAttributes",
        "sdb:BatchPutAttributes",
        "sdb:CreateDomain",
        "sdb:DeleteAttributes",
        "sdb:DeleteDomain",
        "sdb:DomainMetadata",
        "sdb:GetAttributes",
        "sdb:PutAttributes",
        "sdb:Select"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sdb:domain"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sdb:domain"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "secretsmanager:CancelRotateSecret",
         "secretsmanager:CreateSecret",
         "secretsmanager:DeleteResourcePolicy",
         "secretsmanager:DeleteSecret",
         "secretsmanager:DescribeSecret",
         "secretsmanager:GetResourcePolicy",
         "secretsmanager:GetSecretValue",
         "secretsmanager:ListSecretVersionIds",
         "secretsmanager:PutResourcePolicy",
         "secretsmanager:PutSecretValue",
         "secretsmanager:RemoveRegionsFromReplication",
         "secretsmanager:ReplicateSecretToRegions",
         "secretsmanager:RestoreSecret",
         "secretsmanager:RotateSecret",
         "secretsmanager:StopReplicationToReplica",
         "secretsmanager:TagResource",
         "secretsmanager:UntagResource",
         "secretsmanager:UpdateSecret",
         "secretsmanager:UpdateSecretVersionStage",
         "secretsmanager:ValidateResourcePolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "secretsmanager:CancelRotateSecret",
        "secretsmanager:CreateSecret",
        "secretsmanager:DeleteResourcePolicy",
        "secretsmanager:DeleteSecret",
        "secretsmanager:DescribeSecret",
        "secretsmanager:GetResourcePolicy",
        "secretsmanager:GetSecretValue",
        "secretsmanager:ListSecretVersionIds",
        "secretsmanager:PutResourcePolicy",
        "secretsmanager:PutSecretValue",
        "secretsmanager:RemoveRegionsFromReplication",
        "secretsmanager:ReplicateSecretToRegions",
        "secretsmanager:RestoreSecret",
        "secretsmanager:RotateSecret",
        "secretsmanager:StopReplicationToReplica",
        "secretsmanager:TagResource",
        "secretsmanager:UntagResource",
        "secretsmanager:UpdateSecret",
        "secretsmanager:UpdateSecretVersionStage",
        "secretsmanager:ValidateResourcePolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/secretsmanager:Secret"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/secretsmanager:Secret"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "security-ir:BatchGetMemberAccountDetails",
         "security-ir:CancelMembership",
         "security-ir:GetMembership",
         "security-ir:ListTagsForResource",
         "security-ir:TagResource",
         "security-ir:UntagResource",
         "security-ir:UpdateMembership"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "security-ir:BatchGetMemberAccountDetails",
        "security-ir:CancelMembership",
        "security-ir:GetMembership",
        "security-ir:ListTagsForResource",
        "security-ir:TagResource",
        "security-ir:UntagResource",
        "security-ir:UpdateMembership"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/security-ir:membership"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/security-ir:membership"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "security-ir:CloseCase",
         "security-ir:CreateCaseComment",
         "security-ir:GetCase",
         "security-ir:GetCaseAttachmentDownloadUrl",
         "security-ir:GetCaseAttachmentUploadUrl",
         "security-ir:ListCaseEdits",
         "security-ir:ListComments",
         "security-ir:ListTagsForResource",
         "security-ir:TagResource",
         "security-ir:UntagResource",
         "security-ir:UpdateCase",
         "security-ir:UpdateCaseComment",
         "security-ir:UpdateCaseStatus",
         "security-ir:UpdateResolverType"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "security-ir:CloseCase",
        "security-ir:CreateCaseComment",
        "security-ir:GetCase",
        "security-ir:GetCaseAttachmentDownloadUrl",
        "security-ir:GetCaseAttachmentUploadUrl",
        "security-ir:ListCaseEdits",
        "security-ir:ListComments",
        "security-ir:ListTagsForResource",
        "security-ir:TagResource",
        "security-ir:UntagResource",
        "security-ir:UpdateCase",
        "security-ir:UpdateCaseComment",
        "security-ir:UpdateCaseStatus",
        "security-ir:UpdateResolverType"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/security-ir:case"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/security-ir:case"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "securityhub:AcceptAdministratorInvitation",
         "securityhub:AcceptInvitation",
         "securityhub:BatchDisableStandards",
         "securityhub:BatchEnableStandards",
         "securityhub:BatchGetControlEvaluations",
         "securityhub:BatchUpdateFindings",
         "securityhub:CreateActionTarget",
         "securityhub:CreateInsight",
         "securityhub:CreateMembers",
         "securityhub:DeclineInvitations",
         "securityhub:DeleteActionTarget",
         "securityhub:DeleteInsight",
         "securityhub:DeleteInvitations",
         "securityhub:DeleteMembers",
         "securityhub:DescribeActionTargets",
         "securityhub:DescribeHub",
         "securityhub:DescribeOrganizationConfiguration",
         "securityhub:DescribeProducts",
         "securityhub:DescribeStandards",
         "securityhub:DescribeStandardsControls",
         "securityhub:DisableImportFindingsForProduct",
         "securityhub:DisableOrganizationAdminAccount",
         "securityhub:DisableSecurityHub",
         "securityhub:DisassociateFromAdministratorAccount",
         "securityhub:DisassociateFromMasterAccount",
         "securityhub:DisassociateMembers",
         "securityhub:EnableImportFindingsForProduct",
         "securityhub:EnableOrganizationAdminAccount",
         "securityhub:EnableSecurityHub",
         "securityhub:GetAdhocInsightResults",
         "securityhub:GetAdministratorAccount",
         "securityhub:GetControlFindingSummary",
         "securityhub:GetEnabledStandards",
         "securityhub:GetFindingHistory",
         "securityhub:GetFindings",
         "securityhub:GetFreeTrialEndDate",
         "securityhub:GetFreeTrialUsage",
         "securityhub:GetInsightFindingTrend",
         "securityhub:GetInsightResults",
         "securityhub:GetInsights",
         "securityhub:GetInvitationsCount",
         "securityhub:GetMasterAccount",
         "securityhub:GetMembers",
         "securityhub:GetUsage",
         "securityhub:InviteMembers",
         "securityhub:ListControlEvaluationSummaries",
         "securityhub:ListEnabledProductsForImport",
         "securityhub:ListInvitations",
         "securityhub:ListMembers",
         "securityhub:ListOrganizationAdminAccounts",
         "securityhub:ListTagsForResource",
         "securityhub:SendFindingEvents",
         "securityhub:SendInsightEvents",
         "securityhub:TagResource",
         "securityhub:UntagResource",
         "securityhub:UpdateActionTarget",
         "securityhub:UpdateFindings",
         "securityhub:UpdateInsight",
         "securityhub:UpdateOrganizationConfiguration",
         "securityhub:UpdateSecurityHubConfiguration",
         "securityhub:UpdateStandardsControl"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "securityhub:AcceptAdministratorInvitation",
        "securityhub:AcceptInvitation",
        "securityhub:BatchDisableStandards",
        "securityhub:BatchEnableStandards",
        "securityhub:BatchGetControlEvaluations",
        "securityhub:BatchUpdateFindings",
        "securityhub:CreateActionTarget",
        "securityhub:CreateInsight",
        "securityhub:CreateMembers",
        "securityhub:DeclineInvitations",
        "securityhub:DeleteActionTarget",
        "securityhub:DeleteInsight",
        "securityhub:DeleteInvitations",
        "securityhub:DeleteMembers",
        "securityhub:DescribeActionTargets",
        "securityhub:DescribeHub",
        "securityhub:DescribeOrganizationConfiguration",
        "securityhub:DescribeProducts",
        "securityhub:DescribeStandards",
        "securityhub:DescribeStandardsControls",
        "securityhub:DisableImportFindingsForProduct",
        "securityhub:DisableOrganizationAdminAccount",
        "securityhub:DisableSecurityHub",
        "securityhub:DisassociateFromAdministratorAccount",
        "securityhub:DisassociateFromMasterAccount",
        "securityhub:DisassociateMembers",
        "securityhub:EnableImportFindingsForProduct",
        "securityhub:EnableOrganizationAdminAccount",
        "securityhub:EnableSecurityHub",
        "securityhub:GetAdhocInsightResults",
        "securityhub:GetAdministratorAccount",
        "securityhub:GetControlFindingSummary",
        "securityhub:GetEnabledStandards",
        "securityhub:GetFindingHistory",
        "securityhub:GetFindings",
        "securityhub:GetFreeTrialEndDate",
        "securityhub:GetFreeTrialUsage",
        "securityhub:GetInsightFindingTrend",
        "securityhub:GetInsightResults",
        "securityhub:GetInsights",
        "securityhub:GetInvitationsCount",
        "securityhub:GetMasterAccount",
        "securityhub:GetMembers",
        "securityhub:GetUsage",
        "securityhub:InviteMembers",
        "securityhub:ListControlEvaluationSummaries",
        "securityhub:ListEnabledProductsForImport",
        "securityhub:ListInvitations",
        "securityhub:ListMembers",
        "securityhub:ListOrganizationAdminAccounts",
        "securityhub:ListTagsForResource",
        "securityhub:SendFindingEvents",
        "securityhub:SendInsightEvents",
        "securityhub:TagResource",
        "securityhub:UntagResource",
        "securityhub:UpdateActionTarget",
        "securityhub:UpdateFindings",
        "securityhub:UpdateInsight",
        "securityhub:UpdateOrganizationConfiguration",
        "securityhub:UpdateSecurityHubConfiguration",
        "securityhub:UpdateStandardsControl"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/securityhub:hub"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/securityhub:hub"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "securityhub:BatchDeleteAutomationRules",
         "securityhub:BatchGetAutomationRules",
         "securityhub:BatchUpdateAutomationRules",
         "securityhub:ListTagsForResource",
         "securityhub:TagResource",
         "securityhub:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "securityhub:BatchDeleteAutomationRules",
        "securityhub:BatchGetAutomationRules",
        "securityhub:BatchUpdateAutomationRules",
        "securityhub:ListTagsForResource",
        "securityhub:TagResource",
        "securityhub:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/securityhub:automation-rule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/securityhub:automation-rule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "securityhub:BatchImportFindings"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "securityhub:BatchImportFindings"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/securityhub:product"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/securityhub:product"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "securityhub:DeleteConfigurationPolicy",
         "securityhub:GetConfigurationPolicy",
         "securityhub:ListTagsForResource",
         "securityhub:StartConfigurationPolicyAssociation",
         "securityhub:StartConfigurationPolicyDisassociation",
         "securityhub:TagResource",
         "securityhub:UntagResource",
         "securityhub:UpdateConfigurationPolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "securityhub:DeleteConfigurationPolicy",
        "securityhub:GetConfigurationPolicy",
        "securityhub:ListTagsForResource",
        "securityhub:StartConfigurationPolicyAssociation",
        "securityhub:StartConfigurationPolicyDisassociation",
        "securityhub:TagResource",
        "securityhub:UntagResource",
        "securityhub:UpdateConfigurationPolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/securityhub:configuration-policy"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/securityhub:configuration-policy"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "securityhub:DeleteFindingAggregator",
         "securityhub:GetFindingAggregator",
         "securityhub:UpdateFindingAggregator"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "securityhub:DeleteFindingAggregator",
        "securityhub:GetFindingAggregator",
        "securityhub:UpdateFindingAggregator"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/securityhub:finding-aggregator"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/securityhub:finding-aggregator"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "securitylake:CreateAwsLogSource",
         "securitylake:CreateCustomLogSource",
         "securitylake:CreateDataLake",
         "securitylake:CreateDataLakeOrganizationConfiguration",
         "securitylake:DeleteAwsLogSource",
         "securitylake:DeleteCustomLogSource",
         "securitylake:DeleteDataLake",
         "securitylake:DeleteDataLakeOrganizationConfiguration",
         "securitylake:GetDataLakeOrganizationConfiguration",
         "securitylake:GetDataLakeSources",
         "securitylake:ListTagsForResource",
         "securitylake:TagResource",
         "securitylake:UntagResource",
         "securitylake:UpdateDataLake"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "securitylake:CreateAwsLogSource",
        "securitylake:CreateCustomLogSource",
        "securitylake:CreateDataLake",
        "securitylake:CreateDataLakeOrganizationConfiguration",
        "securitylake:DeleteAwsLogSource",
        "securitylake:DeleteCustomLogSource",
        "securitylake:DeleteDataLake",
        "securitylake:DeleteDataLakeOrganizationConfiguration",
        "securitylake:GetDataLakeOrganizationConfiguration",
        "securitylake:GetDataLakeSources",
        "securitylake:ListTagsForResource",
        "securitylake:TagResource",
        "securitylake:UntagResource",
        "securitylake:UpdateDataLake"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/securitylake:data-lake"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/securitylake:data-lake"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "securitylake:CreateSubscriberNotification",
         "securitylake:DeleteSubscriber",
         "securitylake:DeleteSubscriberNotification",
         "securitylake:GetSubscriber",
         "securitylake:ListTagsForResource",
         "securitylake:TagResource",
         "securitylake:UntagResource",
         "securitylake:UpdateSubscriber",
         "securitylake:UpdateSubscriberNotification"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "securitylake:CreateSubscriberNotification",
        "securitylake:DeleteSubscriber",
        "securitylake:DeleteSubscriberNotification",
        "securitylake:GetSubscriber",
        "securitylake:ListTagsForResource",
        "securitylake:TagResource",
        "securitylake:UntagResource",
        "securitylake:UpdateSubscriber",
        "securitylake:UpdateSubscriberNotification"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/securitylake:subscriber"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/securitylake:subscriber"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "serverlessrepo:CreateApplicationVersion",
         "serverlessrepo:CreateCloudFormationChangeSet",
         "serverlessrepo:CreateCloudFormationTemplate",
         "serverlessrepo:DeleteApplication",
         "serverlessrepo:GetApplication",
         "serverlessrepo:GetApplicationPolicy",
         "serverlessrepo:GetCloudFormationTemplate",
         "serverlessrepo:ListApplicationDependencies",
         "serverlessrepo:ListApplicationVersions",
         "serverlessrepo:PutApplicationPolicy",
         "serverlessrepo:UnshareApplication",
         "serverlessrepo:UpdateApplication"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "serverlessrepo:CreateApplicationVersion",
        "serverlessrepo:CreateCloudFormationChangeSet",
        "serverlessrepo:CreateCloudFormationTemplate",
        "serverlessrepo:DeleteApplication",
        "serverlessrepo:GetApplication",
        "serverlessrepo:GetApplicationPolicy",
        "serverlessrepo:GetCloudFormationTemplate",
        "serverlessrepo:ListApplicationDependencies",
        "serverlessrepo:ListApplicationVersions",
        "serverlessrepo:PutApplicationPolicy",
        "serverlessrepo:UnshareApplication",
        "serverlessrepo:UpdateApplication"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/serverlessrepo:applications"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/serverlessrepo:applications"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "servicecatalog:AcceptPortfolioShare",
         "servicecatalog:AssociatePrincipalWithPortfolio",
         "servicecatalog:AssociateTagOptionWithResource",
         "servicecatalog:CreatePortfolio",
         "servicecatalog:CreatePortfolioShare",
         "servicecatalog:DeletePortfolio",
         "servicecatalog:DeletePortfolioShare",
         "servicecatalog:DescribePortfolio",
         "servicecatalog:DescribePortfolioShares",
         "servicecatalog:DisassociatePrincipalFromPortfolio",
         "servicecatalog:DisassociateTagOptionFromResource",
         "servicecatalog:ListPortfolioAccess",
         "servicecatalog:ListPrincipalsForPortfolio",
         "servicecatalog:RejectPortfolioShare",
         "servicecatalog:UpdatePortfolio",
         "servicecatalog:UpdatePortfolioShare"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "servicecatalog:AcceptPortfolioShare",
        "servicecatalog:AssociatePrincipalWithPortfolio",
        "servicecatalog:AssociateTagOptionWithResource",
        "servicecatalog:CreatePortfolio",
        "servicecatalog:CreatePortfolioShare",
        "servicecatalog:DeletePortfolio",
        "servicecatalog:DeletePortfolioShare",
        "servicecatalog:DescribePortfolio",
        "servicecatalog:DescribePortfolioShares",
        "servicecatalog:DisassociatePrincipalFromPortfolio",
        "servicecatalog:DisassociateTagOptionFromResource",
        "servicecatalog:ListPortfolioAccess",
        "servicecatalog:ListPrincipalsForPortfolio",
        "servicecatalog:RejectPortfolioShare",
        "servicecatalog:UpdatePortfolio",
        "servicecatalog:UpdatePortfolioShare"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/servicecatalog:Portfolio"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/servicecatalog:Portfolio"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "servicecatalog:AssociateAttributeGroup",
         "servicecatalog:AssociateResource",
         "servicecatalog:CreateApplication",
         "servicecatalog:DeleteApplication",
         "servicecatalog:DeleteResourcePolicy",
         "servicecatalog:DisassociateAttributeGroup",
         "servicecatalog:DisassociateResource",
         "servicecatalog:GetApplication",
         "servicecatalog:GetAssociatedResource",
         "servicecatalog:GetResourcePolicy",
         "servicecatalog:ListAssociatedAttributeGroups",
         "servicecatalog:ListAssociatedResources",
         "servicecatalog:ListAttributeGroupsForApplication",
         "servicecatalog:ListTagsForResource",
         "servicecatalog:PutResourcePolicy",
         "servicecatalog:TagResource",
         "servicecatalog:UntagResource",
         "servicecatalog:UpdateApplication"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "servicecatalog:AssociateAttributeGroup",
        "servicecatalog:AssociateResource",
        "servicecatalog:CreateApplication",
        "servicecatalog:DeleteApplication",
        "servicecatalog:DeleteResourcePolicy",
        "servicecatalog:DisassociateAttributeGroup",
        "servicecatalog:DisassociateResource",
        "servicecatalog:GetApplication",
        "servicecatalog:GetAssociatedResource",
        "servicecatalog:GetResourcePolicy",
        "servicecatalog:ListAssociatedAttributeGroups",
        "servicecatalog:ListAssociatedResources",
        "servicecatalog:ListAttributeGroupsForApplication",
        "servicecatalog:ListTagsForResource",
        "servicecatalog:PutResourcePolicy",
        "servicecatalog:TagResource",
        "servicecatalog:UntagResource",
        "servicecatalog:UpdateApplication"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/servicecatalog:Application"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/servicecatalog:Application"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "servicecatalog:AssociateAttributeGroup",
         "servicecatalog:CreateAttributeGroup",
         "servicecatalog:DeleteAttributeGroup",
         "servicecatalog:DeleteResourcePolicy",
         "servicecatalog:DisassociateAttributeGroup",
         "servicecatalog:GetAttributeGroup",
         "servicecatalog:GetResourcePolicy",
         "servicecatalog:ListTagsForResource",
         "servicecatalog:PutResourcePolicy",
         "servicecatalog:TagResource",
         "servicecatalog:UntagResource",
         "servicecatalog:UpdateAttributeGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "servicecatalog:AssociateAttributeGroup",
        "servicecatalog:CreateAttributeGroup",
        "servicecatalog:DeleteAttributeGroup",
        "servicecatalog:DeleteResourcePolicy",
        "servicecatalog:DisassociateAttributeGroup",
        "servicecatalog:GetAttributeGroup",
        "servicecatalog:GetResourcePolicy",
        "servicecatalog:ListTagsForResource",
        "servicecatalog:PutResourcePolicy",
        "servicecatalog:TagResource",
        "servicecatalog:UntagResource",
        "servicecatalog:UpdateAttributeGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/servicecatalog:AttributeGroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/servicecatalog:AttributeGroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "servicecatalog:AssociateServiceActionWithProvisioningArtifact",
         "servicecatalog:AssociateTagOptionWithResource",
         "servicecatalog:CreateConstraint",
         "servicecatalog:CreateProduct",
         "servicecatalog:CreateProvisioningArtifact",
         "servicecatalog:DeleteProduct",
         "servicecatalog:DeleteProvisioningArtifact",
         "servicecatalog:DescribeProduct",
         "servicecatalog:DescribeProductAsAdmin",
         "servicecatalog:DescribeProvisioningArtifact",
         "servicecatalog:DescribeProvisioningParameters",
         "servicecatalog:DisassociateServiceActionFromProvisioningArtifact",
         "servicecatalog:DisassociateTagOptionFromResource",
         "servicecatalog:ImportAsProvisionedProduct",
         "servicecatalog:ListLaunchPaths",
         "servicecatalog:ListPortfoliosForProduct",
         "servicecatalog:ListProvisioningArtifacts",
         "servicecatalog:ListServiceActionsForProvisioningArtifact",
         "servicecatalog:ProvisionProduct",
         "servicecatalog:UpdateProduct",
         "servicecatalog:UpdateProvisioningArtifact"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "servicecatalog:AssociateServiceActionWithProvisioningArtifact",
        "servicecatalog:AssociateTagOptionWithResource",
        "servicecatalog:CreateConstraint",
        "servicecatalog:CreateProduct",
        "servicecatalog:CreateProvisioningArtifact",
        "servicecatalog:DeleteProduct",
        "servicecatalog:DeleteProvisioningArtifact",
        "servicecatalog:DescribeProduct",
        "servicecatalog:DescribeProductAsAdmin",
        "servicecatalog:DescribeProvisioningArtifact",
        "servicecatalog:DescribeProvisioningParameters",
        "servicecatalog:DisassociateServiceActionFromProvisioningArtifact",
        "servicecatalog:DisassociateTagOptionFromResource",
        "servicecatalog:ImportAsProvisionedProduct",
        "servicecatalog:ListLaunchPaths",
        "servicecatalog:ListPortfoliosForProduct",
        "servicecatalog:ListProvisioningArtifacts",
        "servicecatalog:ListServiceActionsForProvisioningArtifact",
        "servicecatalog:ProvisionProduct",
        "servicecatalog:UpdateProduct",
        "servicecatalog:UpdateProvisioningArtifact"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/servicecatalog:Product"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/servicecatalog:Product"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "servicediscovery:CreateService",
         "servicediscovery:DeleteNamespace",
         "servicediscovery:GetNamespace",
         "servicediscovery:UpdateHttpNamespace",
         "servicediscovery:UpdatePrivateDnsNamespace",
         "servicediscovery:UpdatePublicDnsNamespace"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "servicediscovery:CreateService",
        "servicediscovery:DeleteNamespace",
        "servicediscovery:GetNamespace",
        "servicediscovery:UpdateHttpNamespace",
        "servicediscovery:UpdatePrivateDnsNamespace",
        "servicediscovery:UpdatePublicDnsNamespace"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/servicediscovery:namespace"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/servicediscovery:namespace"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "servicediscovery:CreateService",
         "servicediscovery:DeleteService",
         "servicediscovery:DeleteServiceAttributes",
         "servicediscovery:DeregisterInstance",
         "servicediscovery:GetService",
         "servicediscovery:GetServiceAttributes",
         "servicediscovery:RegisterInstance",
         "servicediscovery:UpdateService",
         "servicediscovery:UpdateServiceAttributes"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "servicediscovery:CreateService",
        "servicediscovery:DeleteService",
        "servicediscovery:DeleteServiceAttributes",
        "servicediscovery:DeregisterInstance",
        "servicediscovery:GetService",
        "servicediscovery:GetServiceAttributes",
        "servicediscovery:RegisterInstance",
        "servicediscovery:UpdateService",
        "servicediscovery:UpdateServiceAttributes"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/servicediscovery:service"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/servicediscovery:service"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "servicequotas:PutServiceQuotaIncreaseRequestIntoTemplate",
         "servicequotas:RequestServiceQuotaIncrease"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "servicequotas:PutServiceQuotaIncreaseRequestIntoTemplate",
        "servicequotas:RequestServiceQuotaIncrease"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/servicequotas:quota"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/servicequotas:quota"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ses:AllowVendedLogDeliveryForResource",
         "ses:DeleteIngressPoint",
         "ses:GetIngressPoint",
         "ses:ListTagsForResource",
         "ses:TagResource",
         "ses:UntagResource",
         "ses:UpdateIngressPoint"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ses:AllowVendedLogDeliveryForResource",
        "ses:DeleteIngressPoint",
        "ses:GetIngressPoint",
        "ses:ListTagsForResource",
        "ses:TagResource",
        "ses:UntagResource",
        "ses:UpdateIngressPoint"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ses:mailmanager-ingress-point"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ses:mailmanager-ingress-point"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ses:AllowVendedLogDeliveryForResource",
         "ses:DeleteRuleSet",
         "ses:GetRuleSet",
         "ses:ListTagsForResource",
         "ses:TagResource",
         "ses:UntagResource",
         "ses:UpdateRuleSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ses:AllowVendedLogDeliveryForResource",
        "ses:DeleteRuleSet",
        "ses:GetRuleSet",
        "ses:ListTagsForResource",
        "ses:TagResource",
        "ses:UntagResource",
        "ses:UpdateRuleSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ses:mailmanager-rule-set"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ses:mailmanager-rule-set"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ses:BatchGetMetricData",
         "ses:CreateConfigurationSet",
         "ses:CreateConfigurationSetEventDestination",
         "ses:DeleteConfigurationSet",
         "ses:DeleteConfigurationSetEventDestination",
         "ses:GetConfigurationSet",
         "ses:GetConfigurationSetEventDestinations",
         "ses:ListTagsForResource",
         "ses:PutConfigurationSetArchivingOptions",
         "ses:PutConfigurationSetDeliveryOptions",
         "ses:PutConfigurationSetReputationOptions",
         "ses:PutConfigurationSetSendingOptions",
         "ses:PutConfigurationSetSuppressionOptions",
         "ses:PutConfigurationSetTrackingOptions",
         "ses:PutConfigurationSetVdmOptions",
         "ses:PutEmailIdentityConfigurationSetAttributes",
         "ses:SendBulkEmail",
         "ses:SendBulkTemplatedEmail",
         "ses:SendEmail",
         "ses:SendRawEmail",
         "ses:SendTemplatedEmail",
         "ses:TagResource",
         "ses:UntagResource",
         "ses:UpdateConfigurationSetEventDestination"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ses:BatchGetMetricData",
        "ses:CreateConfigurationSet",
        "ses:CreateConfigurationSetEventDestination",
        "ses:DeleteConfigurationSet",
        "ses:DeleteConfigurationSetEventDestination",
        "ses:GetConfigurationSet",
        "ses:GetConfigurationSetEventDestinations",
        "ses:ListTagsForResource",
        "ses:PutConfigurationSetArchivingOptions",
        "ses:PutConfigurationSetDeliveryOptions",
        "ses:PutConfigurationSetReputationOptions",
        "ses:PutConfigurationSetSendingOptions",
        "ses:PutConfigurationSetSuppressionOptions",
        "ses:PutConfigurationSetTrackingOptions",
        "ses:PutConfigurationSetVdmOptions",
        "ses:PutEmailIdentityConfigurationSetAttributes",
        "ses:SendBulkEmail",
        "ses:SendBulkTemplatedEmail",
        "ses:SendEmail",
        "ses:SendRawEmail",
        "ses:SendTemplatedEmail",
        "ses:TagResource",
        "ses:UntagResource",
        "ses:UpdateConfigurationSetEventDestination"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ses:configuration-set"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ses:configuration-set"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ses:BatchGetMetricData",
         "ses:CreateDeliverabilityTestReport",
         "ses:CreateEmailIdentity",
         "ses:CreateEmailIdentityPolicy",
         "ses:DeleteEmailIdentity",
         "ses:DeleteEmailIdentityPolicy",
         "ses:GetDomainStatisticsReport",
         "ses:GetEmailIdentity",
         "ses:GetEmailIdentityPolicies",
         "ses:ListRecommendations",
         "ses:ListTagsForResource",
         "ses:PutEmailIdentityConfigurationSetAttributes",
         "ses:PutEmailIdentityDkimAttributes",
         "ses:PutEmailIdentityDkimSigningAttributes",
         "ses:PutEmailIdentityFeedbackAttributes",
         "ses:PutEmailIdentityMailFromAttributes",
         "ses:ReplicateEmailIdentityDkimSigningKey",
         "ses:SendBounce",
         "ses:SendBulkEmail",
         "ses:SendBulkTemplatedEmail",
         "ses:SendCustomVerificationEmail",
         "ses:SendEmail",
         "ses:SendRawEmail",
         "ses:SendTemplatedEmail",
         "ses:TagResource",
         "ses:UntagResource",
         "ses:UpdateEmailIdentityPolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ses:BatchGetMetricData",
        "ses:CreateDeliverabilityTestReport",
        "ses:CreateEmailIdentity",
        "ses:CreateEmailIdentityPolicy",
        "ses:DeleteEmailIdentity",
        "ses:DeleteEmailIdentityPolicy",
        "ses:GetDomainStatisticsReport",
        "ses:GetEmailIdentity",
        "ses:GetEmailIdentityPolicies",
        "ses:ListRecommendations",
        "ses:ListTagsForResource",
        "ses:PutEmailIdentityConfigurationSetAttributes",
        "ses:PutEmailIdentityDkimAttributes",
        "ses:PutEmailIdentityDkimSigningAttributes",
        "ses:PutEmailIdentityFeedbackAttributes",
        "ses:PutEmailIdentityMailFromAttributes",
        "ses:ReplicateEmailIdentityDkimSigningKey",
        "ses:SendBounce",
        "ses:SendBulkEmail",
        "ses:SendBulkTemplatedEmail",
        "ses:SendCustomVerificationEmail",
        "ses:SendEmail",
        "ses:SendRawEmail",
        "ses:SendTemplatedEmail",
        "ses:TagResource",
        "ses:UntagResource",
        "ses:UpdateEmailIdentityPolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ses:identity"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ses:identity"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ses:CancelExportJob",
         "ses:GetExportJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ses:CancelExportJob",
        "ses:GetExportJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ses:export-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ses:export-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ses:CreateAddressListImportJob",
         "ses:DeleteAddressList",
         "ses:DeregisterMemberFromAddressList",
         "ses:GetAddressList",
         "ses:GetAddressListImportJob",
         "ses:GetMemberOfAddressList",
         "ses:ListAddressListImportJobs",
         "ses:ListMembersOfAddressList",
         "ses:RegisterMemberToAddressList",
         "ses:StartAddressListImportJob",
         "ses:StopAddressListImportJob",
         "ses:TagResource",
         "ses:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ses:CreateAddressListImportJob",
        "ses:DeleteAddressList",
        "ses:DeregisterMemberFromAddressList",
        "ses:GetAddressList",
        "ses:GetAddressListImportJob",
        "ses:GetMemberOfAddressList",
        "ses:ListAddressListImportJobs",
        "ses:ListMembersOfAddressList",
        "ses:RegisterMemberToAddressList",
        "ses:StartAddressListImportJob",
        "ses:StopAddressListImportJob",
        "ses:TagResource",
        "ses:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ses:mailmanager-address-list"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ses:mailmanager-address-list"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ses:CreateContact",
         "ses:CreateContactList",
         "ses:DeleteContact",
         "ses:DeleteContactList",
         "ses:GetContact",
         "ses:GetContactList",
         "ses:ListContacts",
         "ses:ListTagsForResource",
         "ses:TagResource",
         "ses:UntagResource",
         "ses:UpdateContact",
         "ses:UpdateContactList"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ses:CreateContact",
        "ses:CreateContactList",
        "ses:DeleteContact",
        "ses:DeleteContactList",
        "ses:GetContact",
        "ses:GetContactList",
        "ses:ListContacts",
        "ses:ListTagsForResource",
        "ses:TagResource",
        "ses:UntagResource",
        "ses:UpdateContact",
        "ses:UpdateContactList"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ses:contact-list"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ses:contact-list"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ses:CreateCustomVerificationEmailTemplate",
         "ses:DeleteCustomVerificationEmailTemplate",
         "ses:GetCustomVerificationEmailTemplate",
         "ses:SendCustomVerificationEmail",
         "ses:UpdateCustomVerificationEmailTemplate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ses:CreateCustomVerificationEmailTemplate",
        "ses:DeleteCustomVerificationEmailTemplate",
        "ses:GetCustomVerificationEmailTemplate",
        "ses:SendCustomVerificationEmail",
        "ses:UpdateCustomVerificationEmailTemplate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ses:custom-verification-email-template"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ses:custom-verification-email-template"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ses:CreateDedicatedIpPool",
         "ses:DeleteDedicatedIpPool",
         "ses:GetDedicatedIpPool",
         "ses:GetDedicatedIps",
         "ses:ListTagsForResource",
         "ses:PutDedicatedIpInPool",
         "ses:PutDedicatedIpPoolScalingAttributes",
         "ses:TagResource",
         "ses:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ses:CreateDedicatedIpPool",
        "ses:DeleteDedicatedIpPool",
        "ses:GetDedicatedIpPool",
        "ses:GetDedicatedIps",
        "ses:ListTagsForResource",
        "ses:PutDedicatedIpInPool",
        "ses:PutDedicatedIpPoolScalingAttributes",
        "ses:TagResource",
        "ses:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ses:dedicated-ip-pool"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ses:dedicated-ip-pool"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ses:CreateEmailTemplate",
         "ses:DeleteEmailTemplate",
         "ses:GetEmailTemplate",
         "ses:SendBulkEmail",
         "ses:SendBulkTemplatedEmail",
         "ses:SendEmail",
         "ses:SendTemplatedEmail",
         "ses:TestRenderEmailTemplate",
         "ses:UpdateEmailTemplate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ses:CreateEmailTemplate",
        "ses:DeleteEmailTemplate",
        "ses:GetEmailTemplate",
        "ses:SendBulkEmail",
        "ses:SendBulkTemplatedEmail",
        "ses:SendEmail",
        "ses:SendTemplatedEmail",
        "ses:TestRenderEmailTemplate",
        "ses:UpdateEmailTemplate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ses:template"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ses:template"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ses:DeleteAddonInstance",
         "ses:GetAddonInstance",
         "ses:ListTagsForResource",
         "ses:TagResource",
         "ses:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ses:DeleteAddonInstance",
        "ses:GetAddonInstance",
        "ses:ListTagsForResource",
        "ses:TagResource",
        "ses:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ses:addon-instance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ses:addon-instance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ses:DeleteAddonSubscription",
         "ses:GetAddonSubscription",
         "ses:ListTagsForResource",
         "ses:TagResource",
         "ses:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ses:DeleteAddonSubscription",
        "ses:GetAddonSubscription",
        "ses:ListTagsForResource",
        "ses:TagResource",
        "ses:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ses:addon-subscription"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ses:addon-subscription"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ses:DeleteArchive",
         "ses:GetArchive",
         "ses:GetArchiveExport",
         "ses:GetArchiveMessage",
         "ses:GetArchiveMessageContent",
         "ses:GetArchiveSearch",
         "ses:GetArchiveSearchResults",
         "ses:ListTagsForResource",
         "ses:StartArchiveExport",
         "ses:StartArchiveSearch",
         "ses:StopArchiveExport",
         "ses:StopArchiveSearch",
         "ses:TagResource",
         "ses:UntagResource",
         "ses:UpdateArchive"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ses:DeleteArchive",
        "ses:GetArchive",
        "ses:GetArchiveExport",
        "ses:GetArchiveMessage",
        "ses:GetArchiveMessageContent",
        "ses:GetArchiveSearch",
        "ses:GetArchiveSearchResults",
        "ses:ListTagsForResource",
        "ses:StartArchiveExport",
        "ses:StartArchiveSearch",
        "ses:StopArchiveExport",
        "ses:StopArchiveSearch",
        "ses:TagResource",
        "ses:UntagResource",
        "ses:UpdateArchive"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ses:mailmanager-archive"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ses:mailmanager-archive"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ses:DeleteMultiRegionEndpoint",
         "ses:GetMultiRegionEndpoint"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ses:DeleteMultiRegionEndpoint",
        "ses:GetMultiRegionEndpoint"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ses:multi-region-endpoint"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ses:multi-region-endpoint"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ses:DeleteRelay",
         "ses:GetRelay",
         "ses:ListTagsForResource",
         "ses:TagResource",
         "ses:UntagResource",
         "ses:UpdateRelay"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ses:DeleteRelay",
        "ses:GetRelay",
        "ses:ListTagsForResource",
        "ses:TagResource",
        "ses:UntagResource",
        "ses:UpdateRelay"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ses:mailmanager-smtp-relay"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ses:mailmanager-smtp-relay"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ses:DeleteTrafficPolicy",
         "ses:GetTrafficPolicy",
         "ses:ListTagsForResource",
         "ses:TagResource",
         "ses:UntagResource",
         "ses:UpdateTrafficPolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ses:DeleteTrafficPolicy",
        "ses:GetTrafficPolicy",
        "ses:ListTagsForResource",
        "ses:TagResource",
        "ses:UntagResource",
        "ses:UpdateTrafficPolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ses:mailmanager-traffic-policy"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ses:mailmanager-traffic-policy"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ses:GetDeliverabilityTestReport",
         "ses:ListTagsForResource",
         "ses:TagResource",
         "ses:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ses:GetDeliverabilityTestReport",
        "ses:ListTagsForResource",
        "ses:TagResource",
        "ses:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ses:deliverability-test-report"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ses:deliverability-test-report"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ses:GetImportJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ses:GetImportJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ses:import-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ses:import-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "shield:AssociateHealthCheck",
         "shield:DeleteProtection",
         "shield:DescribeProtection",
         "shield:DisassociateHealthCheck",
         "shield:ListTagsForResource",
         "shield:TagResource",
         "shield:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "shield:AssociateHealthCheck",
        "shield:DeleteProtection",
        "shield:DescribeProtection",
        "shield:DisassociateHealthCheck",
        "shield:ListTagsForResource",
        "shield:TagResource",
        "shield:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/shield:protection"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/shield:protection"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "shield:DeleteProtectionGroup",
         "shield:DescribeProtectionGroup",
         "shield:ListResourcesInProtectionGroup",
         "shield:ListTagsForResource",
         "shield:TagResource",
         "shield:UntagResource",
         "shield:UpdateProtectionGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "shield:DeleteProtectionGroup",
        "shield:DescribeProtectionGroup",
        "shield:ListResourcesInProtectionGroup",
        "shield:ListTagsForResource",
        "shield:TagResource",
        "shield:UntagResource",
        "shield:UpdateProtectionGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/shield:protection-group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/shield:protection-group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "shield:DescribeAttack"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "shield:DescribeAttack"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/shield:attack"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/shield:attack"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "signer:AddProfilePermission",
         "signer:CancelSigningProfile",
         "signer:GetRevocationStatus",
         "signer:GetSigningProfile",
         "signer:ListProfilePermissions",
         "signer:ListTagsForResource",
         "signer:RemoveProfilePermission",
         "signer:RevokeSigningProfile",
         "signer:SignPayload",
         "signer:StartSigningJob",
         "signer:TagResource",
         "signer:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "signer:AddProfilePermission",
        "signer:CancelSigningProfile",
        "signer:GetRevocationStatus",
        "signer:GetSigningProfile",
        "signer:ListProfilePermissions",
        "signer:ListTagsForResource",
        "signer:RemoveProfilePermission",
        "signer:RevokeSigningProfile",
        "signer:SignPayload",
        "signer:StartSigningJob",
        "signer:TagResource",
        "signer:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/signer:signing-profile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/signer:signing-profile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "signer:DescribeSigningJob",
         "signer:GetRevocationStatus",
         "signer:RevokeSignature"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "signer:DescribeSigningJob",
        "signer:GetRevocationStatus",
        "signer:RevokeSignature"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/signer:signing-job"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/signer:signing-job"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "simspaceweaver:CreateSnapshot",
         "simspaceweaver:DeleteApp",
         "simspaceweaver:DeleteSimulation",
         "simspaceweaver:DescribeApp",
         "simspaceweaver:DescribeSimulation",
         "simspaceweaver:ListApps",
         "simspaceweaver:StartApp",
         "simspaceweaver:StartClock",
         "simspaceweaver:StopApp",
         "simspaceweaver:StopClock",
         "simspaceweaver:StopSimulation",
         "simspaceweaver:TagResource",
         "simspaceweaver:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "simspaceweaver:CreateSnapshot",
        "simspaceweaver:DeleteApp",
        "simspaceweaver:DeleteSimulation",
        "simspaceweaver:DescribeApp",
        "simspaceweaver:DescribeSimulation",
        "simspaceweaver:ListApps",
        "simspaceweaver:StartApp",
        "simspaceweaver:StartClock",
        "simspaceweaver:StopApp",
        "simspaceweaver:StopClock",
        "simspaceweaver:StopSimulation",
        "simspaceweaver:TagResource",
        "simspaceweaver:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/simspaceweaver:Simulation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/simspaceweaver:Simulation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sms-voice:AssociateOriginationIdentity",
         "sms-voice:CreatePool",
         "sms-voice:CreateRegistrationAssociation",
         "sms-voice:DeleteKeyword",
         "sms-voice:DeleteResourcePolicy",
         "sms-voice:DescribeKeywords",
         "sms-voice:DescribePhoneNumbers",
         "sms-voice:DisassociateOriginationIdentity",
         "sms-voice:GetResourcePolicy",
         "sms-voice:ListTagsForResource",
         "sms-voice:PutKeyword",
         "sms-voice:PutResourcePolicy",
         "sms-voice:ReleasePhoneNumber",
         "sms-voice:SendDestinationNumberVerificationCode",
         "sms-voice:SendMediaMessage",
         "sms-voice:SendTextMessage",
         "sms-voice:SendVoiceMessage",
         "sms-voice:TagResource",
         "sms-voice:UntagResource",
         "sms-voice:UpdatePhoneNumber"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sms-voice:AssociateOriginationIdentity",
        "sms-voice:CreatePool",
        "sms-voice:CreateRegistrationAssociation",
        "sms-voice:DeleteKeyword",
        "sms-voice:DeleteResourcePolicy",
        "sms-voice:DescribeKeywords",
        "sms-voice:DescribePhoneNumbers",
        "sms-voice:DisassociateOriginationIdentity",
        "sms-voice:GetResourcePolicy",
        "sms-voice:ListTagsForResource",
        "sms-voice:PutKeyword",
        "sms-voice:PutResourcePolicy",
        "sms-voice:ReleasePhoneNumber",
        "sms-voice:SendDestinationNumberVerificationCode",
        "sms-voice:SendMediaMessage",
        "sms-voice:SendTextMessage",
        "sms-voice:SendVoiceMessage",
        "sms-voice:TagResource",
        "sms-voice:UntagResource",
        "sms-voice:UpdatePhoneNumber"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sms-voice:PhoneNumber"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sms-voice:PhoneNumber"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sms-voice:AssociateOriginationIdentity",
         "sms-voice:DeleteKeyword",
         "sms-voice:DeletePool",
         "sms-voice:DeleteResourcePolicy",
         "sms-voice:DescribeKeywords",
         "sms-voice:DescribePools",
         "sms-voice:DisassociateOriginationIdentity",
         "sms-voice:GetResourcePolicy",
         "sms-voice:ListPoolOriginationIdentities",
         "sms-voice:ListTagsForResource",
         "sms-voice:PutKeyword",
         "sms-voice:PutResourcePolicy",
         "sms-voice:RequestPhoneNumber",
         "sms-voice:SendDestinationNumberVerificationCode",
         "sms-voice:SendMediaMessage",
         "sms-voice:SendTextMessage",
         "sms-voice:SendVoiceMessage",
         "sms-voice:TagResource",
         "sms-voice:UntagResource",
         "sms-voice:UpdatePool"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sms-voice:AssociateOriginationIdentity",
        "sms-voice:DeleteKeyword",
        "sms-voice:DeletePool",
        "sms-voice:DeleteResourcePolicy",
        "sms-voice:DescribeKeywords",
        "sms-voice:DescribePools",
        "sms-voice:DisassociateOriginationIdentity",
        "sms-voice:GetResourcePolicy",
        "sms-voice:ListPoolOriginationIdentities",
        "sms-voice:ListTagsForResource",
        "sms-voice:PutKeyword",
        "sms-voice:PutResourcePolicy",
        "sms-voice:RequestPhoneNumber",
        "sms-voice:SendDestinationNumberVerificationCode",
        "sms-voice:SendMediaMessage",
        "sms-voice:SendTextMessage",
        "sms-voice:SendVoiceMessage",
        "sms-voice:TagResource",
        "sms-voice:UntagResource",
        "sms-voice:UpdatePool"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sms-voice:Pool"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sms-voice:Pool"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sms-voice:AssociateOriginationIdentity",
         "sms-voice:CreatePool",
         "sms-voice:DeleteResourcePolicy",
         "sms-voice:DescribeSenderIds",
         "sms-voice:DisassociateOriginationIdentity",
         "sms-voice:GetResourcePolicy",
         "sms-voice:ListTagsForResource",
         "sms-voice:PutResourcePolicy",
         "sms-voice:ReleaseSenderId",
         "sms-voice:SendDestinationNumberVerificationCode",
         "sms-voice:SendTextMessage",
         "sms-voice:TagResource",
         "sms-voice:UntagResource",
         "sms-voice:UpdateSenderId"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sms-voice:AssociateOriginationIdentity",
        "sms-voice:CreatePool",
        "sms-voice:DeleteResourcePolicy",
        "sms-voice:DescribeSenderIds",
        "sms-voice:DisassociateOriginationIdentity",
        "sms-voice:GetResourcePolicy",
        "sms-voice:ListTagsForResource",
        "sms-voice:PutResourcePolicy",
        "sms-voice:ReleaseSenderId",
        "sms-voice:SendDestinationNumberVerificationCode",
        "sms-voice:SendTextMessage",
        "sms-voice:TagResource",
        "sms-voice:UntagResource",
        "sms-voice:UpdateSenderId"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sms-voice:SenderId"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sms-voice:SenderId"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sms-voice:AssociateProtectConfiguration",
         "sms-voice:CreateEventDestination",
         "sms-voice:DeleteConfigurationSet",
         "sms-voice:DeleteDefaultMessageType",
         "sms-voice:DeleteDefaultSenderId",
         "sms-voice:DeleteEventDestination",
         "sms-voice:DescribeConfigurationSets",
         "sms-voice:DisassociateProtectConfiguration",
         "sms-voice:ListTagsForResource",
         "sms-voice:SetDefaultMessageFeedbackEnabled",
         "sms-voice:SetDefaultMessageType",
         "sms-voice:SetDefaultSenderId",
         "sms-voice:TagResource",
         "sms-voice:UntagResource",
         "sms-voice:UpdateEventDestination"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sms-voice:AssociateProtectConfiguration",
        "sms-voice:CreateEventDestination",
        "sms-voice:DeleteConfigurationSet",
        "sms-voice:DeleteDefaultMessageType",
        "sms-voice:DeleteDefaultSenderId",
        "sms-voice:DeleteEventDestination",
        "sms-voice:DescribeConfigurationSets",
        "sms-voice:DisassociateProtectConfiguration",
        "sms-voice:ListTagsForResource",
        "sms-voice:SetDefaultMessageFeedbackEnabled",
        "sms-voice:SetDefaultMessageType",
        "sms-voice:SetDefaultSenderId",
        "sms-voice:TagResource",
        "sms-voice:UntagResource",
        "sms-voice:UpdateEventDestination"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sms-voice:ConfigurationSet"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sms-voice:ConfigurationSet"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sms-voice:AssociateProtectConfiguration",
         "sms-voice:DeleteProtectConfiguration",
         "sms-voice:DeleteProtectConfigurationRuleSetNumberOverride",
         "sms-voice:DescribeProtectConfigurations",
         "sms-voice:DisassociateProtectConfiguration",
         "sms-voice:GetProtectConfigurationCountryRuleSet",
         "sms-voice:ListProtectConfigurationRuleSetNumberOverrides",
         "sms-voice:ListTagsForResource",
         "sms-voice:PutProtectConfigurationRuleSetNumberOverride",
         "sms-voice:SetAccountDefaultProtectConfiguration",
         "sms-voice:TagResource",
         "sms-voice:UntagResource",
         "sms-voice:UpdateProtectConfiguration",
         "sms-voice:UpdateProtectConfigurationCountryRuleSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sms-voice:AssociateProtectConfiguration",
        "sms-voice:DeleteProtectConfiguration",
        "sms-voice:DeleteProtectConfigurationRuleSetNumberOverride",
        "sms-voice:DescribeProtectConfigurations",
        "sms-voice:DisassociateProtectConfiguration",
        "sms-voice:GetProtectConfigurationCountryRuleSet",
        "sms-voice:ListProtectConfigurationRuleSetNumberOverrides",
        "sms-voice:ListTagsForResource",
        "sms-voice:PutProtectConfigurationRuleSetNumberOverride",
        "sms-voice:SetAccountDefaultProtectConfiguration",
        "sms-voice:TagResource",
        "sms-voice:UntagResource",
        "sms-voice:UpdateProtectConfiguration",
        "sms-voice:UpdateProtectConfigurationCountryRuleSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sms-voice:ProtectConfiguration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sms-voice:ProtectConfiguration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sms-voice:CreateRegistrationAssociation",
         "sms-voice:CreateRegistrationVersion",
         "sms-voice:DeleteRegistration",
         "sms-voice:DeleteRegistrationFieldValue",
         "sms-voice:DescribeRegistrationFieldValues",
         "sms-voice:DescribeRegistrationVersions",
         "sms-voice:DescribeRegistrations",
         "sms-voice:DiscardRegistrationVersion",
         "sms-voice:ListRegistrationAssociations",
         "sms-voice:ListTagsForResource",
         "sms-voice:PutRegistrationFieldValue",
         "sms-voice:SubmitRegistrationVersion",
         "sms-voice:TagResource",
         "sms-voice:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sms-voice:CreateRegistrationAssociation",
        "sms-voice:CreateRegistrationVersion",
        "sms-voice:DeleteRegistration",
        "sms-voice:DeleteRegistrationFieldValue",
        "sms-voice:DescribeRegistrationFieldValues",
        "sms-voice:DescribeRegistrationVersions",
        "sms-voice:DescribeRegistrations",
        "sms-voice:DiscardRegistrationVersion",
        "sms-voice:ListRegistrationAssociations",
        "sms-voice:ListTagsForResource",
        "sms-voice:PutRegistrationFieldValue",
        "sms-voice:SubmitRegistrationVersion",
        "sms-voice:TagResource",
        "sms-voice:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sms-voice:Registration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sms-voice:Registration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sms-voice:DeleteOptOutList",
         "sms-voice:DeleteOptedOutNumber",
         "sms-voice:DeleteResourcePolicy",
         "sms-voice:DescribeOptOutLists",
         "sms-voice:DescribeOptedOutNumbers",
         "sms-voice:GetResourcePolicy",
         "sms-voice:ListTagsForResource",
         "sms-voice:PutOptedOutNumber",
         "sms-voice:PutResourcePolicy",
         "sms-voice:TagResource",
         "sms-voice:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sms-voice:DeleteOptOutList",
        "sms-voice:DeleteOptedOutNumber",
        "sms-voice:DeleteResourcePolicy",
        "sms-voice:DescribeOptOutLists",
        "sms-voice:DescribeOptedOutNumbers",
        "sms-voice:GetResourcePolicy",
        "sms-voice:ListTagsForResource",
        "sms-voice:PutOptedOutNumber",
        "sms-voice:PutResourcePolicy",
        "sms-voice:TagResource",
        "sms-voice:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sms-voice:OptOutList"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sms-voice:OptOutList"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sms-voice:DeleteRegistrationAttachment",
         "sms-voice:DescribeRegistrationAttachments",
         "sms-voice:ListTagsForResource",
         "sms-voice:TagResource",
         "sms-voice:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sms-voice:DeleteRegistrationAttachment",
        "sms-voice:DescribeRegistrationAttachments",
        "sms-voice:ListTagsForResource",
        "sms-voice:TagResource",
        "sms-voice:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sms-voice:RegistrationAttachment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sms-voice:RegistrationAttachment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sms-voice:DeleteVerifiedDestinationNumber",
         "sms-voice:DescribeVerifiedDestinationNumbers",
         "sms-voice:ListTagsForResource",
         "sms-voice:TagResource",
         "sms-voice:UntagResource",
         "sms-voice:VerifyDestinationNumber"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sms-voice:DeleteVerifiedDestinationNumber",
        "sms-voice:DescribeVerifiedDestinationNumbers",
        "sms-voice:ListTagsForResource",
        "sms-voice:TagResource",
        "sms-voice:UntagResource",
        "sms-voice:VerifyDestinationNumber"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sms-voice:VerifiedDestinationNumber"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sms-voice:VerifiedDestinationNumber"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sms-voice:PutMessageFeedback"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sms-voice:PutMessageFeedback"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sms-voice:Message"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sms-voice:Message"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "snow-device-management:CancelTask",
         "snow-device-management:DescribeTask",
         "snow-device-management:TagResource",
         "snow-device-management:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "snow-device-management:CancelTask",
        "snow-device-management:DescribeTask",
        "snow-device-management:TagResource",
        "snow-device-management:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/snow-device-management:task"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/snow-device-management:task"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "snow-device-management:DescribeDevice",
         "snow-device-management:DescribeDeviceEc2Instances",
         "snow-device-management:ListDeviceResources",
         "snow-device-management:TagResource",
         "snow-device-management:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "snow-device-management:DescribeDevice",
        "snow-device-management:DescribeDeviceEc2Instances",
        "snow-device-management:ListDeviceResources",
        "snow-device-management:TagResource",
        "snow-device-management:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/snow-device-management:managed-device"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/snow-device-management:managed-device"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sns:AddPermission",
         "sns:ConfirmSubscription",
         "sns:CreateTopic",
         "sns:DeleteTopic",
         "sns:GetDataProtectionPolicy",
         "sns:GetTopicAttributes",
         "sns:ListSubscriptionsByTopic",
         "sns:ListTagsForResource",
         "sns:Publish",
         "sns:PutDataProtectionPolicy",
         "sns:RemovePermission",
         "sns:SetTopicAttributes",
         "sns:Subscribe",
         "sns:TagResource",
         "sns:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sns:AddPermission",
        "sns:ConfirmSubscription",
        "sns:CreateTopic",
        "sns:DeleteTopic",
        "sns:GetDataProtectionPolicy",
        "sns:GetTopicAttributes",
        "sns:ListSubscriptionsByTopic",
        "sns:ListTagsForResource",
        "sns:Publish",
        "sns:PutDataProtectionPolicy",
        "sns:RemovePermission",
        "sns:SetTopicAttributes",
        "sns:Subscribe",
        "sns:TagResource",
        "sns:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sns:topic"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sns:topic"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "social-messaging:DeleteWhatsAppMessageMedia",
         "social-messaging:GetLinkedWhatsAppBusinessAccountPhoneNumber",
         "social-messaging:GetWhatsAppMessageMedia",
         "social-messaging:ListTagsForResource",
         "social-messaging:PostWhatsAppMessageMedia",
         "social-messaging:SendWhatsAppMessage",
         "social-messaging:TagResource",
         "social-messaging:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "social-messaging:DeleteWhatsAppMessageMedia",
        "social-messaging:GetLinkedWhatsAppBusinessAccountPhoneNumber",
        "social-messaging:GetWhatsAppMessageMedia",
        "social-messaging:ListTagsForResource",
        "social-messaging:PostWhatsAppMessageMedia",
        "social-messaging:SendWhatsAppMessage",
        "social-messaging:TagResource",
        "social-messaging:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/social-messaging:phone-number-id"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/social-messaging:phone-number-id"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "social-messaging:DisassociateWhatsAppBusinessAccount",
         "social-messaging:GetLinkedWhatsAppBusinessAccount",
         "social-messaging:ListTagsForResource",
         "social-messaging:PutWhatsAppBusinessAccountEventDestinations",
         "social-messaging:TagResource",
         "social-messaging:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "social-messaging:DisassociateWhatsAppBusinessAccount",
        "social-messaging:GetLinkedWhatsAppBusinessAccount",
        "social-messaging:ListTagsForResource",
        "social-messaging:PutWhatsAppBusinessAccountEventDestinations",
        "social-messaging:TagResource",
        "social-messaging:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/social-messaging:waba"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/social-messaging:waba"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sqlworkbench:AssociateConnectionWithChart",
         "sqlworkbench:CreateChart",
         "sqlworkbench:DeleteChart",
         "sqlworkbench:GetChart",
         "sqlworkbench:ListTagsForResource",
         "sqlworkbench:TagResource",
         "sqlworkbench:UntagResource",
         "sqlworkbench:UpdateChart",
         "sqlworkbench:UpdateFileFolder"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sqlworkbench:AssociateConnectionWithChart",
        "sqlworkbench:CreateChart",
        "sqlworkbench:DeleteChart",
        "sqlworkbench:GetChart",
        "sqlworkbench:ListTagsForResource",
        "sqlworkbench:TagResource",
        "sqlworkbench:UntagResource",
        "sqlworkbench:UpdateChart",
        "sqlworkbench:UpdateFileFolder"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sqlworkbench:chart"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sqlworkbench:chart"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sqlworkbench:AssociateConnectionWithChart",
         "sqlworkbench:AssociateConnectionWithTab",
         "sqlworkbench:CreateConnection",
         "sqlworkbench:DeleteConnection",
         "sqlworkbench:DriverExecute",
         "sqlworkbench:GetConnection",
         "sqlworkbench:ListTagsForResource",
         "sqlworkbench:TagResource",
         "sqlworkbench:UntagResource",
         "sqlworkbench:UpdateConnection"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sqlworkbench:AssociateConnectionWithChart",
        "sqlworkbench:AssociateConnectionWithTab",
        "sqlworkbench:CreateConnection",
        "sqlworkbench:DeleteConnection",
        "sqlworkbench:DriverExecute",
        "sqlworkbench:GetConnection",
        "sqlworkbench:ListTagsForResource",
        "sqlworkbench:TagResource",
        "sqlworkbench:UntagResource",
        "sqlworkbench:UpdateConnection"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sqlworkbench:connection"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sqlworkbench:connection"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sqlworkbench:AssociateNotebookWithTab",
         "sqlworkbench:BatchGetNotebookCell",
         "sqlworkbench:CreateNotebook",
         "sqlworkbench:CreateNotebookCell",
         "sqlworkbench:CreateNotebookFromVersion",
         "sqlworkbench:CreateNotebookVersion",
         "sqlworkbench:DeleteNotebook",
         "sqlworkbench:DeleteNotebookCell",
         "sqlworkbench:DeleteNotebookVersion",
         "sqlworkbench:DuplicateNotebook",
         "sqlworkbench:ExportNotebook",
         "sqlworkbench:GetNotebook",
         "sqlworkbench:GetNotebookVersion",
         "sqlworkbench:ImportNotebook",
         "sqlworkbench:ListNotebookVersions",
         "sqlworkbench:ListTagsForResource",
         "sqlworkbench:RestoreNotebookVersion",
         "sqlworkbench:TagResource",
         "sqlworkbench:UntagResource",
         "sqlworkbench:UpdateNotebook",
         "sqlworkbench:UpdateNotebookCellContent",
         "sqlworkbench:UpdateNotebookCellLayout"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sqlworkbench:AssociateNotebookWithTab",
        "sqlworkbench:BatchGetNotebookCell",
        "sqlworkbench:CreateNotebook",
        "sqlworkbench:CreateNotebookCell",
        "sqlworkbench:CreateNotebookFromVersion",
        "sqlworkbench:CreateNotebookVersion",
        "sqlworkbench:DeleteNotebook",
        "sqlworkbench:DeleteNotebookCell",
        "sqlworkbench:DeleteNotebookVersion",
        "sqlworkbench:DuplicateNotebook",
        "sqlworkbench:ExportNotebook",
        "sqlworkbench:GetNotebook",
        "sqlworkbench:GetNotebookVersion",
        "sqlworkbench:ImportNotebook",
        "sqlworkbench:ListNotebookVersions",
        "sqlworkbench:ListTagsForResource",
        "sqlworkbench:RestoreNotebookVersion",
        "sqlworkbench:TagResource",
        "sqlworkbench:UntagResource",
        "sqlworkbench:UpdateNotebook",
        "sqlworkbench:UpdateNotebookCellContent",
        "sqlworkbench:UpdateNotebookCellLayout"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sqlworkbench:notebook"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sqlworkbench:notebook"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sqlworkbench:AssociateQueryWithTab",
         "sqlworkbench:CreateSavedQuery",
         "sqlworkbench:DeleteSavedQuery",
         "sqlworkbench:GetSavedQuery",
         "sqlworkbench:ListSavedQueryVersions",
         "sqlworkbench:ListTagsForResource",
         "sqlworkbench:TagResource",
         "sqlworkbench:UntagResource",
         "sqlworkbench:UpdateFileFolder",
         "sqlworkbench:UpdateSavedQuery"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sqlworkbench:AssociateQueryWithTab",
        "sqlworkbench:CreateSavedQuery",
        "sqlworkbench:DeleteSavedQuery",
        "sqlworkbench:GetSavedQuery",
        "sqlworkbench:ListSavedQueryVersions",
        "sqlworkbench:ListTagsForResource",
        "sqlworkbench:TagResource",
        "sqlworkbench:UntagResource",
        "sqlworkbench:UpdateFileFolder",
        "sqlworkbench:UpdateSavedQuery"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sqlworkbench:query"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sqlworkbench:query"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sqs:AddPermission",
         "sqs:CancelMessageMoveTask",
         "sqs:ChangeMessageVisibility",
         "sqs:CreateQueue",
         "sqs:DeleteMessage",
         "sqs:DeleteQueue",
         "sqs:GetQueueAttributes",
         "sqs:GetQueueUrl",
         "sqs:ListDeadLetterSourceQueues",
         "sqs:ListMessageMoveTasks",
         "sqs:ListQueueTags",
         "sqs:PurgeQueue",
         "sqs:ReceiveMessage",
         "sqs:RemovePermission",
         "sqs:SendMessage",
         "sqs:SetQueueAttributes",
         "sqs:StartMessageMoveTask",
         "sqs:TagQueue",
         "sqs:UntagQueue"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sqs:AddPermission",
        "sqs:CancelMessageMoveTask",
        "sqs:ChangeMessageVisibility",
        "sqs:CreateQueue",
        "sqs:DeleteMessage",
        "sqs:DeleteQueue",
        "sqs:GetQueueAttributes",
        "sqs:GetQueueUrl",
        "sqs:ListDeadLetterSourceQueues",
        "sqs:ListMessageMoveTasks",
        "sqs:ListQueueTags",
        "sqs:PurgeQueue",
        "sqs:ReceiveMessage",
        "sqs:RemovePermission",
        "sqs:SendMessage",
        "sqs:SetQueueAttributes",
        "sqs:StartMessageMoveTask",
        "sqs:TagQueue",
        "sqs:UntagQueue"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sqs:queue"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sqs:queue"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm:AddTagsToResource",
         "ssm:CreateAssociation",
         "ssm:DeleteAssociation",
         "ssm:DescribeAssociation",
         "ssm:DescribeAssociationExecutionTargets",
         "ssm:DescribeAssociationExecutions",
         "ssm:ListAssociationVersions",
         "ssm:ListTagsForResource",
         "ssm:RemoveTagsFromResource",
         "ssm:StartAssociationsOnce",
         "ssm:UpdateAssociation",
         "ssm:UpdateInstanceAssociationStatus"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm:AddTagsToResource",
        "ssm:CreateAssociation",
        "ssm:DeleteAssociation",
        "ssm:DescribeAssociation",
        "ssm:DescribeAssociationExecutionTargets",
        "ssm:DescribeAssociationExecutions",
        "ssm:ListAssociationVersions",
        "ssm:ListTagsForResource",
        "ssm:RemoveTagsFromResource",
        "ssm:StartAssociationsOnce",
        "ssm:UpdateAssociation",
        "ssm:UpdateInstanceAssociationStatus"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm:association"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm:association"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm:AddTagsToResource",
         "ssm:DescribeAutomationStepExecutions",
         "ssm:GetAutomationExecution",
         "ssm:ListTagsForResource",
         "ssm:RemoveTagsFromResource",
         "ssm:SendAutomationSignal",
         "ssm:StopAutomationExecution"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm:AddTagsToResource",
        "ssm:DescribeAutomationStepExecutions",
        "ssm:GetAutomationExecution",
        "ssm:ListTagsForResource",
        "ssm:RemoveTagsFromResource",
        "ssm:SendAutomationSignal",
        "ssm:StopAutomationExecution"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm:automation-execution"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm:automation-execution"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm:AddTagsToResource",
         "ssm:CreateAssociation",
         "ssm:CreateAssociationBatch",
         "ssm:CreateDocument",
         "ssm:DeleteAssociation",
         "ssm:DeleteDocument",
         "ssm:DescribeAssociation",
         "ssm:DescribeDocument",
         "ssm:DescribeDocumentParameters",
         "ssm:DescribeDocumentPermission",
         "ssm:GetCalendar",
         "ssm:GetCalendarState",
         "ssm:GetDocument",
         "ssm:ListDocumentMetadataHistory",
         "ssm:ListDocumentVersions",
         "ssm:ListTagsForResource",
         "ssm:ModifyDocumentPermission",
         "ssm:PutCalendar",
         "ssm:RemoveTagsFromResource",
         "ssm:SendCommand",
         "ssm:StartSession",
         "ssm:UpdateAssociation",
         "ssm:UpdateAssociationStatus",
         "ssm:UpdateDocument",
         "ssm:UpdateDocumentDefaultVersion",
         "ssm:UpdateDocumentMetadata"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm:AddTagsToResource",
        "ssm:CreateAssociation",
        "ssm:CreateAssociationBatch",
        "ssm:CreateDocument",
        "ssm:DeleteAssociation",
        "ssm:DeleteDocument",
        "ssm:DescribeAssociation",
        "ssm:DescribeDocument",
        "ssm:DescribeDocumentParameters",
        "ssm:DescribeDocumentPermission",
        "ssm:GetCalendar",
        "ssm:GetCalendarState",
        "ssm:GetDocument",
        "ssm:ListDocumentMetadataHistory",
        "ssm:ListDocumentVersions",
        "ssm:ListTagsForResource",
        "ssm:ModifyDocumentPermission",
        "ssm:PutCalendar",
        "ssm:RemoveTagsFromResource",
        "ssm:SendCommand",
        "ssm:StartSession",
        "ssm:UpdateAssociation",
        "ssm:UpdateAssociationStatus",
        "ssm:UpdateDocument",
        "ssm:UpdateDocumentDefaultVersion",
        "ssm:UpdateDocumentMetadata"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm:document"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm:document"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm:AddTagsToResource",
         "ssm:CreateAssociation",
         "ssm:CreateAssociationBatch",
         "ssm:DeleteAssociation",
         "ssm:DescribeAssociation",
         "ssm:DescribeEffectiveInstanceAssociations",
         "ssm:DescribeInstanceAssociationsStatus",
         "ssm:DescribeInstancePatchStates",
         "ssm:DescribeInstancePatches",
         "ssm:GetConnectionStatus",
         "ssm:ListInstanceAssociations",
         "ssm:PutComplianceItems",
         "ssm:RemoveTagsFromResource",
         "ssm:SendCommand",
         "ssm:StartSession",
         "ssm:UpdateAssociation",
         "ssm:UpdateAssociationStatus",
         "ssm:UpdateInstanceAssociationStatus",
         "ssm:UpdateInstanceInformation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm:AddTagsToResource",
        "ssm:CreateAssociation",
        "ssm:CreateAssociationBatch",
        "ssm:DeleteAssociation",
        "ssm:DescribeAssociation",
        "ssm:DescribeEffectiveInstanceAssociations",
        "ssm:DescribeInstanceAssociationsStatus",
        "ssm:DescribeInstancePatchStates",
        "ssm:DescribeInstancePatches",
        "ssm:GetConnectionStatus",
        "ssm:ListInstanceAssociations",
        "ssm:PutComplianceItems",
        "ssm:RemoveTagsFromResource",
        "ssm:SendCommand",
        "ssm:StartSession",
        "ssm:UpdateAssociation",
        "ssm:UpdateAssociationStatus",
        "ssm:UpdateInstanceAssociationStatus",
        "ssm:UpdateInstanceInformation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm:instance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm:instance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm:AddTagsToResource",
         "ssm:CancelMaintenanceWindowExecution",
         "ssm:DeleteMaintenanceWindow",
         "ssm:DeregisterTargetFromMaintenanceWindow",
         "ssm:DeregisterTaskFromMaintenanceWindow",
         "ssm:DescribeMaintenanceWindowExecutions",
         "ssm:DescribeMaintenanceWindowTargets",
         "ssm:DescribeMaintenanceWindowTasks",
         "ssm:GetMaintenanceWindow",
         "ssm:GetMaintenanceWindowTask",
         "ssm:ListTagsForResource",
         "ssm:RegisterTargetWithMaintenanceWindow",
         "ssm:RegisterTaskWithMaintenanceWindow",
         "ssm:RemoveTagsFromResource",
         "ssm:UpdateMaintenanceWindow",
         "ssm:UpdateMaintenanceWindowTarget",
         "ssm:UpdateMaintenanceWindowTask"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm:AddTagsToResource",
        "ssm:CancelMaintenanceWindowExecution",
        "ssm:DeleteMaintenanceWindow",
        "ssm:DeregisterTargetFromMaintenanceWindow",
        "ssm:DeregisterTaskFromMaintenanceWindow",
        "ssm:DescribeMaintenanceWindowExecutions",
        "ssm:DescribeMaintenanceWindowTargets",
        "ssm:DescribeMaintenanceWindowTasks",
        "ssm:GetMaintenanceWindow",
        "ssm:GetMaintenanceWindowTask",
        "ssm:ListTagsForResource",
        "ssm:RegisterTargetWithMaintenanceWindow",
        "ssm:RegisterTaskWithMaintenanceWindow",
        "ssm:RemoveTagsFromResource",
        "ssm:UpdateMaintenanceWindow",
        "ssm:UpdateMaintenanceWindowTarget",
        "ssm:UpdateMaintenanceWindowTask"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm:maintenancewindow"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm:maintenancewindow"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm:AddTagsToResource",
         "ssm:CreateAssociation",
         "ssm:CreateAssociationBatch",
         "ssm:DeleteAssociation",
         "ssm:DeregisterManagedInstance",
         "ssm:DescribeAssociation",
         "ssm:DescribeEffectiveInstanceAssociations",
         "ssm:DescribeInstanceAssociationsStatus",
         "ssm:DescribeInstancePatchStates",
         "ssm:DescribeInstancePatches",
         "ssm:GetConnectionStatus",
         "ssm:ListInstanceAssociations",
         "ssm:ListTagsForResource",
         "ssm:PutComplianceItems",
         "ssm:RemoveTagsFromResource",
         "ssm:SendCommand",
         "ssm:StartSession",
         "ssm:UpdateAssociation",
         "ssm:UpdateAssociationStatus",
         "ssm:UpdateInstanceAssociationStatus",
         "ssm:UpdateInstanceInformation",
         "ssm:UpdateManagedInstanceRole"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm:AddTagsToResource",
        "ssm:CreateAssociation",
        "ssm:CreateAssociationBatch",
        "ssm:DeleteAssociation",
        "ssm:DeregisterManagedInstance",
        "ssm:DescribeAssociation",
        "ssm:DescribeEffectiveInstanceAssociations",
        "ssm:DescribeInstanceAssociationsStatus",
        "ssm:DescribeInstancePatchStates",
        "ssm:DescribeInstancePatches",
        "ssm:GetConnectionStatus",
        "ssm:ListInstanceAssociations",
        "ssm:ListTagsForResource",
        "ssm:PutComplianceItems",
        "ssm:RemoveTagsFromResource",
        "ssm:SendCommand",
        "ssm:StartSession",
        "ssm:UpdateAssociation",
        "ssm:UpdateAssociationStatus",
        "ssm:UpdateInstanceAssociationStatus",
        "ssm:UpdateInstanceInformation",
        "ssm:UpdateManagedInstanceRole"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm:managed-instance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm:managed-instance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm:AddTagsToResource",
         "ssm:AssociateOpsItemRelatedItem",
         "ssm:DeleteOpsItem",
         "ssm:DisassociateOpsItemRelatedItem",
         "ssm:GetOpsItem",
         "ssm:ListTagsForResource",
         "ssm:RemoveTagsFromResource",
         "ssm:UpdateOpsItem"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm:AddTagsToResource",
        "ssm:AssociateOpsItemRelatedItem",
        "ssm:DeleteOpsItem",
        "ssm:DisassociateOpsItemRelatedItem",
        "ssm:GetOpsItem",
        "ssm:ListTagsForResource",
        "ssm:RemoveTagsFromResource",
        "ssm:UpdateOpsItem"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm:opsitem"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm:opsitem"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm:AddTagsToResource",
         "ssm:DeleteOpsMetadata",
         "ssm:GetOpsMetadata",
         "ssm:ListTagsForResource",
         "ssm:RemoveTagsFromResource",
         "ssm:UpdateOpsMetadata"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm:AddTagsToResource",
        "ssm:DeleteOpsMetadata",
        "ssm:GetOpsMetadata",
        "ssm:ListTagsForResource",
        "ssm:RemoveTagsFromResource",
        "ssm:UpdateOpsMetadata"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm:opsmetadata"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm:opsmetadata"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm:AddTagsToResource",
         "ssm:DeleteParameter",
         "ssm:DeleteParameters",
         "ssm:DeleteResourcePolicy",
         "ssm:GetParameter",
         "ssm:GetParameterHistory",
         "ssm:GetParameters",
         "ssm:GetParametersByPath",
         "ssm:GetResourcePolicies",
         "ssm:LabelParameterVersion",
         "ssm:ListTagsForResource",
         "ssm:PutParameter",
         "ssm:PutResourcePolicy",
         "ssm:RemoveTagsFromResource",
         "ssm:UnlabelParameterVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm:AddTagsToResource",
        "ssm:DeleteParameter",
        "ssm:DeleteParameters",
        "ssm:DeleteResourcePolicy",
        "ssm:GetParameter",
        "ssm:GetParameterHistory",
        "ssm:GetParameters",
        "ssm:GetParametersByPath",
        "ssm:GetResourcePolicies",
        "ssm:LabelParameterVersion",
        "ssm:ListTagsForResource",
        "ssm:PutParameter",
        "ssm:PutResourcePolicy",
        "ssm:RemoveTagsFromResource",
        "ssm:UnlabelParameterVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm:parameter"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm:parameter"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm:AddTagsToResource",
         "ssm:DeletePatchBaseline",
         "ssm:DeregisterPatchBaselineForPatchGroup",
         "ssm:DescribeEffectivePatchesForPatchBaseline",
         "ssm:GetDefaultPatchBaseline",
         "ssm:GetPatchBaseline",
         "ssm:ListTagsForResource",
         "ssm:RegisterDefaultPatchBaseline",
         "ssm:RegisterPatchBaselineForPatchGroup",
         "ssm:RemoveTagsFromResource",
         "ssm:UpdatePatchBaseline"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm:AddTagsToResource",
        "ssm:DeletePatchBaseline",
        "ssm:DeregisterPatchBaselineForPatchGroup",
        "ssm:DescribeEffectivePatchesForPatchBaseline",
        "ssm:GetDefaultPatchBaseline",
        "ssm:GetPatchBaseline",
        "ssm:ListTagsForResource",
        "ssm:RegisterDefaultPatchBaseline",
        "ssm:RegisterPatchBaselineForPatchGroup",
        "ssm:RemoveTagsFromResource",
        "ssm:UpdatePatchBaseline"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm:patchbaseline"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm:patchbaseline"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm:AddTagsToResource",
         "ssm:GetConnectionStatus",
         "ssm:RemoveTagsFromResource",
         "ssm:StartSession"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm:AddTagsToResource",
        "ssm:GetConnectionStatus",
        "ssm:RemoveTagsFromResource",
        "ssm:StartSession"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm:task"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm:task"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm:CreateResourceDataSync",
         "ssm:DeleteResourceDataSync",
         "ssm:GetOpsSummary",
         "ssm:ListNodes",
         "ssm:ListNodesSummary",
         "ssm:UpdateResourceDataSync"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm:CreateResourceDataSync",
        "ssm:DeleteResourceDataSync",
        "ssm:GetOpsSummary",
        "ssm:ListNodes",
        "ssm:ListNodesSummary",
        "ssm:UpdateResourceDataSync"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm:resourcedatasync"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm:resourcedatasync"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm:DeleteResourcePolicy",
         "ssm:GetResourcePolicies",
         "ssm:PutResourcePolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm:DeleteResourcePolicy",
        "ssm:GetResourcePolicies",
        "ssm:PutResourcePolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm:opsitemgroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm:opsitemgroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm:DeregisterTargetFromMaintenanceWindow",
         "ssm:UpdateMaintenanceWindowTarget"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm:DeregisterTargetFromMaintenanceWindow",
        "ssm:UpdateMaintenanceWindowTarget"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm:windowtarget"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm:windowtarget"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm:DeregisterTaskFromMaintenanceWindow",
         "ssm:UpdateMaintenanceWindowTask"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm:DeregisterTaskFromMaintenanceWindow",
        "ssm:UpdateMaintenanceWindowTask"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm:windowtask"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm:windowtask"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm:GetServiceSetting",
         "ssm:ResetServiceSetting",
         "ssm:UpdateServiceSetting"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm:GetServiceSetting",
        "ssm:ResetServiceSetting",
        "ssm:UpdateServiceSetting"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm:servicesetting"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm:servicesetting"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm:ResumeSession",
         "ssm:TerminateSession"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm:ResumeSession",
        "ssm:TerminateSession"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm:session"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm:session"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm:SendCommand"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm:SendCommand"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm:bucket"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm:bucket"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm:StartAutomationExecution",
         "ssm:StartChangeRequestExecution"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm:StartAutomationExecution",
        "ssm:StartChangeRequestExecution"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm:automation-definition"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm:automation-definition"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm:UpdateManagedInstanceRole"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm:UpdateManagedInstanceRole"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm:iam-role"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm:iam-role"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm-contacts:AcceptPage",
         "ssm-contacts:DescribePage",
         "ssm-contacts:ListPageReceipts",
         "ssm-contacts:ListPageResolutions"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm-contacts:AcceptPage",
        "ssm-contacts:DescribePage",
        "ssm-contacts:ListPageReceipts",
        "ssm-contacts:ListPageResolutions"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm-contacts:page"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm-contacts:page"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm-contacts:ActivateContactChannel",
         "ssm-contacts:DeactivateContactChannel",
         "ssm-contacts:DeleteContactChannel",
         "ssm-contacts:GetContactChannel",
         "ssm-contacts:SendActivationCode",
         "ssm-contacts:UpdateContactChannel"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm-contacts:ActivateContactChannel",
        "ssm-contacts:DeactivateContactChannel",
        "ssm-contacts:DeleteContactChannel",
        "ssm-contacts:GetContactChannel",
        "ssm-contacts:SendActivationCode",
        "ssm-contacts:UpdateContactChannel"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm-contacts:contactchannel"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm-contacts:contactchannel"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm-contacts:AssociateContact",
         "ssm-contacts:CreateContact",
         "ssm-contacts:CreateContactChannel",
         "ssm-contacts:DeleteContact",
         "ssm-contacts:GetContact",
         "ssm-contacts:GetContactPolicy",
         "ssm-contacts:ListContactChannels",
         "ssm-contacts:ListPagesByContact",
         "ssm-contacts:ListTagsForResource",
         "ssm-contacts:PutContactPolicy",
         "ssm-contacts:StartEngagement",
         "ssm-contacts:TagResource",
         "ssm-contacts:UntagResource",
         "ssm-contacts:UpdateContact"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm-contacts:AssociateContact",
        "ssm-contacts:CreateContact",
        "ssm-contacts:CreateContactChannel",
        "ssm-contacts:DeleteContact",
        "ssm-contacts:GetContact",
        "ssm-contacts:GetContactPolicy",
        "ssm-contacts:ListContactChannels",
        "ssm-contacts:ListPagesByContact",
        "ssm-contacts:ListTagsForResource",
        "ssm-contacts:PutContactPolicy",
        "ssm-contacts:StartEngagement",
        "ssm-contacts:TagResource",
        "ssm-contacts:UntagResource",
        "ssm-contacts:UpdateContact"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm-contacts:contact"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm-contacts:contact"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm-contacts:CreateRotation",
         "ssm-contacts:CreateRotationOverride",
         "ssm-contacts:DeleteRotation",
         "ssm-contacts:DeleteRotationOverride",
         "ssm-contacts:GetRotation",
         "ssm-contacts:GetRotationOverride",
         "ssm-contacts:ListRotationOverrides",
         "ssm-contacts:ListRotationShifts",
         "ssm-contacts:ListTagsForResource",
         "ssm-contacts:TagResource",
         "ssm-contacts:UntagResource",
         "ssm-contacts:UpdateRotation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm-contacts:CreateRotation",
        "ssm-contacts:CreateRotationOverride",
        "ssm-contacts:DeleteRotation",
        "ssm-contacts:DeleteRotationOverride",
        "ssm-contacts:GetRotation",
        "ssm-contacts:GetRotationOverride",
        "ssm-contacts:ListRotationOverrides",
        "ssm-contacts:ListRotationShifts",
        "ssm-contacts:ListTagsForResource",
        "ssm-contacts:TagResource",
        "ssm-contacts:UntagResource",
        "ssm-contacts:UpdateRotation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm-contacts:rotation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm-contacts:rotation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm-contacts:DescribeEngagement",
         "ssm-contacts:ListPagesByEngagement",
         "ssm-contacts:StopEngagement"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm-contacts:DescribeEngagement",
        "ssm-contacts:ListPagesByEngagement",
        "ssm-contacts:StopEngagement"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm-contacts:engagement"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm-contacts:engagement"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm-incidents:BatchGetIncidentFindings",
         "ssm-incidents:CreateTimelineEvent",
         "ssm-incidents:DeleteIncidentRecord",
         "ssm-incidents:DeleteTimelineEvent",
         "ssm-incidents:GetIncidentRecord",
         "ssm-incidents:GetTimelineEvent",
         "ssm-incidents:ListIncidentFindings",
         "ssm-incidents:ListRelatedItems",
         "ssm-incidents:ListTagsForResource",
         "ssm-incidents:ListTimelineEvents",
         "ssm-incidents:TagResource",
         "ssm-incidents:UntagResource",
         "ssm-incidents:UpdateIncidentRecord",
         "ssm-incidents:UpdateRelatedItems",
         "ssm-incidents:UpdateTimelineEvent"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm-incidents:BatchGetIncidentFindings",
        "ssm-incidents:CreateTimelineEvent",
        "ssm-incidents:DeleteIncidentRecord",
        "ssm-incidents:DeleteTimelineEvent",
        "ssm-incidents:GetIncidentRecord",
        "ssm-incidents:GetTimelineEvent",
        "ssm-incidents:ListIncidentFindings",
        "ssm-incidents:ListRelatedItems",
        "ssm-incidents:ListTagsForResource",
        "ssm-incidents:ListTimelineEvents",
        "ssm-incidents:TagResource",
        "ssm-incidents:UntagResource",
        "ssm-incidents:UpdateIncidentRecord",
        "ssm-incidents:UpdateRelatedItems",
        "ssm-incidents:UpdateTimelineEvent"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm-incidents:incident-record"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm-incidents:incident-record"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm-incidents:BatchGetIncidentFindings",
         "ssm-incidents:CreateTimelineEvent",
         "ssm-incidents:DeleteResourcePolicy",
         "ssm-incidents:DeleteResponsePlan",
         "ssm-incidents:GetIncidentRecord",
         "ssm-incidents:GetResourcePolicies",
         "ssm-incidents:GetResponsePlan",
         "ssm-incidents:GetTimelineEvent",
         "ssm-incidents:ListIncidentFindings",
         "ssm-incidents:ListRelatedItems",
         "ssm-incidents:ListTagsForResource",
         "ssm-incidents:ListTimelineEvents",
         "ssm-incidents:PutResourcePolicy",
         "ssm-incidents:StartIncident",
         "ssm-incidents:TagResource",
         "ssm-incidents:UntagResource",
         "ssm-incidents:UpdateIncidentRecord",
         "ssm-incidents:UpdateRelatedItems",
         "ssm-incidents:UpdateResponsePlan",
         "ssm-incidents:UpdateTimelineEvent"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm-incidents:BatchGetIncidentFindings",
        "ssm-incidents:CreateTimelineEvent",
        "ssm-incidents:DeleteResourcePolicy",
        "ssm-incidents:DeleteResponsePlan",
        "ssm-incidents:GetIncidentRecord",
        "ssm-incidents:GetResourcePolicies",
        "ssm-incidents:GetResponsePlan",
        "ssm-incidents:GetTimelineEvent",
        "ssm-incidents:ListIncidentFindings",
        "ssm-incidents:ListRelatedItems",
        "ssm-incidents:ListTagsForResource",
        "ssm-incidents:ListTimelineEvents",
        "ssm-incidents:PutResourcePolicy",
        "ssm-incidents:StartIncident",
        "ssm-incidents:TagResource",
        "ssm-incidents:UntagResource",
        "ssm-incidents:UpdateIncidentRecord",
        "ssm-incidents:UpdateRelatedItems",
        "ssm-incidents:UpdateResponsePlan",
        "ssm-incidents:UpdateTimelineEvent"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm-incidents:response-plan"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm-incidents:response-plan"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm-incidents:DeleteReplicationSet",
         "ssm-incidents:GetReplicationSet",
         "ssm-incidents:ListTagsForResource",
         "ssm-incidents:TagResource",
         "ssm-incidents:UntagResource",
         "ssm-incidents:UpdateDeletionProtection",
         "ssm-incidents:UpdateReplicationSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm-incidents:DeleteReplicationSet",
        "ssm-incidents:GetReplicationSet",
        "ssm-incidents:ListTagsForResource",
        "ssm-incidents:TagResource",
        "ssm-incidents:UntagResource",
        "ssm-incidents:UpdateDeletionProtection",
        "ssm-incidents:UpdateReplicationSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm-incidents:replication-set"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm-incidents:replication-set"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm-quicksetup:CreateConfigurationManager",
         "ssm-quicksetup:DeleteConfigurationManager",
         "ssm-quicksetup:GetConfiguration",
         "ssm-quicksetup:GetConfigurationManager",
         "ssm-quicksetup:ListConfigurations",
         "ssm-quicksetup:ListTagsForResource",
         "ssm-quicksetup:TagResource",
         "ssm-quicksetup:UntagResource",
         "ssm-quicksetup:UpdateConfigurationDefinition",
         "ssm-quicksetup:UpdateConfigurationManager"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm-quicksetup:CreateConfigurationManager",
        "ssm-quicksetup:DeleteConfigurationManager",
        "ssm-quicksetup:GetConfiguration",
        "ssm-quicksetup:GetConfigurationManager",
        "ssm-quicksetup:ListConfigurations",
        "ssm-quicksetup:ListTagsForResource",
        "ssm-quicksetup:TagResource",
        "ssm-quicksetup:UntagResource",
        "ssm-quicksetup:UpdateConfigurationDefinition",
        "ssm-quicksetup:UpdateConfigurationManager"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm-quicksetup:configuration-manager"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm-quicksetup:configuration-manager"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm-sap:DeregisterApplication",
         "ssm-sap:ListComponents",
         "ssm-sap:StartApplication",
         "ssm-sap:StartApplicationRefresh",
         "ssm-sap:StopApplication",
         "ssm-sap:TagResource",
         "ssm-sap:UntagResource",
         "ssm-sap:UpdateApplicationSettings"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm-sap:DeregisterApplication",
        "ssm-sap:ListComponents",
        "ssm-sap:StartApplication",
        "ssm-sap:StartApplicationRefresh",
        "ssm-sap:StopApplication",
        "ssm-sap:TagResource",
        "ssm-sap:UntagResource",
        "ssm-sap:UpdateApplicationSettings"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm-sap:application"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm-sap:application"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm-sap:GetComponent",
         "ssm-sap:TagResource",
         "ssm-sap:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm-sap:GetComponent",
        "ssm-sap:TagResource",
        "ssm-sap:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm-sap:component"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm-sap:component"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ssm-sap:TagResource",
         "ssm-sap:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ssm-sap:TagResource",
        "ssm-sap:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ssm-sap:database"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ssm-sap:database"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sso:AttachCustomerManagedPolicyReferenceToPermissionSet",
         "sso:AttachManagedPolicyToPermissionSet",
         "sso:CreateAccountAssignment",
         "sso:CreateApplication",
         "sso:CreateInstance",
         "sso:CreateInstanceAccessControlAttributeConfiguration",
         "sso:CreatePermissionSet",
         "sso:CreateTrustedTokenIssuer",
         "sso:DeleteAccountAssignment",
         "sso:DeleteInlinePolicyFromPermissionSet",
         "sso:DeleteInstance",
         "sso:DeleteInstanceAccessControlAttributeConfiguration",
         "sso:DeletePermissionSet",
         "sso:DeletePermissionsBoundaryFromPermissionSet",
         "sso:DescribeAccountAssignmentCreationStatus",
         "sso:DescribeAccountAssignmentDeletionStatus",
         "sso:DescribeInstance",
         "sso:DescribeInstanceAccessControlAttributeConfiguration",
         "sso:DescribePermissionSet",
         "sso:DescribePermissionSetProvisioningStatus",
         "sso:DetachCustomerManagedPolicyReferenceFromPermissionSet",
         "sso:DetachManagedPolicyFromPermissionSet",
         "sso:GetInlinePolicyForPermissionSet",
         "sso:GetPermissionsBoundaryForPermissionSet",
         "sso:ListAccountAssignmentCreationStatus",
         "sso:ListAccountAssignmentDeletionStatus",
         "sso:ListAccountAssignments",
         "sso:ListAccountAssignmentsForPrincipal",
         "sso:ListAccountsForProvisionedPermissionSet",
         "sso:ListApplicationAssignmentsForPrincipal",
         "sso:ListCustomerManagedPolicyReferencesInPermissionSet",
         "sso:ListManagedPoliciesInPermissionSet",
         "sso:ListPermissionSetProvisioningStatus",
         "sso:ListPermissionSets",
         "sso:ListPermissionSetsProvisionedToAccount",
         "sso:ListTagsForResource",
         "sso:ListTrustedTokenIssuers",
         "sso:ProvisionPermissionSet",
         "sso:PutInlinePolicyToPermissionSet",
         "sso:PutPermissionsBoundaryToPermissionSet",
         "sso:TagResource",
         "sso:UntagResource",
         "sso:UpdateInstance",
         "sso:UpdateInstanceAccessControlAttributeConfiguration",
         "sso:UpdatePermissionSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sso:AttachCustomerManagedPolicyReferenceToPermissionSet",
        "sso:AttachManagedPolicyToPermissionSet",
        "sso:CreateAccountAssignment",
        "sso:CreateApplication",
        "sso:CreateInstance",
        "sso:CreateInstanceAccessControlAttributeConfiguration",
        "sso:CreatePermissionSet",
        "sso:CreateTrustedTokenIssuer",
        "sso:DeleteAccountAssignment",
        "sso:DeleteInlinePolicyFromPermissionSet",
        "sso:DeleteInstance",
        "sso:DeleteInstanceAccessControlAttributeConfiguration",
        "sso:DeletePermissionSet",
        "sso:DeletePermissionsBoundaryFromPermissionSet",
        "sso:DescribeAccountAssignmentCreationStatus",
        "sso:DescribeAccountAssignmentDeletionStatus",
        "sso:DescribeInstance",
        "sso:DescribeInstanceAccessControlAttributeConfiguration",
        "sso:DescribePermissionSet",
        "sso:DescribePermissionSetProvisioningStatus",
        "sso:DetachCustomerManagedPolicyReferenceFromPermissionSet",
        "sso:DetachManagedPolicyFromPermissionSet",
        "sso:GetInlinePolicyForPermissionSet",
        "sso:GetPermissionsBoundaryForPermissionSet",
        "sso:ListAccountAssignmentCreationStatus",
        "sso:ListAccountAssignmentDeletionStatus",
        "sso:ListAccountAssignments",
        "sso:ListAccountAssignmentsForPrincipal",
        "sso:ListAccountsForProvisionedPermissionSet",
        "sso:ListApplicationAssignmentsForPrincipal",
        "sso:ListCustomerManagedPolicyReferencesInPermissionSet",
        "sso:ListManagedPoliciesInPermissionSet",
        "sso:ListPermissionSetProvisioningStatus",
        "sso:ListPermissionSets",
        "sso:ListPermissionSetsProvisionedToAccount",
        "sso:ListTagsForResource",
        "sso:ListTrustedTokenIssuers",
        "sso:ProvisionPermissionSet",
        "sso:PutInlinePolicyToPermissionSet",
        "sso:PutPermissionsBoundaryToPermissionSet",
        "sso:TagResource",
        "sso:UntagResource",
        "sso:UpdateInstance",
        "sso:UpdateInstanceAccessControlAttributeConfiguration",
        "sso:UpdatePermissionSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sso:Instance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sso:Instance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sso:AttachCustomerManagedPolicyReferenceToPermissionSet",
         "sso:AttachManagedPolicyToPermissionSet",
         "sso:CreateAccountAssignment",
         "sso:CreatePermissionSet",
         "sso:DeleteAccountAssignment",
         "sso:DeleteInlinePolicyFromPermissionSet",
         "sso:DeletePermissionSet",
         "sso:DeletePermissionsBoundaryFromPermissionSet",
         "sso:DescribePermissionSet",
         "sso:DetachCustomerManagedPolicyReferenceFromPermissionSet",
         "sso:DetachManagedPolicyFromPermissionSet",
         "sso:GetInlinePolicyForPermissionSet",
         "sso:GetPermissionsBoundaryForPermissionSet",
         "sso:ListAccountAssignments",
         "sso:ListAccountsForProvisionedPermissionSet",
         "sso:ListCustomerManagedPolicyReferencesInPermissionSet",
         "sso:ListManagedPoliciesInPermissionSet",
         "sso:ListTagsForResource",
         "sso:ProvisionPermissionSet",
         "sso:PutInlinePolicyToPermissionSet",
         "sso:PutPermissionsBoundaryToPermissionSet",
         "sso:TagResource",
         "sso:UntagResource",
         "sso:UpdatePermissionSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sso:AttachCustomerManagedPolicyReferenceToPermissionSet",
        "sso:AttachManagedPolicyToPermissionSet",
        "sso:CreateAccountAssignment",
        "sso:CreatePermissionSet",
        "sso:DeleteAccountAssignment",
        "sso:DeleteInlinePolicyFromPermissionSet",
        "sso:DeletePermissionSet",
        "sso:DeletePermissionsBoundaryFromPermissionSet",
        "sso:DescribePermissionSet",
        "sso:DetachCustomerManagedPolicyReferenceFromPermissionSet",
        "sso:DetachManagedPolicyFromPermissionSet",
        "sso:GetInlinePolicyForPermissionSet",
        "sso:GetPermissionsBoundaryForPermissionSet",
        "sso:ListAccountAssignments",
        "sso:ListAccountsForProvisionedPermissionSet",
        "sso:ListCustomerManagedPolicyReferencesInPermissionSet",
        "sso:ListManagedPoliciesInPermissionSet",
        "sso:ListTagsForResource",
        "sso:ProvisionPermissionSet",
        "sso:PutInlinePolicyToPermissionSet",
        "sso:PutPermissionsBoundaryToPermissionSet",
        "sso:TagResource",
        "sso:UntagResource",
        "sso:UpdatePermissionSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sso:PermissionSet"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sso:PermissionSet"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sso:CreateAccountAssignment",
         "sso:DeleteAccountAssignment",
         "sso:ListAccountAssignments",
         "sso:ListPermissionSetsProvisionedToAccount",
         "sso:ProvisionPermissionSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sso:CreateAccountAssignment",
        "sso:DeleteAccountAssignment",
        "sso:ListAccountAssignments",
        "sso:ListPermissionSetsProvisionedToAccount",
        "sso:ProvisionPermissionSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sso:Account"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sso:Account"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sso:CreateApplication",
         "sso:DescribeApplicationProvider",
         "sso:ListApplicationProviders"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sso:CreateApplication",
        "sso:DescribeApplicationProvider",
        "sso:ListApplicationProviders"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sso:ApplicationProvider"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sso:ApplicationProvider"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sso:CreateApplicationAssignment",
         "sso:DeleteApplication",
         "sso:DeleteApplicationAccessScope",
         "sso:DeleteApplicationAssignment",
         "sso:DeleteApplicationAuthenticationMethod",
         "sso:DeleteApplicationGrant",
         "sso:DescribeApplication",
         "sso:DescribeApplicationAssignment",
         "sso:GetApplicationAccessScope",
         "sso:GetApplicationAssignmentConfiguration",
         "sso:GetApplicationAuthenticationMethod",
         "sso:GetApplicationGrant",
         "sso:ListApplicationAccessScopes",
         "sso:ListApplicationAssignments",
         "sso:ListApplicationAuthenticationMethods",
         "sso:ListApplicationGrants",
         "sso:ListTagsForResource",
         "sso:PutApplicationAccessScope",
         "sso:PutApplicationAssignmentConfiguration",
         "sso:PutApplicationAuthenticationMethod",
         "sso:PutApplicationGrant",
         "sso:TagResource",
         "sso:UntagResource",
         "sso:UpdateApplication"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sso:CreateApplicationAssignment",
        "sso:DeleteApplication",
        "sso:DeleteApplicationAccessScope",
        "sso:DeleteApplicationAssignment",
        "sso:DeleteApplicationAuthenticationMethod",
        "sso:DeleteApplicationGrant",
        "sso:DescribeApplication",
        "sso:DescribeApplicationAssignment",
        "sso:GetApplicationAccessScope",
        "sso:GetApplicationAssignmentConfiguration",
        "sso:GetApplicationAuthenticationMethod",
        "sso:GetApplicationGrant",
        "sso:ListApplicationAccessScopes",
        "sso:ListApplicationAssignments",
        "sso:ListApplicationAuthenticationMethods",
        "sso:ListApplicationGrants",
        "sso:ListTagsForResource",
        "sso:PutApplicationAccessScope",
        "sso:PutApplicationAssignmentConfiguration",
        "sso:PutApplicationAuthenticationMethod",
        "sso:PutApplicationGrant",
        "sso:TagResource",
        "sso:UntagResource",
        "sso:UpdateApplication"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sso:Application"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sso:Application"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sso:DeleteTrustedTokenIssuer",
         "sso:DescribeTrustedTokenIssuer",
         "sso:ListTagsForResource",
         "sso:TagResource",
         "sso:UntagResource",
         "sso:UpdateTrustedTokenIssuer"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sso:DeleteTrustedTokenIssuer",
        "sso:DescribeTrustedTokenIssuer",
        "sso:ListTagsForResource",
        "sso:TagResource",
        "sso:UntagResource",
        "sso:UpdateTrustedTokenIssuer"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sso:TrustedTokenIssuer"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sso:TrustedTokenIssuer"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sso-oauth:CreateTokenWithIAM"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sso-oauth:CreateTokenWithIAM"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sso-oauth:Application"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sso-oauth:Application"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "states:CreateActivity",
         "states:DeleteActivity",
         "states:DescribeActivity",
         "states:GetActivityTask",
         "states:ListTagsForResource",
         "states:TagResource",
         "states:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "states:CreateActivity",
        "states:DeleteActivity",
        "states:DescribeActivity",
        "states:GetActivityTask",
        "states:ListTagsForResource",
        "states:TagResource",
        "states:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/states:activity"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/states:activity"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "states:CreateStateMachine",
         "states:CreateStateMachineAlias",
         "states:DeleteStateMachine",
         "states:DeleteStateMachineAlias",
         "states:DeleteStateMachineVersion",
         "states:DescribeStateMachine",
         "states:DescribeStateMachineAlias",
         "states:ListExecutions",
         "states:ListStateMachineAliases",
         "states:ListStateMachineVersions",
         "states:ListTagsForResource",
         "states:PublishStateMachineVersion",
         "states:StartExecution",
         "states:StartSyncExecution",
         "states:TagResource",
         "states:UntagResource",
         "states:UpdateStateMachine",
         "states:UpdateStateMachineAlias"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "states:CreateStateMachine",
        "states:CreateStateMachineAlias",
        "states:DeleteStateMachine",
        "states:DeleteStateMachineAlias",
        "states:DeleteStateMachineVersion",
        "states:DescribeStateMachine",
        "states:DescribeStateMachineAlias",
        "states:ListExecutions",
        "states:ListStateMachineAliases",
        "states:ListStateMachineVersions",
        "states:ListTagsForResource",
        "states:PublishStateMachineVersion",
        "states:StartExecution",
        "states:StartSyncExecution",
        "states:TagResource",
        "states:UntagResource",
        "states:UpdateStateMachine",
        "states:UpdateStateMachineAlias"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/states:statemachine"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/states:statemachine"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "states:DescribeExecution",
         "states:DescribeStateMachineForExecution",
         "states:GetExecutionHistory",
         "states:ListMapRuns",
         "states:RedriveExecution",
         "states:StopExecution"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "states:DescribeExecution",
        "states:DescribeStateMachineForExecution",
        "states:GetExecutionHistory",
        "states:ListMapRuns",
        "states:RedriveExecution",
        "states:StopExecution"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/states:execution"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/states:execution"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "states:DescribeExecution"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "states:DescribeExecution"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/states:express"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/states:express"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "states:DescribeMapRun",
         "states:ListExecutions",
         "states:UpdateMapRun"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "states:DescribeMapRun",
        "states:ListExecutions",
        "states:UpdateMapRun"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/states:maprun"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/states:maprun"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "storagegateway:AddCache",
         "storagegateway:AddTagsToResource",
         "storagegateway:AddUploadBuffer",
         "storagegateway:AddWorkingStorage",
         "storagegateway:AssociateFileSystem",
         "storagegateway:AttachVolume",
         "storagegateway:CancelArchival",
         "storagegateway:CancelRetrieval",
         "storagegateway:CreateCachediSCSIVolume",
         "storagegateway:CreateNFSFileShare",
         "storagegateway:CreateSMBFileShare",
         "storagegateway:CreateStorediSCSIVolume",
         "storagegateway:CreateTapeWithBarcode",
         "storagegateway:CreateTapes",
         "storagegateway:DeleteAutomaticTapeCreationPolicy",
         "storagegateway:DeleteBandwidthRateLimit",
         "storagegateway:DeleteGateway",
         "storagegateway:DeleteTape",
         "storagegateway:DescribeAvailabilityMonitorTest",
         "storagegateway:DescribeBandwidthRateLimit",
         "storagegateway:DescribeBandwidthRateLimitSchedule",
         "storagegateway:DescribeCache",
         "storagegateway:DescribeGatewayInformation",
         "storagegateway:DescribeMaintenanceStartTime",
         "storagegateway:DescribeSMBSettings",
         "storagegateway:DescribeTapeRecoveryPoints",
         "storagegateway:DescribeTapes",
         "storagegateway:DescribeUploadBuffer",
         "storagegateway:DescribeVTLDevices",
         "storagegateway:DescribeWorkingStorage",
         "storagegateway:DisableGateway",
         "storagegateway:JoinDomain",
         "storagegateway:ListLocalDisks",
         "storagegateway:ListTagsForResource",
         "storagegateway:ListVolumeRecoveryPoints",
         "storagegateway:RemoveTagsFromResource",
         "storagegateway:ResetCache",
         "storagegateway:RetrieveTapeArchive",
         "storagegateway:RetrieveTapeRecoveryPoint",
         "storagegateway:SetLocalConsolePassword",
         "storagegateway:SetSMBGuestPassword",
         "storagegateway:ShutdownGateway",
         "storagegateway:StartAvailabilityMonitorTest",
         "storagegateway:StartGateway",
         "storagegateway:UpdateAutomaticTapeCreationPolicy",
         "storagegateway:UpdateBandwidthRateLimit",
         "storagegateway:UpdateBandwidthRateLimitSchedule",
         "storagegateway:UpdateGatewayInformation",
         "storagegateway:UpdateGatewaySoftwareNow",
         "storagegateway:UpdateMaintenanceStartTime",
         "storagegateway:UpdateSMBFileShareVisibility",
         "storagegateway:UpdateSMBLocalGroups",
         "storagegateway:UpdateSMBSecurityStrategy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "storagegateway:AddCache",
        "storagegateway:AddTagsToResource",
        "storagegateway:AddUploadBuffer",
        "storagegateway:AddWorkingStorage",
        "storagegateway:AssociateFileSystem",
        "storagegateway:AttachVolume",
        "storagegateway:CancelArchival",
        "storagegateway:CancelRetrieval",
        "storagegateway:CreateCachediSCSIVolume",
        "storagegateway:CreateNFSFileShare",
        "storagegateway:CreateSMBFileShare",
        "storagegateway:CreateStorediSCSIVolume",
        "storagegateway:CreateTapeWithBarcode",
        "storagegateway:CreateTapes",
        "storagegateway:DeleteAutomaticTapeCreationPolicy",
        "storagegateway:DeleteBandwidthRateLimit",
        "storagegateway:DeleteGateway",
        "storagegateway:DeleteTape",
        "storagegateway:DescribeAvailabilityMonitorTest",
        "storagegateway:DescribeBandwidthRateLimit",
        "storagegateway:DescribeBandwidthRateLimitSchedule",
        "storagegateway:DescribeCache",
        "storagegateway:DescribeGatewayInformation",
        "storagegateway:DescribeMaintenanceStartTime",
        "storagegateway:DescribeSMBSettings",
        "storagegateway:DescribeTapeRecoveryPoints",
        "storagegateway:DescribeTapes",
        "storagegateway:DescribeUploadBuffer",
        "storagegateway:DescribeVTLDevices",
        "storagegateway:DescribeWorkingStorage",
        "storagegateway:DisableGateway",
        "storagegateway:JoinDomain",
        "storagegateway:ListLocalDisks",
        "storagegateway:ListTagsForResource",
        "storagegateway:ListVolumeRecoveryPoints",
        "storagegateway:RemoveTagsFromResource",
        "storagegateway:ResetCache",
        "storagegateway:RetrieveTapeArchive",
        "storagegateway:RetrieveTapeRecoveryPoint",
        "storagegateway:SetLocalConsolePassword",
        "storagegateway:SetSMBGuestPassword",
        "storagegateway:ShutdownGateway",
        "storagegateway:StartAvailabilityMonitorTest",
        "storagegateway:StartGateway",
        "storagegateway:UpdateAutomaticTapeCreationPolicy",
        "storagegateway:UpdateBandwidthRateLimit",
        "storagegateway:UpdateBandwidthRateLimitSchedule",
        "storagegateway:UpdateGatewayInformation",
        "storagegateway:UpdateGatewaySoftwareNow",
        "storagegateway:UpdateMaintenanceStartTime",
        "storagegateway:UpdateSMBFileShareVisibility",
        "storagegateway:UpdateSMBLocalGroups",
        "storagegateway:UpdateSMBSecurityStrategy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/storagegateway:gateway"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/storagegateway:gateway"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "storagegateway:AddTagsToResource",
         "storagegateway:CancelCacheReport",
         "storagegateway:DeleteCacheReport",
         "storagegateway:DescribeCacheReport",
         "storagegateway:RemoveTagsFromResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "storagegateway:AddTagsToResource",
        "storagegateway:CancelCacheReport",
        "storagegateway:DeleteCacheReport",
        "storagegateway:DescribeCacheReport",
        "storagegateway:RemoveTagsFromResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/storagegateway:cache-report"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/storagegateway:cache-report"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "storagegateway:AddTagsToResource",
         "storagegateway:DescribeFileSystemAssociations",
         "storagegateway:DisassociateFileSystem",
         "storagegateway:RemoveTagsFromResource",
         "storagegateway:UpdateFileSystemAssociation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "storagegateway:AddTagsToResource",
        "storagegateway:DescribeFileSystemAssociations",
        "storagegateway:DisassociateFileSystem",
        "storagegateway:RemoveTagsFromResource",
        "storagegateway:UpdateFileSystemAssociation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/storagegateway:fs-association"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/storagegateway:fs-association"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "storagegateway:AddTagsToResource",
         "storagegateway:DeleteFileShare",
         "storagegateway:DescribeNFSFileShares",
         "storagegateway:DescribeSMBFileShares",
         "storagegateway:EvictFilesFailingUpload",
         "storagegateway:ListTagsForResource",
         "storagegateway:NotifyWhenUploaded",
         "storagegateway:RefreshCache",
         "storagegateway:RemoveTagsFromResource",
         "storagegateway:StartCacheReport",
         "storagegateway:UpdateNFSFileShare",
         "storagegateway:UpdateSMBFileShare"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "storagegateway:AddTagsToResource",
        "storagegateway:DeleteFileShare",
        "storagegateway:DescribeNFSFileShares",
        "storagegateway:DescribeSMBFileShares",
        "storagegateway:EvictFilesFailingUpload",
        "storagegateway:ListTagsForResource",
        "storagegateway:NotifyWhenUploaded",
        "storagegateway:RefreshCache",
        "storagegateway:RemoveTagsFromResource",
        "storagegateway:StartCacheReport",
        "storagegateway:UpdateNFSFileShare",
        "storagegateway:UpdateSMBFileShare"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/storagegateway:share"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/storagegateway:share"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "storagegateway:AddTagsToResource",
         "storagegateway:AssignTapePool",
         "storagegateway:CancelArchival",
         "storagegateway:CancelRetrieval",
         "storagegateway:DeleteTape",
         "storagegateway:ListTagsForResource",
         "storagegateway:RemoveTagsFromResource",
         "storagegateway:RetrieveTapeArchive",
         "storagegateway:RetrieveTapeRecoveryPoint"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "storagegateway:AddTagsToResource",
        "storagegateway:AssignTapePool",
        "storagegateway:CancelArchival",
        "storagegateway:CancelRetrieval",
        "storagegateway:DeleteTape",
        "storagegateway:ListTagsForResource",
        "storagegateway:RemoveTagsFromResource",
        "storagegateway:RetrieveTapeArchive",
        "storagegateway:RetrieveTapeRecoveryPoint"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/storagegateway:tape"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/storagegateway:tape"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "storagegateway:AddTagsToResource",
         "storagegateway:AssignTapePool",
         "storagegateway:BypassGovernanceRetention",
         "storagegateway:CreateTapeWithBarcode",
         "storagegateway:CreateTapes",
         "storagegateway:DeleteTapePool",
         "storagegateway:RemoveTagsFromResource",
         "storagegateway:UpdateAutomaticTapeCreationPolicy"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "storagegateway:AddTagsToResource",
        "storagegateway:AssignTapePool",
        "storagegateway:BypassGovernanceRetention",
        "storagegateway:CreateTapeWithBarcode",
        "storagegateway:CreateTapes",
        "storagegateway:DeleteTapePool",
        "storagegateway:RemoveTagsFromResource",
        "storagegateway:UpdateAutomaticTapeCreationPolicy"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/storagegateway:tapepool"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/storagegateway:tapepool"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "storagegateway:AddTagsToResource",
         "storagegateway:AttachVolume",
         "storagegateway:CreateCachediSCSIVolume",
         "storagegateway:CreateSnapshot",
         "storagegateway:CreateSnapshotFromVolumeRecoveryPoint",
         "storagegateway:DeleteSnapshotSchedule",
         "storagegateway:DeleteVolume",
         "storagegateway:DescribeCachediSCSIVolumes",
         "storagegateway:DescribeSnapshotSchedule",
         "storagegateway:DescribeStorediSCSIVolumes",
         "storagegateway:DetachVolume",
         "storagegateway:ListTagsForResource",
         "storagegateway:ListVolumeInitiators",
         "storagegateway:RemoveTagsFromResource",
         "storagegateway:UpdateSnapshotSchedule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "storagegateway:AddTagsToResource",
        "storagegateway:AttachVolume",
        "storagegateway:CreateCachediSCSIVolume",
        "storagegateway:CreateSnapshot",
        "storagegateway:CreateSnapshotFromVolumeRecoveryPoint",
        "storagegateway:DeleteSnapshotSchedule",
        "storagegateway:DeleteVolume",
        "storagegateway:DescribeCachediSCSIVolumes",
        "storagegateway:DescribeSnapshotSchedule",
        "storagegateway:DescribeStorediSCSIVolumes",
        "storagegateway:DetachVolume",
        "storagegateway:ListTagsForResource",
        "storagegateway:ListVolumeInitiators",
        "storagegateway:RemoveTagsFromResource",
        "storagegateway:UpdateSnapshotSchedule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/storagegateway:volume"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/storagegateway:volume"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "storagegateway:DeleteChapCredentials",
         "storagegateway:DescribeChapCredentials",
         "storagegateway:UpdateChapCredentials"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "storagegateway:DeleteChapCredentials",
        "storagegateway:DescribeChapCredentials",
        "storagegateway:UpdateChapCredentials"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/storagegateway:target"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/storagegateway:target"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "storagegateway:UpdateVTLDeviceType"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "storagegateway:UpdateVTLDeviceType"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/storagegateway:device"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/storagegateway:device"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sts:AssumeRole",
         "sts:AssumeRoleWithSAML",
         "sts:AssumeRoleWithWebIdentity",
         "sts:SetContext",
         "sts:SetSourceIdentity",
         "sts:TagSession"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sts:AssumeRole",
        "sts:AssumeRoleWithSAML",
        "sts:AssumeRoleWithWebIdentity",
        "sts:SetContext",
        "sts:SetSourceIdentity",
        "sts:TagSession"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sts:role"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sts:role"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sts:AssumeRoot"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sts:AssumeRoot"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sts:root-user"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sts:root-user"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sts:GetFederationToken",
         "sts:SetSourceIdentity",
         "sts:TagSession"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sts:GetFederationToken",
        "sts:SetSourceIdentity",
        "sts:TagSession"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sts:user"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sts:user"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "sts:SetContext"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "sts:SetContext"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/sts:self-session"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/sts:self-session"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "swf:CancelTimer",
         "swf:CancelWorkflowExecution",
         "swf:CompleteWorkflowExecution",
         "swf:ContinueAsNewWorkflowExecution",
         "swf:CountClosedWorkflowExecutions",
         "swf:CountOpenWorkflowExecutions",
         "swf:CountPendingActivityTasks",
         "swf:CountPendingDecisionTasks",
         "swf:DeleteActivityType",
         "swf:DeleteWorkflowType",
         "swf:DeprecateActivityType",
         "swf:DeprecateDomain",
         "swf:DeprecateWorkflowType",
         "swf:DescribeActivityType",
         "swf:DescribeDomain",
         "swf:DescribeWorkflowExecution",
         "swf:DescribeWorkflowType",
         "swf:FailWorkflowExecution",
         "swf:GetWorkflowExecutionHistory",
         "swf:ListActivityTypes",
         "swf:ListClosedWorkflowExecutions",
         "swf:ListOpenWorkflowExecutions",
         "swf:ListTagsForResource",
         "swf:ListWorkflowTypes",
         "swf:PollForActivityTask",
         "swf:PollForDecisionTask",
         "swf:RecordActivityTaskHeartbeat",
         "swf:RecordMarker",
         "swf:RegisterActivityType",
         "swf:RegisterWorkflowType",
         "swf:RequestCancelActivityTask",
         "swf:RequestCancelExternalWorkflowExecution",
         "swf:RequestCancelWorkflowExecution",
         "swf:RespondActivityTaskCanceled",
         "swf:RespondActivityTaskCompleted",
         "swf:RespondActivityTaskFailed",
         "swf:RespondDecisionTaskCompleted",
         "swf:ScheduleActivityTask",
         "swf:SignalExternalWorkflowExecution",
         "swf:SignalWorkflowExecution",
         "swf:StartChildWorkflowExecution",
         "swf:StartTimer",
         "swf:StartWorkflowExecution",
         "swf:TagResource",
         "swf:TerminateWorkflowExecution",
         "swf:UndeprecateActivityType",
         "swf:UndeprecateDomain",
         "swf:UndeprecateWorkflowType",
         "swf:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "swf:CancelTimer",
        "swf:CancelWorkflowExecution",
        "swf:CompleteWorkflowExecution",
        "swf:ContinueAsNewWorkflowExecution",
        "swf:CountClosedWorkflowExecutions",
        "swf:CountOpenWorkflowExecutions",
        "swf:CountPendingActivityTasks",
        "swf:CountPendingDecisionTasks",
        "swf:DeleteActivityType",
        "swf:DeleteWorkflowType",
        "swf:DeprecateActivityType",
        "swf:DeprecateDomain",
        "swf:DeprecateWorkflowType",
        "swf:DescribeActivityType",
        "swf:DescribeDomain",
        "swf:DescribeWorkflowExecution",
        "swf:DescribeWorkflowType",
        "swf:FailWorkflowExecution",
        "swf:GetWorkflowExecutionHistory",
        "swf:ListActivityTypes",
        "swf:ListClosedWorkflowExecutions",
        "swf:ListOpenWorkflowExecutions",
        "swf:ListTagsForResource",
        "swf:ListWorkflowTypes",
        "swf:PollForActivityTask",
        "swf:PollForDecisionTask",
        "swf:RecordActivityTaskHeartbeat",
        "swf:RecordMarker",
        "swf:RegisterActivityType",
        "swf:RegisterWorkflowType",
        "swf:RequestCancelActivityTask",
        "swf:RequestCancelExternalWorkflowExecution",
        "swf:RequestCancelWorkflowExecution",
        "swf:RespondActivityTaskCanceled",
        "swf:RespondActivityTaskCompleted",
        "swf:RespondActivityTaskFailed",
        "swf:RespondDecisionTaskCompleted",
        "swf:ScheduleActivityTask",
        "swf:SignalExternalWorkflowExecution",
        "swf:SignalWorkflowExecution",
        "swf:StartChildWorkflowExecution",
        "swf:StartTimer",
        "swf:StartWorkflowExecution",
        "swf:TagResource",
        "swf:TerminateWorkflowExecution",
        "swf:UndeprecateActivityType",
        "swf:UndeprecateDomain",
        "swf:UndeprecateWorkflowType",
        "swf:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/swf:domain"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/swf:domain"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "synthetics:AssociateResource",
         "synthetics:DeleteGroup",
         "synthetics:DisassociateResource",
         "synthetics:GetGroup",
         "synthetics:ListGroupResources",
         "synthetics:ListTagsForResource",
         "synthetics:TagResource",
         "synthetics:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "synthetics:AssociateResource",
        "synthetics:DeleteGroup",
        "synthetics:DisassociateResource",
        "synthetics:GetGroup",
        "synthetics:ListGroupResources",
        "synthetics:ListTagsForResource",
        "synthetics:TagResource",
        "synthetics:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/synthetics:group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/synthetics:group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "synthetics:DeleteCanary",
         "synthetics:GetCanary",
         "synthetics:GetCanaryRuns",
         "synthetics:ListAssociatedGroups",
         "synthetics:ListTagsForResource",
         "synthetics:StartCanary",
         "synthetics:StopCanary",
         "synthetics:TagResource",
         "synthetics:UntagResource",
         "synthetics:UpdateCanary"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "synthetics:DeleteCanary",
        "synthetics:GetCanary",
        "synthetics:GetCanaryRuns",
        "synthetics:ListAssociatedGroups",
        "synthetics:ListTagsForResource",
        "synthetics:StartCanary",
        "synthetics:StopCanary",
        "synthetics:TagResource",
        "synthetics:UntagResource",
        "synthetics:UpdateCanary"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/synthetics:canary"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/synthetics:canary"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "textract:CreateAdapterVersion",
         "textract:DeleteAdapter",
         "textract:GetAdapter",
         "textract:ListTagsForResource",
         "textract:TagResource",
         "textract:UntagResource",
         "textract:UpdateAdapter"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "textract:CreateAdapterVersion",
        "textract:DeleteAdapter",
        "textract:GetAdapter",
        "textract:ListTagsForResource",
        "textract:TagResource",
        "textract:UntagResource",
        "textract:UpdateAdapter"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/textract:adapter"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/textract:adapter"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "textract:DeleteAdapterVersion",
         "textract:GetAdapterVersion",
         "textract:ListTagsForResource",
         "textract:TagResource",
         "textract:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "textract:DeleteAdapterVersion",
        "textract:GetAdapterVersion",
        "textract:ListTagsForResource",
        "textract:TagResource",
        "textract:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/textract:adapterversion"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/textract:adapterversion"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "thinclient:DeleteDevice",
         "thinclient:DeregisterDevice",
         "thinclient:GetDevice",
         "thinclient:GetDeviceDetails",
         "thinclient:ListDeviceSessions",
         "thinclient:ListTagsForResource",
         "thinclient:TagResource",
         "thinclient:UntagResource",
         "thinclient:UpdateDevice"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "thinclient:DeleteDevice",
        "thinclient:DeregisterDevice",
        "thinclient:GetDevice",
        "thinclient:GetDeviceDetails",
        "thinclient:ListDeviceSessions",
        "thinclient:ListTagsForResource",
        "thinclient:TagResource",
        "thinclient:UntagResource",
        "thinclient:UpdateDevice"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/thinclient:device"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/thinclient:device"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "thinclient:DeleteEnvironment",
         "thinclient:GetEnvironment",
         "thinclient:ListTagsForResource",
         "thinclient:TagResource",
         "thinclient:UntagResource",
         "thinclient:UpdateEnvironment"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "thinclient:DeleteEnvironment",
        "thinclient:GetEnvironment",
        "thinclient:ListTagsForResource",
        "thinclient:TagResource",
        "thinclient:UntagResource",
        "thinclient:UpdateEnvironment"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/thinclient:environment"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/thinclient:environment"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "thinclient:GetSoftwareSet",
         "thinclient:ListTagsForResource",
         "thinclient:TagResource",
         "thinclient:UntagResource",
         "thinclient:UpdateSoftwareSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "thinclient:GetSoftwareSet",
        "thinclient:ListTagsForResource",
        "thinclient:TagResource",
        "thinclient:UntagResource",
        "thinclient:UpdateSoftwareSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/thinclient:softwareset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/thinclient:softwareset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "timestream:CreateBatchLoadTask",
         "timestream:CreateTable",
         "timestream:DeleteTable",
         "timestream:DescribeTable",
         "timestream:ListMeasures",
         "timestream:ListTagsForResource",
         "timestream:PrepareQuery",
         "timestream:Select",
         "timestream:StartAwsBackupJob",
         "timestream:StartAwsRestoreJob",
         "timestream:TagResource",
         "timestream:Unload",
         "timestream:UntagResource",
         "timestream:UpdateTable",
         "timestream:WriteRecords"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "timestream:CreateBatchLoadTask",
        "timestream:CreateTable",
        "timestream:DeleteTable",
        "timestream:DescribeTable",
        "timestream:ListMeasures",
        "timestream:ListTagsForResource",
        "timestream:PrepareQuery",
        "timestream:Select",
        "timestream:StartAwsBackupJob",
        "timestream:StartAwsRestoreJob",
        "timestream:TagResource",
        "timestream:Unload",
        "timestream:UntagResource",
        "timestream:UpdateTable",
        "timestream:WriteRecords"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/timestream:table"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/timestream:table"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "timestream:CreateDatabase",
         "timestream:DeleteDatabase",
         "timestream:DescribeDatabase",
         "timestream:ListTables",
         "timestream:ListTagsForResource",
         "timestream:TagResource",
         "timestream:UntagResource",
         "timestream:UpdateDatabase"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "timestream:CreateDatabase",
        "timestream:DeleteDatabase",
        "timestream:DescribeDatabase",
        "timestream:ListTables",
        "timestream:ListTagsForResource",
        "timestream:TagResource",
        "timestream:UntagResource",
        "timestream:UpdateDatabase"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/timestream:database"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/timestream:database"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "timestream:DeleteScheduledQuery",
         "timestream:DescribeScheduledQuery",
         "timestream:ExecuteScheduledQuery",
         "timestream:ListTagsForResource",
         "timestream:TagResource",
         "timestream:UntagResource",
         "timestream:UpdateScheduledQuery"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "timestream:DeleteScheduledQuery",
        "timestream:DescribeScheduledQuery",
        "timestream:ExecuteScheduledQuery",
        "timestream:ListTagsForResource",
        "timestream:TagResource",
        "timestream:UntagResource",
        "timestream:UpdateScheduledQuery"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/timestream:scheduled-query"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/timestream:scheduled-query"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "timestream-influxdb:CreateDbCluster",
         "timestream-influxdb:CreateDbInstance",
         "timestream-influxdb:GetDbParameterGroup",
         "timestream-influxdb:ListTagsForResource",
         "timestream-influxdb:TagResource",
         "timestream-influxdb:UntagResource",
         "timestream-influxdb:UpdateDbCluster",
         "timestream-influxdb:UpdateDbInstance"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "timestream-influxdb:CreateDbCluster",
        "timestream-influxdb:CreateDbInstance",
        "timestream-influxdb:GetDbParameterGroup",
        "timestream-influxdb:ListTagsForResource",
        "timestream-influxdb:TagResource",
        "timestream-influxdb:UntagResource",
        "timestream-influxdb:UpdateDbCluster",
        "timestream-influxdb:UpdateDbInstance"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/timestream-influxdb:db-parameter-group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/timestream-influxdb:db-parameter-group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "timestream-influxdb:DeleteDbCluster",
         "timestream-influxdb:GetDbCluster",
         "timestream-influxdb:ListDbInstancesForCluster",
         "timestream-influxdb:ListTagsForResource",
         "timestream-influxdb:TagResource",
         "timestream-influxdb:UntagResource",
         "timestream-influxdb:UpdateDbCluster"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "timestream-influxdb:DeleteDbCluster",
        "timestream-influxdb:GetDbCluster",
        "timestream-influxdb:ListDbInstancesForCluster",
        "timestream-influxdb:ListTagsForResource",
        "timestream-influxdb:TagResource",
        "timestream-influxdb:UntagResource",
        "timestream-influxdb:UpdateDbCluster"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/timestream-influxdb:db-cluster"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/timestream-influxdb:db-cluster"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "timestream-influxdb:DeleteDbInstance",
         "timestream-influxdb:GetDbInstance",
         "timestream-influxdb:ListTagsForResource",
         "timestream-influxdb:TagResource",
         "timestream-influxdb:UntagResource",
         "timestream-influxdb:UpdateDbInstance"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "timestream-influxdb:DeleteDbInstance",
        "timestream-influxdb:GetDbInstance",
        "timestream-influxdb:ListTagsForResource",
        "timestream-influxdb:TagResource",
        "timestream-influxdb:UntagResource",
        "timestream-influxdb:UpdateDbInstance"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/timestream-influxdb:db-instance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/timestream-influxdb:db-instance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "tnb:CancelSolNetworkOperation",
         "tnb:GetSolNetworkOperation",
         "tnb:ListSolNetworkOperations",
         "tnb:TagResource",
         "tnb:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "tnb:CancelSolNetworkOperation",
        "tnb:GetSolNetworkOperation",
        "tnb:ListSolNetworkOperations",
        "tnb:TagResource",
        "tnb:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/tnb:network-operation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/tnb:network-operation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "tnb:CreateSolFunctionPackage",
         "tnb:DeleteSolFunctionPackage",
         "tnb:GetSolFunctionPackage",
         "tnb:GetSolFunctionPackageContent",
         "tnb:GetSolFunctionPackageDescriptor",
         "tnb:ListSolFunctionPackages",
         "tnb:PutSolFunctionPackageContent",
         "tnb:TagResource",
         "tnb:UntagResource",
         "tnb:UpdateSolFunctionPackage",
         "tnb:ValidateSolFunctionPackageContent"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "tnb:CreateSolFunctionPackage",
        "tnb:DeleteSolFunctionPackage",
        "tnb:GetSolFunctionPackage",
        "tnb:GetSolFunctionPackageContent",
        "tnb:GetSolFunctionPackageDescriptor",
        "tnb:ListSolFunctionPackages",
        "tnb:PutSolFunctionPackageContent",
        "tnb:TagResource",
        "tnb:UntagResource",
        "tnb:UpdateSolFunctionPackage",
        "tnb:ValidateSolFunctionPackageContent"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/tnb:function-package"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/tnb:function-package"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "tnb:CreateSolNetworkInstance",
         "tnb:DeleteSolNetworkInstance",
         "tnb:GetSolNetworkInstance",
         "tnb:InstantiateSolNetworkInstance",
         "tnb:ListSolNetworkInstances",
         "tnb:TagResource",
         "tnb:TerminateSolNetworkInstance",
         "tnb:UntagResource",
         "tnb:UpdateSolNetworkInstance"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "tnb:CreateSolNetworkInstance",
        "tnb:DeleteSolNetworkInstance",
        "tnb:GetSolNetworkInstance",
        "tnb:InstantiateSolNetworkInstance",
        "tnb:ListSolNetworkInstances",
        "tnb:TagResource",
        "tnb:TerminateSolNetworkInstance",
        "tnb:UntagResource",
        "tnb:UpdateSolNetworkInstance"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/tnb:network-instance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/tnb:network-instance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "tnb:CreateSolNetworkInstance",
         "tnb:CreateSolNetworkPackage",
         "tnb:DeleteSolNetworkPackage",
         "tnb:GetSolNetworkPackage",
         "tnb:GetSolNetworkPackageContent",
         "tnb:GetSolNetworkPackageDescriptor",
         "tnb:ListSolNetworkPackages",
         "tnb:PutSolNetworkPackageContent",
         "tnb:TagResource",
         "tnb:UntagResource",
         "tnb:UpdateSolNetworkPackage",
         "tnb:ValidateSolNetworkPackageContent"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "tnb:CreateSolNetworkInstance",
        "tnb:CreateSolNetworkPackage",
        "tnb:DeleteSolNetworkPackage",
        "tnb:GetSolNetworkPackage",
        "tnb:GetSolNetworkPackageContent",
        "tnb:GetSolNetworkPackageDescriptor",
        "tnb:ListSolNetworkPackages",
        "tnb:PutSolNetworkPackageContent",
        "tnb:TagResource",
        "tnb:UntagResource",
        "tnb:UpdateSolNetworkPackage",
        "tnb:ValidateSolNetworkPackageContent"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/tnb:network-package"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/tnb:network-package"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "tnb:GetSolFunctionInstance",
         "tnb:ListSolFunctionInstances",
         "tnb:TagResource",
         "tnb:UntagResource",
         "tnb:UpdateSolNetworkInstance"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "tnb:GetSolFunctionInstance",
        "tnb:ListSolFunctionInstances",
        "tnb:TagResource",
        "tnb:UntagResource",
        "tnb:UpdateSolNetworkInstance"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/tnb:function-instance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/tnb:function-instance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "transcribe:DeleteCallAnalyticsCategory",
         "transcribe:GetCallAnalyticsCategory",
         "transcribe:UpdateCallAnalyticsCategory"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "transcribe:DeleteCallAnalyticsCategory",
        "transcribe:GetCallAnalyticsCategory",
        "transcribe:UpdateCallAnalyticsCategory"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/transcribe:callanalyticscategory"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/transcribe:callanalyticscategory"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "transcribe:DeleteCallAnalyticsJob",
         "transcribe:GetCallAnalyticsJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "transcribe:DeleteCallAnalyticsJob",
        "transcribe:GetCallAnalyticsJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/transcribe:callanalyticsjob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/transcribe:callanalyticsjob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "transcribe:DeleteLanguageModel",
         "transcribe:DescribeLanguageModel"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "transcribe:DeleteLanguageModel",
        "transcribe:DescribeLanguageModel"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/transcribe:languagemodel"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/transcribe:languagemodel"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "transcribe:DeleteMedicalScribeJob",
         "transcribe:GetMedicalScribeJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "transcribe:DeleteMedicalScribeJob",
        "transcribe:GetMedicalScribeJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/transcribe:medicalscribejob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/transcribe:medicalscribejob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "transcribe:DeleteMedicalTranscriptionJob",
         "transcribe:GetMedicalTranscriptionJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "transcribe:DeleteMedicalTranscriptionJob",
        "transcribe:GetMedicalTranscriptionJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/transcribe:medicaltranscriptionjob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/transcribe:medicaltranscriptionjob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "transcribe:DeleteMedicalVocabulary",
         "transcribe:GetMedicalVocabulary",
         "transcribe:UpdateMedicalVocabulary"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "transcribe:DeleteMedicalVocabulary",
        "transcribe:GetMedicalVocabulary",
        "transcribe:UpdateMedicalVocabulary"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/transcribe:medicalvocabulary"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/transcribe:medicalvocabulary"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "transcribe:DeleteTranscriptionJob",
         "transcribe:GetTranscriptionJob"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "transcribe:DeleteTranscriptionJob",
        "transcribe:GetTranscriptionJob"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/transcribe:transcriptionjob"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/transcribe:transcriptionjob"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "transcribe:DeleteVocabulary",
         "transcribe:GetVocabulary",
         "transcribe:UpdateVocabulary"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "transcribe:DeleteVocabulary",
        "transcribe:GetVocabulary",
        "transcribe:UpdateVocabulary"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/transcribe:vocabulary"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/transcribe:vocabulary"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "transcribe:DeleteVocabularyFilter",
         "transcribe:GetVocabularyFilter",
         "transcribe:UpdateVocabularyFilter"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "transcribe:DeleteVocabularyFilter",
        "transcribe:GetVocabularyFilter",
        "transcribe:UpdateVocabularyFilter"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/transcribe:vocabularyfilter"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/transcribe:vocabularyfilter"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "transfer:CreateAccess",
         "transfer:CreateAgreement",
         "transfer:CreateUser",
         "transfer:DeleteAccess",
         "transfer:DeleteServer",
         "transfer:DescribeAccess",
         "transfer:DescribeServer",
         "transfer:ImportHostKey",
         "transfer:ListAccesses",
         "transfer:ListAgreements",
         "transfer:ListHostKeys",
         "transfer:ListTagsForResource",
         "transfer:ListUsers",
         "transfer:StartServer",
         "transfer:StopServer",
         "transfer:TagResource",
         "transfer:UntagResource",
         "transfer:UpdateServer"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "transfer:CreateAccess",
        "transfer:CreateAgreement",
        "transfer:CreateUser",
        "transfer:DeleteAccess",
        "transfer:DeleteServer",
        "transfer:DescribeAccess",
        "transfer:DescribeServer",
        "transfer:ImportHostKey",
        "transfer:ListAccesses",
        "transfer:ListAgreements",
        "transfer:ListHostKeys",
        "transfer:ListTagsForResource",
        "transfer:ListUsers",
        "transfer:StartServer",
        "transfer:StopServer",
        "transfer:TagResource",
        "transfer:UntagResource",
        "transfer:UpdateServer"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/transfer:server"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/transfer:server"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "transfer:DeleteAgreement",
         "transfer:DescribeAgreement",
         "transfer:ListTagsForResource",
         "transfer:TagResource",
         "transfer:UntagResource",
         "transfer:UpdateAgreement"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "transfer:DeleteAgreement",
        "transfer:DescribeAgreement",
        "transfer:ListTagsForResource",
        "transfer:TagResource",
        "transfer:UntagResource",
        "transfer:UpdateAgreement"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/transfer:agreement"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/transfer:agreement"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "transfer:DeleteCertificate",
         "transfer:DescribeCertificate",
         "transfer:ListTagsForResource",
         "transfer:TagResource",
         "transfer:UntagResource",
         "transfer:UpdateCertificate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "transfer:DeleteCertificate",
        "transfer:DescribeCertificate",
        "transfer:ListTagsForResource",
        "transfer:TagResource",
        "transfer:UntagResource",
        "transfer:UpdateCertificate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/transfer:certificate"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/transfer:certificate"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "transfer:DeleteConnector",
         "transfer:DescribeConnector",
         "transfer:ListFileTransferResults",
         "transfer:ListTagsForResource",
         "transfer:StartDirectoryListing",
         "transfer:StartFileTransfer",
         "transfer:TagResource",
         "transfer:TestConnection",
         "transfer:UntagResource",
         "transfer:UpdateConnector"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "transfer:DeleteConnector",
        "transfer:DescribeConnector",
        "transfer:ListFileTransferResults",
        "transfer:ListTagsForResource",
        "transfer:StartDirectoryListing",
        "transfer:StartFileTransfer",
        "transfer:TagResource",
        "transfer:TestConnection",
        "transfer:UntagResource",
        "transfer:UpdateConnector"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/transfer:connector"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/transfer:connector"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "transfer:DeleteHostKey",
         "transfer:DescribeHostKey",
         "transfer:ListTagsForResource",
         "transfer:TagResource",
         "transfer:UntagResource",
         "transfer:UpdateHostKey"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "transfer:DeleteHostKey",
        "transfer:DescribeHostKey",
        "transfer:ListTagsForResource",
        "transfer:TagResource",
        "transfer:UntagResource",
        "transfer:UpdateHostKey"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/transfer:host-key"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/transfer:host-key"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "transfer:DeleteProfile",
         "transfer:DescribeProfile",
         "transfer:ListTagsForResource",
         "transfer:TagResource",
         "transfer:UntagResource",
         "transfer:UpdateProfile"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "transfer:DeleteProfile",
        "transfer:DescribeProfile",
        "transfer:ListTagsForResource",
        "transfer:TagResource",
        "transfer:UntagResource",
        "transfer:UpdateProfile"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/transfer:profile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/transfer:profile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "transfer:DeleteSshPublicKey",
         "transfer:DeleteUser",
         "transfer:DescribeUser",
         "transfer:ImportSshPublicKey",
         "transfer:ListTagsForResource",
         "transfer:TagResource",
         "transfer:TestIdentityProvider",
         "transfer:UntagResource",
         "transfer:UpdateUser"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "transfer:DeleteSshPublicKey",
        "transfer:DeleteUser",
        "transfer:DescribeUser",
        "transfer:ImportSshPublicKey",
        "transfer:ListTagsForResource",
        "transfer:TagResource",
        "transfer:TestIdentityProvider",
        "transfer:UntagResource",
        "transfer:UpdateUser"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/transfer:user"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/transfer:user"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "transfer:DeleteWebApp",
         "transfer:DeleteWebAppCustomization",
         "transfer:DescribeWebApp",
         "transfer:DescribeWebAppCustomization",
         "transfer:TagResource",
         "transfer:UntagResource",
         "transfer:UpdateWebApp",
         "transfer:UpdateWebAppCustomization"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "transfer:DeleteWebApp",
        "transfer:DeleteWebAppCustomization",
        "transfer:DescribeWebApp",
        "transfer:DescribeWebAppCustomization",
        "transfer:TagResource",
        "transfer:UntagResource",
        "transfer:UpdateWebApp",
        "transfer:UpdateWebAppCustomization"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/transfer:webapp"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/transfer:webapp"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "transfer:DeleteWorkflow",
         "transfer:DescribeExecution",
         "transfer:DescribeWorkflow",
         "transfer:ListExecutions",
         "transfer:ListTagsForResource",
         "transfer:SendWorkflowStepState",
         "transfer:TagResource",
         "transfer:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "transfer:DeleteWorkflow",
        "transfer:DescribeExecution",
        "transfer:DescribeWorkflow",
        "transfer:ListExecutions",
        "transfer:ListTagsForResource",
        "transfer:SendWorkflowStepState",
        "transfer:TagResource",
        "transfer:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/transfer:workflow"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/transfer:workflow"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "translate:CreateParallelData",
         "translate:DeleteParallelData",
         "translate:GetParallelData",
         "translate:ListTagsForResource",
         "translate:StartTextTranslationJob",
         "translate:TagResource",
         "translate:UntagResource",
         "translate:UpdateParallelData"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "translate:CreateParallelData",
        "translate:DeleteParallelData",
        "translate:GetParallelData",
        "translate:ListTagsForResource",
        "translate:StartTextTranslationJob",
        "translate:TagResource",
        "translate:UntagResource",
        "translate:UpdateParallelData"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/translate:parallel-data"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/translate:parallel-data"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "translate:DeleteTerminology",
         "translate:GetTerminology",
         "translate:ImportTerminology",
         "translate:ListTagsForResource",
         "translate:StartTextTranslationJob",
         "translate:TagResource",
         "translate:TranslateDocument",
         "translate:TranslateText",
         "translate:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "translate:DeleteTerminology",
        "translate:GetTerminology",
        "translate:ImportTerminology",
        "translate:ListTagsForResource",
        "translate:StartTextTranslationJob",
        "translate:TagResource",
        "translate:TranslateDocument",
        "translate:TranslateText",
        "translate:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/translate:terminology"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/translate:terminology"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "trustedadvisor:DescribeCheckItems",
         "trustedadvisor:DescribeCheckRefreshStatuses",
         "trustedadvisor:DescribeCheckStatusHistoryChanges",
         "trustedadvisor:DescribeCheckSummaries",
         "trustedadvisor:ExcludeCheckItems",
         "trustedadvisor:IncludeCheckItems",
         "trustedadvisor:RefreshCheck"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "trustedadvisor:DescribeCheckItems",
        "trustedadvisor:DescribeCheckRefreshStatuses",
        "trustedadvisor:DescribeCheckStatusHistoryChanges",
        "trustedadvisor:DescribeCheckSummaries",
        "trustedadvisor:ExcludeCheckItems",
        "trustedadvisor:IncludeCheckItems",
        "trustedadvisor:RefreshCheck"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/trustedadvisor:checks"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/trustedadvisor:checks"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ts:GetExecution",
         "ts:GetExecutionOutput",
         "ts:ListTagsForResource",
         "ts:TagResource",
         "ts:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ts:GetExecution",
        "ts:GetExecutionOutput",
        "ts:ListTagsForResource",
        "ts:TagResource",
        "ts:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ts:execution"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ts:execution"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "ts:GetTool"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "ts:GetTool"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/ts:tool"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/ts:tool"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "vendor-insights:ActivateSecurityProfile",
         "vendor-insights:AssociateDataSource",
         "vendor-insights:DeactivateSecurityProfile",
         "vendor-insights:DisassociateDataSource",
         "vendor-insights:GetEntitledSecurityProfileSnapshot",
         "vendor-insights:GetSecurityProfile",
         "vendor-insights:GetSecurityProfileSnapshot",
         "vendor-insights:ListEntitledSecurityProfileSnapshots",
         "vendor-insights:ListSecurityProfileSnapshots",
         "vendor-insights:ListTagsForResource",
         "vendor-insights:TagResource",
         "vendor-insights:UntagResource",
         "vendor-insights:UpdateSecurityProfile",
         "vendor-insights:UpdateSecurityProfileSnapshotCreationConfiguration",
         "vendor-insights:UpdateSecurityProfileSnapshotReleaseConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "vendor-insights:ActivateSecurityProfile",
        "vendor-insights:AssociateDataSource",
        "vendor-insights:DeactivateSecurityProfile",
        "vendor-insights:DisassociateDataSource",
        "vendor-insights:GetEntitledSecurityProfileSnapshot",
        "vendor-insights:GetSecurityProfile",
        "vendor-insights:GetSecurityProfileSnapshot",
        "vendor-insights:ListEntitledSecurityProfileSnapshots",
        "vendor-insights:ListSecurityProfileSnapshots",
        "vendor-insights:ListTagsForResource",
        "vendor-insights:TagResource",
        "vendor-insights:UntagResource",
        "vendor-insights:UpdateSecurityProfile",
        "vendor-insights:UpdateSecurityProfileSnapshotCreationConfiguration",
        "vendor-insights:UpdateSecurityProfileSnapshotReleaseConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/vendor-insights:SecurityProfile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/vendor-insights:SecurityProfile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "vendor-insights:DeleteDataSource",
         "vendor-insights:GetDataSource",
         "vendor-insights:ListTagsForResource",
         "vendor-insights:TagResource",
         "vendor-insights:UntagResource",
         "vendor-insights:UpdateDataSource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "vendor-insights:DeleteDataSource",
        "vendor-insights:GetDataSource",
        "vendor-insights:ListTagsForResource",
        "vendor-insights:TagResource",
        "vendor-insights:UntagResource",
        "vendor-insights:UpdateDataSource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/vendor-insights:DataSource"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/vendor-insights:DataSource"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "verifiedpermissions:CreateIdentitySource",
         "verifiedpermissions:CreatePolicy",
         "verifiedpermissions:CreatePolicyTemplate",
         "verifiedpermissions:DeleteIdentitySource",
         "verifiedpermissions:DeletePolicy",
         "verifiedpermissions:DeletePolicyStore",
         "verifiedpermissions:DeletePolicyTemplate",
         "verifiedpermissions:GetIdentitySource",
         "verifiedpermissions:GetPolicy",
         "verifiedpermissions:GetPolicyStore",
         "verifiedpermissions:GetPolicyTemplate",
         "verifiedpermissions:GetSchema",
         "verifiedpermissions:IsAuthorized",
         "verifiedpermissions:IsAuthorizedWithToken",
         "verifiedpermissions:ListIdentitySources",
         "verifiedpermissions:ListPolicies",
         "verifiedpermissions:ListPolicyTemplates",
         "verifiedpermissions:PutSchema",
         "verifiedpermissions:UpdateIdentitySource",
         "verifiedpermissions:UpdatePolicy",
         "verifiedpermissions:UpdatePolicyStore",
         "verifiedpermissions:UpdatePolicyTemplate"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "verifiedpermissions:CreateIdentitySource",
        "verifiedpermissions:CreatePolicy",
        "verifiedpermissions:CreatePolicyTemplate",
        "verifiedpermissions:DeleteIdentitySource",
        "verifiedpermissions:DeletePolicy",
        "verifiedpermissions:DeletePolicyStore",
        "verifiedpermissions:DeletePolicyTemplate",
        "verifiedpermissions:GetIdentitySource",
        "verifiedpermissions:GetPolicy",
        "verifiedpermissions:GetPolicyStore",
        "verifiedpermissions:GetPolicyTemplate",
        "verifiedpermissions:GetSchema",
        "verifiedpermissions:IsAuthorized",
        "verifiedpermissions:IsAuthorizedWithToken",
        "verifiedpermissions:ListIdentitySources",
        "verifiedpermissions:ListPolicies",
        "verifiedpermissions:ListPolicyTemplates",
        "verifiedpermissions:PutSchema",
        "verifiedpermissions:UpdateIdentitySource",
        "verifiedpermissions:UpdatePolicy",
        "verifiedpermissions:UpdatePolicyStore",
        "verifiedpermissions:UpdatePolicyTemplate"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/verifiedpermissions:policy-store"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/verifiedpermissions:policy-store"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "voiceid:AssociateFraudster",
         "voiceid:CreateWatchlist",
         "voiceid:DeleteDomain",
         "voiceid:DeleteFraudster",
         "voiceid:DeleteSpeaker",
         "voiceid:DeleteWatchlist",
         "voiceid:DescribeDomain",
         "voiceid:DescribeFraudster",
         "voiceid:DescribeFraudsterRegistrationJob",
         "voiceid:DescribeSpeaker",
         "voiceid:DescribeSpeakerEnrollmentJob",
         "voiceid:DescribeWatchlist",
         "voiceid:DisassociateFraudster",
         "voiceid:EvaluateSession",
         "voiceid:ListFraudsterRegistrationJobs",
         "voiceid:ListFraudsters",
         "voiceid:ListSpeakerEnrollmentJobs",
         "voiceid:ListSpeakers",
         "voiceid:ListTagsForResource",
         "voiceid:ListWatchlists",
         "voiceid:OptOutSpeaker",
         "voiceid:StartFraudsterRegistrationJob",
         "voiceid:StartSpeakerEnrollmentJob",
         "voiceid:TagResource",
         "voiceid:UntagResource",
         "voiceid:UpdateDomain",
         "voiceid:UpdateWatchlist"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "voiceid:AssociateFraudster",
        "voiceid:CreateWatchlist",
        "voiceid:DeleteDomain",
        "voiceid:DeleteFraudster",
        "voiceid:DeleteSpeaker",
        "voiceid:DeleteWatchlist",
        "voiceid:DescribeDomain",
        "voiceid:DescribeFraudster",
        "voiceid:DescribeFraudsterRegistrationJob",
        "voiceid:DescribeSpeaker",
        "voiceid:DescribeSpeakerEnrollmentJob",
        "voiceid:DescribeWatchlist",
        "voiceid:DisassociateFraudster",
        "voiceid:EvaluateSession",
        "voiceid:ListFraudsterRegistrationJobs",
        "voiceid:ListFraudsters",
        "voiceid:ListSpeakerEnrollmentJobs",
        "voiceid:ListSpeakers",
        "voiceid:ListTagsForResource",
        "voiceid:ListWatchlists",
        "voiceid:OptOutSpeaker",
        "voiceid:StartFraudsterRegistrationJob",
        "voiceid:StartSpeakerEnrollmentJob",
        "voiceid:TagResource",
        "voiceid:UntagResource",
        "voiceid:UpdateDomain",
        "voiceid:UpdateWatchlist"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/voiceid:domain"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/voiceid:domain"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "vpc-lattice:CreateAccessLogSubscription",
         "vpc-lattice:DeleteAccessLogSubscription",
         "vpc-lattice:GetAccessLogSubscription",
         "vpc-lattice:TagResource",
         "vpc-lattice:UntagResource",
         "vpc-lattice:UpdateAccessLogSubscription"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "vpc-lattice:CreateAccessLogSubscription",
        "vpc-lattice:DeleteAccessLogSubscription",
        "vpc-lattice:GetAccessLogSubscription",
        "vpc-lattice:TagResource",
        "vpc-lattice:UntagResource",
        "vpc-lattice:UpdateAccessLogSubscription"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/vpc-lattice:AccessLogSubscription"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/vpc-lattice:AccessLogSubscription"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "vpc-lattice:CreateAccessLogSubscription",
         "vpc-lattice:CreateResourceConfiguration",
         "vpc-lattice:CreateServiceNetworkResourceAssociation",
         "vpc-lattice:DeleteResourceConfiguration",
         "vpc-lattice:DeleteResourcePolicy",
         "vpc-lattice:GetResourceConfiguration",
         "vpc-lattice:GetResourcePolicy",
         "vpc-lattice:PutResourcePolicy",
         "vpc-lattice:TagResource",
         "vpc-lattice:UntagResource",
         "vpc-lattice:UpdateResourceConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "vpc-lattice:CreateAccessLogSubscription",
        "vpc-lattice:CreateResourceConfiguration",
        "vpc-lattice:CreateServiceNetworkResourceAssociation",
        "vpc-lattice:DeleteResourceConfiguration",
        "vpc-lattice:DeleteResourcePolicy",
        "vpc-lattice:GetResourceConfiguration",
        "vpc-lattice:GetResourcePolicy",
        "vpc-lattice:PutResourcePolicy",
        "vpc-lattice:TagResource",
        "vpc-lattice:UntagResource",
        "vpc-lattice:UpdateResourceConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/vpc-lattice:ResourceConfiguration"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/vpc-lattice:ResourceConfiguration"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "vpc-lattice:CreateAccessLogSubscription",
         "vpc-lattice:CreateService",
         "vpc-lattice:CreateServiceNetworkServiceAssociation",
         "vpc-lattice:DeleteAuthPolicy",
         "vpc-lattice:DeleteResourcePolicy",
         "vpc-lattice:DeleteService",
         "vpc-lattice:GetAuthPolicy",
         "vpc-lattice:GetResourcePolicy",
         "vpc-lattice:GetService",
         "vpc-lattice:PutAuthPolicy",
         "vpc-lattice:PutResourcePolicy",
         "vpc-lattice:TagResource",
         "vpc-lattice:UntagResource",
         "vpc-lattice:UpdateService"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "vpc-lattice:CreateAccessLogSubscription",
        "vpc-lattice:CreateService",
        "vpc-lattice:CreateServiceNetworkServiceAssociation",
        "vpc-lattice:DeleteAuthPolicy",
        "vpc-lattice:DeleteResourcePolicy",
        "vpc-lattice:DeleteService",
        "vpc-lattice:GetAuthPolicy",
        "vpc-lattice:GetResourcePolicy",
        "vpc-lattice:GetService",
        "vpc-lattice:PutAuthPolicy",
        "vpc-lattice:PutResourcePolicy",
        "vpc-lattice:TagResource",
        "vpc-lattice:UntagResource",
        "vpc-lattice:UpdateService"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/vpc-lattice:Service"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/vpc-lattice:Service"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "vpc-lattice:CreateAccessLogSubscription",
         "vpc-lattice:CreateServiceNetwork",
         "vpc-lattice:CreateServiceNetworkResourceAssociation",
         "vpc-lattice:CreateServiceNetworkServiceAssociation",
         "vpc-lattice:CreateServiceNetworkVpcAssociation",
         "vpc-lattice:DeleteAuthPolicy",
         "vpc-lattice:DeleteResourcePolicy",
         "vpc-lattice:DeleteServiceNetwork",
         "vpc-lattice:GetAuthPolicy",
         "vpc-lattice:GetResourcePolicy",
         "vpc-lattice:GetServiceNetwork",
         "vpc-lattice:PutAuthPolicy",
         "vpc-lattice:PutResourcePolicy",
         "vpc-lattice:TagResource",
         "vpc-lattice:UntagResource",
         "vpc-lattice:UpdateServiceNetwork"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "vpc-lattice:CreateAccessLogSubscription",
        "vpc-lattice:CreateServiceNetwork",
        "vpc-lattice:CreateServiceNetworkResourceAssociation",
        "vpc-lattice:CreateServiceNetworkServiceAssociation",
        "vpc-lattice:CreateServiceNetworkVpcAssociation",
        "vpc-lattice:DeleteAuthPolicy",
        "vpc-lattice:DeleteResourcePolicy",
        "vpc-lattice:DeleteServiceNetwork",
        "vpc-lattice:GetAuthPolicy",
        "vpc-lattice:GetResourcePolicy",
        "vpc-lattice:GetServiceNetwork",
        "vpc-lattice:PutAuthPolicy",
        "vpc-lattice:PutResourcePolicy",
        "vpc-lattice:TagResource",
        "vpc-lattice:UntagResource",
        "vpc-lattice:UpdateServiceNetwork"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/vpc-lattice:ServiceNetwork"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/vpc-lattice:ServiceNetwork"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "vpc-lattice:CreateListener",
         "vpc-lattice:DeleteListener",
         "vpc-lattice:GetListener",
         "vpc-lattice:TagResource",
         "vpc-lattice:UntagResource",
         "vpc-lattice:UpdateListener"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "vpc-lattice:CreateListener",
        "vpc-lattice:DeleteListener",
        "vpc-lattice:GetListener",
        "vpc-lattice:TagResource",
        "vpc-lattice:UntagResource",
        "vpc-lattice:UpdateListener"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/vpc-lattice:Listener"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/vpc-lattice:Listener"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "vpc-lattice:CreateResourceConfiguration",
         "vpc-lattice:CreateResourceGateway",
         "vpc-lattice:DeleteResourceGateway",
         "vpc-lattice:GetResourceGateway",
         "vpc-lattice:TagResource",
         "vpc-lattice:UntagResource",
         "vpc-lattice:UpdateResourceGateway"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "vpc-lattice:CreateResourceConfiguration",
        "vpc-lattice:CreateResourceGateway",
        "vpc-lattice:DeleteResourceGateway",
        "vpc-lattice:GetResourceGateway",
        "vpc-lattice:TagResource",
        "vpc-lattice:UntagResource",
        "vpc-lattice:UpdateResourceGateway"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/vpc-lattice:ResourceGateway"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/vpc-lattice:ResourceGateway"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "vpc-lattice:CreateRule",
         "vpc-lattice:DeleteRule",
         "vpc-lattice:GetRule",
         "vpc-lattice:TagResource",
         "vpc-lattice:UntagResource",
         "vpc-lattice:UpdateRule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "vpc-lattice:CreateRule",
        "vpc-lattice:DeleteRule",
        "vpc-lattice:GetRule",
        "vpc-lattice:TagResource",
        "vpc-lattice:UntagResource",
        "vpc-lattice:UpdateRule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/vpc-lattice:Rule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/vpc-lattice:Rule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "vpc-lattice:CreateServiceNetworkResourceAssociation",
         "vpc-lattice:DeleteServiceNetworkResourceAssociation",
         "vpc-lattice:GetServiceNetworkResourceAssociation",
         "vpc-lattice:TagResource",
         "vpc-lattice:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "vpc-lattice:CreateServiceNetworkResourceAssociation",
        "vpc-lattice:DeleteServiceNetworkResourceAssociation",
        "vpc-lattice:GetServiceNetworkResourceAssociation",
        "vpc-lattice:TagResource",
        "vpc-lattice:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/vpc-lattice:ServiceNetworkResourceAssociation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/vpc-lattice:ServiceNetworkResourceAssociation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "vpc-lattice:CreateServiceNetworkServiceAssociation",
         "vpc-lattice:DeleteServiceNetworkServiceAssociation",
         "vpc-lattice:GetServiceNetworkServiceAssociation",
         "vpc-lattice:TagResource",
         "vpc-lattice:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "vpc-lattice:CreateServiceNetworkServiceAssociation",
        "vpc-lattice:DeleteServiceNetworkServiceAssociation",
        "vpc-lattice:GetServiceNetworkServiceAssociation",
        "vpc-lattice:TagResource",
        "vpc-lattice:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/vpc-lattice:ServiceNetworkServiceAssociation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/vpc-lattice:ServiceNetworkServiceAssociation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "vpc-lattice:CreateServiceNetworkVpcAssociation",
         "vpc-lattice:DeleteServiceNetworkVpcAssociation",
         "vpc-lattice:GetServiceNetworkVpcAssociation",
         "vpc-lattice:TagResource",
         "vpc-lattice:UntagResource",
         "vpc-lattice:UpdateServiceNetworkVpcAssociation"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "vpc-lattice:CreateServiceNetworkVpcAssociation",
        "vpc-lattice:DeleteServiceNetworkVpcAssociation",
        "vpc-lattice:GetServiceNetworkVpcAssociation",
        "vpc-lattice:TagResource",
        "vpc-lattice:UntagResource",
        "vpc-lattice:UpdateServiceNetworkVpcAssociation"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/vpc-lattice:ServiceNetworkVpcAssociation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/vpc-lattice:ServiceNetworkVpcAssociation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "vpc-lattice:CreateTargetGroup",
         "vpc-lattice:DeleteTargetGroup",
         "vpc-lattice:DeregisterTargets",
         "vpc-lattice:GetTargetGroup",
         "vpc-lattice:ListTargets",
         "vpc-lattice:RegisterTargets",
         "vpc-lattice:TagResource",
         "vpc-lattice:UntagResource",
         "vpc-lattice:UpdateTargetGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "vpc-lattice:CreateTargetGroup",
        "vpc-lattice:DeleteTargetGroup",
        "vpc-lattice:DeregisterTargets",
        "vpc-lattice:GetTargetGroup",
        "vpc-lattice:ListTargets",
        "vpc-lattice:RegisterTargets",
        "vpc-lattice:TagResource",
        "vpc-lattice:UntagResource",
        "vpc-lattice:UpdateTargetGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/vpc-lattice:TargetGroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/vpc-lattice:TargetGroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "vpc-lattice:DeleteResourceEndpointAssociation",
         "vpc-lattice:TagResource",
         "vpc-lattice:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "vpc-lattice:DeleteResourceEndpointAssociation",
        "vpc-lattice:TagResource",
        "vpc-lattice:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/vpc-lattice:ResourceEndpointAssociation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/vpc-lattice:ResourceEndpointAssociation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "vpc-lattice-svcs:Connect"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "vpc-lattice-svcs:Connect"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/vpc-lattice-svcs:TCP Service"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/vpc-lattice-svcs:TCP Service"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "vpc-lattice-svcs:Invoke"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "vpc-lattice-svcs:Invoke"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/vpc-lattice-svcs:Service"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/vpc-lattice-svcs:Service"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "waf:CreateByteMatchSet",
         "waf:DeleteByteMatchSet",
         "waf:GetByteMatchSet",
         "waf:UpdateByteMatchSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "waf:CreateByteMatchSet",
        "waf:DeleteByteMatchSet",
        "waf:GetByteMatchSet",
        "waf:UpdateByteMatchSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/waf:bytematchset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/waf:bytematchset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "waf:CreateGeoMatchSet",
         "waf:DeleteGeoMatchSet",
         "waf:GetGeoMatchSet",
         "waf:UpdateGeoMatchSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "waf:CreateGeoMatchSet",
        "waf:DeleteGeoMatchSet",
        "waf:GetGeoMatchSet",
        "waf:UpdateGeoMatchSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/waf:geomatchset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/waf:geomatchset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "waf:CreateIPSet",
         "waf:DeleteIPSet",
         "waf:GetIPSet",
         "waf:UpdateIPSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "waf:CreateIPSet",
        "waf:DeleteIPSet",
        "waf:GetIPSet",
        "waf:UpdateIPSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/waf:ipset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/waf:ipset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "waf:CreateRateBasedRule",
         "waf:DeleteRateBasedRule",
         "waf:GetRateBasedRule",
         "waf:GetRateBasedRuleManagedKeys",
         "waf:ListTagsForResource",
         "waf:TagResource",
         "waf:UntagResource",
         "waf:UpdateRateBasedRule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "waf:CreateRateBasedRule",
        "waf:DeleteRateBasedRule",
        "waf:GetRateBasedRule",
        "waf:GetRateBasedRuleManagedKeys",
        "waf:ListTagsForResource",
        "waf:TagResource",
        "waf:UntagResource",
        "waf:UpdateRateBasedRule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/waf:ratebasedrule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/waf:ratebasedrule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "waf:CreateRegexMatchSet",
         "waf:DeleteRegexMatchSet",
         "waf:GetRegexMatchSet",
         "waf:UpdateRegexMatchSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "waf:CreateRegexMatchSet",
        "waf:DeleteRegexMatchSet",
        "waf:GetRegexMatchSet",
        "waf:UpdateRegexMatchSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/waf:regexmatchset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/waf:regexmatchset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "waf:CreateRegexPatternSet",
         "waf:DeleteRegexPatternSet",
         "waf:GetRegexPatternSet",
         "waf:UpdateRegexPatternSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "waf:CreateRegexPatternSet",
        "waf:DeleteRegexPatternSet",
        "waf:GetRegexPatternSet",
        "waf:UpdateRegexPatternSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/waf:regexpatternset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/waf:regexpatternset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "waf:CreateRule",
         "waf:DeleteRule",
         "waf:GetRule",
         "waf:ListTagsForResource",
         "waf:TagResource",
         "waf:UntagResource",
         "waf:UpdateRule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "waf:CreateRule",
        "waf:DeleteRule",
        "waf:GetRule",
        "waf:ListTagsForResource",
        "waf:TagResource",
        "waf:UntagResource",
        "waf:UpdateRule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/waf:rule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/waf:rule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "waf:CreateRuleGroup",
         "waf:DeletePermissionPolicy",
         "waf:DeleteRuleGroup",
         "waf:GetPermissionPolicy",
         "waf:GetRuleGroup",
         "waf:ListTagsForResource",
         "waf:PutPermissionPolicy",
         "waf:TagResource",
         "waf:UntagResource",
         "waf:UpdateRuleGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "waf:CreateRuleGroup",
        "waf:DeletePermissionPolicy",
        "waf:DeleteRuleGroup",
        "waf:GetPermissionPolicy",
        "waf:GetRuleGroup",
        "waf:ListTagsForResource",
        "waf:PutPermissionPolicy",
        "waf:TagResource",
        "waf:UntagResource",
        "waf:UpdateRuleGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/waf:rulegroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/waf:rulegroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "waf:CreateSizeConstraintSet",
         "waf:DeleteSizeConstraintSet",
         "waf:GetSizeConstraintSet",
         "waf:UpdateSizeConstraintSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "waf:CreateSizeConstraintSet",
        "waf:DeleteSizeConstraintSet",
        "waf:GetSizeConstraintSet",
        "waf:UpdateSizeConstraintSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/waf:sizeconstraintset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/waf:sizeconstraintset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "waf:CreateSqlInjectionMatchSet",
         "waf:DeleteSqlInjectionMatchSet",
         "waf:GetSqlInjectionMatchSet",
         "waf:UpdateSqlInjectionMatchSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "waf:CreateSqlInjectionMatchSet",
        "waf:DeleteSqlInjectionMatchSet",
        "waf:GetSqlInjectionMatchSet",
        "waf:UpdateSqlInjectionMatchSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/waf:sqlinjectionmatchset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/waf:sqlinjectionmatchset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "waf:CreateWebACL",
         "waf:CreateWebACLMigrationStack",
         "waf:DeleteLoggingConfiguration",
         "waf:DeleteWebACL",
         "waf:GetLoggingConfiguration",
         "waf:GetSampledRequests",
         "waf:GetWebACL",
         "waf:ListTagsForResource",
         "waf:PutLoggingConfiguration",
         "waf:TagResource",
         "waf:UntagResource",
         "waf:UpdateWebACL"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "waf:CreateWebACL",
        "waf:CreateWebACLMigrationStack",
        "waf:DeleteLoggingConfiguration",
        "waf:DeleteWebACL",
        "waf:GetLoggingConfiguration",
        "waf:GetSampledRequests",
        "waf:GetWebACL",
        "waf:ListTagsForResource",
        "waf:PutLoggingConfiguration",
        "waf:TagResource",
        "waf:UntagResource",
        "waf:UpdateWebACL"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/waf:webacl"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/waf:webacl"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "waf:CreateXssMatchSet",
         "waf:DeleteXssMatchSet",
         "waf:GetXssMatchSet",
         "waf:UpdateXssMatchSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "waf:CreateXssMatchSet",
        "waf:DeleteXssMatchSet",
        "waf:GetXssMatchSet",
        "waf:UpdateXssMatchSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/waf:xssmatchset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/waf:xssmatchset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "waf-regional:AssociateWebACL",
         "waf-regional:DisassociateWebACL",
         "waf-regional:GetWebACLForResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "waf-regional:AssociateWebACL",
        "waf-regional:DisassociateWebACL",
        "waf-regional:GetWebACLForResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/waf-regional:loadbalancer/app/"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/waf-regional:loadbalancer/app/"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "waf-regional:AssociateWebACL",
         "waf-regional:CreateWebACL",
         "waf-regional:CreateWebACLMigrationStack",
         "waf-regional:DeleteLoggingConfiguration",
         "waf-regional:DeleteWebACL",
         "waf-regional:GetLoggingConfiguration",
         "waf-regional:GetSampledRequests",
         "waf-regional:GetWebACL",
         "waf-regional:ListResourcesForWebACL",
         "waf-regional:ListTagsForResource",
         "waf-regional:PutLoggingConfiguration",
         "waf-regional:TagResource",
         "waf-regional:UntagResource",
         "waf-regional:UpdateWebACL"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "waf-regional:AssociateWebACL",
        "waf-regional:CreateWebACL",
        "waf-regional:CreateWebACLMigrationStack",
        "waf-regional:DeleteLoggingConfiguration",
        "waf-regional:DeleteWebACL",
        "waf-regional:GetLoggingConfiguration",
        "waf-regional:GetSampledRequests",
        "waf-regional:GetWebACL",
        "waf-regional:ListResourcesForWebACL",
        "waf-regional:ListTagsForResource",
        "waf-regional:PutLoggingConfiguration",
        "waf-regional:TagResource",
        "waf-regional:UntagResource",
        "waf-regional:UpdateWebACL"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/waf-regional:webacl"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/waf-regional:webacl"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "waf-regional:CreateByteMatchSet",
         "waf-regional:DeleteByteMatchSet",
         "waf-regional:GetByteMatchSet",
         "waf-regional:UpdateByteMatchSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "waf-regional:CreateByteMatchSet",
        "waf-regional:DeleteByteMatchSet",
        "waf-regional:GetByteMatchSet",
        "waf-regional:UpdateByteMatchSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/waf-regional:bytematchset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/waf-regional:bytematchset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "waf-regional:CreateGeoMatchSet",
         "waf-regional:DeleteGeoMatchSet",
         "waf-regional:GetGeoMatchSet",
         "waf-regional:UpdateGeoMatchSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "waf-regional:CreateGeoMatchSet",
        "waf-regional:DeleteGeoMatchSet",
        "waf-regional:GetGeoMatchSet",
        "waf-regional:UpdateGeoMatchSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/waf-regional:geomatchset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/waf-regional:geomatchset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "waf-regional:CreateIPSet",
         "waf-regional:DeleteIPSet",
         "waf-regional:GetIPSet",
         "waf-regional:UpdateIPSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "waf-regional:CreateIPSet",
        "waf-regional:DeleteIPSet",
        "waf-regional:GetIPSet",
        "waf-regional:UpdateIPSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/waf-regional:ipset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/waf-regional:ipset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "waf-regional:CreateRateBasedRule",
         "waf-regional:DeleteRateBasedRule",
         "waf-regional:GetRateBasedRule",
         "waf-regional:GetRateBasedRuleManagedKeys",
         "waf-regional:ListTagsForResource",
         "waf-regional:TagResource",
         "waf-regional:UntagResource",
         "waf-regional:UpdateRateBasedRule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "waf-regional:CreateRateBasedRule",
        "waf-regional:DeleteRateBasedRule",
        "waf-regional:GetRateBasedRule",
        "waf-regional:GetRateBasedRuleManagedKeys",
        "waf-regional:ListTagsForResource",
        "waf-regional:TagResource",
        "waf-regional:UntagResource",
        "waf-regional:UpdateRateBasedRule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/waf-regional:ratebasedrule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/waf-regional:ratebasedrule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "waf-regional:CreateRegexMatchSet",
         "waf-regional:DeleteRegexMatchSet",
         "waf-regional:GetRegexMatchSet",
         "waf-regional:UpdateRegexMatchSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "waf-regional:CreateRegexMatchSet",
        "waf-regional:DeleteRegexMatchSet",
        "waf-regional:GetRegexMatchSet",
        "waf-regional:UpdateRegexMatchSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/waf-regional:regexmatchset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/waf-regional:regexmatchset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "waf-regional:CreateRegexPatternSet",
         "waf-regional:DeleteRegexPatternSet",
         "waf-regional:GetRegexPatternSet",
         "waf-regional:UpdateRegexPatternSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "waf-regional:CreateRegexPatternSet",
        "waf-regional:DeleteRegexPatternSet",
        "waf-regional:GetRegexPatternSet",
        "waf-regional:UpdateRegexPatternSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/waf-regional:regexpatternset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/waf-regional:regexpatternset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "waf-regional:CreateRule",
         "waf-regional:DeleteRule",
         "waf-regional:GetRule",
         "waf-regional:ListTagsForResource",
         "waf-regional:TagResource",
         "waf-regional:UntagResource",
         "waf-regional:UpdateRule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "waf-regional:CreateRule",
        "waf-regional:DeleteRule",
        "waf-regional:GetRule",
        "waf-regional:ListTagsForResource",
        "waf-regional:TagResource",
        "waf-regional:UntagResource",
        "waf-regional:UpdateRule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/waf-regional:rule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/waf-regional:rule"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "waf-regional:CreateRuleGroup",
         "waf-regional:DeletePermissionPolicy",
         "waf-regional:DeleteRuleGroup",
         "waf-regional:GetPermissionPolicy",
         "waf-regional:GetRuleGroup",
         "waf-regional:ListTagsForResource",
         "waf-regional:PutPermissionPolicy",
         "waf-regional:TagResource",
         "waf-regional:UntagResource",
         "waf-regional:UpdateRuleGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "waf-regional:CreateRuleGroup",
        "waf-regional:DeletePermissionPolicy",
        "waf-regional:DeleteRuleGroup",
        "waf-regional:GetPermissionPolicy",
        "waf-regional:GetRuleGroup",
        "waf-regional:ListTagsForResource",
        "waf-regional:PutPermissionPolicy",
        "waf-regional:TagResource",
        "waf-regional:UntagResource",
        "waf-regional:UpdateRuleGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/waf-regional:rulegroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/waf-regional:rulegroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "waf-regional:CreateSizeConstraintSet",
         "waf-regional:DeleteSizeConstraintSet",
         "waf-regional:GetSizeConstraintSet",
         "waf-regional:UpdateSizeConstraintSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "waf-regional:CreateSizeConstraintSet",
        "waf-regional:DeleteSizeConstraintSet",
        "waf-regional:GetSizeConstraintSet",
        "waf-regional:UpdateSizeConstraintSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/waf-regional:sizeconstraintset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/waf-regional:sizeconstraintset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "waf-regional:CreateSqlInjectionMatchSet",
         "waf-regional:DeleteSqlInjectionMatchSet",
         "waf-regional:GetSqlInjectionMatchSet",
         "waf-regional:UpdateSqlInjectionMatchSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "waf-regional:CreateSqlInjectionMatchSet",
        "waf-regional:DeleteSqlInjectionMatchSet",
        "waf-regional:GetSqlInjectionMatchSet",
        "waf-regional:UpdateSqlInjectionMatchSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/waf-regional:sqlinjectionmatchset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/waf-regional:sqlinjectionmatchset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "waf-regional:CreateXssMatchSet",
         "waf-regional:DeleteXssMatchSet",
         "waf-regional:GetXssMatchSet",
         "waf-regional:UpdateXssMatchSet"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "waf-regional:CreateXssMatchSet",
        "waf-regional:DeleteXssMatchSet",
        "waf-regional:GetXssMatchSet",
        "waf-regional:UpdateXssMatchSet"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/waf-regional:xssmatchset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/waf-regional:xssmatchset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "wafv2:AssociateWebACL",
         "wafv2:DisassociateWebACL",
         "wafv2:GetWebACLForResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "wafv2:AssociateWebACL",
        "wafv2:DisassociateWebACL",
        "wafv2:GetWebACLForResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/wafv2:apigateway"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/wafv2:apigateway"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "wafv2:AssociateWebACL",
         "wafv2:DisassociateWebACL",
         "wafv2:GetWebACLForResource",
         "wafv2:ListResourcesForWebACL"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "wafv2:AssociateWebACL",
        "wafv2:DisassociateWebACL",
        "wafv2:GetWebACLForResource",
        "wafv2:ListResourcesForWebACL"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/wafv2:apprunner"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/wafv2:apprunner"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "wafv2:AssociateWebACL",
         "wafv2:DisassociateWebACL",
         "wafv2:GetWebACLForResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "wafv2:AssociateWebACL",
        "wafv2:DisassociateWebACL",
        "wafv2:GetWebACLForResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/wafv2:appsync"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/wafv2:appsync"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "wafv2:AssociateWebACL",
         "wafv2:DisassociateWebACL",
         "wafv2:GetWebACLForResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "wafv2:AssociateWebACL",
        "wafv2:DisassociateWebACL",
        "wafv2:GetWebACLForResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/wafv2:loadbalancer/app/"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/wafv2:loadbalancer/app/"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "wafv2:AssociateWebACL",
         "wafv2:DisassociateWebACL",
         "wafv2:GetWebACLForResource",
         "wafv2:ListResourcesForWebACL"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "wafv2:AssociateWebACL",
        "wafv2:DisassociateWebACL",
        "wafv2:GetWebACLForResource",
        "wafv2:ListResourcesForWebACL"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/wafv2:userpool"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/wafv2:userpool"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "wafv2:AssociateWebACL",
         "wafv2:DisassociateWebACL",
         "wafv2:GetWebACLForResource",
         "wafv2:ListResourcesForWebACL"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "wafv2:AssociateWebACL",
        "wafv2:DisassociateWebACL",
        "wafv2:GetWebACLForResource",
        "wafv2:ListResourcesForWebACL"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/wafv2:verified-access-instance"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/wafv2:verified-access-instance"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "wafv2:AssociateWebACL",
         "wafv2:CreateWebACL",
         "wafv2:DeleteFirewallManagerRuleGroups",
         "wafv2:DeleteLoggingConfiguration",
         "wafv2:DeleteWebACL",
         "wafv2:DisassociateFirewallManager",
         "wafv2:GetLoggingConfiguration",
         "wafv2:GetRateBasedStatementManagedKeys",
         "wafv2:GetSampledRequests",
         "wafv2:GetWebACL",
         "wafv2:GetWebACLForResource",
         "wafv2:ListResourcesForWebACL",
         "wafv2:ListTagsForResource",
         "wafv2:PutFirewallManagerRuleGroups",
         "wafv2:PutLoggingConfiguration",
         "wafv2:TagResource",
         "wafv2:UntagResource",
         "wafv2:UpdateWebACL"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "wafv2:AssociateWebACL",
        "wafv2:CreateWebACL",
        "wafv2:DeleteFirewallManagerRuleGroups",
        "wafv2:DeleteLoggingConfiguration",
        "wafv2:DeleteWebACL",
        "wafv2:DisassociateFirewallManager",
        "wafv2:GetLoggingConfiguration",
        "wafv2:GetRateBasedStatementManagedKeys",
        "wafv2:GetSampledRequests",
        "wafv2:GetWebACL",
        "wafv2:GetWebACLForResource",
        "wafv2:ListResourcesForWebACL",
        "wafv2:ListTagsForResource",
        "wafv2:PutFirewallManagerRuleGroups",
        "wafv2:PutLoggingConfiguration",
        "wafv2:TagResource",
        "wafv2:UntagResource",
        "wafv2:UpdateWebACL"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/wafv2:webacl"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/wafv2:webacl"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "wafv2:CreateIPSet",
         "wafv2:CreateRuleGroup",
         "wafv2:CreateWebACL",
         "wafv2:DeleteIPSet",
         "wafv2:GetIPSet",
         "wafv2:ListTagsForResource",
         "wafv2:TagResource",
         "wafv2:UntagResource",
         "wafv2:UpdateIPSet",
         "wafv2:UpdateRuleGroup",
         "wafv2:UpdateWebACL"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "wafv2:CreateIPSet",
        "wafv2:CreateRuleGroup",
        "wafv2:CreateWebACL",
        "wafv2:DeleteIPSet",
        "wafv2:GetIPSet",
        "wafv2:ListTagsForResource",
        "wafv2:TagResource",
        "wafv2:UntagResource",
        "wafv2:UpdateIPSet",
        "wafv2:UpdateRuleGroup",
        "wafv2:UpdateWebACL"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/wafv2:ipset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/wafv2:ipset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "wafv2:CreateRegexPatternSet",
         "wafv2:CreateRuleGroup",
         "wafv2:CreateWebACL",
         "wafv2:DeleteRegexPatternSet",
         "wafv2:GetRegexPatternSet",
         "wafv2:ListTagsForResource",
         "wafv2:TagResource",
         "wafv2:UntagResource",
         "wafv2:UpdateRegexPatternSet",
         "wafv2:UpdateRuleGroup",
         "wafv2:UpdateWebACL"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "wafv2:CreateRegexPatternSet",
        "wafv2:CreateRuleGroup",
        "wafv2:CreateWebACL",
        "wafv2:DeleteRegexPatternSet",
        "wafv2:GetRegexPatternSet",
        "wafv2:ListTagsForResource",
        "wafv2:TagResource",
        "wafv2:UntagResource",
        "wafv2:UpdateRegexPatternSet",
        "wafv2:UpdateRuleGroup",
        "wafv2:UpdateWebACL"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/wafv2:regexpatternset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/wafv2:regexpatternset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "wafv2:CreateRuleGroup",
         "wafv2:CreateWebACL",
         "wafv2:DeletePermissionPolicy",
         "wafv2:DeleteRuleGroup",
         "wafv2:GetPermissionPolicy",
         "wafv2:GetRuleGroup",
         "wafv2:ListTagsForResource",
         "wafv2:PutManagedRuleSetVersions",
         "wafv2:PutPermissionPolicy",
         "wafv2:TagResource",
         "wafv2:UntagResource",
         "wafv2:UpdateRuleGroup",
         "wafv2:UpdateWebACL"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "wafv2:CreateRuleGroup",
        "wafv2:CreateWebACL",
        "wafv2:DeletePermissionPolicy",
        "wafv2:DeleteRuleGroup",
        "wafv2:GetPermissionPolicy",
        "wafv2:GetRuleGroup",
        "wafv2:ListTagsForResource",
        "wafv2:PutManagedRuleSetVersions",
        "wafv2:PutPermissionPolicy",
        "wafv2:TagResource",
        "wafv2:UntagResource",
        "wafv2:UpdateRuleGroup",
        "wafv2:UpdateWebACL"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/wafv2:rulegroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/wafv2:rulegroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "wafv2:CreateWebACL",
         "wafv2:GetManagedRuleSet",
         "wafv2:PutManagedRuleSetVersions",
         "wafv2:UpdateManagedRuleSetVersionExpiryDate",
         "wafv2:UpdateWebACL"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "wafv2:CreateWebACL",
        "wafv2:GetManagedRuleSet",
        "wafv2:PutManagedRuleSetVersions",
        "wafv2:UpdateManagedRuleSetVersionExpiryDate",
        "wafv2:UpdateWebACL"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/wafv2:managedruleset"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/wafv2:managedruleset"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "wellarchitected:AssociateLenses",
         "wellarchitected:AssociateProfiles",
         "wellarchitected:CreateMilestone",
         "wellarchitected:CreateWorkloadShare",
         "wellarchitected:DeleteWorkload",
         "wellarchitected:DeleteWorkloadShare",
         "wellarchitected:DisassociateLenses",
         "wellarchitected:DisassociateProfiles",
         "wellarchitected:GetAnswer",
         "wellarchitected:GetLensReview",
         "wellarchitected:GetLensReviewReport",
         "wellarchitected:GetMilestone",
         "wellarchitected:GetWorkload",
         "wellarchitected:ListAnswers",
         "wellarchitected:ListCheckDetails",
         "wellarchitected:ListCheckSummaries",
         "wellarchitected:ListLensReviewImprovements",
         "wellarchitected:ListLensReviews",
         "wellarchitected:ListMilestones",
         "wellarchitected:ListTagsForResource",
         "wellarchitected:ListWorkloadShares",
         "wellarchitected:TagResource",
         "wellarchitected:UntagResource",
         "wellarchitected:UpdateAnswer",
         "wellarchitected:UpdateIntegration",
         "wellarchitected:UpdateLensReview",
         "wellarchitected:UpdateWorkload",
         "wellarchitected:UpdateWorkloadShare",
         "wellarchitected:UpgradeLensReview",
         "wellarchitected:UpgradeProfileVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "wellarchitected:AssociateLenses",
        "wellarchitected:AssociateProfiles",
        "wellarchitected:CreateMilestone",
        "wellarchitected:CreateWorkloadShare",
        "wellarchitected:DeleteWorkload",
        "wellarchitected:DeleteWorkloadShare",
        "wellarchitected:DisassociateLenses",
        "wellarchitected:DisassociateProfiles",
        "wellarchitected:GetAnswer",
        "wellarchitected:GetLensReview",
        "wellarchitected:GetLensReviewReport",
        "wellarchitected:GetMilestone",
        "wellarchitected:GetWorkload",
        "wellarchitected:ListAnswers",
        "wellarchitected:ListCheckDetails",
        "wellarchitected:ListCheckSummaries",
        "wellarchitected:ListLensReviewImprovements",
        "wellarchitected:ListLensReviews",
        "wellarchitected:ListMilestones",
        "wellarchitected:ListTagsForResource",
        "wellarchitected:ListWorkloadShares",
        "wellarchitected:TagResource",
        "wellarchitected:UntagResource",
        "wellarchitected:UpdateAnswer",
        "wellarchitected:UpdateIntegration",
        "wellarchitected:UpdateLensReview",
        "wellarchitected:UpdateWorkload",
        "wellarchitected:UpdateWorkloadShare",
        "wellarchitected:UpgradeLensReview",
        "wellarchitected:UpgradeProfileVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/wellarchitected:workload"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/wellarchitected:workload"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "wellarchitected:CreateLensShare",
         "wellarchitected:CreateLensVersion",
         "wellarchitected:DeleteLens",
         "wellarchitected:DeleteLensShare",
         "wellarchitected:ExportLens",
         "wellarchitected:GetLens",
         "wellarchitected:GetLensVersionDifference",
         "wellarchitected:ListLensShares",
         "wellarchitected:ListTagsForResource",
         "wellarchitected:TagResource",
         "wellarchitected:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "wellarchitected:CreateLensShare",
        "wellarchitected:CreateLensVersion",
        "wellarchitected:DeleteLens",
        "wellarchitected:DeleteLensShare",
        "wellarchitected:ExportLens",
        "wellarchitected:GetLens",
        "wellarchitected:GetLensVersionDifference",
        "wellarchitected:ListLensShares",
        "wellarchitected:ListTagsForResource",
        "wellarchitected:TagResource",
        "wellarchitected:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/wellarchitected:lens"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/wellarchitected:lens"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "wellarchitected:CreateProfileShare",
         "wellarchitected:DeleteProfile",
         "wellarchitected:DeleteProfileShare",
         "wellarchitected:GetProfile",
         "wellarchitected:ListProfileShares",
         "wellarchitected:ListTagsForResource",
         "wellarchitected:TagResource",
         "wellarchitected:UntagResource",
         "wellarchitected:UpdateProfile",
         "wellarchitected:UpgradeProfileVersion"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "wellarchitected:CreateProfileShare",
        "wellarchitected:DeleteProfile",
        "wellarchitected:DeleteProfileShare",
        "wellarchitected:GetProfile",
        "wellarchitected:ListProfileShares",
        "wellarchitected:ListTagsForResource",
        "wellarchitected:TagResource",
        "wellarchitected:UntagResource",
        "wellarchitected:UpdateProfile",
        "wellarchitected:UpgradeProfileVersion"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/wellarchitected:profile"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/wellarchitected:profile"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "wellarchitected:CreateTemplateShare",
         "wellarchitected:DeleteReviewTemplate",
         "wellarchitected:DeleteTemplateShare",
         "wellarchitected:GetReviewTemplate",
         "wellarchitected:GetReviewTemplateAnswer",
         "wellarchitected:GetReviewTemplateLensReview",
         "wellarchitected:ListReviewTemplateAnswers",
         "wellarchitected:ListTagsForResource",
         "wellarchitected:ListTemplateShares",
         "wellarchitected:TagResource",
         "wellarchitected:UntagResource",
         "wellarchitected:UpdateReviewTemplate",
         "wellarchitected:UpdateReviewTemplateAnswer",
         "wellarchitected:UpdateReviewTemplateLensReview",
         "wellarchitected:UpgradeReviewTemplateLensReview"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "wellarchitected:CreateTemplateShare",
        "wellarchitected:DeleteReviewTemplate",
        "wellarchitected:DeleteTemplateShare",
        "wellarchitected:GetReviewTemplate",
        "wellarchitected:GetReviewTemplateAnswer",
        "wellarchitected:GetReviewTemplateLensReview",
        "wellarchitected:ListReviewTemplateAnswers",
        "wellarchitected:ListTagsForResource",
        "wellarchitected:ListTemplateShares",
        "wellarchitected:TagResource",
        "wellarchitected:UntagResource",
        "wellarchitected:UpdateReviewTemplate",
        "wellarchitected:UpdateReviewTemplateAnswer",
        "wellarchitected:UpdateReviewTemplateLensReview",
        "wellarchitected:UpgradeReviewTemplateLensReview"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/wellarchitected:review-template"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/wellarchitected:review-template"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "wickr:CreateAdminSession",
         "wickr:TagResource",
         "wickr:UntagResource",
         "wickr:UpdateNetworkDetails"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "wickr:CreateAdminSession",
        "wickr:TagResource",
        "wickr:UntagResource",
        "wickr:UpdateNetworkDetails"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/wickr:network"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/wickr:network"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "wisdom:ActivateMessageTemplate",
         "wisdom:CreateContent",
         "wisdom:CreateContentAssociation",
         "wisdom:CreateMessageTemplate",
         "wisdom:CreateMessageTemplateAttachment",
         "wisdom:CreateMessageTemplateVersion",
         "wisdom:DeactivateMessageTemplate",
         "wisdom:DeleteContent",
         "wisdom:DeleteContentAssociation",
         "wisdom:DeleteImportJob",
         "wisdom:DeleteKnowledgeBase",
         "wisdom:DeleteMessageTemplate",
         "wisdom:DeleteMessageTemplateAttachment",
         "wisdom:DeleteQuickResponse",
         "wisdom:GetContent",
         "wisdom:GetContentAssociation",
         "wisdom:GetContentSummary",
         "wisdom:GetImportJob",
         "wisdom:GetKnowledgeBase",
         "wisdom:GetMessageTemplate",
         "wisdom:GetQuickResponse",
         "wisdom:ListContentAssociations",
         "wisdom:ListContents",
         "wisdom:ListImportJobs",
         "wisdom:ListMessageTemplateVersions",
         "wisdom:ListMessageTemplates",
         "wisdom:ListQuickResponses",
         "wisdom:RemoveKnowledgeBaseTemplateUri",
         "wisdom:RenderMessageTemplate",
         "wisdom:SearchContent",
         "wisdom:SearchMessageTemplates",
         "wisdom:SearchQuickResponses",
         "wisdom:StartContentUpload",
         "wisdom:StartImportJob",
         "wisdom:TagResource",
         "wisdom:UntagResource",
         "wisdom:UpdateContent",
         "wisdom:UpdateKnowledgeBaseTemplateUri",
         "wisdom:UpdateMessageTemplate",
         "wisdom:UpdateMessageTemplateMetadata",
         "wisdom:UpdateQuickResponse"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "wisdom:ActivateMessageTemplate",
        "wisdom:CreateContent",
        "wisdom:CreateContentAssociation",
        "wisdom:CreateMessageTemplate",
        "wisdom:CreateMessageTemplateAttachment",
        "wisdom:CreateMessageTemplateVersion",
        "wisdom:DeactivateMessageTemplate",
        "wisdom:DeleteContent",
        "wisdom:DeleteContentAssociation",
        "wisdom:DeleteImportJob",
        "wisdom:DeleteKnowledgeBase",
        "wisdom:DeleteMessageTemplate",
        "wisdom:DeleteMessageTemplateAttachment",
        "wisdom:DeleteQuickResponse",
        "wisdom:GetContent",
        "wisdom:GetContentAssociation",
        "wisdom:GetContentSummary",
        "wisdom:GetImportJob",
        "wisdom:GetKnowledgeBase",
        "wisdom:GetMessageTemplate",
        "wisdom:GetQuickResponse",
        "wisdom:ListContentAssociations",
        "wisdom:ListContents",
        "wisdom:ListImportJobs",
        "wisdom:ListMessageTemplateVersions",
        "wisdom:ListMessageTemplates",
        "wisdom:ListQuickResponses",
        "wisdom:RemoveKnowledgeBaseTemplateUri",
        "wisdom:RenderMessageTemplate",
        "wisdom:SearchContent",
        "wisdom:SearchMessageTemplates",
        "wisdom:SearchQuickResponses",
        "wisdom:StartContentUpload",
        "wisdom:StartImportJob",
        "wisdom:TagResource",
        "wisdom:UntagResource",
        "wisdom:UpdateContent",
        "wisdom:UpdateKnowledgeBaseTemplateUri",
        "wisdom:UpdateMessageTemplate",
        "wisdom:UpdateMessageTemplateMetadata",
        "wisdom:UpdateQuickResponse"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/wisdom:KnowledgeBase"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/wisdom:KnowledgeBase"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "wisdom:ActivateMessageTemplate",
         "wisdom:CreateMessageTemplateAttachment",
         "wisdom:CreateMessageTemplateVersion",
         "wisdom:DeactivateMessageTemplate",
         "wisdom:DeleteMessageTemplate",
         "wisdom:DeleteMessageTemplateAttachment",
         "wisdom:GetMessageTemplate",
         "wisdom:ListMessageTemplateVersions",
         "wisdom:RenderMessageTemplate",
         "wisdom:TagResource",
         "wisdom:UntagResource",
         "wisdom:UpdateMessageTemplate",
         "wisdom:UpdateMessageTemplateMetadata"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "wisdom:ActivateMessageTemplate",
        "wisdom:CreateMessageTemplateAttachment",
        "wisdom:CreateMessageTemplateVersion",
        "wisdom:DeactivateMessageTemplate",
        "wisdom:DeleteMessageTemplate",
        "wisdom:DeleteMessageTemplateAttachment",
        "wisdom:GetMessageTemplate",
        "wisdom:ListMessageTemplateVersions",
        "wisdom:RenderMessageTemplate",
        "wisdom:TagResource",
        "wisdom:UntagResource",
        "wisdom:UpdateMessageTemplate",
        "wisdom:UpdateMessageTemplateMetadata"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/wisdom:MessageTemplate"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/wisdom:MessageTemplate"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "wisdom:AllowVendedLogDeliveryForResource",
         "wisdom:CreateAIAgent",
         "wisdom:CreateAIAgentVersion",
         "wisdom:CreateAIGuardrail",
         "wisdom:CreateAIGuardrailVersion",
         "wisdom:CreateAIPrompt",
         "wisdom:CreateAIPromptVersion",
         "wisdom:CreateAssistantAssociation",
         "wisdom:DeleteAIAgent",
         "wisdom:DeleteAIAgentVersion",
         "wisdom:DeleteAIGuardrail",
         "wisdom:DeleteAIGuardrailVersion",
         "wisdom:DeleteAIPrompt",
         "wisdom:DeleteAIPromptVersion",
         "wisdom:DeleteAssistant",
         "wisdom:DeleteAssistantAssociation",
         "wisdom:GetAIAgent",
         "wisdom:GetAIGuardrail",
         "wisdom:GetAIPrompt",
         "wisdom:GetAssistant",
         "wisdom:GetAssistantAssociation",
         "wisdom:GetNextMessage",
         "wisdom:GetRecommendations",
         "wisdom:GetSession",
         "wisdom:ListAIAgentVersions",
         "wisdom:ListAIAgents",
         "wisdom:ListAIGuardrailVersions",
         "wisdom:ListAIGuardrails",
         "wisdom:ListAIPromptVersions",
         "wisdom:ListAIPrompts",
         "wisdom:ListMessages",
         "wisdom:PutFeedback",
         "wisdom:QueryAssistant",
         "wisdom:RemoveAssistantAIAgent",
         "wisdom:SendMessage",
         "wisdom:TagResource",
         "wisdom:UntagResource",
         "wisdom:UpdateAIAgent",
         "wisdom:UpdateAIGuardrail",
         "wisdom:UpdateAIPrompt",
         "wisdom:UpdateAssistantAIAgent",
         "wisdom:UpdateSession",
         "wisdom:UpdateSessionData"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "wisdom:AllowVendedLogDeliveryForResource",
        "wisdom:CreateAIAgent",
        "wisdom:CreateAIAgentVersion",
        "wisdom:CreateAIGuardrail",
        "wisdom:CreateAIGuardrailVersion",
        "wisdom:CreateAIPrompt",
        "wisdom:CreateAIPromptVersion",
        "wisdom:CreateAssistantAssociation",
        "wisdom:DeleteAIAgent",
        "wisdom:DeleteAIAgentVersion",
        "wisdom:DeleteAIGuardrail",
        "wisdom:DeleteAIGuardrailVersion",
        "wisdom:DeleteAIPrompt",
        "wisdom:DeleteAIPromptVersion",
        "wisdom:DeleteAssistant",
        "wisdom:DeleteAssistantAssociation",
        "wisdom:GetAIAgent",
        "wisdom:GetAIGuardrail",
        "wisdom:GetAIPrompt",
        "wisdom:GetAssistant",
        "wisdom:GetAssistantAssociation",
        "wisdom:GetNextMessage",
        "wisdom:GetRecommendations",
        "wisdom:GetSession",
        "wisdom:ListAIAgentVersions",
        "wisdom:ListAIAgents",
        "wisdom:ListAIGuardrailVersions",
        "wisdom:ListAIGuardrails",
        "wisdom:ListAIPromptVersions",
        "wisdom:ListAIPrompts",
        "wisdom:ListMessages",
        "wisdom:PutFeedback",
        "wisdom:QueryAssistant",
        "wisdom:RemoveAssistantAIAgent",
        "wisdom:SendMessage",
        "wisdom:TagResource",
        "wisdom:UntagResource",
        "wisdom:UpdateAIAgent",
        "wisdom:UpdateAIGuardrail",
        "wisdom:UpdateAIPrompt",
        "wisdom:UpdateAssistantAIAgent",
        "wisdom:UpdateSession",
        "wisdom:UpdateSessionData"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/wisdom:Assistant"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/wisdom:Assistant"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "wisdom:CreateAIAgentVersion",
         "wisdom:DeleteAIAgent",
         "wisdom:DeleteAIAgentVersion",
         "wisdom:GetAIAgent",
         "wisdom:ListAIAgentVersions",
         "wisdom:UpdateAIAgent"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "wisdom:CreateAIAgentVersion",
        "wisdom:DeleteAIAgent",
        "wisdom:DeleteAIAgentVersion",
        "wisdom:GetAIAgent",
        "wisdom:ListAIAgentVersions",
        "wisdom:UpdateAIAgent"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/wisdom:AIAgent"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/wisdom:AIAgent"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "wisdom:CreateAIGuardrailVersion",
         "wisdom:DeleteAIGuardrail",
         "wisdom:DeleteAIGuardrailVersion",
         "wisdom:GetAIGuardrail",
         "wisdom:ListAIGuardrailVersions",
         "wisdom:UpdateAIGuardrail"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "wisdom:CreateAIGuardrailVersion",
        "wisdom:DeleteAIGuardrail",
        "wisdom:DeleteAIGuardrailVersion",
        "wisdom:GetAIGuardrail",
        "wisdom:ListAIGuardrailVersions",
        "wisdom:UpdateAIGuardrail"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/wisdom:AIGuardrail"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/wisdom:AIGuardrail"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "wisdom:CreateAIPromptVersion",
         "wisdom:DeleteAIPrompt",
         "wisdom:DeleteAIPromptVersion",
         "wisdom:GetAIPrompt",
         "wisdom:ListAIPromptVersions",
         "wisdom:UpdateAIPrompt"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "wisdom:CreateAIPromptVersion",
        "wisdom:DeleteAIPrompt",
        "wisdom:DeleteAIPromptVersion",
        "wisdom:GetAIPrompt",
        "wisdom:ListAIPromptVersions",
        "wisdom:UpdateAIPrompt"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/wisdom:AIPrompt"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/wisdom:AIPrompt"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "wisdom:CreateContentAssociation",
         "wisdom:DeleteContent",
         "wisdom:DeleteContentAssociation",
         "wisdom:GetContent",
         "wisdom:GetContentAssociation",
         "wisdom:GetContentSummary",
         "wisdom:ListContentAssociations",
         "wisdom:TagResource",
         "wisdom:UntagResource",
         "wisdom:UpdateContent"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "wisdom:CreateContentAssociation",
        "wisdom:DeleteContent",
        "wisdom:DeleteContentAssociation",
        "wisdom:GetContent",
        "wisdom:GetContentAssociation",
        "wisdom:GetContentSummary",
        "wisdom:ListContentAssociations",
        "wisdom:TagResource",
        "wisdom:UntagResource",
        "wisdom:UpdateContent"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/wisdom:Content"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/wisdom:Content"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "wisdom:DeleteAssistantAssociation",
         "wisdom:GetAssistantAssociation",
         "wisdom:TagResource",
         "wisdom:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "wisdom:DeleteAssistantAssociation",
        "wisdom:GetAssistantAssociation",
        "wisdom:TagResource",
        "wisdom:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/wisdom:AssistantAssociation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/wisdom:AssistantAssociation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "wisdom:DeleteContentAssociation",
         "wisdom:GetContentAssociation",
         "wisdom:TagResource",
         "wisdom:UntagResource"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "wisdom:DeleteContentAssociation",
        "wisdom:GetContentAssociation",
        "wisdom:TagResource",
        "wisdom:UntagResource"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/wisdom:ContentAssociation"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/wisdom:ContentAssociation"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "wisdom:DeleteQuickResponse",
         "wisdom:GetQuickResponse",
         "wisdom:TagResource",
         "wisdom:UntagResource",
         "wisdom:UpdateQuickResponse"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "wisdom:DeleteQuickResponse",
        "wisdom:GetQuickResponse",
        "wisdom:TagResource",
        "wisdom:UntagResource",
        "wisdom:UpdateQuickResponse"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/wisdom:QuickResponse"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/wisdom:QuickResponse"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "wisdom:GetNextMessage",
         "wisdom:GetSession",
         "wisdom:ListMessages",
         "wisdom:SendMessage",
         "wisdom:TagResource",
         "wisdom:UntagResource",
         "wisdom:UpdateSession",
         "wisdom:UpdateSessionData"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "wisdom:GetNextMessage",
        "wisdom:GetSession",
        "wisdom:ListMessages",
        "wisdom:SendMessage",
        "wisdom:TagResource",
        "wisdom:UntagResource",
        "wisdom:UpdateSession",
        "wisdom:UpdateSessionData"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/wisdom:Session"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/wisdom:Session"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "workdocs:StartInstanceExport"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "workdocs:StartInstanceExport"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/workdocs:organization"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/workdocs:organization"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "worklink:AssociateDomain",
         "worklink:AssociateWebsiteAuthorizationProvider",
         "worklink:AssociateWebsiteCertificateAuthority",
         "worklink:DeleteFleet",
         "worklink:DescribeAuditStreamConfiguration",
         "worklink:DescribeCompanyNetworkConfiguration",
         "worklink:DescribeDevice",
         "worklink:DescribeDevicePolicyConfiguration",
         "worklink:DescribeDomain",
         "worklink:DescribeFleetMetadata",
         "worklink:DescribeIdentityProviderConfiguration",
         "worklink:DescribeWebsiteCertificateAuthority",
         "worklink:DisassociateDomain",
         "worklink:DisassociateWebsiteAuthorizationProvider",
         "worklink:DisassociateWebsiteCertificateAuthority",
         "worklink:ListDevices",
         "worklink:ListDomains",
         "worklink:ListTagsForResource",
         "worklink:ListWebsiteAuthorizationProviders",
         "worklink:ListWebsiteCertificateAuthorities",
         "worklink:RestoreDomainAccess",
         "worklink:RevokeDomainAccess",
         "worklink:SearchEntity",
         "worklink:SignOutUser",
         "worklink:TagResource",
         "worklink:UntagResource",
         "worklink:UpdateAuditStreamConfiguration",
         "worklink:UpdateCompanyNetworkConfiguration",
         "worklink:UpdateDevicePolicyConfiguration",
         "worklink:UpdateDomainMetadata",
         "worklink:UpdateFleetMetadata",
         "worklink:UpdateIdentityProviderConfiguration"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "worklink:AssociateDomain",
        "worklink:AssociateWebsiteAuthorizationProvider",
        "worklink:AssociateWebsiteCertificateAuthority",
        "worklink:DeleteFleet",
        "worklink:DescribeAuditStreamConfiguration",
        "worklink:DescribeCompanyNetworkConfiguration",
        "worklink:DescribeDevice",
        "worklink:DescribeDevicePolicyConfiguration",
        "worklink:DescribeDomain",
        "worklink:DescribeFleetMetadata",
        "worklink:DescribeIdentityProviderConfiguration",
        "worklink:DescribeWebsiteCertificateAuthority",
        "worklink:DisassociateDomain",
        "worklink:DisassociateWebsiteAuthorizationProvider",
        "worklink:DisassociateWebsiteCertificateAuthority",
        "worklink:ListDevices",
        "worklink:ListDomains",
        "worklink:ListTagsForResource",
        "worklink:ListWebsiteAuthorizationProviders",
        "worklink:ListWebsiteCertificateAuthorities",
        "worklink:RestoreDomainAccess",
        "worklink:RevokeDomainAccess",
        "worklink:SearchEntity",
        "worklink:SignOutUser",
        "worklink:TagResource",
        "worklink:UntagResource",
        "worklink:UpdateAuditStreamConfiguration",
        "worklink:UpdateCompanyNetworkConfiguration",
        "worklink:UpdateDevicePolicyConfiguration",
        "worklink:UpdateDomainMetadata",
        "worklink:UpdateFleetMetadata",
        "worklink:UpdateIdentityProviderConfiguration"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/worklink:fleet"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/worklink:fleet"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "workmail:AllowVendedLogDeliveryForResource",
         "workmail:AssociateDelegateToResource",
         "workmail:AssociateMemberToGroup",
         "workmail:AssumeImpersonationRole",
         "workmail:CancelMailboxExportJob",
         "workmail:CreateAlias",
         "workmail:CreateAvailabilityConfiguration",
         "workmail:CreateGroup",
         "workmail:CreateImpersonationRole",
         "workmail:CreateInboundMailFlowRule",
         "workmail:CreateMailDomain",
         "workmail:CreateMobileDeviceAccessRule",
         "workmail:CreateOutboundMailFlowRule",
         "workmail:CreateResource",
         "workmail:CreateSmtpGateway",
         "workmail:CreateUser",
         "workmail:DeleteAccessControlRule",
         "workmail:DeleteAlias",
         "workmail:DeleteAvailabilityConfiguration",
         "workmail:DeleteEmailMonitoringConfiguration",
         "workmail:DeleteGroup",
         "workmail:DeleteIdentityProviderConfiguration",
         "workmail:DeleteImpersonationRole",
         "workmail:DeleteInboundMailFlowRule",
         "workmail:DeleteMailDomain",
         "workmail:DeleteMailboxPermissions",
         "workmail:DeleteMobileDevice",
         "workmail:DeleteMobileDeviceAccessOverride",
         "workmail:DeleteMobileDeviceAccessRule",
         "workmail:DeleteOrganization",
         "workmail:DeleteOutboundMailFlowRule",
         "workmail:DeletePersonalAccessToken",
         "workmail:DeleteResource",
         "workmail:DeleteRetentionPolicy",
         "workmail:DeleteSmtpGateway",
         "workmail:DeleteUser",
         "workmail:DeliverToMailbox",
         "workmail:DeregisterFromWorkMail",
         "workmail:DeregisterMailDomain",
         "workmail:DescribeEmailMonitoringConfiguration",
         "workmail:DescribeEntity",
         "workmail:DescribeGroup",
         "workmail:DescribeIdentityProviderConfiguration",
         "workmail:DescribeInboundDmarcSettings",
         "workmail:DescribeInboundMailFlowRule",
         "workmail:DescribeMailDomains",
         "workmail:DescribeMailboxExportJob",
         "workmail:DescribeOrganization",
         "workmail:DescribeOutboundMailFlowRule",
         "workmail:DescribeResource",
         "workmail:DescribeSmtpGateway",
         "workmail:DescribeUser",
         "workmail:DisassociateDelegateFromResource",
         "workmail:DisassociateMemberFromGroup",
         "workmail:EnableMailDomain",
         "workmail:GetAccessControlEffect",
         "workmail:GetDefaultRetentionPolicy",
         "workmail:GetImpersonationRole",
         "workmail:GetImpersonationRoleEffect",
         "workmail:GetJournalingRules",
         "workmail:GetMailDomain",
         "workmail:GetMailDomainDetails",
         "workmail:GetMailboxDetails",
         "workmail:GetMobileDeviceAccessEffect",
         "workmail:GetMobileDeviceAccessOverride",
         "workmail:GetMobileDeviceDetails",
         "workmail:GetMobileDevicesForUser",
         "workmail:GetMobilePolicyDetails",
         "workmail:GetPersonalAccessTokenMetadata",
         "workmail:ListAccessControlRules",
         "workmail:ListAliases",
         "workmail:ListAvailabilityConfigurations",
         "workmail:ListGroupMembers",
         "workmail:ListGroups",
         "workmail:ListGroupsForEntity",
         "workmail:ListImpersonationRoles",
         "workmail:ListInboundMailFlowRules",
         "workmail:ListMailDomains",
         "workmail:ListMailboxExportJobs",
         "workmail:ListMailboxPermissions",
         "workmail:ListMobileDeviceAccessOverrides",
         "workmail:ListMobileDeviceAccessRules",
         "workmail:ListOutboundMailFlowRules",
         "workmail:ListPersonalAccessTokens",
         "workmail:ListResourceDelegates",
         "workmail:ListResources",
         "workmail:ListSmtpGateways",
         "workmail:ListTagsForResource",
         "workmail:ListUsers",
         "workmail:PutAccessControlRule",
         "workmail:PutEmailMonitoringConfiguration",
         "workmail:PutIdentityProviderConfiguration",
         "workmail:PutInboundDmarcSettings",
         "workmail:PutMailboxPermissions",
         "workmail:PutMobileDeviceAccessOverride",
         "workmail:PutRetentionPolicy",
         "workmail:RegisterMailDomain",
         "workmail:RegisterToWorkMail",
         "workmail:ResetPassword",
         "workmail:SearchMembers",
         "workmail:SetDefaultMailDomain",
         "workmail:SetJournalingRules",
         "workmail:SetMobilePolicyDetails",
         "workmail:StartMailboxExportJob",
         "workmail:TagResource",
         "workmail:TestAvailabilityConfiguration",
         "workmail:TestInboundMailFlowRules",
         "workmail:TestOutboundMailFlowRules",
         "workmail:UntagResource",
         "workmail:UpdateAvailabilityConfiguration",
         "workmail:UpdateDefaultMailDomain",
         "workmail:UpdateGroup",
         "workmail:UpdateImpersonationRole",
         "workmail:UpdateInboundMailFlowRule",
         "workmail:UpdateMailboxQuota",
         "workmail:UpdateMobileDeviceAccessRule",
         "workmail:UpdateOutboundMailFlowRule",
         "workmail:UpdatePrimaryEmailAddress",
         "workmail:UpdateResource",
         "workmail:UpdateSmtpGateway",
         "workmail:UpdateUser",
         "workmail:WipeMobileDevice"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "workmail:AllowVendedLogDeliveryForResource",
        "workmail:AssociateDelegateToResource",
        "workmail:AssociateMemberToGroup",
        "workmail:AssumeImpersonationRole",
        "workmail:CancelMailboxExportJob",
        "workmail:CreateAlias",
        "workmail:CreateAvailabilityConfiguration",
        "workmail:CreateGroup",
        "workmail:CreateImpersonationRole",
        "workmail:CreateInboundMailFlowRule",
        "workmail:CreateMailDomain",
        "workmail:CreateMobileDeviceAccessRule",
        "workmail:CreateOutboundMailFlowRule",
        "workmail:CreateResource",
        "workmail:CreateSmtpGateway",
        "workmail:CreateUser",
        "workmail:DeleteAccessControlRule",
        "workmail:DeleteAlias",
        "workmail:DeleteAvailabilityConfiguration",
        "workmail:DeleteEmailMonitoringConfiguration",
        "workmail:DeleteGroup",
        "workmail:DeleteIdentityProviderConfiguration",
        "workmail:DeleteImpersonationRole",
        "workmail:DeleteInboundMailFlowRule",
        "workmail:DeleteMailDomain",
        "workmail:DeleteMailboxPermissions",
        "workmail:DeleteMobileDevice",
        "workmail:DeleteMobileDeviceAccessOverride",
        "workmail:DeleteMobileDeviceAccessRule",
        "workmail:DeleteOrganization",
        "workmail:DeleteOutboundMailFlowRule",
        "workmail:DeletePersonalAccessToken",
        "workmail:DeleteResource",
        "workmail:DeleteRetentionPolicy",
        "workmail:DeleteSmtpGateway",
        "workmail:DeleteUser",
        "workmail:DeliverToMailbox",
        "workmail:DeregisterFromWorkMail",
        "workmail:DeregisterMailDomain",
        "workmail:DescribeEmailMonitoringConfiguration",
        "workmail:DescribeEntity",
        "workmail:DescribeGroup",
        "workmail:DescribeIdentityProviderConfiguration",
        "workmail:DescribeInboundDmarcSettings",
        "workmail:DescribeInboundMailFlowRule",
        "workmail:DescribeMailDomains",
        "workmail:DescribeMailboxExportJob",
        "workmail:DescribeOrganization",
        "workmail:DescribeOutboundMailFlowRule",
        "workmail:DescribeResource",
        "workmail:DescribeSmtpGateway",
        "workmail:DescribeUser",
        "workmail:DisassociateDelegateFromResource",
        "workmail:DisassociateMemberFromGroup",
        "workmail:EnableMailDomain",
        "workmail:GetAccessControlEffect",
        "workmail:GetDefaultRetentionPolicy",
        "workmail:GetImpersonationRole",
        "workmail:GetImpersonationRoleEffect",
        "workmail:GetJournalingRules",
        "workmail:GetMailDomain",
        "workmail:GetMailDomainDetails",
        "workmail:GetMailboxDetails",
        "workmail:GetMobileDeviceAccessEffect",
        "workmail:GetMobileDeviceAccessOverride",
        "workmail:GetMobileDeviceDetails",
        "workmail:GetMobileDevicesForUser",
        "workmail:GetMobilePolicyDetails",
        "workmail:GetPersonalAccessTokenMetadata",
        "workmail:ListAccessControlRules",
        "workmail:ListAliases",
        "workmail:ListAvailabilityConfigurations",
        "workmail:ListGroupMembers",
        "workmail:ListGroups",
        "workmail:ListGroupsForEntity",
        "workmail:ListImpersonationRoles",
        "workmail:ListInboundMailFlowRules",
        "workmail:ListMailDomains",
        "workmail:ListMailboxExportJobs",
        "workmail:ListMailboxPermissions",
        "workmail:ListMobileDeviceAccessOverrides",
        "workmail:ListMobileDeviceAccessRules",
        "workmail:ListOutboundMailFlowRules",
        "workmail:ListPersonalAccessTokens",
        "workmail:ListResourceDelegates",
        "workmail:ListResources",
        "workmail:ListSmtpGateways",
        "workmail:ListTagsForResource",
        "workmail:ListUsers",
        "workmail:PutAccessControlRule",
        "workmail:PutEmailMonitoringConfiguration",
        "workmail:PutIdentityProviderConfiguration",
        "workmail:PutInboundDmarcSettings",
        "workmail:PutMailboxPermissions",
        "workmail:PutMobileDeviceAccessOverride",
        "workmail:PutRetentionPolicy",
        "workmail:RegisterMailDomain",
        "workmail:RegisterToWorkMail",
        "workmail:ResetPassword",
        "workmail:SearchMembers",
        "workmail:SetDefaultMailDomain",
        "workmail:SetJournalingRules",
        "workmail:SetMobilePolicyDetails",
        "workmail:StartMailboxExportJob",
        "workmail:TagResource",
        "workmail:TestAvailabilityConfiguration",
        "workmail:TestInboundMailFlowRules",
        "workmail:TestOutboundMailFlowRules",
        "workmail:UntagResource",
        "workmail:UpdateAvailabilityConfiguration",
        "workmail:UpdateDefaultMailDomain",
        "workmail:UpdateGroup",
        "workmail:UpdateImpersonationRole",
        "workmail:UpdateInboundMailFlowRule",
        "workmail:UpdateMailboxQuota",
        "workmail:UpdateMobileDeviceAccessRule",
        "workmail:UpdateOutboundMailFlowRule",
        "workmail:UpdatePrimaryEmailAddress",
        "workmail:UpdateResource",
        "workmail:UpdateSmtpGateway",
        "workmail:UpdateUser",
        "workmail:WipeMobileDevice"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/workmail:organization"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/workmail:organization"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "workmailmessageflow:GetRawMessageContent",
         "workmailmessageflow:PutRawMessageContent"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "workmailmessageflow:GetRawMessageContent",
        "workmailmessageflow:PutRawMessageContent"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/workmailmessageflow:RawMessage"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/workmailmessageflow:RawMessage"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "workspaces:AssociateConnectionAlias",
         "workspaces:DeleteConnectionAlias",
         "workspaces:DescribeConnectionAliasPermissions",
         "workspaces:DisassociateConnectionAlias",
         "workspaces:UpdateConnectionAliasPermission"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "workspaces:AssociateConnectionAlias",
        "workspaces:DeleteConnectionAlias",
        "workspaces:DescribeConnectionAliasPermissions",
        "workspaces:DisassociateConnectionAlias",
        "workspaces:UpdateConnectionAliasPermission"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/workspaces:connectionalias"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/workspaces:connectionalias"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "workspaces:AssociateConnectionAlias",
         "workspaces:AssociateIpGroups",
         "workspaces:CreateConnectClientAddIn",
         "workspaces:CreateStandbyWorkspaces",
         "workspaces:CreateWorkspaces",
         "workspaces:CreateWorkspacesPool",
         "workspaces:DeleteClientBranding",
         "workspaces:DeleteConnectClientAddIn",
         "workspaces:DeregisterWorkspaceDirectory",
         "workspaces:DescribeClientBranding",
         "workspaces:DescribeClientProperties",
         "workspaces:DescribeConnectClientAddIns",
         "workspaces:DisassociateIpGroups",
         "workspaces:ImportClientBranding",
         "workspaces:ModifyCertificateBasedAuthProperties",
         "workspaces:ModifyClientProperties",
         "workspaces:ModifyEndpointEncryptionMode",
         "workspaces:ModifySamlProperties",
         "workspaces:ModifySelfservicePermissions",
         "workspaces:ModifyStreamingProperties",
         "workspaces:ModifyWorkspaceAccessProperties",
         "workspaces:ModifyWorkspaceCreationProperties",
         "workspaces:RegisterWorkspaceDirectory",
         "workspaces:Stream",
         "workspaces:UpdateConnectClientAddIn"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "workspaces:AssociateConnectionAlias",
        "workspaces:AssociateIpGroups",
        "workspaces:CreateConnectClientAddIn",
        "workspaces:CreateStandbyWorkspaces",
        "workspaces:CreateWorkspaces",
        "workspaces:CreateWorkspacesPool",
        "workspaces:DeleteClientBranding",
        "workspaces:DeleteConnectClientAddIn",
        "workspaces:DeregisterWorkspaceDirectory",
        "workspaces:DescribeClientBranding",
        "workspaces:DescribeClientProperties",
        "workspaces:DescribeConnectClientAddIns",
        "workspaces:DisassociateIpGroups",
        "workspaces:ImportClientBranding",
        "workspaces:ModifyCertificateBasedAuthProperties",
        "workspaces:ModifyClientProperties",
        "workspaces:ModifyEndpointEncryptionMode",
        "workspaces:ModifySamlProperties",
        "workspaces:ModifySelfservicePermissions",
        "workspaces:ModifyStreamingProperties",
        "workspaces:ModifyWorkspaceAccessProperties",
        "workspaces:ModifyWorkspaceCreationProperties",
        "workspaces:RegisterWorkspaceDirectory",
        "workspaces:Stream",
        "workspaces:UpdateConnectClientAddIn"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/workspaces:directoryid"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/workspaces:directoryid"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "workspaces:AssociateIpGroups",
         "workspaces:AuthorizeIpRules",
         "workspaces:DeleteIpGroup",
         "workspaces:DescribeIpGroups",
         "workspaces:DisassociateIpGroups",
         "workspaces:RevokeIpRules",
         "workspaces:UpdateRulesOfIpGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "workspaces:AssociateIpGroups",
        "workspaces:AuthorizeIpRules",
        "workspaces:DeleteIpGroup",
        "workspaces:DescribeIpGroups",
        "workspaces:DisassociateIpGroups",
        "workspaces:RevokeIpRules",
        "workspaces:UpdateRulesOfIpGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/workspaces:workspaceipgroup"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/workspaces:workspaceipgroup"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "workspaces:AssociateWorkspaceApplication",
         "workspaces:DescribeApplicationAssociations",
         "workspaces:DisassociateWorkspaceApplication"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "workspaces:AssociateWorkspaceApplication",
        "workspaces:DescribeApplicationAssociations",
        "workspaces:DisassociateWorkspaceApplication"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/workspaces:workspaceapplication"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/workspaces:workspaceapplication"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "workspaces:AssociateWorkspaceApplication",
         "workspaces:CreateStandbyWorkspaces",
         "workspaces:CreateWorkspaceImage",
         "workspaces:CreateWorkspaces",
         "workspaces:DeployWorkspaceApplications",
         "workspaces:DescribeWorkspaceAssociations",
         "workspaces:DescribeWorkspaceSnapshots",
         "workspaces:DisassociateWorkspaceApplication",
         "workspaces:MigrateWorkspace",
         "workspaces:ModifyWorkspaceProperties",
         "workspaces:ModifyWorkspaceState",
         "workspaces:RebootWorkspaces",
         "workspaces:RebuildWorkspaces",
         "workspaces:RestoreWorkspace",
         "workspaces:StartWorkspaces",
         "workspaces:StopWorkspaces",
         "workspaces:TerminateWorkspaces"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "workspaces:AssociateWorkspaceApplication",
        "workspaces:CreateStandbyWorkspaces",
        "workspaces:CreateWorkspaceImage",
        "workspaces:CreateWorkspaces",
        "workspaces:DeployWorkspaceApplications",
        "workspaces:DescribeWorkspaceAssociations",
        "workspaces:DescribeWorkspaceSnapshots",
        "workspaces:DisassociateWorkspaceApplication",
        "workspaces:MigrateWorkspace",
        "workspaces:ModifyWorkspaceProperties",
        "workspaces:ModifyWorkspaceState",
        "workspaces:RebootWorkspaces",
        "workspaces:RebuildWorkspaces",
        "workspaces:RestoreWorkspace",
        "workspaces:StartWorkspaces",
        "workspaces:StopWorkspaces",
        "workspaces:TerminateWorkspaces"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/workspaces:workspaceid"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/workspaces:workspaceid"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "workspaces:CopyWorkspaceImage",
         "workspaces:CreateUpdatedWorkspaceImage",
         "workspaces:CreateWorkspaceBundle",
         "workspaces:DeleteWorkspaceImage",
         "workspaces:DescribeImageAssociations",
         "workspaces:DescribeWorkspaceImagePermissions",
         "workspaces:UpdateWorkspaceBundle",
         "workspaces:UpdateWorkspaceImagePermission"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "workspaces:CopyWorkspaceImage",
        "workspaces:CreateUpdatedWorkspaceImage",
        "workspaces:CreateWorkspaceBundle",
        "workspaces:DeleteWorkspaceImage",
        "workspaces:DescribeImageAssociations",
        "workspaces:DescribeWorkspaceImagePermissions",
        "workspaces:UpdateWorkspaceBundle",
        "workspaces:UpdateWorkspaceImagePermission"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/workspaces:workspaceimage"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/workspaces:workspaceimage"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "workspaces:CreateWorkspaceBundle",
         "workspaces:CreateWorkspaces",
         "workspaces:CreateWorkspacesPool",
         "workspaces:DeleteWorkspaceBundle",
         "workspaces:DescribeBundleAssociations",
         "workspaces:MigrateWorkspace",
         "workspaces:UpdateWorkspaceBundle"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "workspaces:CreateWorkspaceBundle",
        "workspaces:CreateWorkspaces",
        "workspaces:CreateWorkspacesPool",
        "workspaces:DeleteWorkspaceBundle",
        "workspaces:DescribeBundleAssociations",
        "workspaces:MigrateWorkspace",
        "workspaces:UpdateWorkspaceBundle"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/workspaces:workspacebundle"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/workspaces:workspacebundle"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "workspaces:CreateWorkspacesPool",
         "workspaces:DescribeWorkspacesPoolSessions",
         "workspaces:StartWorkspacesPool",
         "workspaces:StopWorkspacesPool",
         "workspaces:TerminateWorkspacesPool",
         "workspaces:UpdateWorkspacesPool"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "workspaces:CreateWorkspacesPool",
        "workspaces:DescribeWorkspacesPoolSessions",
        "workspaces:StartWorkspacesPool",
        "workspaces:StopWorkspacesPool",
        "workspaces:TerminateWorkspacesPool",
        "workspaces:UpdateWorkspacesPool"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/workspaces:workspacespoolid"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/workspaces:workspacespoolid"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "workspaces-web:AssociateBrowserSettings",
         "workspaces-web:DeleteBrowserSettings",
         "workspaces-web:GetBrowserSettings",
         "workspaces-web:TagResource",
         "workspaces-web:UntagResource",
         "workspaces-web:UpdateBrowserSettings"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "workspaces-web:AssociateBrowserSettings",
        "workspaces-web:DeleteBrowserSettings",
        "workspaces-web:GetBrowserSettings",
        "workspaces-web:TagResource",
        "workspaces-web:UntagResource",
        "workspaces-web:UpdateBrowserSettings"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/workspaces-web:browserSettings"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/workspaces-web:browserSettings"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "workspaces-web:AssociateBrowserSettings",
         "workspaces-web:AssociateDataProtectionSettings",
         "workspaces-web:AssociateIpAccessSettings",
         "workspaces-web:AssociateNetworkSettings",
         "workspaces-web:AssociateTrustStore",
         "workspaces-web:AssociateUserAccessLoggingSettings",
         "workspaces-web:AssociateUserSettings",
         "workspaces-web:CreateIdentityProvider",
         "workspaces-web:DeleteIdentityProvider",
         "workspaces-web:DeletePortal",
         "workspaces-web:DisassociateBrowserSettings",
         "workspaces-web:DisassociateDataProtectionSettings",
         "workspaces-web:DisassociateIpAccessSettings",
         "workspaces-web:DisassociateNetworkSettings",
         "workspaces-web:DisassociateTrustStore",
         "workspaces-web:DisassociateUserAccessLoggingSettings",
         "workspaces-web:DisassociateUserSettings",
         "workspaces-web:ExpireSession",
         "workspaces-web:GetPortal",
         "workspaces-web:GetPortalServiceProviderMetadata",
         "workspaces-web:GetSession",
         "workspaces-web:ListSessions",
         "workspaces-web:TagResource",
         "workspaces-web:UntagResource",
         "workspaces-web:UpdateIdentityProvider",
         "workspaces-web:UpdatePortal"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "workspaces-web:AssociateBrowserSettings",
        "workspaces-web:AssociateDataProtectionSettings",
        "workspaces-web:AssociateIpAccessSettings",
        "workspaces-web:AssociateNetworkSettings",
        "workspaces-web:AssociateTrustStore",
        "workspaces-web:AssociateUserAccessLoggingSettings",
        "workspaces-web:AssociateUserSettings",
        "workspaces-web:CreateIdentityProvider",
        "workspaces-web:DeleteIdentityProvider",
        "workspaces-web:DeletePortal",
        "workspaces-web:DisassociateBrowserSettings",
        "workspaces-web:DisassociateDataProtectionSettings",
        "workspaces-web:DisassociateIpAccessSettings",
        "workspaces-web:DisassociateNetworkSettings",
        "workspaces-web:DisassociateTrustStore",
        "workspaces-web:DisassociateUserAccessLoggingSettings",
        "workspaces-web:DisassociateUserSettings",
        "workspaces-web:ExpireSession",
        "workspaces-web:GetPortal",
        "workspaces-web:GetPortalServiceProviderMetadata",
        "workspaces-web:GetSession",
        "workspaces-web:ListSessions",
        "workspaces-web:TagResource",
        "workspaces-web:UntagResource",
        "workspaces-web:UpdateIdentityProvider",
        "workspaces-web:UpdatePortal"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/workspaces-web:portal"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/workspaces-web:portal"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "workspaces-web:AssociateDataProtectionSettings",
         "workspaces-web:DeleteDataProtectionSettings",
         "workspaces-web:GetDataProtectionSettings",
         "workspaces-web:TagResource",
         "workspaces-web:UntagResource",
         "workspaces-web:UpdateDataProtectionSettings"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "workspaces-web:AssociateDataProtectionSettings",
        "workspaces-web:DeleteDataProtectionSettings",
        "workspaces-web:GetDataProtectionSettings",
        "workspaces-web:TagResource",
        "workspaces-web:UntagResource",
        "workspaces-web:UpdateDataProtectionSettings"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/workspaces-web:dataProtectionSettings"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/workspaces-web:dataProtectionSettings"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "workspaces-web:AssociateIpAccessSettings",
         "workspaces-web:DeleteIpAccessSettings",
         "workspaces-web:GetIpAccessSettings",
         "workspaces-web:TagResource",
         "workspaces-web:UntagResource",
         "workspaces-web:UpdateIpAccessSettings"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "workspaces-web:AssociateIpAccessSettings",
        "workspaces-web:DeleteIpAccessSettings",
        "workspaces-web:GetIpAccessSettings",
        "workspaces-web:TagResource",
        "workspaces-web:UntagResource",
        "workspaces-web:UpdateIpAccessSettings"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/workspaces-web:ipAccessSettings"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/workspaces-web:ipAccessSettings"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "workspaces-web:AssociateNetworkSettings",
         "workspaces-web:DeleteNetworkSettings",
         "workspaces-web:GetNetworkSettings",
         "workspaces-web:TagResource",
         "workspaces-web:UntagResource",
         "workspaces-web:UpdateNetworkSettings"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "workspaces-web:AssociateNetworkSettings",
        "workspaces-web:DeleteNetworkSettings",
        "workspaces-web:GetNetworkSettings",
        "workspaces-web:TagResource",
        "workspaces-web:UntagResource",
        "workspaces-web:UpdateNetworkSettings"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/workspaces-web:networkSettings"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/workspaces-web:networkSettings"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "workspaces-web:AssociateTrustStore",
         "workspaces-web:DeleteTrustStore",
         "workspaces-web:GetTrustStore",
         "workspaces-web:GetTrustStoreCertificate",
         "workspaces-web:TagResource",
         "workspaces-web:UntagResource",
         "workspaces-web:UpdateTrustStore"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "workspaces-web:AssociateTrustStore",
        "workspaces-web:DeleteTrustStore",
        "workspaces-web:GetTrustStore",
        "workspaces-web:GetTrustStoreCertificate",
        "workspaces-web:TagResource",
        "workspaces-web:UntagResource",
        "workspaces-web:UpdateTrustStore"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/workspaces-web:trustStore"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/workspaces-web:trustStore"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "workspaces-web:AssociateUserAccessLoggingSettings",
         "workspaces-web:DeleteUserAccessLoggingSettings",
         "workspaces-web:GetUserAccessLoggingSettings",
         "workspaces-web:TagResource",
         "workspaces-web:UntagResource",
         "workspaces-web:UpdateUserAccessLoggingSettings"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "workspaces-web:AssociateUserAccessLoggingSettings",
        "workspaces-web:DeleteUserAccessLoggingSettings",
        "workspaces-web:GetUserAccessLoggingSettings",
        "workspaces-web:TagResource",
        "workspaces-web:UntagResource",
        "workspaces-web:UpdateUserAccessLoggingSettings"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/workspaces-web:userAccessLoggingSettings"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/workspaces-web:userAccessLoggingSettings"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "workspaces-web:AssociateUserSettings",
         "workspaces-web:DeleteUserSettings",
         "workspaces-web:GetUserSettings",
         "workspaces-web:TagResource",
         "workspaces-web:UntagResource",
         "workspaces-web:UpdateUserSettings"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "workspaces-web:AssociateUserSettings",
        "workspaces-web:DeleteUserSettings",
        "workspaces-web:GetUserSettings",
        "workspaces-web:TagResource",
        "workspaces-web:UntagResource",
        "workspaces-web:UpdateUserSettings"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/workspaces-web:userSettings"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/workspaces-web:userSettings"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "workspaces-web:CreateIdentityProvider",
         "workspaces-web:DeleteIdentityProvider",
         "workspaces-web:GetIdentityProvider",
         "workspaces-web:ListIdentityProviders",
         "workspaces-web:TagResource",
         "workspaces-web:UntagResource",
         "workspaces-web:UpdateIdentityProvider"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "workspaces-web:CreateIdentityProvider",
        "workspaces-web:DeleteIdentityProvider",
        "workspaces-web:GetIdentityProvider",
        "workspaces-web:ListIdentityProviders",
        "workspaces-web:TagResource",
        "workspaces-web:UntagResource",
        "workspaces-web:UpdateIdentityProvider"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/workspaces-web:identityProvider"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/workspaces-web:identityProvider"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "xray:CreateGroup",
         "xray:DeleteGroup",
         "xray:GetGroup",
         "xray:ListTagsForResource",
         "xray:TagResource",
         "xray:UntagResource",
         "xray:UpdateGroup"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "xray:CreateGroup",
        "xray:DeleteGroup",
        "xray:GetGroup",
        "xray:ListTagsForResource",
        "xray:TagResource",
        "xray:UntagResource",
        "xray:UpdateGroup"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/xray:group"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/xray:group"
      }
     }
    }
   }
  },
  {
   "if": {
    "properties": {
     "Action": {
      "else": {
       "contains": {
        "const": "",
        "enum": [
         "xray:CreateSamplingRule",
         "xray:DeleteSamplingRule",
         "xray:ListTagsForResource",
         "xray:TagResource",
         "xray:UntagResource",
         "xray:UpdateSamplingRule"
        ],
        "minContains": 1
       },
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "const": "",
       "enum": [
        "xray:CreateSamplingRule",
        "xray:DeleteSamplingRule",
        "xray:ListTagsForResource",
        "xray:TagResource",
        "xray:UntagResource",
        "xray:UpdateSamplingRule"
       ]
      }
     }
    },
    "required": [
     "Action"
    ]
   },
   "then": {
    "properties": {
     "Resource": {
      "else": {
       "contains": {
        "$ref": "#/definitions/shapes/xray:sampling-rule"
       },
       "minContains": 1,
       "type": "array"
      },
      "if": {
       "type": "string"
      },
      "then": {
       "$ref": "#/definitions/shapes/xray:sampling-rule"
      }
     }
    }
   }
  }
 ],
 "definitions": {
  "resources": {
   "a4b:addressbook": {
    "arn_formats": [
     "arn:${Partition}:a4b:${Region}:${Account}:address-book/${ResourceId}"
    ]
   },
   "a4b:conferenceprovider": {
    "arn_formats": [
     "arn:${Partition}:a4b:${Region}:${Account}:conference-provider/${ResourceId}"
    ]
   },
   "a4b:contact": {
    "arn_formats": [
     "arn:${Partition}:a4b:${Region}:${Account}:contact/${ResourceId}"
    ]
   },
   "a4b:device": {
    "arn_formats": [
     "arn:${Partition}:a4b:${Region}:${Account}:device/${ResourceId}"
    ]
   },
   "a4b:gateway": {
    "arn_formats": [
     "arn:${Partition}:a4b:${Region}:${Account}:gateway/${ResourceId}"
    ]
   },
   "a4b:gatewaygroup": {
    "arn_formats": [
     "arn:${Partition}:a4b:${Region}:${Account}:gateway-group/${ResourceId}"
    ]
   },
   "a4b:networkprofile": {
    "arn_formats": [
     "arn:${Partition}:a4b:${Region}:${Account}:network-profile/${ResourceId}"
    ]
   },
   "a4b:profile": {
    "arn_formats": [
     "arn:${Partition}:a4b:${Region}:${Account}:profile/${ResourceId}"
    ]
   },
   "a4b:room": {
    "arn_formats": [
     "arn:${Partition}:a4b:${Region}:${Account}:room/${ResourceId}"
    ]
   },
   "a4b:schedule": {
    "arn_formats": [
     "arn:${Partition}:a4b:${Region}:${Account}:schedule/${ResourceId}"
    ]
   },
   "a4b:skillgroup": {
    "arn_formats": [
     "arn:${Partition}:a4b:${Region}:${Account}:skill-group/${ResourceId}"
    ]
   },
   "a4b:user": {
    "arn_formats": [
     "arn:${Partition}:a4b:${Region}:${Account}:user/${ResourceId}"
    ]
   },
   "access-analyzer:Analyzer": {
    "arn_formats": [
     "arn:${Partition}:access-analyzer:${Region}:${Account}:analyzer/${AnalyzerName}"
    ]
   },
   "access-analyzer:ArchiveRule": {
    "arn_formats": [
     "arn:${Partition}:access-analyzer:${Region}:${Account}:analyzer/${AnalyzerName}/archive-rule/${RuleName}"
    ]
   },
   "account:account": {
    "arn_formats": [
     "arn:${Partition}:account::${Account}:account"
    ]
   },
   "account:accountInOrganization": {
    "arn_formats": [
     "arn:${Partition}:account::${ManagementAccountId}:account/o-${OrganizationId}/${MemberAccountId}"
    ]
   },
   "acm-pca:certificate-authority": {
    "arn_formats": [
     "arn:${Partition}:acm-pca:${Region}:${Account}:certificate-authority/${CertificateAuthorityId}"
    ]
   },
   "acm:certificate": {
    "arn_formats": [
     "arn:${Partition}:acm:${Region}:${Account}:certificate/${CertificateId}"
    ]
   },
   "aiops:investigation-group": {
    "arn_formats": [
     "arn:${Partition}:aiops:${Region}:${Account}:investigation-group/${InvestigationGroupId}"
    ]
   },
   "airflow:environment": {
    "arn_formats": [
     "arn:${Partition}:airflow:${Region}:${Account}:environment/${EnvironmentName}"
    ]
   },
   "airflow:rbac-role": {
    "arn_formats": [
     "arn:${Partition}:airflow:${Region}:${Account}:role/${EnvironmentName}/${RoleName}"
    ]
   },
   "amplify:apps": {
    "arn_formats": [
     "arn:${Partition}:amplify:${Region}:${Account}:apps/${AppId}"
    ]
   },
   "amplify:branches": {
    "arn_formats": [
     "arn:${Partition}:amplify:${Region}:${Account}:apps/${AppId}/branches/${BranchName}"
    ]
   },
   "amplify:domains": {
    "arn_formats": [
     "arn:${Partition}:amplify:${Region}:${Account}:apps/${AppId}/domains/${DomainName}"
    ]
   },
   "amplify:jobs": {
    "arn_formats": [
     "arn:${Partition}:amplify:${Region}:${Account}:apps/${AppId}/branches/${BranchName}/jobs/${JobId}"
    ]
   },
   "amplify:webhooks": {
    "arn_formats": [
     "arn:${Partition}:amplify:${Region}:${Account}:webhooks/${WebhookId}"
    ]
   },
   "amplifybackend:api": {
    "arn_formats": [
     "arn:${Partition}:amplifybackend:${Region}:${Account}:/backend/${AppId}/api/*"
    ]
   },
   "amplifybackend:auth": {
    "arn_formats": [
     "arn:${Partition}:amplifybackend:${Region}:${Account}:/backend/${AppId}/auth/*"
    ]
   },
   "amplifybackend:backend": {
    "arn_formats": [
     "arn:${Partition}:amplifybackend:${Region}:${Account}:/backend/${AppId}/*"
    ]
   },
   "amplifybackend:config": {
    "arn_formats": [
     "arn:${Partition}:amplifybackend:${Region}:${Account}:/backend/${AppId}/config/*"
    ]
   },
   "amplifybackend:created-backend": {
    "arn_formats": [
     "arn:${Partition}:amplifybackend:${Region}:${Account}:/backend/*"
    ]
   },
   "amplifybackend:environment": {
    "arn_formats": [
     "arn:${Partition}:amplifybackend:${Region}:${Account}:/backend/${AppId}/environments/*"
    ]
   },
   "amplifybackend:job": {
    "arn_formats": [
     "arn:${Partition}:amplifybackend:${Region}:${Account}:/backend/${AppId}/job/*"
    ]
   },
   "amplifybackend:storage": {
    "arn_formats": [
     "arn:${Partition}:amplifybackend:${Region}:${Account}:/backend/${AppId}/storage/*"
    ]
   },
   "amplifybackend:token": {
    "arn_formats": [
     "arn:${Partition}:amplifybackend:${Region}:${Account}:/backend/${AppId}/challenge/*"
    ]
   },
   "amplifyuibuilder:CodegenJobResource": {
    "arn_formats": [
     "arn:${Partition}:amplifyuibuilder:${Region}:${Account}:app/${AppId}/environment/${EnvironmentName}/codegen-jobs/${Id}"
    ]
   },
   "amplifyuibuilder:ComponentResource": {
    "arn_formats": [
     "arn:${Partition}:amplifyuibuilder:${Region}:${Account}:app/${AppId}/environment/${EnvironmentName}/components/${Id}"
    ]
   },
   "amplifyuibuilder:FormResource": {
    "arn_formats": [
     "arn:${Partition}:amplifyuibuilder:${Region}:${Account}:app/${AppId}/environment/${EnvironmentName}/forms/${Id}"
    ]
   },
   "amplifyuibuilder:ThemeResource": {
    "arn_formats": [
     "arn:${Partition}:amplifyuibuilder:${Region}:${Account}:app/${AppId}/environment/${EnvironmentName}/themes/${Id}"
    ]
   },
   "aoss:Collection": {
    "arn_formats": [
     "arn:${Partition}:aoss:${Region}:${Account}:collection/${CollectionId}"
    ]
   },
   "aoss:Dashboards": {
    "arn_formats": [
     "arn:${Partition}:aoss:${Region}:${Account}:dashboards/default"
    ]
   },
   "apigateway:AccessLogSettings": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/apis/${ApiId}/stages/${StageName}/accesslogsettings"
    ]
   },
   "apigateway:Account": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/account"
    ]
   },
   "apigateway:Api": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/apis/${ApiId}"
    ]
   },
   "apigateway:ApiKey": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/apikeys/${ApiKeyId}"
    ]
   },
   "apigateway:ApiKeys": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/apikeys"
    ]
   },
   "apigateway:ApiMapping": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/domainnames/${DomainName}/apimappings/${ApiMappingId}"
    ]
   },
   "apigateway:ApiMappings": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/domainnames/${DomainName}/apimappings"
    ]
   },
   "apigateway:Apis": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/apis"
    ]
   },
   "apigateway:Authorizer": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/apis/${ApiId}/authorizers/${AuthorizerId}",
     "arn:${Partition}:apigateway:${Region}::/restapis/${RestApiId}/authorizers/${AuthorizerId}"
    ]
   },
   "apigateway:Authorizers": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/apis/${ApiId}/authorizers",
     "arn:${Partition}:apigateway:${Region}::/restapis/${RestApiId}/authorizers"
    ]
   },
   "apigateway:AuthorizersCache": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/apis/${ApiId}/stages/${StageName}/cache/authorizers"
    ]
   },
   "apigateway:BasePathMapping": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/domainnames/${DomainName}/basepathmappings/${BasePath}"
    ]
   },
   "apigateway:BasePathMappings": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/domainnames/${DomainName}/basepathmappings"
    ]
   },
   "apigateway:ClientCertificate": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/clientcertificates/${ClientCertificateId}"
    ]
   },
   "apigateway:ClientCertificates": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/clientcertificates"
    ]
   },
   "apigateway:Cors": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/apis/${ApiId}/cors"
    ]
   },
   "apigateway:Deployment": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/apis/${ApiId}/deployments/${DeploymentId}",
     "arn:${Partition}:apigateway:${Region}::/restapis/${RestApiId}/deployments/${DeploymentId}"
    ]
   },
   "apigateway:Deployments": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/apis/${ApiId}/deployments",
     "arn:${Partition}:apigateway:${Region}::/restapis/${RestApiId}/deployments"
    ]
   },
   "apigateway:DocumentationPart": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/restapis/${RestApiId}/documentation/parts/${DocumentationPartId}"
    ]
   },
   "apigateway:DocumentationParts": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/restapis/${RestApiId}/documentation/parts"
    ]
   },
   "apigateway:DocumentationVersion": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/restapis/${RestApiId}/documentation/versions/${DocumentationVersionId}"
    ]
   },
   "apigateway:DocumentationVersions": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/restapis/${RestApiId}/documentation/versions"
    ]
   },
   "apigateway:DomainName": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/domainnames/${DomainName}"
    ]
   },
   "apigateway:DomainNameAccessAssociation": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}:${Account}:/domainnameaccessassociations/domainname/${DomainName}/${SourceType}/${SourceId}"
    ]
   },
   "apigateway:DomainNameAccessAssociations": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}:${Account}:/domainnameaccessassociations"
    ]
   },
   "apigateway:DomainNames": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/domainnames"
    ]
   },
   "apigateway:ExportedAPI": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/apis/${ApiId}/exports/${Specification}"
    ]
   },
   "apigateway:GatewayResponse": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/restapis/${RestApiId}/gatewayresponses/${ResponseType}"
    ]
   },
   "apigateway:GatewayResponses": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/restapis/${RestApiId}/gatewayresponses"
    ]
   },
   "apigateway:Integration": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/apis/${ApiId}/integrations/${IntegrationId}",
     "arn:${Partition}:apigateway:${Region}::/restapis/${RestApiId}/resources/${ResourceId}/methods/${HttpMethodType}/integration"
    ]
   },
   "apigateway:IntegrationResponse": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/apis/${ApiId}/integrations/${IntegrationId}/integrationresponses/${IntegrationResponseId}",
     "arn:${Partition}:apigateway:${Region}::/restapis/${RestApiId}/resources/${ResourceId}/methods/${HttpMethodType}/integration/responses/${StatusCode}"
    ]
   },
   "apigateway:IntegrationResponses": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/apis/${ApiId}/integrations/${IntegrationId}/integrationresponses"
    ]
   },
   "apigateway:Integrations": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/apis/${ApiId}/integrations"
    ]
   },
   "apigateway:Method": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/restapis/${RestApiId}/resources/${ResourceId}/methods/${HttpMethodType}"
    ]
   },
   "apigateway:MethodResponse": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/restapis/${RestApiId}/resources/${ResourceId}/methods/${HttpMethodType}/responses/${StatusCode}"
    ]
   },
   "apigateway:Model": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/apis/${ApiId}/models/${ModelId}",
     "arn:${Partition}:apigateway:${Region}::/restapis/${RestApiId}/models/${ModelName}"
    ]
   },
   "apigateway:ModelTemplate": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/apis/${ApiId}/models/${ModelId}/template"
    ]
   },
   "apigateway:Models": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/apis/${ApiId}/models",
     "arn:${Partition}:apigateway:${Region}::/restapis/${RestApiId}/models"
    ]
   },
   "apigateway:PrivateBasePathMapping": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/domainnames/${DomainName}+${DomainIdentifier}/basepathmappings/${BasePath}"
    ]
   },
   "apigateway:PrivateBasePathMappings": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/domainnames/${DomainName}+${DomainIdentifier}/basepathmappings"
    ]
   },
   "apigateway:PrivateDomainName": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}:${Account}:/domainnames/${DomainName}+${DomainIdentifier}"
    ]
   },
   "apigateway:RequestValidator": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/restapis/${RestApiId}/requestvalidators/${RequestValidatorId}"
    ]
   },
   "apigateway:RequestValidators": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/restapis/${RestApiId}/requestvalidators"
    ]
   },
   "apigateway:Resource": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/restapis/${RestApiId}/resources/${ResourceId}"
    ]
   },
   "apigateway:Resources": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/restapis/${RestApiId}/resources"
    ]
   },
   "apigateway:RestApi": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/restapis/${RestApiId}"
    ]
   },
   "apigateway:RestApis": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/restapis"
    ]
   },
   "apigateway:Route": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/apis/${ApiId}/routes/${RouteId}"
    ]
   },
   "apigateway:RouteRequestParameter": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/apis/${ApiId}/routes/${RouteId}/requestparameters/${RequestParameterKey}"
    ]
   },
   "apigateway:RouteResponse": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/apis/${ApiId}/routes/${RouteId}/routeresponses/${RouteResponseId}"
    ]
   },
   "apigateway:RouteResponses": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/apis/${ApiId}/routes/${RouteId}/routeresponses"
    ]
   },
   "apigateway:RouteSettings": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/apis/${ApiId}/stages/${StageName}/routesettings/${RouteKey}"
    ]
   },
   "apigateway:Routes": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/apis/${ApiId}/routes"
    ]
   },
   "apigateway:Sdk": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/restapis/${RestApiId}/stages/${StageName}/sdks/${SdkType}"
    ]
   },
   "apigateway:Stage": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/apis/${ApiId}/stages/${StageName}",
     "arn:${Partition}:apigateway:${Region}::/restapis/${RestApiId}/stages/${StageName}"
    ]
   },
   "apigateway:Stages": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/apis/${ApiId}/stages",
     "arn:${Partition}:apigateway:${Region}::/restapis/${RestApiId}/stages"
    ]
   },
   "apigateway:Tags": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/tags/${UrlEncodedResourceARN}"
    ]
   },
   "apigateway:Template": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/restapis/models/${ModelName}/template"
    ]
   },
   "apigateway:UsagePlan": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/usageplans/${UsagePlanId}"
    ]
   },
   "apigateway:UsagePlanKey": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/usageplans/${UsagePlanId}/keys/${Id}"
    ]
   },
   "apigateway:UsagePlanKeys": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/usageplans/${UsagePlanId}/keys"
    ]
   },
   "apigateway:UsagePlans": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/usageplans"
    ]
   },
   "apigateway:VpcLink": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/vpclinks/${VpcLinkId}"
    ]
   },
   "apigateway:VpcLinks": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/vpclinks"
    ]
   },
   "app-integrations:application": {
    "arn_formats": [
     "arn:${Partition}:app-integrations:${Region}:${Account}:application/${ApplicationId}"
    ]
   },
   "app-integrations:application-association": {
    "arn_formats": [
     "arn:${Partition}:app-integrations:${Region}:${Account}:application-association/${ApplicationId}/${ApplicationAssociationId}"
    ]
   },
   "app-integrations:data-integration": {
    "arn_formats": [
     "arn:${Partition}:app-integrations:${Region}:${Account}:data-integration/${DataIntegrationId}"
    ]
   },
   "app-integrations:data-integration-association": {
    "arn_formats": [
     "arn:${Partition}:app-integrations:${Region}:${Account}:data-integration-association/${DataIntegrationId}/${ResourceId}"
    ]
   },
   "app-integrations:event-integration": {
    "arn_formats": [
     "arn:${Partition}:app-integrations:${Region}:${Account}:event-integration/${EventIntegrationName}"
    ]
   },
   "app-integrations:event-integration-association": {
    "arn_formats": [
     "arn:${Partition}:app-integrations:${Region}:${Account}:event-integration-association/${EventIntegrationName}/${ResourceId}"
    ]
   },
   "appconfig:application": {
    "arn_formats": [
     "arn:${Partition}:appconfig:${Region}:${Account}:application/${ApplicationId}"
    ]
   },
   "appconfig:configuration": {
    "arn_formats": [
     "arn:${Partition}:appconfig:${Region}:${Account}:application/${ApplicationId}/environment/${EnvironmentId}/configuration/${ConfigurationProfileId}"
    ]
   },
   "appconfig:configurationprofile": {
    "arn_formats": [
     "arn:${Partition}:appconfig:${Region}:${Account}:application/${ApplicationId}/configurationprofile/${ConfigurationProfileId}"
    ]
   },
   "appconfig:deployment": {
    "arn_formats": [
     "arn:${Partition}:appconfig:${Region}:${Account}:application/${ApplicationId}/environment/${EnvironmentId}/deployment/${DeploymentNumber}"
    ]
   },
   "appconfig:deploymentstrategy": {
    "arn_formats": [
     "arn:${Partition}:appconfig:${Region}:${Account}:deploymentstrategy/${DeploymentStrategyId}"
    ]
   },
   "appconfig:environment": {
    "arn_formats": [
     "arn:${Partition}:appconfig:${Region}:${Account}:application/${ApplicationId}/environment/${EnvironmentId}"
    ]
   },
   "appconfig:extension": {
    "arn_formats": [
     "arn:${Partition}:appconfig:${Region}:${Account}:extension/${ExtensionId}/${ExtensionVersionNumber}"
    ]
   },
   "appconfig:extensionassociation": {
    "arn_formats": [
     "arn:${Partition}:appconfig:${Region}:${Account}:extensionassociation/${ExtensionAssociationId}"
    ]
   },
   "appconfig:hostedconfigurationversion": {
    "arn_formats": [
     "arn:${Partition}:appconfig:${Region}:${Account}:application/${ApplicationId}/configurationprofile/${ConfigurationProfileId}/hostedconfigurationversion/${VersionNumber}"
    ]
   },
   "appfabric:appauthorization": {
    "arn_formats": [
     "arn:${Partition}:appfabric:${Region}:${Account}:appbundle/${AppbundleId}/appauthorization/${AppAuthorizationIdentifier}"
    ]
   },
   "appfabric:appbundle": {
    "arn_formats": [
     "arn:${Partition}:appfabric:${Region}:${Account}:appbundle/${AppBundleIdentifier}"
    ]
   },
   "appfabric:ingestion": {
    "arn_formats": [
     "arn:${Partition}:appfabric:${Region}:${Account}:appbundle/${AppbundleId}/ingestion/${IngestionIdentifier}"
    ]
   },
   "appfabric:ingestiondestination": {
    "arn_formats": [
     "arn:${Partition}:appfabric:${Region}:${Account}:appbundle/${AppbundleId}/ingestion/${IngestionIdentifier}/ingestiondestination/${IngestionDestinationIdentifier}"
    ]
   },
   "appflow:connector": {
    "arn_formats": [
     "arn:${Partition}:appflow:${Region}:${Account}:connector/${ConnectorLabel}"
    ]
   },
   "appflow:connectorprofile": {
    "arn_formats": [
     "arn:${Partition}:appflow:${Region}:${Account}:connectorprofile/${ProfileName}"
    ]
   },
   "appflow:flow": {
    "arn_formats": [
     "arn:${Partition}:appflow:${Region}:${Account}:flow/${FlowName}"
    ]
   },
   "application-autoscaling:ScalableTarget": {
    "arn_formats": [
     "arn:${Partition}:application-autoscaling:${Region}:${Account}:scalable-target/${ResourceId}"
    ]
   },
   "application-signals:slo": {
    "arn_formats": [
     "arn:${Partition}:application-signals:${Region}:${Account}:slo/${SloName}"
    ]
   },
   "appmesh-preview:gatewayRoute": {
    "arn_formats": [
     "arn:${Partition}:appmesh-preview:${Region}:${Account}:mesh/${MeshName}/virtualGateway/${VirtualGatewayName}/gatewayRoute/${GatewayRouteName}"
    ]
   },
   "appmesh-preview:mesh": {
    "arn_formats": [
     "arn:${Partition}:appmesh-preview:${Region}:${Account}:mesh/${MeshName}"
    ]
   },
   "appmesh-preview:route": {
    "arn_formats": [
     "arn:${Partition}:appmesh-preview:${Region}:${Account}:mesh/${MeshName}/virtualRouter/${VirtualRouterName}/route/${RouteName}"
    ]
   },
   "appmesh-preview:virtualGateway": {
    "arn_formats": [
     "arn:${Partition}:appmesh-preview:${Region}:${Account}:mesh/${MeshName}/virtualGateway/${VirtualGatewayName}"
    ]
   },
   "appmesh-preview:virtualNode": {
    "arn_formats": [
     "arn:${Partition}:appmesh-preview:${Region}:${Account}:mesh/${MeshName}/virtualNode/${VirtualNodeName}"
    ]
   },
   "appmesh-preview:virtualRouter": {
    "arn_formats": [
     "arn:${Partition}:appmesh-preview:${Region}:${Account}:mesh/${MeshName}/virtualRouter/${VirtualRouterName}"
    ]
   },
   "appmesh-preview:virtualService": {
    "arn_formats": [
     "arn:${Partition}:appmesh-preview:${Region}:${Account}:mesh/${MeshName}/virtualService/${VirtualServiceName}"
    ]
   },
   "appmesh:gatewayRoute": {
    "arn_formats": [
     "arn:${Partition}:appmesh:${Region}:${Account}:mesh/${MeshName}/virtualGateway/${VirtualGatewayName}/gatewayRoute/${GatewayRouteName}"
    ]
   },
   "appmesh:mesh": {
    "arn_formats": [
     "arn:${Partition}:appmesh:${Region}:${Account}:mesh/${MeshName}"
    ]
   },
   "appmesh:route": {
    "arn_formats": [
     "arn:${Partition}:appmesh:${Region}:${Account}:mesh/${MeshName}/virtualRouter/${VirtualRouterName}/route/${RouteName}"
    ]
   },
   "appmesh:virtualGateway": {
    "arn_formats": [
     "arn:${Partition}:appmesh:${Region}:${Account}:mesh/${MeshName}/virtualGateway/${VirtualGatewayName}"
    ]
   },
   "appmesh:virtualNode": {
    "arn_formats": [
     "arn:${Partition}:appmesh:${Region}:${Account}:mesh/${MeshName}/virtualNode/${VirtualNodeName}"
    ]
   },
   "appmesh:virtualRouter": {
    "arn_formats": [
     "arn:${Partition}:appmesh:${Region}:${Account}:mesh/${MeshName}/virtualRouter/${VirtualRouterName}"
    ]
   },
   "appmesh:virtualService": {
    "arn_formats": [
     "arn:${Partition}:appmesh:${Region}:${Account}:mesh/${MeshName}/virtualService/${VirtualServiceName}"
    ]
   },
   "apprunner:autoscalingconfiguration": {
    "arn_formats": [
     "arn:${Partition}:apprunner:${Region}:${Account}:autoscalingconfiguration/${AutoscalingConfigurationName}/${AutoscalingConfigurationVersion}/${AutoscalingConfigurationId}"
    ]
   },
   "apprunner:connection": {
    "arn_formats": [
     "arn:${Partition}:apprunner:${Region}:${Account}:connection/${ConnectionName}/${ConnectionId}"
    ]
   },
   "apprunner:observabilityconfiguration": {
    "arn_formats": [
     "arn:${Partition}:apprunner:${Region}:${Account}:observabilityconfiguration/${ObservabilityConfigurationName}/${ObservabilityConfigurationVersion}/${ObservabilityConfigurationId}"
    ]
   },
   "apprunner:service": {
    "arn_formats": [
     "arn:${Partition}:apprunner:${Region}:${Account}:service/${ServiceName}/${ServiceId}"
    ]
   },
   "apprunner:vpcconnector": {
    "arn_formats": [
     "arn:${Partition}:apprunner:${Region}:${Account}:vpcconnector/${VpcConnectorName}/${VpcConnectorVersion}/${VpcConnectorId}"
    ]
   },
   "apprunner:vpcingressconnection": {
    "arn_formats": [
     "arn:${Partition}:apprunner:${Region}:${Account}:vpcingressconnection/${VpcIngressConnectionName}/${VpcIngressConnectionId}"
    ]
   },
   "apprunner:webacl": {
    "arn_formats": [
     "arn:${Partition}:wafv2:${Region}:${Account}:${Scope}/webacl/${Name}/${Id}"
    ]
   },
   "appstream:app-block": {
    "arn_formats": [
     "arn:${Partition}:appstream:${Region}:${Account}:app-block/${AppBlockName}"
    ]
   },
   "appstream:app-block-builder": {
    "arn_formats": [
     "arn:${Partition}:appstream:${Region}:${Account}:app-block-builder/${AppBlockBuilderName}"
    ]
   },
   "appstream:application": {
    "arn_formats": [
     "arn:${Partition}:appstream:${Region}:${Account}:application/${ApplicationName}"
    ]
   },
   "appstream:fleet": {
    "arn_formats": [
     "arn:${Partition}:appstream:${Region}:${Account}:fleet/${FleetName}"
    ]
   },
   "appstream:image": {
    "arn_formats": [
     "arn:${Partition}:appstream:${Region}:${Account}:image/${ImageName}"
    ]
   },
   "appstream:image-builder": {
    "arn_formats": [
     "arn:${Partition}:appstream:${Region}:${Account}:image-builder/${ImageBuilderName}"
    ]
   },
   "appstream:stack": {
    "arn_formats": [
     "arn:${Partition}:appstream:${Region}:${Account}:stack/${StackName}"
    ]
   },
   "appsync:api": {
    "arn_formats": [
     "arn:${Partition}:appsync:${Region}:${Account}:apis/${ApiId}"
    ]
   },
   "appsync:channelNamespace": {
    "arn_formats": [
     "arn:${Partition}:appsync:${Region}:${Account}:apis/${ApiId}/channelNamespace/${ChannelNamespaceName}"
    ]
   },
   "appsync:datasource": {
    "arn_formats": [
     "arn:${Partition}:appsync:${Region}:${Account}:apis/${GraphQLAPIId}/datasources/${DatasourceName}"
    ]
   },
   "appsync:domain": {
    "arn_formats": [
     "arn:${Partition}:appsync:${Region}:${Account}:domainnames/${DomainName}"
    ]
   },
   "appsync:field": {
    "arn_formats": [
     "arn:${Partition}:appsync:${Region}:${Account}:apis/${GraphQLAPIId}/types/${TypeName}/fields/${FieldName}"
    ]
   },
   "appsync:function": {
    "arn_formats": [
     "arn:${Partition}:appsync:${Region}:${Account}:apis/${GraphQLAPIId}/functions/${FunctionId}"
    ]
   },
   "appsync:graphqlapi": {
    "arn_formats": [
     "arn:${Partition}:appsync:${Region}:${Account}:apis/${GraphQLAPIId}"
    ]
   },
   "appsync:mergedApiAssociation": {
    "arn_formats": [
     "arn:${Partition}:appsync:${Region}:${Account}:apis/${SourceGraphQLAPIId}/mergedApiAssociations/${Associationid}"
    ]
   },
   "appsync:sourceApiAssociation": {
    "arn_formats": [
     "arn:${Partition}:appsync:${Region}:${Account}:apis/${MergedGraphQLAPIId}/sourceApiAssociations/${Associationid}"
    ]
   },
   "appsync:type": {
    "arn_formats": [
     "arn:${Partition}:appsync:${Region}:${Account}:apis/${GraphQLAPIId}/types/${TypeName}"
    ]
   },
   "apptest:TestCase": {
    "arn_formats": [
     "arn:${Partition}:apptest:${Region}:${Account}:testcase/${TestCaseId}"
    ]
   },
   "apptest:TestConfiguration": {
    "arn_formats": [
     "arn:${Partition}:apptest:${Region}:${Account}:testconfiguration/${TestConfigurationId}"
    ]
   },
   "apptest:TestRun": {
    "arn_formats": [
     "arn:${Partition}:apptest:${Region}:${Account}:testrun/${TestRunId}"
    ]
   },
   "apptest:TestSuite": {
    "arn_formats": [
     "arn:${Partition}:apptest:${Region}:${Account}:testsuite/${TestSuiteId}"
    ]
   },
   "aps:cluster": {
    "arn_formats": [
     "arn:${Partition}:eks:${Region}:${Account}:cluster/${ClusterName}"
    ]
   },
   "aps:rulegroupsnamespace": {
    "arn_formats": [
     "arn:${Partition}:aps:${Region}:${Account}:rulegroupsnamespace/${WorkspaceId}/${Namespace}"
    ]
   },
   "aps:scraper": {
    "arn_formats": [
     "arn:${Partition}:aps:${Region}:${Account}:scraper/${ScraperId}"
    ]
   },
   "aps:workspace": {
    "arn_formats": [
     "arn:${Partition}:aps:${Region}:${Account}:workspace/${WorkspaceId}"
    ]
   },
   "arc-zonal-shift:ALB": {
    "arn_formats": [
     "arn:${Partition}:elasticloadbalancing:${Region}:${Account}:loadbalancer/app/${LoadBalancerName}/${LoadBalancerId}"
    ]
   },
   "arc-zonal-shift:NLB": {
    "arn_formats": [
     "arn:${Partition}:elasticloadbalancing:${Region}:${Account}:loadbalancer/net/${LoadBalancerName}/${LoadBalancerId}"
    ]
   },
   "artifact:agreement": {
    "arn_formats": [
     "arn:${Partition}:artifact:::agreement/*"
    ]
   },
   "artifact:customer-agreement": {
    "arn_formats": [
     "arn:${Partition}:artifact::${Account}:customer-agreement/*"
    ]
   },
   "artifact:report": {
    "arn_formats": [
     "arn:${Partition}:artifact:${Region}::report/${ReportId}:${Version}"
    ]
   },
   "artifact:report-package": {
    "arn_formats": [
     "arn:${Partition}:artifact:::report-package/*"
    ]
   },
   "athena:capacity-reservation": {
    "arn_formats": [
     "arn:${Partition}:athena:${Region}:${Account}:capacity-reservation/${CapacityReservationName}"
    ]
   },
   "athena:datacatalog": {
    "arn_formats": [
     "arn:${Partition}:athena:${Region}:${Account}:datacatalog/${DataCatalogName}"
    ]
   },
   "athena:workgroup": {
    "arn_formats": [
     "arn:${Partition}:athena:${Region}:${Account}:workgroup/${WorkGroupName}"
    ]
   },
   "auditmanager:assessment": {
    "arn_formats": [
     "arn:${Partition}:auditmanager:${Region}:${Account}:assessment/${AssessmentId}"
    ]
   },
   "auditmanager:assessmentControlSet": {
    "arn_formats": [
     "arn:${Partition}:auditmanager:${Region}:${Account}:assessment/${AssessmentId}/controlSet/${ControlSetId}"
    ]
   },
   "auditmanager:assessmentFramework": {
    "arn_formats": [
     "arn:${Partition}:auditmanager:${Region}:${Account}:assessmentFramework/${AssessmentFrameworkId}"
    ]
   },
   "auditmanager:control": {
    "arn_formats": [
     "arn:${Partition}:auditmanager:${Region}:${Account}:control/${ControlId}"
    ]
   },
   "autoscaling:autoScalingGroup": {
    "arn_formats": [
     "arn:${Partition}:autoscaling:${Region}:${Account}:autoScalingGroup:${GroupId}:autoScalingGroupName/${GroupFriendlyName}"
    ]
   },
   "autoscaling:launchConfiguration": {
    "arn_formats": [
     "arn:${Partition}:autoscaling:${Region}:${Account}:launchConfiguration:${Id}:launchConfigurationName/${LaunchConfigurationName}"
    ]
   },
   "aws-marketplace:ChangeSet": {
    "arn_formats": [
     "arn:${Partition}:aws-marketplace:${Region}:${Account}:${Catalog}/ChangeSet/${ResourceId}"
    ]
   },
   "aws-marketplace:Dashboard": {
    "arn_formats": [
     "arn:${Partition}:aws-marketplace::${Account}:${Catalog}/ReportingData/${FactTable}/Dashboard/${DashboardName}"
    ]
   },
   "aws-marketplace:DeploymentParameter": {
    "arn_formats": [
     "arn:${Partition}:aws-marketplace:${Region}:${Account}:DeploymentParameter:catalogs/${CatalogName}/products/${ProductId}/${ResourceId}"
    ]
   },
   "aws-marketplace:Entity": {
    "arn_formats": [
     "arn:${Partition}:aws-marketplace:${Region}:${Account}:${Catalog}/${EntityType}/${ResourceId}"
    ]
   },
   "aws-marketplace:SellerDashboard": {
    "arn_formats": [
     "arn:${Partition}:aws-marketplace::${Account}:${Catalog}/ReportingData/${FactTable}/Dashboard/${DashboardName}"
    ]
   },
   "b2bi:capability": {
    "arn_formats": [
     "arn:${Partition}:b2bi:${Region}:${Account}:capability/${ResourceId}"
    ]
   },
   "b2bi:partnership": {
    "arn_formats": [
     "arn:${Partition}:b2bi:${Region}:${Account}:partnership/${ResourceId}"
    ]
   },
   "b2bi:profile": {
    "arn_formats": [
     "arn:${Partition}:b2bi:${Region}:${Account}:profile/${ResourceId}"
    ]
   },
   "b2bi:transformer": {
    "arn_formats": [
     "arn:${Partition}:b2bi:${Region}:${Account}:transformer/${ResourceId}"
    ]
   },
   "backup-gateway:gateway": {
    "arn_formats": [
     "arn:${Partition}:backup-gateway::${Account}:gateway/${GatewayId}"
    ]
   },
   "backup-gateway:hypervisor": {
    "arn_formats": [
     "arn:${Partition}:backup-gateway::${Account}:hypervisor/${HypervisorId}"
    ]
   },
   "backup-gateway:virtualmachine": {
    "arn_formats": [
     "arn:${Partition}:backup-gateway::${Account}:vm/${VirtualmachineId}"
    ]
   },
   "backup-search:searchExportJob": {
    "arn_formats": [
     "arn:${Partition}:backup-search:${Region}:${Account}:search-export-job/${ResourceId}"
    ]
   },
   "backup-search:searchJob": {
    "arn_formats": [
     "arn:${Partition}:backup-search:${Region}:${Account}:search-job/${ResourceId}"
    ]
   },
   "backup:backupPlan": {
    "arn_formats": [
     "arn:${Partition}:backup:${Region}:${Account}:backup-plan:${BackupPlanId}"
    ]
   },
   "backup:backupVault": {
    "arn_formats": [
     "arn:${Partition}:backup:${Region}:${Account}:backup-vault:${BackupVaultName}"
    ]
   },
   "backup:framework": {
    "arn_formats": [
     "arn:${Partition}:backup:${Region}:${Account}:framework:${FrameworkName}-${FrameworkId}"
    ]
   },
   "backup:legalHold": {
    "arn_formats": [
     "arn:${Partition}:backup:${Region}:${Account}:legal-hold:${LegalHoldId}"
    ]
   },
   "backup:recoveryPoint": {
    "arn_formats": [
     "arn:${Partition}:${Vendor}:${Region}:*:${ResourceType}:${RecoveryPointId}"
    ]
   },
   "backup:reportPlan": {
    "arn_formats": [
     "arn:${Partition}:backup:${Region}:${Account}:report-plan:${ReportPlanName}-${ReportPlanId}"
    ]
   },
   "backup:restoreTestingPlan": {
    "arn_formats": [
     "arn:${Partition}:backup:${Region}:${Account}:restore-testing-plan:${RestoreTestingPlanName}-${RestoreTestingPlanId}"
    ]
   },
   "batch:compute-environment": {
    "arn_formats": [
     "arn:${Partition}:batch:${Region}:${Account}:compute-environment/${ComputeEnvironmentName}"
    ]
   },
   "batch:consumable-resource": {
    "arn_formats": [
     "arn:${Partition}:batch:${Region}:${Account}:consumable-resource/${ConsumableResourceName}"
    ]
   },
   "batch:job": {
    "arn_formats": [
     "arn:${Partition}:batch:${Region}:${Account}:job/${JobId}"
    ]
   },
   "batch:job-definition": {
    "arn_formats": [
     "arn:${Partition}:batch:${Region}:${Account}:job-definition/${JobDefinitionName}"
    ]
   },
   "batch:job-definition-revision": {
    "arn_formats": [
     "arn:${Partition}:batch:${Region}:${Account}:job-definition/${JobDefinitionName}:${Revision}"
    ]
   },
   "batch:job-queue": {
    "arn_formats": [
     "arn:${Partition}:batch:${Region}:${Account}:job-queue/${JobQueueName}"
    ]
   },
   "batch:scheduling-policy": {
    "arn_formats": [
     "arn:${Partition}:batch:${Region}:${Account}:scheduling-policy/${SchedulingPolicyName}"
    ]
   },
   "bcm-data-exports:export": {
    "arn_formats": [
     "arn:${Partition}:bcm-data-exports:${Region}:${Account}:export/${Identifier}"
    ]
   },
   "bcm-data-exports:table": {
    "arn_formats": [
     "arn:${Partition}:bcm-data-exports:${Region}:${Account}:table/${Identifier}"
    ]
   },
   "bcm-pricing-calculator:bill-estimate": {
    "arn_formats": [
     "arn:${Partition}:bcm-pricing-calculator:${Region}:${Account}:bill-estimate/${BillEstimateId}"
    ]
   },
   "bcm-pricing-calculator:bill-scenario": {
    "arn_formats": [
     "arn:${Partition}:bcm-pricing-calculator:${Region}:${Account}:bill-scenario/${BillScenarioId}"
    ]
   },
   "bcm-pricing-calculator:workload-estimate": {
    "arn_formats": [
     "arn:${Partition}:bcm-pricing-calculator:${Region}:${Account}:workload-estimate/${WorkloadEstimateId}"
    ]
   },
   "bedrock:agent": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:agent/${AgentId}"
    ]
   },
   "bedrock:agent-alias": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:agent-alias/${AgentId}/${AgentAliasId}"
    ]
   },
   "bedrock:application-inference-profile": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:application-inference-profile/${ResourceId}"
    ]
   },
   "bedrock:async-invoke": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:async-invoke/${ResourceId}"
    ]
   },
   "bedrock:bedrock-marketplace-model-endpoint": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:marketplace/model-endpoint/all-access"
    ]
   },
   "bedrock:blueprint": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:blueprint/${BlueprintId}"
    ]
   },
   "bedrock:custom-model": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:custom-model/${ResourceId}"
    ]
   },
   "bedrock:data-automation-invocation-job": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:data-automation-invocation/${JobId}"
    ]
   },
   "bedrock:data-automation-profile": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:data-automation-profile/${ProfileId}"
    ]
   },
   "bedrock:data-automation-project": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:data-automation-project/${ProjectId}"
    ]
   },
   "bedrock:default-prompt-router": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:default-prompt-router/${ResourceId}"
    ]
   },
   "bedrock:evaluation-job": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:evaluation-job/${ResourceId}"
    ]
   },
   "bedrock:flow": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:flow/${FlowId}"
    ]
   },
   "bedrock:flow-alias": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:flow/${FlowId}/alias/${FlowAliasId}"
    ]
   },
   "bedrock:foundation-model": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}::foundation-model/${ResourceId}"
    ]
   },
   "bedrock:guardrail": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:guardrail/${GuardrailId}"
    ]
   },
   "bedrock:imported-model": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:imported-model/${ResourceId}"
    ]
   },
   "bedrock:inference-profile": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:inference-profile/${ResourceId}"
    ]
   },
   "bedrock:knowledge-base": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:knowledge-base/${KnowledgeBaseId}"
    ]
   },
   "bedrock:model-copy-job": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:model-copy-job/${ResourceId}"
    ]
   },
   "bedrock:model-customization-job": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:model-customization-job/${ResourceId}"
    ]
   },
   "bedrock:model-evaluation-job": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:model-evaluation-job/${ResourceId}"
    ]
   },
   "bedrock:model-import-job": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:model-import-job/${ResourceId}"
    ]
   },
   "bedrock:model-invocation-job": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:model-invocation-job/${JobIdentifier}"
    ]
   },
   "bedrock:prompt": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:prompt/${PromptId}"
    ]
   },
   "bedrock:prompt-router": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:prompt-router/${ResourceId}"
    ]
   },
   "bedrock:prompt-version": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:prompt/${PromptId}:${PromptVersion}"
    ]
   },
   "bedrock:provisioned-model": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:provisioned-model/${ResourceId}"
    ]
   },
   "bedrock:session": {
    "arn_formats": [
     "arn:${Partition}:bedrock:${Region}:${Account}:session/${SessionId}"
    ]
   },
   "billing:billingview": {
    "arn_formats": [
     "arn:${Partition}:billing::${Account}:billingview/${ResourceId}"
    ]
   },
   "billingconductor:billinggroup": {
    "arn_formats": [
     "arn:${Partition}:billingconductor::${Account}:billinggroup/${BillingGroupId}"
    ]
   },
   "billingconductor:customlineitem": {
    "arn_formats": [
     "arn:${Partition}:billingconductor::${Account}:customlineitem/${CustomLineItemId}"
    ]
   },
   "billingconductor:pricingplan": {
    "arn_formats": [
     "arn:${Partition}:billingconductor::${Account}:pricingplan/${PricingPlanId}"
    ]
   },
   "billingconductor:pricingrule": {
    "arn_formats": [
     "arn:${Partition}:billingconductor::${Account}:pricingrule/${PricingRuleId}"
    ]
   },
   "braket:job": {
    "arn_formats": [
     "arn:${Partition}:braket:${Region}:${Account}:job/${JobName}"
    ]
   },
   "braket:quantum-task": {
    "arn_formats": [
     "arn:${Partition}:braket:${Region}:${Account}:quantum-task/${RandomId}"
    ]
   },
   "budgets:budget": {
    "arn_formats": [
     "arn:${Partition}:budgets::${Account}:budget/${BudgetName}"
    ]
   },
   "budgets:budgetAction": {
    "arn_formats": [
     "arn:${Partition}:budgets::${Account}:budget/${BudgetName}/action/${ActionId}"
    ]
   },
   "bugbust:Event": {
    "arn_formats": [
     "arn:${Partition}:bugbust:${Region}:${Account}:events/${EventId}"
    ]
   },
   "cases:Case": {
    "arn_formats": [
     "arn:${Partition}:cases:${Region}:${Account}:domain/${DomainId}/case/${CaseId}"
    ]
   },
   "cases:CaseRule": {
    "arn_formats": [
     "arn:${Partition}:cases:${Region}:${Account}:domain/${DomainId}/case-rule/${CaseRuleId}"
    ]
   },
   "cases:Domain": {
    "arn_formats": [
     "arn:${Partition}:cases:${Region}:${Account}:domain/${DomainId}"
    ]
   },
   "cases:Field": {
    "arn_formats": [
     "arn:${Partition}:cases:${Region}:${Account}:domain/${DomainId}/field/${FieldId}"
    ]
   },
   "cases:Layout": {
    "arn_formats": [
     "arn:${Partition}:cases:${Region}:${Account}:domain/${DomainId}/layout/${LayoutId}"
    ]
   },
   "cases:RelatedItem": {
    "arn_formats": [
     "arn:${Partition}:cases:${Region}:${Account}:domain/${DomainId}/case/${CaseId}/related-item/${RelatedItemId}"
    ]
   },
   "cases:Template": {
    "arn_formats": [
     "arn:${Partition}:cases:${Region}:${Account}:domain/${DomainId}/template/${TemplateId}"
    ]
   },
   "cassandra:keyspace": {
    "arn_formats": [
     "arn:${Partition}:cassandra:${Region}:${Account}:/keyspace/${KeyspaceName}/"
    ]
   },
   "cassandra:table": {
    "arn_formats": [
     "arn:${Partition}:cassandra:${Region}:${Account}:/keyspace/${KeyspaceName}/table/${TableName}"
    ]
   },
   "ce:anomalymonitor": {
    "arn_formats": [
     "arn:${Partition}:ce::${Account}:anomalymonitor/${Identifier}"
    ]
   },
   "ce:anomalysubscription": {
    "arn_formats": [
     "arn:${Partition}:ce::${Account}:anomalysubscription/${Identifier}"
    ]
   },
   "ce:billingview": {
    "arn_formats": [
     "arn:${Partition}:billing::${Account}:billingview/${ResourceId}"
    ]
   },
   "ce:costcategory": {
    "arn_formats": [
     "arn:${Partition}:ce::${Account}:costcategory/${Identifier}"
    ]
   },
   "chatbot:ChatbotConfiguration": {
    "arn_formats": [
     "arn:${Partition}:chatbot::${Account}:chat-configuration/${ConfigurationType}/${ChatbotConfigurationName}"
    ]
   },
   "chatbot:custom-action": {
    "arn_formats": [
     "arn:${Partition}:chatbot::${Account}:custom-action/${ActionName}"
    ]
   },
   "chime:app-instance": {
    "arn_formats": [
     "arn:${Partition}:chime:${Region}:${AccountId}:app-instance/${AppInstanceId}"
    ]
   },
   "chime:app-instance-bot": {
    "arn_formats": [
     "arn:${Partition}:chime:${Region}:${AccountId}:app-instance/${AppInstanceId}/bot/${AppInstanceBotId}"
    ]
   },
   "chime:app-instance-user": {
    "arn_formats": [
     "arn:${Partition}:chime:${Region}:${AccountId}:app-instance/${AppInstanceId}/user/${AppInstanceUserId}"
    ]
   },
   "chime:channel": {
    "arn_formats": [
     "arn:${Partition}:chime:${Region}:${AccountId}:app-instance/${AppInstanceId}/channel/${ChannelId}"
    ]
   },
   "chime:channel-flow": {
    "arn_formats": [
     "arn:${Partition}:chime:${Region}:${AccountId}:app-instance/${AppInstanceId}/channel-flow/${ChannelFlowId}"
    ]
   },
   "chime:media-insights-pipeline-configuration": {
    "arn_formats": [
     "arn:${Partition}:chime:${Region}:${AccountId}:media-insights-pipeline-configuration/${ConfigurationName}"
    ]
   },
   "chime:media-pipeline": {
    "arn_formats": [
     "arn:${Partition}:chime:${Region}:${AccountId}:media-pipeline/${MediaPipelineId}"
    ]
   },
   "chime:media-pipeline-kinesis-video-stream-pool": {
    "arn_formats": [
     "arn:${Partition}:chime:${Region}:${AccountId}:media-pipeline-kinesis-video-stream-pool/${PoolName}"
    ]
   },
   "chime:meeting": {
    "arn_formats": [
     "arn:${Partition}:chime::${AccountId}:meeting/${MeetingId}"
    ]
   },
   "chime:sip-media-application": {
    "arn_formats": [
     "arn:${Partition}:chime:${Region}:${AccountId}:sma/${SipMediaApplicationId}"
    ]
   },
   "chime:voice-connector": {
    "arn_formats": [
     "arn:${Partition}:chime:${Region}:${AccountId}:vc/${VoiceConnectorId}"
    ]
   },
   "chime:voice-profile": {
    "arn_formats": [
     "arn:${Partition}:chime:${Region}:${AccountId}:voice-profile/${VoiceProfileId}"
    ]
   },
   "chime:voice-profile-domain": {
    "arn_formats": [
     "arn:${Partition}:chime:${Region}:${AccountId}:voice-profile-domain/${VoiceProfileDomainId}"
    ]
   },
   "cleanrooms-ml:ConfiguredModelAlgorithm": {
    "arn_formats": [
     "arn:${Partition}:cleanrooms-ml:${Region}:${Account}:configured-model-algorithm/${ResourceId}"
    ]
   },
   "cleanrooms-ml:ConfiguredModelAlgorithmAssociation": {
    "arn_formats": [
     "arn:${Partition}:cleanrooms-ml:${Region}:${Account}:membership/${MembershipId}/configured-model-algorithm-association/${ResourceId}"
    ]
   },
   "cleanrooms-ml:MLInputChannel": {
    "arn_formats": [
     "arn:${Partition}:cleanrooms-ml:${Region}:${Account}:membership/${MembershipId}/ml-input-channel/${ResourceId}"
    ]
   },
   "cleanrooms-ml:TrainedModel": {
    "arn_formats": [
     "arn:${Partition}:cleanrooms-ml:${Region}:${Account}:membership/${MembershipId}/trained-model/${ResourceId}"
    ]
   },
   "cleanrooms-ml:TrainedModelInferenceJob": {
    "arn_formats": [
     "arn:${Partition}:cleanrooms-ml:${Region}:${Account}:membership/${MembershipId}/trained-model-inference-job/${ResourceId}"
    ]
   },
   "cleanrooms-ml:audiencegenerationjob": {
    "arn_formats": [
     "arn:${Partition}:cleanrooms-ml:${Region}:${Account}:audience-generation-job/${ResourceId}"
    ]
   },
   "cleanrooms-ml:audiencemodel": {
    "arn_formats": [
     "arn:${Partition}:cleanrooms-ml:${Region}:${Account}:audience-model/${ResourceId}"
    ]
   },
   "cleanrooms-ml:configuredaudiencemodel": {
    "arn_formats": [
     "arn:${Partition}:cleanrooms-ml:${Region}:${Account}:configured-audience-model/${ResourceId}"
    ]
   },
   "cleanrooms-ml:trainingdataset": {
    "arn_formats": [
     "arn:${Partition}:cleanrooms-ml:${Region}:${Account}:training-dataset/${ResourceId}"
    ]
   },
   "cleanrooms:analysistemplate": {
    "arn_formats": [
     "arn:${Partition}:cleanrooms:${Region}:${Account}:membership/${MembershipId}/analysistemplate/${AnalysisTemplateId}"
    ]
   },
   "cleanrooms:collaboration": {
    "arn_formats": [
     "arn:${Partition}:cleanrooms:${Region}:${Account}:collaboration/${CollaborationId}"
    ]
   },
   "cleanrooms:configuredaudiencemodelassociation": {
    "arn_formats": [
     "arn:${Partition}:cleanrooms:${Region}:${Account}:membership/${MembershipId}/configuredaudiencemodelassociation/${ConfiguredAudienceModelAssociationId}"
    ]
   },
   "cleanrooms:configuredtable": {
    "arn_formats": [
     "arn:${Partition}:cleanrooms:${Region}:${Account}:configuredtable/${ConfiguredTableId}"
    ]
   },
   "cleanrooms:configuredtableassociation": {
    "arn_formats": [
     "arn:${Partition}:cleanrooms:${Region}:${Account}:membership/${MembershipId}/configuredtableassociation/${ConfiguredTableAssociationId}"
    ]
   },
   "cleanrooms:idmappingtable": {
    "arn_formats": [
     "arn:${Partition}:cleanrooms:${Region}:${Account}:membership/${MembershipId}/idmappingtable/${IdMappingTableId}"
    ]
   },
   "cleanrooms:idnamespaceassociation": {
    "arn_formats": [
     "arn:${Partition}:cleanrooms:${Region}:${Account}:membership/${MembershipId}/idnamespaceassociation/${IdNamespaceAssociationId}"
    ]
   },
   "cleanrooms:membership": {
    "arn_formats": [
     "arn:${Partition}:cleanrooms:${Region}:${Account}:membership/${MembershipId}"
    ]
   },
   "cleanrooms:privacybudgettemplate": {
    "arn_formats": [
     "arn:${Partition}:cleanrooms:${Region}:${Account}:membership/${MembershipId}/privacybudgettemplate/${PrivacyBudgetTemplateId}"
    ]
   },
   "cloud9:environment": {
    "arn_formats": [
     "arn:${Partition}:cloud9:${Region}:${Account}:environment:${ResourceId}"
    ]
   },
   "clouddirectory:appliedSchema": {
    "arn_formats": [
     "arn:${Partition}:clouddirectory:${Region}:${Account}:directory/${DirectoryId}/schema/${SchemaName}/${Version}"
    ]
   },
   "clouddirectory:developmentSchema": {
    "arn_formats": [
     "arn:${Partition}:clouddirectory:${Region}:${Account}:schema/development/${SchemaName}"
    ]
   },
   "clouddirectory:directory": {
    "arn_formats": [
     "arn:${Partition}:clouddirectory:${Region}:${Account}:directory/${DirectoryId}"
    ]
   },
   "clouddirectory:publishedSchema": {
    "arn_formats": [
     "arn:${Partition}:clouddirectory:${Region}:${Account}:schema/published/${SchemaName}/${Version}"
    ]
   },
   "cloudformation:changeset": {
    "arn_formats": [
     "arn:${Partition}:cloudformation:${Region}:${Account}:changeSet/${ChangeSetName}/${Id}"
    ]
   },
   "cloudformation:generatedtemplate": {
    "arn_formats": [
     "arn:${Partition}:cloudformation:${Region}:${Account}:generatedTemplate/${Id}"
    ]
   },
   "cloudformation:resourcescan": {
    "arn_formats": [
     "arn:${Partition}:cloudformation:${Region}:${Account}:resourceScan/${Id}"
    ]
   },
   "cloudformation:stack": {
    "arn_formats": [
     "arn:${Partition}:cloudformation:${Region}:${Account}:stack/${StackName}/${Id}"
    ]
   },
   "cloudformation:stackset": {
    "arn_formats": [
     "arn:${Partition}:cloudformation:${Region}:${Account}:stackset/${StackSetName}:${Id}"
    ]
   },
   "cloudformation:stackset-target": {
    "arn_formats": [
     "arn:${Partition}:cloudformation:${Region}:${Account}:stackset-target/${StackSetTarget}"
    ]
   },
   "cloudformation:type": {
    "arn_formats": [
     "arn:${Partition}:cloudformation:${Region}:${Account}:type/resource/${Type}"
    ]
   },
   "cloudfront-keyvaluestore:key-value-store": {
    "arn_formats": [
     "arn:${Partition}:cloudfront::${Account}:key-value-store/${ResourceId}"
    ]
   },
   "cloudfront:anycast-ip-list": {
    "arn_formats": [
     "arn:${Partition}:cloudfront::${Account}:anycast-ip-list/${Id}"
    ]
   },
   "cloudfront:cache-policy": {
    "arn_formats": [
     "arn:${Partition}:cloudfront::${Account}:cache-policy/${Id}"
    ]
   },
   "cloudfront:continuous-deployment-policy": {
    "arn_formats": [
     "arn:${Partition}:cloudfront::${Account}:continuous-deployment-policy/${Id}"
    ]
   },
   "cloudfront:distribution": {
    "arn_formats": [
     "arn:${Partition}:cloudfront::${Account}:distribution/${DistributionId}"
    ]
   },
   "cloudfront:field-level-encryption-config": {
    "arn_formats": [
     "arn:${Partition}:cloudfront::${Account}:field-level-encryption-config/${Id}"
    ]
   },
   "cloudfront:field-level-encryption-profile": {
    "arn_formats": [
     "arn:${Partition}:cloudfront::${Account}:field-level-encryption-profile/${Id}"
    ]
   },
   "cloudfront:function": {
    "arn_formats": [
     "arn:${Partition}:cloudfront::${Account}:function/${Name}"
    ]
   },
   "cloudfront:key-value-store": {
    "arn_formats": [
     "arn:${Partition}:cloudfront::${Account}:key-value-store/${Name}"
    ]
   },
   "cloudfront:origin-access-control": {
    "arn_formats": [
     "arn:${Partition}:cloudfront::${Account}:origin-access-control/${Id}"
    ]
   },
   "cloudfront:origin-access-identity": {
    "arn_formats": [
     "arn:${Partition}:cloudfront::${Account}:origin-access-identity/${Id}"
    ]
   },
   "cloudfront:origin-request-policy": {
    "arn_formats": [
     "arn:${Partition}:cloudfront::${Account}:origin-request-policy/${Id}"
    ]
   },
   "cloudfront:realtime-log-config": {
    "arn_formats": [
     "arn:${Partition}:cloudfront::${Account}:realtime-log-config/${Name}"
    ]
   },
   "cloudfront:response-headers-policy": {
    "arn_formats": [
     "arn:${Partition}:cloudfront::${Account}:response-headers-policy/${Id}"
    ]
   },
   "cloudfront:streaming-distribution": {
    "arn_formats": [
     "arn:${Partition}:cloudfront::${Account}:streaming-distribution/${DistributionId}"
    ]
   },
   "cloudfront:vpcorigin": {
    "arn_formats": [
     "arn:${Partition}:cloudfront::${Account}:vpcorigin/${Id}"
    ]
   },
   "cloudhsm:backup": {
    "arn_formats": [
     "arn:${Partition}:cloudhsm:${Region}:${Account}:backup/${CloudHsmBackupInstanceName}"
    ]
   },
   "cloudhsm:cluster": {
    "arn_formats": [
     "arn:${Partition}:cloudhsm:${Region}:${Account}:cluster/${CloudHsmClusterInstanceName}"
    ]
   },
   "cloudsearch:domain": {
    "arn_formats": [
     "arn:${Partition}:cloudsearch:${Region}:${Account}:domain/${DomainName}"
    ]
   },
   "cloudshell:Environment": {
    "arn_formats": [
     "arn:${Partition}:cloudshell:${Region}:${Account}:environment/${EnvironmentId}"
    ]
   },
   "cloudtrail-data:channel": {
    "arn_formats": [
     "arn:${Partition}:cloudtrail:${Region}:${Account}:channel/${ChannelId}"
    ]
   },
   "cloudtrail:channel": {
    "arn_formats": [
     "arn:${Partition}:cloudtrail:${Region}:${Account}:channel/${ChannelId}"
    ]
   },
   "cloudtrail:dashboard": {
    "arn_formats": [
     "arn:${Partition}:cloudtrail:${Region}:${Account}:dashboard/${DashboardName}"
    ]
   },
   "cloudtrail:eventdatastore": {
    "arn_formats": [
     "arn:${Partition}:cloudtrail:${Region}:${Account}:eventdatastore/${EventDataStoreId}"
    ]
   },
   "cloudtrail:trail": {
    "arn_formats": [
     "arn:${Partition}:cloudtrail:${Region}:${Account}:trail/${TrailName}"
    ]
   },
   "cloudwatch:alarm": {
    "arn_formats": [
     "arn:${Partition}:cloudwatch:${Region}:${Account}:alarm:${AlarmName}"
    ]
   },
   "cloudwatch:dashboard": {
    "arn_formats": [
     "arn:${Partition}:cloudwatch::${Account}:dashboard/${DashboardName}"
    ]
   },
   "cloudwatch:insight-rule": {
    "arn_formats": [
     "arn:${Partition}:cloudwatch:${Region}:${Account}:insight-rule/${InsightRuleName}"
    ]
   },
   "cloudwatch:metric-stream": {
    "arn_formats": [
     "arn:${Partition}:cloudwatch:${Region}:${Account}:metric-stream/${MetricStreamName}"
    ]
   },
   "cloudwatch:service": {
    "arn_formats": [
     "arn:${Partition}:cloudwatch:${Region}:${Account}:service/${ServiceName}-${UniqueAttributesHex}"
    ]
   },
   "cloudwatch:slo": {
    "arn_formats": [
     "arn:${Partition}:cloudwatch:${Region}:${Account}:slo/${SloName}"
    ]
   },
   "codeartifact:domain": {
    "arn_formats": [
     "arn:${Partition}:codeartifact:${Region}:${Account}:domain/${DomainName}"
    ]
   },
   "codeartifact:package": {
    "arn_formats": [
     "arn:${Partition}:codeartifact:${Region}:${Account}:package/${DomainName}/${RepositoryName}/${PackageFormat}/${PackageNamespace}/${PackageName}"
    ]
   },
   "codeartifact:package-group": {
    "arn_formats": [
     "arn:${Partition}:codeartifact:${Region}:${Account}:package-group/${DomainName}${EncodedPackageGroupPattern}"
    ]
   },
   "codeartifact:repository": {
    "arn_formats": [
     "arn:${Partition}:codeartifact:${Region}:${Account}:repository/${DomainName}/${RepositoryName}"
    ]
   },
   "codebuild:build": {
    "arn_formats": [
     "arn:${Partition}:codebuild:${Region}:${Account}:build/${BuildId}"
    ]
   },
   "codebuild:build-batch": {
    "arn_formats": [
     "arn:${Partition}:codebuild:${Region}:${Account}:build-batch/${BuildBatchId}"
    ]
   },
   "codebuild:fleet": {
    "arn_formats": [
     "arn:${Partition}:codebuild:${Region}:${Account}:fleet/${FleetName}:${FleetId}"
    ]
   },
   "codebuild:project": {
    "arn_formats": [
     "arn:${Partition}:codebuild:${Region}:${Account}:project/${ProjectName}"
    ]
   },
   "codebuild:report": {
    "arn_formats": [
     "arn:${Partition}:codebuild:${Region}:${Account}:report/${ReportGroupName}:${ReportId}"
    ]
   },
   "codebuild:report-group": {
    "arn_formats": [
     "arn:${Partition}:codebuild:${Region}:${Account}:report-group/${ReportGroupName}"
    ]
   },
   "codecatalyst:connections": {
    "arn_formats": [
     "arn:${Partition}:codecatalyst:${Region}:${Account}:/connections/${ConnectionId}"
    ]
   },
   "codecatalyst:identity-center-applications": {
    "arn_formats": [
     "arn:${Partition}:codecatalyst:${Region}:${Account}:/identity-center-applications/${IdentityCenterApplicationId}"
    ]
   },
   "codecatalyst:project": {
    "arn_formats": [
     "arn:${Partition}:codecatalyst:::space/${SpaceId}/project/${ProjectId}"
    ]
   },
   "codecatalyst:space": {
    "arn_formats": [
     "arn:${Partition}:codecatalyst:::space/${SpaceId}"
    ]
   },
   "codecommit:repository": {
    "arn_formats": [
     "arn:${Partition}:codecommit:${Region}:${Account}:${RepositoryName}"
    ]
   },
   "codeconnections:Connection": {
    "arn_formats": [
     "arn:${Partition}:codeconnections:${Region}:${Account}:connection/${ConnectionId}"
    ]
   },
   "codeconnections:Host": {
    "arn_formats": [
     "arn:${Partition}:codeconnections:${Region}:${Account}:host/${HostId}"
    ]
   },
   "codeconnections:RepositoryLink": {
    "arn_formats": [
     "arn:${Partition}:codeconnections:${Region}:${Account}:repository-link/${RepositoryLinkId}"
    ]
   },
   "codedeploy:application": {
    "arn_formats": [
     "arn:${Partition}:codedeploy:${Region}:${Account}:application:${ApplicationName}"
    ]
   },
   "codedeploy:deploymentconfig": {
    "arn_formats": [
     "arn:${Partition}:codedeploy:${Region}:${Account}:deploymentconfig:${DeploymentConfigurationName}"
    ]
   },
   "codedeploy:deploymentgroup": {
    "arn_formats": [
     "arn:${Partition}:codedeploy:${Region}:${Account}:deploymentgroup:${ApplicationName}/${DeploymentGroupName}"
    ]
   },
   "codedeploy:instance": {
    "arn_formats": [
     "arn:${Partition}:codedeploy:${Region}:${Account}:instance:${InstanceName}"
    ]
   },
   "codeguru-profiler:ProfilingGroup": {
    "arn_formats": [
     "arn:${Partition}:codeguru-profiler:${Region}:${Account}:profilingGroup/${ProfilingGroupName}"
    ]
   },
   "codeguru-reviewer:association": {
    "arn_formats": [
     "arn:${Partition}:codeguru-reviewer:${Region}:${Account}:association:${ResourceId}"
    ]
   },
   "codeguru-reviewer:codereview": {
    "arn_formats": [
     "arn:${Partition}:codeguru-reviewer:${Region}:${Account}:association:${ResourceId}:codereview:${CodeReviewId}"
    ]
   },
   "codeguru-security:ScanName": {
    "arn_formats": [
     "arn:${Partition}:codeguru-security:${Region}:${Account}:scans/${ScanName}"
    ]
   },
   "codepipeline:action": {
    "arn_formats": [
     "arn:${Partition}:codepipeline:${Region}:${Account}:${PipelineName}/${StageName}/${ActionName}"
    ]
   },
   "codepipeline:actiontype": {
    "arn_formats": [
     "arn:${Partition}:codepipeline:${Region}:${Account}:actiontype:${Owner}/${Category}/${Provider}/${Version}"
    ]
   },
   "codepipeline:pipeline": {
    "arn_formats": [
     "arn:${Partition}:codepipeline:${Region}:${Account}:${PipelineName}"
    ]
   },
   "codepipeline:stage": {
    "arn_formats": [
     "arn:${Partition}:codepipeline:${Region}:${Account}:${PipelineName}/${StageName}"
    ]
   },
   "codepipeline:webhook": {
    "arn_formats": [
     "arn:${Partition}:codepipeline:${Region}:${Account}:webhook:${WebhookName}"
    ]
   },
   "codestar-connections:Connection": {
    "arn_formats": [
     "arn:${Partition}:codestar-connections:${Region}:${Account}:connection/${ConnectionId}"
    ]
   },
   "codestar-connections:Host": {
    "arn_formats": [
     "arn:${Partition}:codestar-connections:${Region}:${Account}:host/${HostId}"
    ]
   },
   "codestar-connections:RepositoryLink": {
    "arn_formats": [
     "arn:${Partition}:codestar-connections:${Region}:${Account}:repository-link/${RepositoryLinkId}"
    ]
   },
   "codestar-notifications:notificationrule": {
    "arn_formats": [
     "arn:${Partition}:codestar-notifications:${Region}:${Account}:notificationrule/${NotificationRuleId}"
    ]
   },
   "codestar:project": {
    "arn_formats": [
     "arn:${Partition}:codestar:${Region}:${Account}:project/${ProjectId}"
    ]
   },
   "codestar:user": {
    "arn_formats": [
     "arn:${Partition}:iam::${Account}:user/${AwsUserName}"
    ]
   },
   "codewhisperer:customization": {
    "arn_formats": [
     "arn:${Partition}:codewhisperer:${Region}:${Account}:customization/${Identifier}"
    ]
   },
   "codewhisperer:profile": {
    "arn_formats": [
     "arn:${Partition}:codewhisperer:${Region}:${Account}:profile/${Identifier}"
    ]
   },
   "cognito-identity:identitypool": {
    "arn_formats": [
     "arn:${Partition}:cognito-identity:${Region}:${Account}:identitypool/${IdentityPoolId}"
    ]
   },
   "cognito-idp:userpool": {
    "arn_formats": [
     "arn:${Partition}:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}"
    ]
   },
   "cognito-idp:webacl": {
    "arn_formats": [
     "arn:${Partition}:wafv2:${Region}:${Account}:${Scope}/webacl/${Name}/${Id}"
    ]
   },
   "cognito-sync:dataset": {
    "arn_formats": [
     "arn:${Partition}:cognito-sync:${Region}:${Account}:identitypool/${IdentityPoolId}/identity/${IdentityId}/dataset/${DatasetName}"
    ]
   },
   "cognito-sync:identity": {
    "arn_formats": [
     "arn:${Partition}:cognito-sync:${Region}:${Account}:identitypool/${IdentityPoolId}/identity/${IdentityId}"
    ]
   },
   "cognito-sync:identitypool": {
    "arn_formats": [
     "arn:${Partition}:cognito-sync:${Region}:${Account}:identitypool/${IdentityPoolId}"
    ]
   },
   "comprehend:document-classification-job": {
    "arn_formats": [
     "arn:${Partition}:comprehend:${Region}:${Account}:document-classification-job/${JobId}"
    ]
   },
   "comprehend:document-classifier": {
    "arn_formats": [
     "arn:${Partition}:comprehend:${Region}:${Account}:document-classifier/${DocumentClassifierName}"
    ]
   },
   "comprehend:document-classifier-endpoint": {
    "arn_formats": [
     "arn:${Partition}:comprehend:${Region}:${Account}:document-classifier-endpoint/${DocumentClassifierEndpointName}"
    ]
   },
   "comprehend:dominant-language-detection-job": {
    "arn_formats": [
     "arn:${Partition}:comprehend:${Region}:${Account}:dominant-language-detection-job/${JobId}"
    ]
   },
   "comprehend:entities-detection-job": {
    "arn_formats": [
     "arn:${Partition}:comprehend:${Region}:${Account}:entities-detection-job/${JobId}"
    ]
   },
   "comprehend:entity-recognizer": {
    "arn_formats": [
     "arn:${Partition}:comprehend:${Region}:${Account}:entity-recognizer/${EntityRecognizerName}"
    ]
   },
   "comprehend:entity-recognizer-endpoint": {
    "arn_formats": [
     "arn:${Partition}:comprehend:${Region}:${Account}:entity-recognizer-endpoint/${EntityRecognizerEndpointName}"
    ]
   },
   "comprehend:events-detection-job": {
    "arn_formats": [
     "arn:${Partition}:comprehend:${Region}:${Account}:events-detection-job/${JobId}"
    ]
   },
   "comprehend:flywheel": {
    "arn_formats": [
     "arn:${Partition}:comprehend:${Region}:${Account}:flywheel/${FlywheelName}"
    ]
   },
   "comprehend:flywheel-dataset": {
    "arn_formats": [
     "arn:${Partition}:comprehend:${Region}:${Account}:flywheel/${FlywheelName}/dataset/${DatasetName}"
    ]
   },
   "comprehend:key-phrases-detection-job": {
    "arn_formats": [
     "arn:${Partition}:comprehend:${Region}:${Account}:key-phrases-detection-job/${JobId}"
    ]
   },
   "comprehend:pii-entities-detection-job": {
    "arn_formats": [
     "arn:${Partition}:comprehend:${Region}:${Account}:pii-entities-detection-job/${JobId}"
    ]
   },
   "comprehend:sentiment-detection-job": {
    "arn_formats": [
     "arn:${Partition}:comprehend:${Region}:${Account}:sentiment-detection-job/${JobId}"
    ]
   },
   "comprehend:targeted-sentiment-detection-job": {
    "arn_formats": [
     "arn:${Partition}:comprehend:${Region}:${Account}:targeted-sentiment-detection-job/${JobId}"
    ]
   },
   "comprehend:topics-detection-job": {
    "arn_formats": [
     "arn:${Partition}:comprehend:${Region}:${Account}:topics-detection-job/${JobId}"
    ]
   },
   "config:AggregationAuthorization": {
    "arn_formats": [
     "arn:${Partition}:config:${Region}:${Account}:aggregation-authorization/${AggregatorAccount}/${AggregatorRegion}"
    ]
   },
   "config:ConfigRule": {
    "arn_formats": [
     "arn:${Partition}:config:${Region}:${Account}:config-rule/${ConfigRuleId}"
    ]
   },
   "config:ConfigurationAggregator": {
    "arn_formats": [
     "arn:${Partition}:config:${Region}:${Account}:config-aggregator/${AggregatorId}"
    ]
   },
   "config:ConfigurationRecorder": {
    "arn_formats": [
     "arn:${Partition}:config:${Region}:${Account}:configuration-recorder/${RecorderName}/${RecorderId}"
    ]
   },
   "config:ConformancePack": {
    "arn_formats": [
     "arn:${Partition}:config:${Region}:${Account}:conformance-pack/${ConformancePackName}/${ConformancePackId}"
    ]
   },
   "config:OrganizationConfigRule": {
    "arn_formats": [
     "arn:${Partition}:config:${Region}:${Account}:organization-config-rule/${OrganizationConfigRuleId}"
    ]
   },
   "config:OrganizationConformancePack": {
    "arn_formats": [
     "arn:${Partition}:config:${Region}:${Account}:organization-conformance-pack/${OrganizationConformancePackId}"
    ]
   },
   "config:RemediationConfiguration": {
    "arn_formats": [
     "arn:${Partition}:config:${Region}:${Account}:remediation-configuration/${RemediationConfigurationId}"
    ]
   },
   "config:StoredQuery": {
    "arn_formats": [
     "arn:${Partition}:config:${Region}:${Account}:stored-query/${StoredQueryName}/${StoredQueryId}"
    ]
   },
   "connect-campaigns:campaign": {
    "arn_formats": [
     "arn:${Partition}:connect-campaigns:${Region}:${Account}:campaign/${CampaignId}"
    ]
   },
   "connect:agent-status": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/agent-state/${AgentStatusId}"
    ]
   },
   "connect:attached-file": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/file/${FileId}"
    ]
   },
   "connect:authentication-profile": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/authentication-profile/${AuthenticationProfileId}"
    ]
   },
   "connect:aws-managed-view": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:aws:view/${ViewId}"
    ]
   },
   "connect:contact": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/contact/${ContactId}"
    ]
   },
   "connect:contact-evaluation": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/contact-evaluation/${EvaluationId}"
    ]
   },
   "connect:contact-flow": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/contact-flow/${ContactFlowId}"
    ]
   },
   "connect:contact-flow-module": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/flow-module/${ContactFlowModuleId}"
    ]
   },
   "connect:customer-managed-view": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/view/${ViewId}"
    ]
   },
   "connect:customer-managed-view-version": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/view/${ViewId}:${ViewVersion}"
    ]
   },
   "connect:email-address": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/email-address/${EmailAddressId}"
    ]
   },
   "connect:evaluation-form": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/evaluation-form/${FormId}"
    ]
   },
   "connect:hierarchy-group": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/agent-group/${HierarchyGroupId}"
    ]
   },
   "connect:hours-of-operation": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/operating-hours/${HoursOfOperationId}"
    ]
   },
   "connect:instance": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}"
    ]
   },
   "connect:integration-association": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/integration-association/${IntegrationAssociationId}"
    ]
   },
   "connect:legacy-phone-number": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/phone-number/${PhoneNumberId}"
    ]
   },
   "connect:phone-number": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:phone-number/${PhoneNumberId}"
    ]
   },
   "connect:prompt": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/prompt/${PromptId}"
    ]
   },
   "connect:qualified-aws-managed-view": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:aws:view/${ViewId}:${ViewQualifier}"
    ]
   },
   "connect:qualified-customer-managed-view": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/view/${ViewId}:${ViewQualifier}"
    ]
   },
   "connect:queue": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/queue/${QueueId}"
    ]
   },
   "connect:quick-connect": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/transfer-destination/${QuickConnectId}"
    ]
   },
   "connect:routing-profile": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/routing-profile/${RoutingProfileId}"
    ]
   },
   "connect:rule": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/rule/${RuleId}"
    ]
   },
   "connect:security-profile": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/security-profile/${SecurityProfileId}"
    ]
   },
   "connect:task-template": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/task-template/${TaskTemplateId}"
    ]
   },
   "connect:traffic-distribution-group": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:traffic-distribution-group/${TrafficDistributionGroupId}"
    ]
   },
   "connect:use-case": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/use-case/${UseCaseId}"
    ]
   },
   "connect:user": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/agent/${UserId}"
    ]
   },
   "connect:vocabulary": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/vocabulary/${VocabularyId}"
    ]
   },
   "connect:wildcard-agent-status": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/agent-state/*"
    ]
   },
   "connect:wildcard-contact-flow": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/contact-flow/*"
    ]
   },
   "connect:wildcard-legacy-phone-number": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/phone-number/*"
    ]
   },
   "connect:wildcard-phone-number": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:phone-number/*"
    ]
   },
   "connect:wildcard-queue": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/queue/*"
    ]
   },
   "connect:wildcard-quick-connect": {
    "arn_formats": [
     "arn:${Partition}:connect:${Region}:${Account}:instance/${InstanceId}/transfer-destination/*"
    ]
   },
   "consoleapp:DeviceIdentity": {
    "arn_formats": [
     "arn:${Partition}:consoleapp::${Account}:device/${DeviceId}/identity/${IdentityId}"
    ]
   },
   "controlcatalog:common-control": {
    "arn_formats": [
     "arn:${Partition}:controlcatalog:::common-control/${CommonControlId}"
    ]
   },
   "controlcatalog:control": {
    "arn_formats": [
     "arn:${Partition}:controlcatalog:::control/${ControlId}"
    ]
   },
   "controlcatalog:domain": {
    "arn_formats": [
     "arn:${Partition}:controlcatalog:::domain/${DomainId}"
    ]
   },
   "controlcatalog:objective": {
    "arn_formats": [
     "arn:${Partition}:controlcatalog:::objective/${ObjectiveId}"
    ]
   },
   "controltower:Baseline": {
    "arn_formats": [
     "arn:${Partition}:controltower:${Region}::baseline/${BaselineId}"
    ]
   },
   "controltower:EnabledBaseline": {
    "arn_formats": [
     "arn:${Partition}:controltower:${Region}:${Account}:enabledbaseline/${EnabledBaselineId}"
    ]
   },
   "controltower:EnabledControl": {
    "arn_formats": [
     "arn:${Partition}:controltower:${Region}:${Account}:enabledcontrol/${EnabledControlId}"
    ]
   },
   "controltower:LandingZone": {
    "arn_formats": [
     "arn:${Partition}:controltower:${Region}:${Account}:landingzone/${LandingZoneId}"
    ]
   },
   "cur:cur": {
    "arn_formats": [
     "arn:${Partition}:cur:${Region}:${Account}:definition/${ReportName}"
    ]
   },
   "databrew:Dataset": {
    "arn_formats": [
     "arn:${Partition}:databrew:${Region}:${Account}:dataset/${ResourceId}"
    ]
   },
   "databrew:Job": {
    "arn_formats": [
     "arn:${Partition}:databrew:${Region}:${Account}:job/${ResourceId}"
    ]
   },
   "databrew:Project": {
    "arn_formats": [
     "arn:${Partition}:databrew:${Region}:${Account}:project/${ResourceId}"
    ]
   },
   "databrew:Recipe": {
    "arn_formats": [
     "arn:${Partition}:databrew:${Region}:${Account}:recipe/${ResourceId}"
    ]
   },
   "databrew:Ruleset": {
    "arn_formats": [
     "arn:${Partition}:databrew:${Region}:${Account}:ruleset/${ResourceId}"
    ]
   },
   "databrew:Schedule": {
    "arn_formats": [
     "arn:${Partition}:databrew:${Region}:${Account}:schedule/${ResourceId}"
    ]
   },
   "dataexchange:assets": {
    "arn_formats": [
     "arn:${Partition}:dataexchange:${Region}:${Account}:data-sets/${DataSetId}/revisions/${RevisionId}/assets/${AssetId}"
    ]
   },
   "dataexchange:data-grants": {
    "arn_formats": [
     "arn:${Partition}:dataexchange:${Region}:${Account}:data-grants/${DataGrantId}"
    ]
   },
   "dataexchange:data-sets": {
    "arn_formats": [
     "arn:${Partition}:dataexchange:${Region}:${Account}:data-sets/${DataSetId}"
    ]
   },
   "dataexchange:entitled-assets": {
    "arn_formats": [
     "arn:${Partition}:dataexchange:${Region}::data-sets/${DataSetId}/revisions/${RevisionId}/assets/${AssetId}"
    ]
   },
   "dataexchange:entitled-data-sets": {
    "arn_formats": [
     "arn:${Partition}:dataexchange:${Region}::data-sets/${DataSetId}"
    ]
   },
   "dataexchange:entitled-revisions": {
    "arn_formats": [
     "arn:${Partition}:dataexchange:${Region}::data-sets/${DataSetId}/revisions/${RevisionId}"
    ]
   },
   "dataexchange:event-actions": {
    "arn_formats": [
     "arn:${Partition}:dataexchange:${Region}:${Account}:event-actions/${EventActionId}"
    ]
   },
   "dataexchange:jobs": {
    "arn_formats": [
     "arn:${Partition}:dataexchange:${Region}:${Account}:jobs/${JobId}"
    ]
   },
   "dataexchange:revisions": {
    "arn_formats": [
     "arn:${Partition}:dataexchange:${Region}:${Account}:data-sets/${DataSetId}/revisions/${RevisionId}"
    ]
   },
   "datapipeline:pipeline": {
    "arn_formats": [
     "arn:${Partition}:datapipeline:${Region}:${Account}:pipeline/${PipelineId}"
    ]
   },
   "datasync:agent": {
    "arn_formats": [
     "arn:${Partition}:datasync:${Region}:${AccountId}:agent/${AgentId}"
    ]
   },
   "datasync:discoveryjob": {
    "arn_formats": [
     "arn:${Partition}:datasync:${Region}:${AccountId}:system/${StorageSystemId}/job/${DiscoveryJobId}"
    ]
   },
   "datasync:location": {
    "arn_formats": [
     "arn:${Partition}:datasync:${Region}:${AccountId}:location/${LocationId}"
    ]
   },
   "datasync:storagesystem": {
    "arn_formats": [
     "arn:${Partition}:datasync:${Region}:${AccountId}:system/${StorageSystemId}"
    ]
   },
   "datasync:task": {
    "arn_formats": [
     "arn:${Partition}:datasync:${Region}:${AccountId}:task/${TaskId}"
    ]
   },
   "datasync:taskexecution": {
    "arn_formats": [
     "arn:${Partition}:datasync:${Region}:${AccountId}:task/${TaskId}/execution/${ExecutionId}"
    ]
   },
   "datazone:domain": {
    "arn_formats": [
     "arn:${Partition}:datazone:${Region}:${Account}:domain/${DomainId}"
    ]
   },
   "dax:application": {
    "arn_formats": [
     "arn:${Partition}:dax:${Region}:${Account}:cache/${ClusterName}"
    ]
   },
   "deadline:budget": {
    "arn_formats": [
     "arn:${Partition}:deadline:${Region}:${Account}:farm/${FarmId}/budget/${BudgetId}"
    ]
   },
   "deadline:farm": {
    "arn_formats": [
     "arn:${Partition}:deadline:${Region}:${Account}:farm/${FarmId}"
    ]
   },
   "deadline:fleet": {
    "arn_formats": [
     "arn:${Partition}:deadline:${Region}:${Account}:farm/${FarmId}/fleet/${FleetId}"
    ]
   },
   "deadline:job": {
    "arn_formats": [
     "arn:${Partition}:deadline:${Region}:${Account}:farm/${FarmId}/queue/${QueueId}/job/${JobId}"
    ]
   },
   "deadline:license-endpoint": {
    "arn_formats": [
     "arn:${Partition}:deadline:${Region}:${Account}:license-endpoint/${LicenseEndpointId}"
    ]
   },
   "deadline:metered-product": {
    "arn_formats": [
     "arn:${Partition}:deadline:${Region}:${Account}:license-endpoint/${LicenseEndpointId}/metered-product/${ProductId}"
    ]
   },
   "deadline:monitor": {
    "arn_formats": [
     "arn:${Partition}:deadline:${Region}:${Account}:monitor/${MonitorId}"
    ]
   },
   "deadline:queue": {
    "arn_formats": [
     "arn:${Partition}:deadline:${Region}:${Account}:farm/${FarmId}/queue/${QueueId}"
    ]
   },
   "deadline:worker": {
    "arn_formats": [
     "arn:${Partition}:deadline:${Region}:${Account}:farm/${FarmId}/fleet/${FleetId}/worker/${WorkerId}"
    ]
   },
   "deepcomposer:audio": {
    "arn_formats": [
     "arn:${Partition}:deepcomposer:${Region}:${Account}:audio/${AudioId}"
    ]
   },
   "deepcomposer:composition": {
    "arn_formats": [
     "arn:${Partition}:deepcomposer:${Region}:${Account}:composition/${CompositionId}"
    ]
   },
   "deepcomposer:model": {
    "arn_formats": [
     "arn:${Partition}:deepcomposer:${Region}:${Account}:model/${ModelId}"
    ]
   },
   "deeplens:device": {
    "arn_formats": [
     "arn:${Partition}:deeplens:${Region}:${Account}:device/${DeviceName}"
    ]
   },
   "deeplens:model": {
    "arn_formats": [
     "arn:${Partition}:deeplens:${Region}:${Account}:model/${ModelName}"
    ]
   },
   "deeplens:project": {
    "arn_formats": [
     "arn:${Partition}:deeplens:${Region}:${Account}:project/${ProjectName}"
    ]
   },
   "deepracer:car": {
    "arn_formats": [
     "arn:${Partition}:deepracer:${Region}:${Account}:car/${ResourceId}"
    ]
   },
   "deepracer:evaluation_job": {
    "arn_formats": [
     "arn:${Partition}:deepracer:${Region}:${Account}:evaluation_job/${ResourceId}"
    ]
   },
   "deepracer:leaderboard": {
    "arn_formats": [
     "arn:${Partition}:deepracer:${Region}::leaderboard/${ResourceId}"
    ]
   },
   "deepracer:leaderboard_evaluation_job": {
    "arn_formats": [
     "arn:${Partition}:deepracer:${Region}:${Account}:leaderboard_evaluation_job/${ResourceId}"
    ]
   },
   "deepracer:reinforcement_learning_model": {
    "arn_formats": [
     "arn:${Partition}:deepracer:${Region}:${Account}:model/reinforcement_learning/${ResourceId}"
    ]
   },
   "deepracer:track": {
    "arn_formats": [
     "arn:${Partition}:deepracer:${Region}::track/${ResourceId}"
    ]
   },
   "deepracer:training_job": {
    "arn_formats": [
     "arn:${Partition}:deepracer:${Region}:${Account}:training_job/${ResourceId}"
    ]
   },
   "detective:Graph": {
    "arn_formats": [
     "arn:${Partition}:detective:${Region}:${Account}:graph:${ResourceId}"
    ]
   },
   "devicefarm:artifact": {
    "arn_formats": [
     "arn:${Partition}:devicefarm:${Region}:${Account}:artifact:${ResourceId}"
    ]
   },
   "devicefarm:device": {
    "arn_formats": [
     "arn:${Partition}:devicefarm:${Region}::device:${ResourceId}"
    ]
   },
   "devicefarm:deviceinstance": {
    "arn_formats": [
     "arn:${Partition}:devicefarm:${Region}::deviceinstance:${ResourceId}"
    ]
   },
   "devicefarm:devicepool": {
    "arn_formats": [
     "arn:${Partition}:devicefarm:${Region}:${Account}:devicepool:${ResourceId}"
    ]
   },
   "devicefarm:instanceprofile": {
    "arn_formats": [
     "arn:${Partition}:devicefarm:${Region}:${Account}:instanceprofile:${ResourceId}"
    ]
   },
   "devicefarm:job": {
    "arn_formats": [
     "arn:${Partition}:devicefarm:${Region}:${Account}:job:${ResourceId}"
    ]
   },
   "devicefarm:networkprofile": {
    "arn_formats": [
     "arn:${Partition}:devicefarm:${Region}:${Account}:networkprofile:${ResourceId}"
    ]
   },
   "devicefarm:project": {
    "arn_formats": [
     "arn:${Partition}:devicefarm:${Region}:${Account}:project:${ResourceId}"
    ]
   },
   "devicefarm:run": {
    "arn_formats": [
     "arn:${Partition}:devicefarm:${Region}:${Account}:run:${ResourceId}"
    ]
   },
   "devicefarm:sample": {
    "arn_formats": [
     "arn:${Partition}:devicefarm:${Region}:${Account}:sample:${ResourceId}"
    ]
   },
   "devicefarm:session": {
    "arn_formats": [
     "arn:${Partition}:devicefarm:${Region}:${Account}:session:${ResourceId}"
    ]
   },
   "devicefarm:suite": {
    "arn_formats": [
     "arn:${Partition}:devicefarm:${Region}:${Account}:suite:${ResourceId}"
    ]
   },
   "devicefarm:test": {
    "arn_formats": [
     "arn:${Partition}:devicefarm:${Region}:${Account}:test:${ResourceId}"
    ]
   },
   "devicefarm:testgrid-project": {
    "arn_formats": [
     "arn:${Partition}:devicefarm:${Region}:${Account}:testgrid-project:${ResourceId}"
    ]
   },
   "devicefarm:testgrid-session": {
    "arn_formats": [
     "arn:${Partition}:devicefarm:${Region}:${Account}:testgrid-session:${ResourceId}"
    ]
   },
   "devicefarm:upload": {
    "arn_formats": [
     "arn:${Partition}:devicefarm:${Region}:${Account}:upload:${ResourceId}"
    ]
   },
   "devicefarm:vpceconfiguration": {
    "arn_formats": [
     "arn:${Partition}:devicefarm:${Region}:${Account}:vpceconfiguration:${ResourceId}"
    ]
   },
   "devops-guru:topic": {
    "arn_formats": [
     "arn:${Partition}:sns:${Region}:${Account}:${TopicName}"
    ]
   },
   "directconnect:dx-gateway": {
    "arn_formats": [
     "arn:${Partition}:directconnect::${Account}:dx-gateway/${DirectConnectGatewayId}"
    ]
   },
   "directconnect:dxcon": {
    "arn_formats": [
     "arn:${Partition}:directconnect:${Region}:${Account}:dxcon/${ConnectionId}"
    ]
   },
   "directconnect:dxlag": {
    "arn_formats": [
     "arn:${Partition}:directconnect:${Region}:${Account}:dxlag/${LagId}"
    ]
   },
   "directconnect:dxvif": {
    "arn_formats": [
     "arn:${Partition}:directconnect:${Region}:${Account}:dxvif/${VirtualInterfaceId}"
    ]
   },
   "dlm:policy": {
    "arn_formats": [
     "arn:${Partition}:dlm:${Region}:${Account}:policy/${ResourceName}"
    ]
   },
   "dms:Certificate": {
    "arn_formats": [
     "arn:${Partition}:dms:${Region}:${Account}:cert:*"
    ]
   },
   "dms:DataMigration": {
    "arn_formats": [
     "arn:${Partition}:dms:${Region}:${Account}:data-migration:*"
    ]
   },
   "dms:DataProvider": {
    "arn_formats": [
     "arn:${Partition}:dms:${Region}:${Account}:data-provider:*"
    ]
   },
   "dms:Endpoint": {
    "arn_formats": [
     "arn:${Partition}:dms:${Region}:${Account}:endpoint:*"
    ]
   },
   "dms:EventSubscription": {
    "arn_formats": [
     "arn:${Partition}:dms:${Region}:${Account}:es:*"
    ]
   },
   "dms:InstanceProfile": {
    "arn_formats": [
     "arn:${Partition}:dms:${Region}:${Account}:instance-profile:*"
    ]
   },
   "dms:MigrationProject": {
    "arn_formats": [
     "arn:${Partition}:dms:${Region}:${Account}:migration-project:*"
    ]
   },
   "dms:ReplicationConfig": {
    "arn_formats": [
     "arn:${Partition}:dms:${Region}:${Account}:replication-config:*"
    ]
   },
   "dms:ReplicationInstance": {
    "arn_formats": [
     "arn:${Partition}:dms:${Region}:${Account}:rep:*"
    ]
   },
   "dms:ReplicationSubnetGroup": {
    "arn_formats": [
     "arn:${Partition}:dms:${Region}:${Account}:subgrp:*"
    ]
   },
   "dms:ReplicationTask": {
    "arn_formats": [
     "arn:${Partition}:dms:${Region}:${Account}:task:*"
    ]
   },
   "dms:ReplicationTaskAssessmentRun": {
    "arn_formats": [
     "arn:${Partition}:dms:${Region}:${Account}:assessment-run:*"
    ]
   },
   "dms:ReplicationTaskIndividualAssessment": {
    "arn_formats": [
     "arn:${Partition}:dms:${Region}:${Account}:individual-assessment:*"
    ]
   },
   "docdb-elastic:cluster": {
    "arn_formats": [
     "arn:${Partition}:docdb-elastic:${Region}:${Account}:cluster/${ResourceId}"
    ]
   },
   "docdb-elastic:cluster-snapshot": {
    "arn_formats": [
     "arn:${Partition}:docdb-elastic:${Region}:${Account}:cluster-snapshot/${ResourceId}"
    ]
   },
   "drs:JobResource": {
    "arn_formats": [
     "arn:${Partition}:drs:${Region}:${Account}:job/${JobID}"
    ]
   },
   "drs:LaunchConfigurationTemplateResource": {
    "arn_formats": [
     "arn:${Partition}:drs:${Region}:${Account}:launch-configuration-template/${LaunchConfigurationTemplateID}"
    ]
   },
   "drs:RecoveryInstanceResource": {
    "arn_formats": [
     "arn:${Partition}:drs:${Region}:${Account}:recovery-instance/${RecoveryInstanceID}"
    ]
   },
   "drs:ReplicationConfigurationTemplateResource": {
    "arn_formats": [
     "arn:${Partition}:drs:${Region}:${Account}:replication-configuration-template/${ReplicationConfigurationTemplateID}"
    ]
   },
   "drs:SourceNetworkResource": {
    "arn_formats": [
     "arn:${Partition}:drs:${Region}:${Account}:source-network/${SourceNetworkID}"
    ]
   },
   "drs:SourceServerResource": {
    "arn_formats": [
     "arn:${Partition}:drs:${Region}:${Account}:source-server/${SourceServerID}"
    ]
   },
   "ds-data:directory": {
    "arn_formats": [
     "arn:${Partition}:ds:${Region}:${Account}:directory/${DirectoryId}"
    ]
   },
   "ds:directory": {
    "arn_formats": [
     "arn:${Partition}:ds:${Region}:${Account}:directory/${DirectoryId}"
    ]
   },
   "dsql:Cluster": {
    "arn_formats": [
     "arn:${Partition}:dsql:${Region}:${Account}:cluster/${Identifier}"
    ]
   },
   "dynamodb:backup": {
    "arn_formats": [
     "arn:${Partition}:dynamodb:${Region}:${Account}:table/${TableName}/backup/${BackupName}"
    ]
   },
   "dynamodb:export": {
    "arn_formats": [
     "arn:${Partition}:dynamodb:${Region}:${Account}:table/${TableName}/export/${ExportName}"
    ]
   },
   "dynamodb:global-table": {
    "arn_formats": [
     "arn:${Partition}:dynamodb::${Account}:global-table/${GlobalTableName}"
    ]
   },
   "dynamodb:import": {
    "arn_formats": [
     "arn:${Partition}:dynamodb:${Region}:${Account}:table/${TableName}/import/${ImportName}"
    ]
   },
   "dynamodb:index": {
    "arn_formats": [
     "arn:${Partition}:dynamodb:${Region}:${Account}:table/${TableName}/index/${IndexName}"
    ]
   },
   "dynamodb:stream": {
    "arn_formats": [
     "arn:${Partition}:dynamodb:${Region}:${Account}:table/${TableName}/stream/${StreamLabel}"
    ]
   },
   "dynamodb:table": {
    "arn_formats": [
     "arn:${Partition}:dynamodb:${Region}:${Account}:table/${TableName}"
    ]
   },
   "ebs:snapshot": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}::snapshot/${SnapshotId}"
    ]
   },
   "ec2-instance-connect:instance": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:instance/${InstanceId}"
    ]
   },
   "ec2-instance-connect:instance-connect-endpoint": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:instance-connect-endpoint/${InstanceConnectEndpointId}"
    ]
   },
   "ec2:capacity-reservation": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:capacity-reservation/${CapacityReservationId}"
    ]
   },
   "ec2:capacity-reservation-fleet": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:capacity-reservation-fleet/${CapacityReservationFleetId}"
    ]
   },
   "ec2:carrier-gateway": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:carrier-gateway/${CarrierGatewayId}"
    ]
   },
   "ec2:certificate": {
    "arn_formats": [
     "arn:${Partition}:acm:${Region}:${Account}:certificate/${CertificateId}"
    ]
   },
   "ec2:client-vpn-endpoint": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:client-vpn-endpoint/${ClientVpnEndpointId}"
    ]
   },
   "ec2:coip-pool": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:coip-pool/${Ipv4PoolCoipId}"
    ]
   },
   "ec2:customer-gateway": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:customer-gateway/${CustomerGatewayId}"
    ]
   },
   "ec2:declarative-policies-report": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:declarative-policies-report/${DeclarativePoliciesReportId}"
    ]
   },
   "ec2:dedicated-host": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:dedicated-host/${DedicatedHostId}"
    ]
   },
   "ec2:dhcp-options": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:dhcp-options/${DhcpOptionsId}"
    ]
   },
   "ec2:egress-only-internet-gateway": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:egress-only-internet-gateway/${EgressOnlyInternetGatewayId}"
    ]
   },
   "ec2:elastic-gpu": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:elastic-gpu/${ElasticGpuId}"
    ]
   },
   "ec2:elastic-inference": {
    "arn_formats": [
     "arn:${Partition}:elastic-inference:${Region}:${Account}:elastic-inference-accelerator/${AcceleratorId}"
    ]
   },
   "ec2:elastic-ip": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:elastic-ip/${AllocationId}"
    ]
   },
   "ec2:export-image-task": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:export-image-task/${ExportImageTaskId}"
    ]
   },
   "ec2:export-instance-task": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:export-instance-task/${ExportTaskId}"
    ]
   },
   "ec2:fleet": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:fleet/${FleetId}"
    ]
   },
   "ec2:fpga-image": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:fpga-image/${FpgaImageId}"
    ]
   },
   "ec2:group": {
    "arn_formats": [
     "arn:${Partition}:resource-groups:${Region}:${Account}:group/${GroupName}"
    ]
   },
   "ec2:host-reservation": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:host-reservation/${HostReservationId}"
    ]
   },
   "ec2:image": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}::image/${ImageId}"
    ]
   },
   "ec2:import-image-task": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:import-image-task/${ImportImageTaskId}"
    ]
   },
   "ec2:import-snapshot-task": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:import-snapshot-task/${ImportSnapshotTaskId}"
    ]
   },
   "ec2:instance": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:instance/${InstanceId}"
    ]
   },
   "ec2:instance-connect-endpoint": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:instance-connect-endpoint/${InstanceConnectEndpointId}"
    ]
   },
   "ec2:instance-event-window": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:instance-event-window/${InstanceEventWindowId}"
    ]
   },
   "ec2:internet-gateway": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:internet-gateway/${InternetGatewayId}"
    ]
   },
   "ec2:ipam": {
    "arn_formats": [
     "arn:${Partition}:ec2::${Account}:ipam/${IpamId}"
    ]
   },
   "ec2:ipam-external-resource-verification-token": {
    "arn_formats": [
     "arn:${Partition}:ec2::${Account}:ipam-external-resource-verification-token/${IpamExternalResourceVerificationTokenId}"
    ]
   },
   "ec2:ipam-pool": {
    "arn_formats": [
     "arn:${Partition}:ec2::${Account}:ipam-pool/${IpamPoolId}"
    ]
   },
   "ec2:ipam-resource-discovery": {
    "arn_formats": [
     "arn:${Partition}:ec2::${Account}:ipam-resource-discovery/${IpamResourceDiscoveryId}"
    ]
   },
   "ec2:ipam-resource-discovery-association": {
    "arn_formats": [
     "arn:${Partition}:ec2::${Account}:ipam-resource-discovery-association/${IpamResourceDiscoveryAssociationId}"
    ]
   },
   "ec2:ipam-scope": {
    "arn_formats": [
     "arn:${Partition}:ec2::${Account}:ipam-scope/${IpamScopeId}"
    ]
   },
   "ec2:ipv4pool-ec2": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:ipv4pool-ec2/${Ipv4PoolEc2Id}"
    ]
   },
   "ec2:ipv6pool-ec2": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:ipv6pool-ec2/${Ipv6PoolEc2Id}"
    ]
   },
   "ec2:key-pair": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:key-pair/${KeyPairName}"
    ]
   },
   "ec2:launch-template": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:launch-template/${LaunchTemplateId}"
    ]
   },
   "ec2:license-configuration": {
    "arn_formats": [
     "arn:${Partition}:license-manager:${Region}:${Account}:license-configuration:${LicenseConfigurationId}"
    ]
   },
   "ec2:local-gateway": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:local-gateway/${LocalGatewayId}"
    ]
   },
   "ec2:local-gateway-route-table": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:local-gateway-route-table/${LocalGatewayRoutetableId}"
    ]
   },
   "ec2:local-gateway-route-table-virtual-interface-group-association": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:local-gateway-route-table-virtual-interface-group-association/${LocalGatewayRouteTableVirtualInterfaceGroupAssociationId}"
    ]
   },
   "ec2:local-gateway-route-table-vpc-association": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:local-gateway-route-table-vpc-association/${LocalGatewayRouteTableVpcAssociationId}"
    ]
   },
   "ec2:local-gateway-virtual-interface": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:local-gateway-virtual-interface/${LocalGatewayVirtualInterfaceId}"
    ]
   },
   "ec2:local-gateway-virtual-interface-group": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:local-gateway-virtual-interface-group/${LocalGatewayVirtualInterfaceGroupId}"
    ]
   },
   "ec2:natgateway": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:natgateway/${NatGatewayId}"
    ]
   },
   "ec2:network-acl": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:network-acl/${NaclId}"
    ]
   },
   "ec2:network-insights-access-scope": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:network-insights-access-scope/${NetworkInsightsAccessScopeId}"
    ]
   },
   "ec2:network-insights-access-scope-analysis": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:network-insights-access-scope-analysis/${NetworkInsightsAccessScopeAnalysisId}"
    ]
   },
   "ec2:network-insights-analysis": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:network-insights-analysis/${NetworkInsightsAnalysisId}"
    ]
   },
   "ec2:network-insights-path": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:network-insights-path/${NetworkInsightsPathId}"
    ]
   },
   "ec2:network-interface": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:network-interface/${NetworkInterfaceId}"
    ]
   },
   "ec2:placement-group": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:placement-group/${PlacementGroupName}"
    ]
   },
   "ec2:prefix-list": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:prefix-list/${PrefixListId}"
    ]
   },
   "ec2:replace-root-volume-task": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:replace-root-volume-task/${ReplaceRootVolumeTaskId}"
    ]
   },
   "ec2:reserved-instances": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:reserved-instances/${ReservationId}"
    ]
   },
   "ec2:role": {
    "arn_formats": [
     "arn:${Partition}:iam::${Account}:role/${RoleNameWithPath}"
    ]
   },
   "ec2:route-table": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:route-table/${RouteTableId}"
    ]
   },
   "ec2:security-group": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:security-group/${SecurityGroupId}"
    ]
   },
   "ec2:security-group-rule": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:security-group-rule/${SecurityGroupRuleId}"
    ]
   },
   "ec2:snapshot": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}::snapshot/${SnapshotId}"
    ]
   },
   "ec2:spot-fleet-request": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:spot-fleet-request/${SpotFleetRequestId}"
    ]
   },
   "ec2:spot-instances-request": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:spot-instances-request/${SpotInstanceRequestId}"
    ]
   },
   "ec2:subnet": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:subnet/${SubnetId}"
    ]
   },
   "ec2:subnet-cidr-reservation": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:subnet-cidr-reservation/${SubnetCidrReservationId}"
    ]
   },
   "ec2:traffic-mirror-filter": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:traffic-mirror-filter/${TrafficMirrorFilterId}"
    ]
   },
   "ec2:traffic-mirror-filter-rule": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:traffic-mirror-filter-rule/${TrafficMirrorFilterRuleId}"
    ]
   },
   "ec2:traffic-mirror-session": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:traffic-mirror-session/${TrafficMirrorSessionId}"
    ]
   },
   "ec2:traffic-mirror-target": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:traffic-mirror-target/${TrafficMirrorTargetId}"
    ]
   },
   "ec2:transit-gateway": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:transit-gateway/${TransitGatewayId}"
    ]
   },
   "ec2:transit-gateway-attachment": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:transit-gateway-attachment/${TransitGatewayAttachmentId}"
    ]
   },
   "ec2:transit-gateway-connect-peer": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:transit-gateway-connect-peer/${TransitGatewayConnectPeerId}"
    ]
   },
   "ec2:transit-gateway-multicast-domain": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:transit-gateway-multicast-domain/${TransitGatewayMulticastDomainId}"
    ]
   },
   "ec2:transit-gateway-policy-table": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:transit-gateway-policy-table/${TransitGatewayPolicyTableId}"
    ]
   },
   "ec2:transit-gateway-route-table": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:transit-gateway-route-table/${TransitGatewayRouteTableId}"
    ]
   },
   "ec2:transit-gateway-route-table-announcement": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:transit-gateway-route-table-announcement/${TransitGatewayRouteTableAnnouncementId}"
    ]
   },
   "ec2:verified-access-endpoint": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:verified-access-endpoint/${VerifiedAccessEndpointId}"
    ]
   },
   "ec2:verified-access-endpoint-target": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:verified-access-endpoint-target/${VerifiedAccessEndpointTargetId}"
    ]
   },
   "ec2:verified-access-group": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:verified-access-group/${VerifiedAccessGroupId}"
    ]
   },
   "ec2:verified-access-instance": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:verified-access-instance/${VerifiedAccessInstanceId}"
    ]
   },
   "ec2:verified-access-policy": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:verified-access-policy/${VerifiedAccessPolicyId}"
    ]
   },
   "ec2:verified-access-trust-provider": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:verified-access-trust-provider/${VerifiedAccessTrustProviderId}"
    ]
   },
   "ec2:volume": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:volume/${VolumeId}"
    ]
   },
   "ec2:vpc": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:vpc/${VpcId}"
    ]
   },
   "ec2:vpc-block-public-access-exclusion": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:vpc-block-public-access-exclusion/${VpcBlockPublicAccessExclusionId}"
    ]
   },
   "ec2:vpc-endpoint": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:vpc-endpoint/${VpcEndpointId}"
    ]
   },
   "ec2:vpc-endpoint-connection": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:vpc-endpoint-connection/${VpcEndpointConnectionId}"
    ]
   },
   "ec2:vpc-endpoint-service": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:vpc-endpoint-service/${VpcEndpointServiceId}"
    ]
   },
   "ec2:vpc-endpoint-service-permission": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:vpc-endpoint-service-permission/${VpcEndpointServicePermissionId}"
    ]
   },
   "ec2:vpc-flow-log": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:vpc-flow-log/${VpcFlowLogId}"
    ]
   },
   "ec2:vpc-peering-connection": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:vpc-peering-connection/${VpcPeeringConnectionId}"
    ]
   },
   "ec2:vpn-connection": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:vpn-connection/${VpnConnectionId}"
    ]
   },
   "ec2:vpn-connection-device-type": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:vpn-connection-device-type/${VpnConnectionDeviceTypeId}"
    ]
   },
   "ec2:vpn-gateway": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:vpn-gateway/${VpnGatewayId}"
    ]
   },
   "ecr-public:registry": {
    "arn_formats": [
     "arn:${Partition}:ecr-public::${Account}:registry/${RegistryId}"
    ]
   },
   "ecr-public:repository": {
    "arn_formats": [
     "arn:${Partition}:ecr-public::${Account}:repository/${RepositoryName}"
    ]
   },
   "ecr:repository": {
    "arn_formats": [
     "arn:${Partition}:ecr:${Region}:${Account}:repository/${RepositoryName}"
    ]
   },
   "ecs:capacity-provider": {
    "arn_formats": [
     "arn:${Partition}:ecs:${Region}:${Account}:capacity-provider/${CapacityProviderName}"
    ]
   },
   "ecs:cluster": {
    "arn_formats": [
     "arn:${Partition}:ecs:${Region}:${Account}:cluster/${ClusterName}"
    ]
   },
   "ecs:container-instance": {
    "arn_formats": [
     "arn:${Partition}:ecs:${Region}:${Account}:container-instance/${ClusterName}/${ContainerInstanceId}"
    ]
   },
   "ecs:service": {
    "arn_formats": [
     "arn:${Partition}:ecs:${Region}:${Account}:service/${ClusterName}/${ServiceName}"
    ]
   },
   "ecs:service-deployment": {
    "arn_formats": [
     "arn:${Partition}:ecs:${Region}:${Account}:service-deployment/${ClusterName}/${ServiceName}/${ServiceDeploymentId}"
    ]
   },
   "ecs:service-revision": {
    "arn_formats": [
     "arn:${Partition}:ecs:${Region}:${Account}:service-revision/${ClusterName}/${ServiceName}/${ServiceRevisionId}"
    ]
   },
   "ecs:task": {
    "arn_formats": [
     "arn:${Partition}:ecs:${Region}:${Account}:task/${ClusterName}/${TaskId}"
    ]
   },
   "ecs:task-definition": {
    "arn_formats": [
     "arn:${Partition}:ecs:${Region}:${Account}:task-definition/${TaskDefinitionFamilyName}:${TaskDefinitionRevisionNumber}"
    ]
   },
   "ecs:task-set": {
    "arn_formats": [
     "arn:${Partition}:ecs:${Region}:${Account}:task-set/${ClusterName}/${ServiceName}/${TaskSetId}"
    ]
   },
   "eks-auth:cluster": {
    "arn_formats": [
     "arn:${Partition}:eks:${Region}:${Account}:cluster/${ClusterName}"
    ]
   },
   "eks:access-entry": {
    "arn_formats": [
     "arn:${Partition}:eks:${Region}:${Account}:access-entry/${ClusterName}/${IamIdentityType}/${IamIdentityAccountID}/${IamIdentityName}/${UUID}"
    ]
   },
   "eks:access-policy": {
    "arn_formats": [
     "arn:${Partition}:eks::aws:cluster-access-policy/${AccessPolicyName}"
    ]
   },
   "eks:addon": {
    "arn_formats": [
     "arn:${Partition}:eks:${Region}:${Account}:addon/${ClusterName}/${AddonName}/${UUID}"
    ]
   },
   "eks:cluster": {
    "arn_formats": [
     "arn:${Partition}:eks:${Region}:${Account}:cluster/${ClusterName}"
    ]
   },
   "eks:eks-anywhere-subscription": {
    "arn_formats": [
     "arn:${Partition}:eks:${Region}:${Account}:eks-anywhere-subscription/${UUID}"
    ]
   },
   "eks:fargateprofile": {
    "arn_formats": [
     "arn:${Partition}:eks:${Region}:${Account}:fargateprofile/${ClusterName}/${FargateProfileName}/${UUID}"
    ]
   },
   "eks:identityproviderconfig": {
    "arn_formats": [
     "arn:${Partition}:eks:${Region}:${Account}:identityproviderconfig/${ClusterName}/${IdentityProviderType}/${IdentityProviderConfigName}/${UUID}"
    ]
   },
   "eks:nodegroup": {
    "arn_formats": [
     "arn:${Partition}:eks:${Region}:${Account}:nodegroup/${ClusterName}/${NodegroupName}/${UUID}"
    ]
   },
   "eks:podidentityassociation": {
    "arn_formats": [
     "arn:${Partition}:eks:${Region}:${Account}:podidentityassociation/${ClusterName}/${UUID}"
    ]
   },
   "elasticache:cluster": {
    "arn_formats": [
     "arn:${Partition}:elasticache:${Region}:${Account}:cluster:${CacheClusterId}"
    ]
   },
   "elasticache:globalreplicationgroup": {
    "arn_formats": [
     "arn:${Partition}:elasticache::${Account}:globalreplicationgroup:${GlobalReplicationGroupId}"
    ]
   },
   "elasticache:parametergroup": {
    "arn_formats": [
     "arn:${Partition}:elasticache:${Region}:${Account}:parametergroup:${CacheParameterGroupName}"
    ]
   },
   "elasticache:replicationgroup": {
    "arn_formats": [
     "arn:${Partition}:elasticache:${Region}:${Account}:replicationgroup:${ReplicationGroupId}"
    ]
   },
   "elasticache:reserved-instance": {
    "arn_formats": [
     "arn:${Partition}:elasticache:${Region}:${Account}:reserved-instance:${ReservedCacheNodeId}"
    ]
   },
   "elasticache:securitygroup": {
    "arn_formats": [
     "arn:${Partition}:elasticache:${Region}:${Account}:securitygroup:${CacheSecurityGroupName}"
    ]
   },
   "elasticache:serverlesscache": {
    "arn_formats": [
     "arn:${Partition}:elasticache:${Region}:${Account}:serverlesscache:${ServerlessCacheName}"
    ]
   },
   "elasticache:serverlesscachesnapshot": {
    "arn_formats": [
     "arn:${Partition}:elasticache:${Region}:${Account}:serverlesscachesnapshot:${ServerlessCacheSnapshotName}"
    ]
   },
   "elasticache:snapshot": {
    "arn_formats": [
     "arn:${Partition}:elasticache:${Region}:${Account}:snapshot:${SnapshotName}"
    ]
   },
   "elasticache:subnetgroup": {
    "arn_formats": [
     "arn:${Partition}:elasticache:${Region}:${Account}:subnetgroup:${CacheSubnetGroupName}"
    ]
   },
   "elasticache:user": {
    "arn_formats": [
     "arn:${Partition}:elasticache:${Region}:${Account}:user:${UserId}"
    ]
   },
   "elasticache:usergroup": {
    "arn_formats": [
     "arn:${Partition}:elasticache:${Region}:${Account}:usergroup:${UserGroupId}"
    ]
   },
   "elasticbeanstalk:application": {
    "arn_formats": [
     "arn:${Partition}:elasticbeanstalk:${Region}:${Account}:application/${ApplicationName}"
    ]
   },
   "elasticbeanstalk:applicationversion": {
    "arn_formats": [
     "arn:${Partition}:elasticbeanstalk:${Region}:${Account}:applicationversion/${ApplicationName}/${VersionLabel}"
    ]
   },
   "elasticbeanstalk:configurationtemplate": {
    "arn_formats": [
     "arn:${Partition}:elasticbeanstalk:${Region}:${Account}:configurationtemplate/${ApplicationName}/${TemplateName}"
    ]
   },
   "elasticbeanstalk:environment": {
    "arn_formats": [
     "arn:${Partition}:elasticbeanstalk:${Region}:${Account}:environment/${ApplicationName}/${EnvironmentName}"
    ]
   },
   "elasticbeanstalk:platform": {
    "arn_formats": [
     "arn:${Partition}:elasticbeanstalk:${Region}::platform/${PlatformNameWithVersion}"
    ]
   },
   "elasticbeanstalk:solutionstack": {
    "arn_formats": [
     "arn:${Partition}:elasticbeanstalk:${Region}::solutionstack/${SolutionStackName}"
    ]
   },
   "elasticfilesystem:access-point": {
    "arn_formats": [
     "arn:${Partition}:elasticfilesystem:${Region}:${Account}:access-point/${AccessPointId}"
    ]
   },
   "elasticfilesystem:file-system": {
    "arn_formats": [
     "arn:${Partition}:elasticfilesystem:${Region}:${Account}:file-system/${FileSystemId}"
    ]
   },
   "elasticloadbalancing:listener-rule/app": {
    "arn_formats": [
     "arn:${Partition}:elasticloadbalancing:${Region}:${Account}:listener-rule/app/${LoadBalancerName}/${LoadBalancerId}/${ListenerId}/${ListenerRuleId}"
    ]
   },
   "elasticloadbalancing:listener-rule/net": {
    "arn_formats": [
     "arn:${Partition}:elasticloadbalancing:${Region}:${Account}:listener-rule/net/${LoadBalancerName}/${LoadBalancerId}/${ListenerId}/${ListenerRuleId}"
    ]
   },
   "elasticloadbalancing:listener/app": {
    "arn_formats": [
     "arn:${Partition}:elasticloadbalancing:${Region}:${Account}:listener/app/${LoadBalancerName}/${LoadBalancerId}/${ListenerId}"
    ]
   },
   "elasticloadbalancing:listener/net": {
    "arn_formats": [
     "arn:${Partition}:elasticloadbalancing:${Region}:${Account}:listener/net/${LoadBalancerName}/${LoadBalancerId}/${ListenerId}"
    ]
   },
   "elasticloadbalancing:loadbalancer": {
    "arn_formats": [
     "arn:${Partition}:elasticloadbalancing:${Region}:${Account}:loadbalancer/${LoadBalancerName}"
    ]
   },
   "elasticloadbalancing:loadbalancer/app/": {
    "arn_formats": [
     "arn:${Partition}:elasticloadbalancing:${Region}:${Account}:loadbalancer/app/${LoadBalancerName}/${LoadBalancerId}"
    ]
   },
   "elasticloadbalancing:loadbalancer/net/": {
    "arn_formats": [
     "arn:${Partition}:elasticloadbalancing:${Region}:${Account}:loadbalancer/net/${LoadBalancerName}/${LoadBalancerId}"
    ]
   },
   "elasticloadbalancing:targetgroup": {
    "arn_formats": [
     "arn:${Partition}:elasticloadbalancing:${Region}:${Account}:targetgroup/${TargetGroupName}/${TargetGroupId}"
    ]
   },
   "elasticloadbalancing:truststore": {
    "arn_formats": [
     "arn:${Partition}:elasticloadbalancing:${Region}:${Account}:truststore/${TrustStoreName}/${TrustStoreId}"
    ]
   },
   "elasticmapreduce:cluster": {
    "arn_formats": [
     "arn:${Partition}:elasticmapreduce:${Region}:${Account}:cluster/${ClusterId}"
    ]
   },
   "elasticmapreduce:editor": {
    "arn_formats": [
     "arn:${Partition}:elasticmapreduce:${Region}:${Account}:editor/${EditorId}"
    ]
   },
   "elasticmapreduce:notebook-execution": {
    "arn_formats": [
     "arn:${Partition}:elasticmapreduce:${Region}:${Account}:notebook-execution/${NotebookExecutionId}"
    ]
   },
   "elasticmapreduce:studio": {
    "arn_formats": [
     "arn:${Partition}:elasticmapreduce:${Region}:${Account}:studio/${StudioId}"
    ]
   },
   "elastictranscoder:job": {
    "arn_formats": [
     "arn:${Partition}:elastictranscoder:${Region}:${Account}:job/${JobId}"
    ]
   },
   "elastictranscoder:pipeline": {
    "arn_formats": [
     "arn:${Partition}:elastictranscoder:${Region}:${Account}:pipeline/${PipelineId}"
    ]
   },
   "elastictranscoder:preset": {
    "arn_formats": [
     "arn:${Partition}:elastictranscoder:${Region}:${Account}:preset/${PresetId}"
    ]
   },
   "elemental-appliances-software:quote": {
    "arn_formats": [
     "arn:${Partition}:elemental-appliances-software:${Region}:${Account}:quote/${ResourceId}"
    ]
   },
   "elemental-support-cases:case": {
    "arn_formats": [
     "arn:${Partition}:elemental-support-cases::${Account}:case/${ResourceId}"
    ]
   },
   "emr-containers:certificate": {
    "arn_formats": [
     "arn:${Partition}:emr-containers:${Region}:${Account}:/certificates/${CertificateId}"
    ]
   },
   "emr-containers:jobRun": {
    "arn_formats": [
     "arn:${Partition}:emr-containers:${Region}:${Account}:/virtualclusters/${VirtualClusterId}/jobruns/${JobRunId}"
    ]
   },
   "emr-containers:jobTemplate": {
    "arn_formats": [
     "arn:${Partition}:emr-containers:${Region}:${Account}:/jobtemplates/${JobTemplateId}"
    ]
   },
   "emr-containers:managedEndpoint": {
    "arn_formats": [
     "arn:${Partition}:emr-containers:${Region}:${Account}:/virtualclusters/${VirtualClusterId}/endpoints/${EndpointId}"
    ]
   },
   "emr-containers:securityConfiguration": {
    "arn_formats": [
     "arn:${Partition}:emr-containers:${Region}:${Account}:/securityconfigurations/${SecurityConfigurationId}"
    ]
   },
   "emr-containers:virtualCluster": {
    "arn_formats": [
     "arn:${Partition}:emr-containers:${Region}:${Account}:/virtualclusters/${VirtualClusterId}"
    ]
   },
   "emr-serverless:application": {
    "arn_formats": [
     "arn:${Partition}:emr-serverless:${Region}:${Account}:/applications/${ApplicationId}"
    ]
   },
   "emr-serverless:jobRun": {
    "arn_formats": [
     "arn:${Partition}:emr-serverless:${Region}:${Account}:/applications/${ApplicationId}/jobruns/${JobRunId}"
    ]
   },
   "entityresolution:IdMappingWorkflow": {
    "arn_formats": [
     "arn:${Partition}:entityresolution:${Region}:${Account}:idmappingworkflow/${WorkflowName}"
    ]
   },
   "entityresolution:IdNamespace": {
    "arn_formats": [
     "arn:${Partition}:entityresolution:${Region}:${Account}:idnamespace/${IdNamespaceName}"
    ]
   },
   "entityresolution:MatchingWorkflow": {
    "arn_formats": [
     "arn:${Partition}:entityresolution:${Region}:${Account}:matchingworkflow/${WorkflowName}"
    ]
   },
   "entityresolution:ProviderService": {
    "arn_formats": [
     "arn:${Partition}:entityresolution:${Region}:${Account}:providerservice/${ProviderName}/${ProviderServiceName}"
    ]
   },
   "entityresolution:SchemaMapping": {
    "arn_formats": [
     "arn:${Partition}:entityresolution:${Region}:${Account}:schemamapping/${SchemaName}"
    ]
   },
   "es:application": {
    "arn_formats": [
     "arn:${Partition}:opensearch:${Region}:${Account}:application/${AppId}"
    ]
   },
   "es:datasource": {
    "arn_formats": [
     "arn:${Partition}:opensearch:${Region}:${Account}:datasource/${DataSourceName}"
    ]
   },
   "es:domain": {
    "arn_formats": [
     "arn:${Partition}:es:${Region}:${Account}:domain/${DomainName}"
    ]
   },
   "es:es_role": {
    "arn_formats": [
     "arn:${Partition}:iam::${Account}:role/aws-service-role/es.amazonaws.com/AWSServiceRoleForAmazonOpenSearchService"
    ]
   },
   "es:opensearchservice_role": {
    "arn_formats": [
     "arn:${Partition}:iam::${Account}:role/aws-service-role/opensearchservice.amazonaws.com/AWSServiceRoleForAmazonOpenSearchService"
    ]
   },
   "events:api-destination": {
    "arn_formats": [
     "arn:${Partition}:events:${Region}:${Account}:api-destination/${ApiDestinationName}"
    ]
   },
   "events:archive": {
    "arn_formats": [
     "arn:${Partition}:events:${Region}:${Account}:archive/${ArchiveName}"
    ]
   },
   "events:connection": {
    "arn_formats": [
     "arn:${Partition}:events:${Region}:${Account}:connection/${ConnectionName}"
    ]
   },
   "events:create-snapshot": {
    "arn_formats": [
     "arn:${Partition}:events:${Region}:${Account}:target/create-snapshot"
    ]
   },
   "events:endpoint": {
    "arn_formats": [
     "arn:${Partition}:events:${Region}:${Account}:endpoint/${EndpointName}"
    ]
   },
   "events:event-bus": {
    "arn_formats": [
     "arn:${Partition}:events:${Region}:${Account}:event-bus/${EventBusName}"
    ]
   },
   "events:event-source": {
    "arn_formats": [
     "arn:${Partition}:events:${Region}::event-source/${EventSourceName}"
    ]
   },
   "events:reboot-instance": {
    "arn_formats": [
     "arn:${Partition}:events:${Region}:${Account}:target/reboot-instance"
    ]
   },
   "events:replay": {
    "arn_formats": [
     "arn:${Partition}:events:${Region}:${Account}:replay/${ReplayName}"
    ]
   },
   "events:rule-on-custom-event-bus": {
    "arn_formats": [
     "arn:${Partition}:events:${Region}:${Account}:rule/${EventBusName}/${RuleName}"
    ]
   },
   "events:rule-on-default-event-bus": {
    "arn_formats": [
     "arn:${Partition}:events:${Region}:${Account}:rule/${RuleName}"
    ]
   },
   "events:stop-instance": {
    "arn_formats": [
     "arn:${Partition}:events:${Region}:${Account}:target/stop-instance"
    ]
   },
   "events:terminate-instance": {
    "arn_formats": [
     "arn:${Partition}:events:${Region}:${Account}:target/terminate-instance"
    ]
   },
   "evidently:Experiment": {
    "arn_formats": [
     "arn:${Partition}:evidently:${Region}:${Account}:project/${ProjectName}/experiment/${ExperimentName}"
    ]
   },
   "evidently:Feature": {
    "arn_formats": [
     "arn:${Partition}:evidently:${Region}:${Account}:project/${ProjectName}/feature/${FeatureName}"
    ]
   },
   "evidently:Launch": {
    "arn_formats": [
     "arn:${Partition}:evidently:${Region}:${Account}:project/${ProjectName}/launch/${LaunchName}"
    ]
   },
   "evidently:Project": {
    "arn_formats": [
     "arn:${Partition}:evidently:${Region}:${Account}:project/${ProjectName}"
    ]
   },
   "evidently:Segment": {
    "arn_formats": [
     "arn:${Partition}:evidently:${Region}:${Account}:segment/${SegmentName}"
    ]
   },
   "execute-api:execute-api-domain": {
    "arn_formats": [
     "arn:${Partition}:execute-api:${Region}:${Account}:/domainnames/${DomainName}+${DomainIdentifier}"
    ]
   },
   "execute-api:execute-api-general": {
    "arn_formats": [
     "arn:${Partition}:execute-api:${Region}:${Account}:${ApiId}/${Stage}/${Method}/${ApiSpecificResourcePath}"
    ]
   },
   "finspace-api:credential": {
    "arn_formats": [
     "arn:${Partition}:finspace-api:${Region}:${Account}:/credentials/programmatic"
    ]
   },
   "finspace:environment": {
    "arn_formats": [
     "arn:${Partition}:finspace:${Region}:${Account}:environment/${EnvironmentId}"
    ]
   },
   "finspace:kxCluster": {
    "arn_formats": [
     "arn:${Partition}:finspace:${Region}:${Account}:kxEnvironment/${EnvironmentId}/kxCluster/${KxCluster}"
    ]
   },
   "finspace:kxDatabase": {
    "arn_formats": [
     "arn:${Partition}:finspace:${Region}:${Account}:kxEnvironment/${EnvironmentId}/kxDatabase/${KxDatabase}"
    ]
   },
   "finspace:kxDataview": {
    "arn_formats": [
     "arn:${Partition}:finspace:${Region}:${Account}:kxEnvironment/${EnvironmentId}/kxDatabase/${KxDatabase}/kxDataview/${KxDataview}"
    ]
   },
   "finspace:kxEnvironment": {
    "arn_formats": [
     "arn:${Partition}:finspace:${Region}:${Account}:kxEnvironment/${EnvironmentId}"
    ]
   },
   "finspace:kxScalingGroup": {
    "arn_formats": [
     "arn:${Partition}:finspace:${Region}:${Account}:kxEnvironment/${EnvironmentId}/kxScalingGroup/${KxScalingGroup}"
    ]
   },
   "finspace:kxUser": {
    "arn_formats": [
     "arn:${Partition}:finspace:${Region}:${Account}:kxEnvironment/${EnvironmentId}/kxUser/${UserName}"
    ]
   },
   "finspace:kxVolume": {
    "arn_formats": [
     "arn:${Partition}:finspace:${Region}:${Account}:kxEnvironment/${EnvironmentId}/kxVolume/${KxVolume}"
    ]
   },
   "finspace:user": {
    "arn_formats": [
     "arn:${Partition}:finspace:${Region}:${Account}:user/${UserId}"
    ]
   },
   "firehose:deliverystream": {
    "arn_formats": [
     "arn:${Partition}:firehose:${Region}:${Account}:deliverystream/${DeliveryStreamName}"
    ]
   },
   "fis:action": {
    "arn_formats": [
     "arn:${Partition}:fis:${Region}:${Account}:action/${Id}"
    ]
   },
   "fis:experiment": {
    "arn_formats": [
     "arn:${Partition}:fis:${Region}:${Account}:experiment/${Id}"
    ]
   },
   "fis:experiment-template": {
    "arn_formats": [
     "arn:${Partition}:fis:${Region}:${Account}:experiment-template/${Id}"
    ]
   },
   "fis:safety-lever": {
    "arn_formats": [
     "arn:${Partition}:fis:${Region}:${Account}:safety-lever/${Id}"
    ]
   },
   "fms:applications-list": {
    "arn_formats": [
     "arn:${Partition}:fms:${Region}:${Account}:applications-list/${Id}"
    ]
   },
   "fms:policy": {
    "arn_formats": [
     "arn:${Partition}:fms:${Region}:${Account}:policy/${Id}"
    ]
   },
   "fms:protocols-list": {
    "arn_formats": [
     "arn:${Partition}:fms:${Region}:${Account}:protocols-list/${Id}"
    ]
   },
   "fms:resource-set": {
    "arn_formats": [
     "arn:${Partition}:fms:${Region}:${Account}:resource-set/${Id}"
    ]
   },
   "forecast:algorithm": {
    "arn_formats": [
     "arn:${Partition}:forecast:::algorithm/${ResourceId}"
    ]
   },
   "forecast:dataset": {
    "arn_formats": [
     "arn:${Partition}:forecast:${Region}:${Account}:dataset/${ResourceId}"
    ]
   },
   "forecast:datasetGroup": {
    "arn_formats": [
     "arn:${Partition}:forecast:${Region}:${Account}:dataset-group/${ResourceId}"
    ]
   },
   "forecast:datasetImportJob": {
    "arn_formats": [
     "arn:${Partition}:forecast:${Region}:${Account}:dataset-import-job/${ResourceId}"
    ]
   },
   "forecast:endpoint": {
    "arn_formats": [
     "arn:${Partition}:forecast:${Region}:${Account}:forecast-endpoint/${ResourceId}"
    ]
   },
   "forecast:explainability": {
    "arn_formats": [
     "arn:${Partition}:forecast:${Region}:${Account}:explainability/${ResourceId}"
    ]
   },
   "forecast:explainabilityExport": {
    "arn_formats": [
     "arn:${Partition}:forecast:${Region}:${Account}:explainability-export/${ResourceId}"
    ]
   },
   "forecast:forecast": {
    "arn_formats": [
     "arn:${Partition}:forecast:${Region}:${Account}:forecast/${ResourceId}"
    ]
   },
   "forecast:forecastExport": {
    "arn_formats": [
     "arn:${Partition}:forecast:${Region}:${Account}:forecast-export-job/${ResourceId}"
    ]
   },
   "forecast:monitor": {
    "arn_formats": [
     "arn:${Partition}:forecast:${Region}:${Account}:monitor/${ResourceId}"
    ]
   },
   "forecast:predictor": {
    "arn_formats": [
     "arn:${Partition}:forecast:${Region}:${Account}:predictor/${ResourceId}"
    ]
   },
   "forecast:predictorBacktestExportJob": {
    "arn_formats": [
     "arn:${Partition}:forecast:${Region}:${Account}:predictor-backtest-export-job/${ResourceId}"
    ]
   },
   "forecast:whatIfAnalysis": {
    "arn_formats": [
     "arn:${Partition}:forecast:${Region}:${Account}:what-if-analysis/${ResourceId}"
    ]
   },
   "forecast:whatIfForecast": {
    "arn_formats": [
     "arn:${Partition}:forecast:${Region}:${Account}:what-if-forecast/${ResourceId}"
    ]
   },
   "forecast:whatIfForecastExport": {
    "arn_formats": [
     "arn:${Partition}:forecast:${Region}:${Account}:what-if-forecast-export/${ResourceId}"
    ]
   },
   "frauddetector:batch-import": {
    "arn_formats": [
     "arn:${Partition}:frauddetector:${Region}:${Account}:batch-import/${ResourcePath}"
    ]
   },
   "frauddetector:batch-prediction": {
    "arn_formats": [
     "arn:${Partition}:frauddetector:${Region}:${Account}:batch-prediction/${ResourcePath}"
    ]
   },
   "frauddetector:detector": {
    "arn_formats": [
     "arn:${Partition}:frauddetector:${Region}:${Account}:detector/${ResourcePath}"
    ]
   },
   "frauddetector:detector-version": {
    "arn_formats": [
     "arn:${Partition}:frauddetector:${Region}:${Account}:detector-version/${ResourcePath}"
    ]
   },
   "frauddetector:entity-type": {
    "arn_formats": [
     "arn:${Partition}:frauddetector:${Region}:${Account}:entity-type/${ResourcePath}"
    ]
   },
   "frauddetector:event-type": {
    "arn_formats": [
     "arn:${Partition}:frauddetector:${Region}:${Account}:event-type/${ResourcePath}"
    ]
   },
   "frauddetector:external-model": {
    "arn_formats": [
     "arn:${Partition}:frauddetector:${Region}:${Account}:external-model/${ResourcePath}"
    ]
   },
   "frauddetector:label": {
    "arn_formats": [
     "arn:${Partition}:frauddetector:${Region}:${Account}:label/${ResourcePath}"
    ]
   },
   "frauddetector:list": {
    "arn_formats": [
     "arn:${Partition}:frauddetector:${Region}:${Account}:list/${ResourcePath}"
    ]
   },
   "frauddetector:model": {
    "arn_formats": [
     "arn:${Partition}:frauddetector:${Region}:${Account}:model/${ResourcePath}"
    ]
   },
   "frauddetector:model-version": {
    "arn_formats": [
     "arn:${Partition}:frauddetector:${Region}:${Account}:model-version/${ResourcePath}"
    ]
   },
   "frauddetector:outcome": {
    "arn_formats": [
     "arn:${Partition}:frauddetector:${Region}:${Account}:outcome/${ResourcePath}"
    ]
   },
   "frauddetector:rule": {
    "arn_formats": [
     "arn:${Partition}:frauddetector:${Region}:${Account}:rule/${ResourcePath}"
    ]
   },
   "frauddetector:variable": {
    "arn_formats": [
     "arn:${Partition}:frauddetector:${Region}:${Account}:variable/${ResourcePath}"
    ]
   },
   "freertos:configuration": {
    "arn_formats": [
     "arn:${Partition}:freertos:${Region}:${Account}:configuration/${ConfigurationName}"
    ]
   },
   "freertos:subscription": {
    "arn_formats": [
     "arn:${Partition}:freertos:${Region}:${Account}:subscription/${SubscriptionID}"
    ]
   },
   "fsx:association": {
    "arn_formats": [
     "arn:${Partition}:fsx:${Region}:${Account}:association/${FileSystemIdOrFileCacheId}/${DataRepositoryAssociationId}"
    ]
   },
   "fsx:backup": {
    "arn_formats": [
     "arn:${Partition}:fsx:${Region}:${Account}:backup/${BackupId}"
    ]
   },
   "fsx:file-cache": {
    "arn_formats": [
     "arn:${Partition}:fsx:${Region}:${Account}:file-cache/${FileCacheId}"
    ]
   },
   "fsx:file-system": {
    "arn_formats": [
     "arn:${Partition}:fsx:${Region}:${Account}:file-system/${FileSystemId}"
    ]
   },
   "fsx:snapshot": {
    "arn_formats": [
     "arn:${Partition}:fsx:${Region}:${Account}:snapshot/${VolumeId}/${SnapshotId}"
    ]
   },
   "fsx:storage-virtual-machine": {
    "arn_formats": [
     "arn:${Partition}:fsx:${Region}:${Account}:storage-virtual-machine/${FileSystemId}/${StorageVirtualMachineId}"
    ]
   },
   "fsx:task": {
    "arn_formats": [
     "arn:${Partition}:fsx:${Region}:${Account}:task/${TaskId}"
    ]
   },
   "fsx:volume": {
    "arn_formats": [
     "arn:${Partition}:fsx:${Region}:${Account}:volume/${FileSystemId}/${VolumeId}"
    ]
   },
   "gamelift:alias": {
    "arn_formats": [
     "arn:${Partition}:gamelift:${Region}::alias/${AliasId}"
    ]
   },
   "gamelift:build": {
    "arn_formats": [
     "arn:${Partition}:gamelift:${Region}:${Account}:build/${BuildId}"
    ]
   },
   "gamelift:containerFleet": {
    "arn_formats": [
     "arn:${Partition}:gamelift:${Region}:${Account}:containerfleet/${FleetId}"
    ]
   },
   "gamelift:containerGroupDefinition": {
    "arn_formats": [
     "arn:${Partition}:gamelift:${Region}:${Account}:containergroupdefinition/${Name}"
    ]
   },
   "gamelift:fleet": {
    "arn_formats": [
     "arn:${Partition}:gamelift:${Region}:${Account}:fleet/${FleetId}"
    ]
   },
   "gamelift:gameServerGroup": {
    "arn_formats": [
     "arn:${Partition}:gamelift:${Region}:${Account}:gameservergroup/${GameServerGroupName}"
    ]
   },
   "gamelift:gameSessionQueue": {
    "arn_formats": [
     "arn:${Partition}:gamelift:${Region}:${Account}:gamesessionqueue/${GameSessionQueueName}"
    ]
   },
   "gamelift:location": {
    "arn_formats": [
     "arn:${Partition}:gamelift:${Region}:${Account}:location/${LocationId}"
    ]
   },
   "gamelift:matchmakingConfiguration": {
    "arn_formats": [
     "arn:${Partition}:gamelift:${Region}:${Account}:matchmakingconfiguration/${MatchmakingConfigurationName}"
    ]
   },
   "gamelift:matchmakingRuleSet": {
    "arn_formats": [
     "arn:${Partition}:gamelift:${Region}:${Account}:matchmakingruleset/${MatchmakingRuleSetName}"
    ]
   },
   "gamelift:script": {
    "arn_formats": [
     "arn:${Partition}:gamelift:${Region}:${Account}:script/${ScriptId}"
    ]
   },
   "gameliftstreams:application": {
    "arn_formats": [
     "arn:${Partition}:gameliftstreams:${Region}:${Account}:application/${ApplicationId}"
    ]
   },
   "gameliftstreams:stream group": {
    "arn_formats": [
     "arn:${Partition}:gameliftstreams:${Region}:${Account}:streamgroup/${StreamGroupId}"
    ]
   },
   "geo-maps:provider": {
    "arn_formats": [
     "arn:${Partition}:geo-maps:${Region}::provider/default"
    ]
   },
   "geo-places:provider": {
    "arn_formats": [
     "arn:${Partition}:geo-places:${Region}::provider/default"
    ]
   },
   "geo-routes:provider": {
    "arn_formats": [
     "arn:${Partition}:geo-routes:${Region}::provider/default"
    ]
   },
   "geo:api-key": {
    "arn_formats": [
     "arn:${Partition}:geo:${Region}:${Account}:api-key/${KeyName}"
    ]
   },
   "geo:geofence-collection": {
    "arn_formats": [
     "arn:${Partition}:geo:${Region}:${Account}:geofence-collection/${GeofenceCollectionName}"
    ]
   },
   "geo:map": {
    "arn_formats": [
     "arn:${Partition}:geo:${Region}:${Account}:map/${MapName}"
    ]
   },
   "geo:place-index": {
    "arn_formats": [
     "arn:${Partition}:geo:${Region}:${Account}:place-index/${IndexName}"
    ]
   },
   "geo:route-calculator": {
    "arn_formats": [
     "arn:${Partition}:geo:${Region}:${Account}:route-calculator/${CalculatorName}"
    ]
   },
   "geo:tracker": {
    "arn_formats": [
     "arn:${Partition}:geo:${Region}:${Account}:tracker/${TrackerName}"
    ]
   },
   "glacier:vault": {
    "arn_formats": [
     "arn:${Partition}:glacier:${Region}:${Account}:vaults/${VaultName}"
    ]
   },
   "globalaccelerator:accelerator": {
    "arn_formats": [
     "arn:${Partition}:globalaccelerator::${Account}:accelerator/${ResourceId}"
    ]
   },
   "globalaccelerator:attachment": {
    "arn_formats": [
     "arn:${Partition}:globalaccelerator::${Account}:attachment/${ResourceId}"
    ]
   },
   "globalaccelerator:endpointgroup": {
    "arn_formats": [
     "arn:${Partition}:globalaccelerator::${Account}:accelerator/${ResourceId}/listener/${ListenerId}/endpoint-group/${EndpointGroupId}"
    ]
   },
   "globalaccelerator:listener": {
    "arn_formats": [
     "arn:${Partition}:globalaccelerator::${Account}:accelerator/${ResourceId}/listener/${ListenerId}"
    ]
   },
   "glue:blueprint": {
    "arn_formats": [
     "arn:${Partition}:glue:${Region}:${Account}:blueprint/${BlueprintName}"
    ]
   },
   "glue:catalog": {
    "arn_formats": [
     "arn:${Partition}:glue:${Region}:${Account}:catalog/${CatalogName}"
    ]
   },
   "glue:completion": {
    "arn_formats": [
     "arn:${Partition}:glue:${Region}:${Account}:completion/${CompletionId}"
    ]
   },
   "glue:connection": {
    "arn_formats": [
     "arn:${Partition}:glue:${Region}:${Account}:connection/${ConnectionName}"
    ]
   },
   "glue:crawler": {
    "arn_formats": [
     "arn:${Partition}:glue:${Region}:${Account}:crawler/${CrawlerName}"
    ]
   },
   "glue:customEntityType": {
    "arn_formats": [
     "arn:${Partition}:glue:${Region}:${Account}:customEntityType/${CustomEntityTypeId}"
    ]
   },
   "glue:dataQualityRuleset": {
    "arn_formats": [
     "arn:${Partition}:glue:${Region}:${Account}:dataQualityRuleset/${RulesetName}"
    ]
   },
   "glue:database": {
    "arn_formats": [
     "arn:${Partition}:glue:${Region}:${Account}:database/${DatabaseName}"
    ]
   },
   "glue:devendpoint": {
    "arn_formats": [
     "arn:${Partition}:glue:${Region}:${Account}:devEndpoint/${DevEndpointName}"
    ]
   },
   "glue:integration": {
    "arn_formats": [
     "arn:${Partition}:glue:${Region}:${Account}:integration:${IntegrationId}"
    ]
   },
   "glue:job": {
    "arn_formats": [
     "arn:${Partition}:glue:${Region}:${Account}:job/${JobName}"
    ]
   },
   "glue:mlTransform": {
    "arn_formats": [
     "arn:${Partition}:glue:${Region}:${Account}:mlTransform/${TransformId}"
    ]
   },
   "glue:registry": {
    "arn_formats": [
     "arn:${Partition}:glue:${Region}:${Account}:registry/${RegistryName}"
    ]
   },
   "glue:rootcatalog": {
    "arn_formats": [
     "arn:${Partition}:glue:${Region}:${Account}:catalog"
    ]
   },
   "glue:schema": {
    "arn_formats": [
     "arn:${Partition}:glue:${Region}:${Account}:schema/${SchemaName}"
    ]
   },
   "glue:session": {
    "arn_formats": [
     "arn:${Partition}:glue:${Region}:${Account}:session/${SessionId}"
    ]
   },
   "glue:table": {
    "arn_formats": [
     "arn:${Partition}:glue:${Region}:${Account}:table/${DatabaseName}/${TableName}"
    ]
   },
   "glue:tableversion": {
    "arn_formats": [
     "arn:${Partition}:glue:${Region}:${Account}:tableVersion/${DatabaseName}/${TableName}/${TableVersionName}"
    ]
   },
   "glue:trigger": {
    "arn_formats": [
     "arn:${Partition}:glue:${Region}:${Account}:trigger/${TriggerName}"
    ]
   },
   "glue:usageProfile": {
    "arn_formats": [
     "arn:${Partition}:glue:${Region}:${Account}:usageProfile/${UsageProfileId}"
    ]
   },
   "glue:userdefinedfunction": {
    "arn_formats": [
     "arn:${Partition}:glue:${Region}:${Account}:userDefinedFunction/${DatabaseName}/${UserDefinedFunctionName}"
    ]
   },
   "glue:workflow": {
    "arn_formats": [
     "arn:${Partition}:glue:${Region}:${Account}:workflow/${WorkflowName}"
    ]
   },
   "grafana:workspace": {
    "arn_formats": [
     "arn:${Partition}:grafana:${Region}:${Account}:/workspaces/${ResourceId}"
    ]
   },
   "greengrass:bulkDeployment": {
    "arn_formats": [
     "arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/bulk/deployments/${BulkDeploymentId}"
    ]
   },
   "greengrass:certificateAuthority": {
    "arn_formats": [
     "arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/groups/${GroupId}/certificateauthorities/${CertificateAuthorityId}"
    ]
   },
   "greengrass:component": {
    "arn_formats": [
     "arn:${Partition}:greengrass:${Region}:${Account}:components:${ComponentName}"
    ]
   },
   "greengrass:componentVersion": {
    "arn_formats": [
     "arn:${Partition}:greengrass:${Region}:${Account}:components:${ComponentName}:versions:${ComponentVersion}"
    ]
   },
   "greengrass:connectivityInfo": {
    "arn_formats": [
     "arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/things/${ThingName}/connectivityInfo"
    ]
   },
   "greengrass:connectorDefinition": {
    "arn_formats": [
     "arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/connectors/${ConnectorDefinitionId}"
    ]
   },
   "greengrass:connectorDefinitionVersion": {
    "arn_formats": [
     "arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/connectors/${ConnectorDefinitionId}/versions/${VersionId}"
    ]
   },
   "greengrass:coreDefinition": {
    "arn_formats": [
     "arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/cores/${CoreDefinitionId}"
    ]
   },
   "greengrass:coreDefinitionVersion": {
    "arn_formats": [
     "arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/cores/${CoreDefinitionId}/versions/${VersionId}"
    ]
   },
   "greengrass:coreDevice": {
    "arn_formats": [
     "arn:${Partition}:greengrass:${Region}:${Account}:coreDevices:${CoreDeviceThingName}"
    ]
   },
   "greengrass:deployment": {
    "arn_formats": [
     "arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/groups/${GroupId}/deployments/${DeploymentId}",
     "arn:${Partition}:greengrass:${Region}:${Account}:deployments:${DeploymentId}"
    ]
   },
   "greengrass:deviceDefinition": {
    "arn_formats": [
     "arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/devices/${DeviceDefinitionId}"
    ]
   },
   "greengrass:deviceDefinitionVersion": {
    "arn_formats": [
     "arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/devices/${DeviceDefinitionId}/versions/${VersionId}"
    ]
   },
   "greengrass:functionDefinition": {
    "arn_formats": [
     "arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/functions/${FunctionDefinitionId}"
    ]
   },
   "greengrass:functionDefinitionVersion": {
    "arn_formats": [
     "arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/functions/${FunctionDefinitionId}/versions/${VersionId}"
    ]
   },
   "greengrass:group": {
    "arn_formats": [
     "arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/groups/${GroupId}"
    ]
   },
   "greengrass:groupVersion": {
    "arn_formats": [
     "arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/groups/${GroupId}/versions/${VersionId}"
    ]
   },
   "greengrass:loggerDefinition": {
    "arn_formats": [
     "arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/loggers/${LoggerDefinitionId}"
    ]
   },
   "greengrass:loggerDefinitionVersion": {
    "arn_formats": [
     "arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/loggers/${LoggerDefinitionId}/versions/${VersionId}"
    ]
   },
   "greengrass:resourceDefinition": {
    "arn_formats": [
     "arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/resources/${ResourceDefinitionId}"
    ]
   },
   "greengrass:resourceDefinitionVersion": {
    "arn_formats": [
     "arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/resources/${ResourceDefinitionId}/versions/${VersionId}"
    ]
   },
   "greengrass:subscriptionDefinition": {
    "arn_formats": [
     "arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/subscriptions/${SubscriptionDefinitionId}"
    ]
   },
   "greengrass:subscriptionDefinitionVersion": {
    "arn_formats": [
     "arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/subscriptions/${SubscriptionDefinitionId}/versions/${VersionId}"
    ]
   },
   "greengrass:thing": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:thing/${ThingName}"
    ]
   },
   "greengrass:thingRuntimeConfig": {
    "arn_formats": [
     "arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/things/${ThingName}/runtimeconfig"
    ]
   },
   "groundstation:Agent": {
    "arn_formats": [
     "arn:${Partition}:groundstation:${Region}:${Account}:agent/${AgentId}"
    ]
   },
   "groundstation:Config": {
    "arn_formats": [
     "arn:${Partition}:groundstation:${Region}:${Account}:config/${ConfigType}/${ConfigId}"
    ]
   },
   "groundstation:Contact": {
    "arn_formats": [
     "arn:${Partition}:groundstation:${Region}:${Account}:contact/${ContactId}"
    ]
   },
   "groundstation:DataflowEndpointGroup": {
    "arn_formats": [
     "arn:${Partition}:groundstation:${Region}:${Account}:dataflow-endpoint-group/${DataflowEndpointGroupId}"
    ]
   },
   "groundstation:EphemerisItem": {
    "arn_formats": [
     "arn:${Partition}:groundstation:${Region}:${Account}:ephemeris/${EphemerisId}"
    ]
   },
   "groundstation:GroundStationResource": {
    "arn_formats": [
     "arn:${Partition}:groundstation:${Region}:${Account}:groundstation:${GroundStationId}"
    ]
   },
   "groundstation:MissionProfile": {
    "arn_formats": [
     "arn:${Partition}:groundstation:${Region}:${Account}:mission-profile/${MissionProfileId}"
    ]
   },
   "groundstation:Satellite": {
    "arn_formats": [
     "arn:${Partition}:groundstation:${Region}:${Account}:satellite/${SatelliteId}"
    ]
   },
   "guardduty:detector": {
    "arn_formats": [
     "arn:${Partition}:guardduty:${Region}:${Account}:detector/${DetectorId}"
    ]
   },
   "guardduty:filter": {
    "arn_formats": [
     "arn:${Partition}:guardduty:${Region}:${Account}:detector/${DetectorId}/filter/${FilterName}"
    ]
   },
   "guardduty:ipset": {
    "arn_formats": [
     "arn:${Partition}:guardduty:${Region}:${Account}:detector/${DetectorId}/ipset/${IPSetId}"
    ]
   },
   "guardduty:malwareprotectionplan": {
    "arn_formats": [
     "arn:${Partition}:guardduty:${Region}:${Account}:malware-protection-plan/${MalwareProtectionPlanId}"
    ]
   },
   "guardduty:publishingDestination": {
    "arn_formats": [
     "arn:${Partition}:guardduty:${Region}:${Account}:detector/${DetectorId}/publishingDestination/${PublishingDestinationId}"
    ]
   },
   "guardduty:threatintelset": {
    "arn_formats": [
     "arn:${Partition}:guardduty:${Region}:${Account}:detector/${DetectorId}/threatintelset/${ThreatIntelSetId}"
    ]
   },
   "health:event": {
    "arn_formats": [
     "arn:${Partition}:health:*::event/${Service}/${EventTypeCode}/*"
    ]
   },
   "healthlake:datastore": {
    "arn_formats": [
     "arn:${Partition}:healthlake:${Region}:${Account}:datastore/fhir/${DatastoreId}"
    ]
   },
   "honeycode:screen": {
    "arn_formats": [
     "arn:${Partition}:honeycode:${Region}:${Account}:screen:workbook/${WorkbookId}/app/${AppId}/screen/${ScreenId}"
    ]
   },
   "honeycode:screen-automation": {
    "arn_formats": [
     "arn:${Partition}:honeycode:${Region}:${Account}:screen-automation:workbook/${WorkbookId}/app/${AppId}/screen/${ScreenId}/automation/${AutomationId}"
    ]
   },
   "honeycode:table": {
    "arn_formats": [
     "arn:${Partition}:honeycode:${Region}:${Account}:table:workbook/${WorkbookId}/table/${TableId}"
    ]
   },
   "honeycode:workbook": {
    "arn_formats": [
     "arn:${Partition}:honeycode:${Region}:${Account}:workbook:workbook/${WorkbookId}"
    ]
   },
   "iam:access-report": {
    "arn_formats": [
     "arn:${Partition}:iam::${Account}:access-report/${EntityPath}"
    ]
   },
   "iam:assumed-role": {
    "arn_formats": [
     "arn:${Partition}:iam::${Account}:assumed-role/${RoleName}/${RoleSessionName}"
    ]
   },
   "iam:federated-user": {
    "arn_formats": [
     "arn:${Partition}:iam::${Account}:federated-user/${UserName}"
    ]
   },
   "iam:group": {
    "arn_formats": [
     "arn:${Partition}:iam::${Account}:group/${GroupNameWithPath}"
    ]
   },
   "iam:instance-profile": {
    "arn_formats": [
     "arn:${Partition}:iam::${Account}:instance-profile/${InstanceProfileNameWithPath}"
    ]
   },
   "iam:mfa": {
    "arn_formats": [
     "arn:${Partition}:iam::${Account}:mfa/${MfaTokenIdWithPath}"
    ]
   },
   "iam:oidc-provider": {
    "arn_formats": [
     "arn:${Partition}:iam::${Account}:oidc-provider/${OidcProviderName}"
    ]
   },
   "iam:policy": {
    "arn_formats": [
     "arn:${Partition}:iam::${Account}:policy/${PolicyNameWithPath}"
    ]
   },
   "iam:role": {
    "arn_formats": [
     "arn:${Partition}:iam::${Account}:role/${RoleNameWithPath}"
    ]
   },
   "iam:saml-provider": {
    "arn_formats": [
     "arn:${Partition}:iam::${Account}:saml-provider/${SamlProviderName}"
    ]
   },
   "iam:server-certificate": {
    "arn_formats": [
     "arn:${Partition}:iam::${Account}:server-certificate/${CertificateNameWithPath}"
    ]
   },
   "iam:sms-mfa": {
    "arn_formats": [
     "arn:${Partition}:iam::${Account}:sms-mfa/${MfaTokenIdWithPath}"
    ]
   },
   "iam:user": {
    "arn_formats": [
     "arn:${Partition}:iam::${Account}:user/${UserNameWithPath}"
    ]
   },
   "identity-sync:SyncProfileResource": {
    "arn_formats": [
     "arn:${Partition}:identity-sync:${Region}:${Account}:profile/${SyncProfileName}"
    ]
   },
   "identity-sync:SyncTargetResource": {
    "arn_formats": [
     "arn:${Partition}:identity-sync:${Region}:${Account}:target/${SyncProfileName}/${SyncTargetName}"
    ]
   },
   "identitystore:AllGroupMemberships": {
    "arn_formats": [
     "arn:${Partition}:identitystore:::membership/*"
    ]
   },
   "identitystore:AllGroups": {
    "arn_formats": [
     "arn:${Partition}:identitystore:::group/*"
    ]
   },
   "identitystore:AllUsers": {
    "arn_formats": [
     "arn:${Partition}:identitystore:::user/*"
    ]
   },
   "identitystore:Group": {
    "arn_formats": [
     "arn:${Partition}:identitystore:::group/${GroupId}"
    ]
   },
   "identitystore:GroupMembership": {
    "arn_formats": [
     "arn:${Partition}:identitystore:::membership/${MembershipId}"
    ]
   },
   "identitystore:Identitystore": {
    "arn_formats": [
     "arn:${Partition}:identitystore::${Account}:identitystore/${IdentityStoreId}"
    ]
   },
   "identitystore:User": {
    "arn_formats": [
     "arn:${Partition}:identitystore:::user/${UserId}"
    ]
   },
   "imagebuilder:component": {
    "arn_formats": [
     "arn:${Partition}:imagebuilder:${Region}:${Account}:component/${ComponentName}/${ComponentVersion}/${ComponentBuildVersion}"
    ]
   },
   "imagebuilder:componentVersion": {
    "arn_formats": [
     "arn:${Partition}:imagebuilder:${Region}:${Account}:component/${ComponentName}/${ComponentVersion}"
    ]
   },
   "imagebuilder:containerRecipe": {
    "arn_formats": [
     "arn:${Partition}:imagebuilder:${Region}:${Account}:container-recipe/${ContainerRecipeName}/${ContainerRecipeVersion}"
    ]
   },
   "imagebuilder:distributionConfiguration": {
    "arn_formats": [
     "arn:${Partition}:imagebuilder:${Region}:${Account}:distribution-configuration/${DistributionConfigurationName}"
    ]
   },
   "imagebuilder:image": {
    "arn_formats": [
     "arn:${Partition}:imagebuilder:${Region}:${Account}:image/${ImageName}/${ImageVersion}/${ImageBuildVersion}"
    ]
   },
   "imagebuilder:imagePipeline": {
    "arn_formats": [
     "arn:${Partition}:imagebuilder:${Region}:${Account}:image-pipeline/${ImagePipelineName}"
    ]
   },
   "imagebuilder:imageRecipe": {
    "arn_formats": [
     "arn:${Partition}:imagebuilder:${Region}:${Account}:image-recipe/${ImageRecipeName}/${ImageRecipeVersion}"
    ]
   },
   "imagebuilder:imageVersion": {
    "arn_formats": [
     "arn:${Partition}:imagebuilder:${Region}:${Account}:image/${ImageName}/${ImageVersion}"
    ]
   },
   "imagebuilder:infrastructureConfiguration": {
    "arn_formats": [
     "arn:${Partition}:imagebuilder:${Region}:${Account}:infrastructure-configuration/${ResourceId}"
    ]
   },
   "imagebuilder:kmsKey": {
    "arn_formats": [
     "arn:${Partition}:kms:${Region}:${Account}:key/${KeyId}"
    ]
   },
   "imagebuilder:lifecycleExecution": {
    "arn_formats": [
     "arn:${Partition}:imagebuilder:${Region}:${Account}:lifecycle-execution/${LifecycleExecutionId}"
    ]
   },
   "imagebuilder:lifecyclePolicy": {
    "arn_formats": [
     "arn:${Partition}:imagebuilder:${Region}:${Account}:lifecycle-policy/${LifecyclePolicyName}"
    ]
   },
   "imagebuilder:workflow": {
    "arn_formats": [
     "arn:${Partition}:imagebuilder:${Region}:${Account}:workflow/${WorkflowType}/${WorkflowName}/${WorkflowVersion}/${WorkflowBuildVersion}"
    ]
   },
   "imagebuilder:workflowExecution": {
    "arn_formats": [
     "arn:${Partition}:imagebuilder:${Region}:${Account}:workflow-execution/${WorkflowExecutionId}"
    ]
   },
   "imagebuilder:workflowStepExecution": {
    "arn_formats": [
     "arn:${Partition}:imagebuilder:${Region}:${Account}:workflow-step-execution/${WorkflowStepExecutionId}"
    ]
   },
   "imagebuilder:workflowVersion": {
    "arn_formats": [
     "arn:${Partition}:imagebuilder:${Region}:${Account}:workflow/${WorkflowType}/${WorkflowName}/${WorkflowVersion}"
    ]
   },
   "inspector2:CIS Scan Configuration": {
    "arn_formats": [
     "arn:${Partition}:inspector2:${Region}:${Account}:owner/${OwnerId}/cis-configuration/${CISScanConfigurationId}"
    ]
   },
   "inspector2:Filter": {
    "arn_formats": [
     "arn:${Partition}:inspector2:${Region}:${Account}:owner/${OwnerId}/filter/${FilterId}"
    ]
   },
   "inspector2:Finding": {
    "arn_formats": [
     "arn:${Partition}:inspector2:${Region}:${Account}:finding/${FindingId}"
    ]
   },
   "internetmonitor:HealthEvent": {
    "arn_formats": [
     "arn:${Partition}:internetmonitor:${Region}:${Account}:monitor/${MonitorName}/health-event/${EventId}"
    ]
   },
   "internetmonitor:InternetEvent": {
    "arn_formats": [
     "arn:${Partition}:internetmonitor::${Account}:internet-event/${InternetEventId}"
    ]
   },
   "internetmonitor:Monitor": {
    "arn_formats": [
     "arn:${Partition}:internetmonitor:${Region}:${Account}:monitor/${MonitorName}"
    ]
   },
   "invoicing:invoice-unit": {
    "arn_formats": [
     "arn:${Partition}:invoicing::${Account}:invoice-unit/${Identifier}"
    ]
   },
   "iot1click:device": {
    "arn_formats": [
     "arn:${Partition}:iot1click:${Region}:${Account}:devices/${DeviceId}"
    ]
   },
   "iot1click:project": {
    "arn_formats": [
     "arn:${Partition}:iot1click:${Region}:${Account}:projects/${ProjectName}"
    ]
   },
   "iot:authorizer": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:authorizer/${AuthorizerName}"
    ]
   },
   "iot:billinggroup": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:billinggroup/${BillingGroupName}"
    ]
   },
   "iot:cacert": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:cacert/${CACertificate}"
    ]
   },
   "iot:cert": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:cert/${Certificate}"
    ]
   },
   "iot:certificateprovider": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:certificateprovider/${CertificateProviderName}"
    ]
   },
   "iot:client": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:client/${ClientId}"
    ]
   },
   "iot:command": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:command/${CommandId}"
    ]
   },
   "iot:custommetric": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:custommetric/${MetricName}"
    ]
   },
   "iot:destination": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:ruledestination/${DestinationType}/${Uuid}"
    ]
   },
   "iot:dimension": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:dimension/${DimensionName}"
    ]
   },
   "iot:domainconfiguration": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:domainconfiguration/${DomainConfigurationName}/${Id}"
    ]
   },
   "iot:dynamicthinggroup": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:thinggroup/${ThingGroupName}"
    ]
   },
   "iot:fleetmetric": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:fleetmetric/${FleetMetricName}"
    ]
   },
   "iot:index": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:index/${IndexName}"
    ]
   },
   "iot:job": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:job/${JobId}"
    ]
   },
   "iot:jobtemplate": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:jobtemplate/${JobTemplateId}"
    ]
   },
   "iot:mitigationaction": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:mitigationaction/${MitigationActionName}"
    ]
   },
   "iot:otaupdate": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:otaupdate/${OtaUpdateId}"
    ]
   },
   "iot:package": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:package/${PackageName}"
    ]
   },
   "iot:packageversion": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:package/${PackageName}/version/${VersionName}"
    ]
   },
   "iot:policy": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:policy/${PolicyName}"
    ]
   },
   "iot:provisioningtemplate": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:provisioningtemplate/${ProvisioningTemplate}"
    ]
   },
   "iot:rolealias": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:rolealias/${RoleAlias}"
    ]
   },
   "iot:rule": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:rule/${RuleName}"
    ]
   },
   "iot:scheduledaudit": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:scheduledaudit/${ScheduleName}"
    ]
   },
   "iot:securityprofile": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:securityprofile/${SecurityProfileName}"
    ]
   },
   "iot:stream": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:stream/${StreamId}"
    ]
   },
   "iot:thing": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:thing/${ThingName}"
    ]
   },
   "iot:thinggroup": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:thinggroup/${ThingGroupName}"
    ]
   },
   "iot:thingtype": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:thingtype/${ThingTypeName}"
    ]
   },
   "iot:topic": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:topic/${TopicName}"
    ]
   },
   "iot:topicfilter": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:topicfilter/${TopicFilter}"
    ]
   },
   "iot:tunnel": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:tunnel/${TunnelId}"
    ]
   },
   "iotanalytics:channel": {
    "arn_formats": [
     "arn:${Partition}:iotanalytics:${Region}:${Account}:channel/${ChannelName}"
    ]
   },
   "iotanalytics:dataset": {
    "arn_formats": [
     "arn:${Partition}:iotanalytics:${Region}:${Account}:dataset/${DatasetName}"
    ]
   },
   "iotanalytics:datastore": {
    "arn_formats": [
     "arn:${Partition}:iotanalytics:${Region}:${Account}:datastore/${DatastoreName}"
    ]
   },
   "iotanalytics:pipeline": {
    "arn_formats": [
     "arn:${Partition}:iotanalytics:${Region}:${Account}:pipeline/${PipelineName}"
    ]
   },
   "iotdeviceadvisor:Suitedefinition": {
    "arn_formats": [
     "arn:${Partition}:iotdeviceadvisor:${Region}:${Account}:suitedefinition/${SuiteDefinitionId}"
    ]
   },
   "iotdeviceadvisor:Suiterun": {
    "arn_formats": [
     "arn:${Partition}:iotdeviceadvisor:${Region}:${Account}:suiterun/${SuiteDefinitionId}/${SuiteRunId}"
    ]
   },
   "iotevents:alarmModel": {
    "arn_formats": [
     "arn:${Partition}:iotevents:${Region}:${Account}:alarmModel/${AlarmModelName}"
    ]
   },
   "iotevents:detectorModel": {
    "arn_formats": [
     "arn:${Partition}:iotevents:${Region}:${Account}:detectorModel/${DetectorModelName}"
    ]
   },
   "iotevents:input": {
    "arn_formats": [
     "arn:${Partition}:iotevents:${Region}:${Account}:input/${InputName}"
    ]
   },
   "iotfleethub:application": {
    "arn_formats": [
     "arn:${Partition}:iotfleethub:${Region}:${Account}:application/${ApplicationId}"
    ]
   },
   "iotfleetwise:campaign": {
    "arn_formats": [
     "arn:${Partition}:iotfleetwise:${Region}:${Account}:campaign/${CampaignName}"
    ]
   },
   "iotfleetwise:decodermanifest": {
    "arn_formats": [
     "arn:${Partition}:iotfleetwise:${Region}:${Account}:decoder-manifest/${Name}"
    ]
   },
   "iotfleetwise:fleet": {
    "arn_formats": [
     "arn:${Partition}:iotfleetwise:${Region}:${Account}:fleet/${FleetId}"
    ]
   },
   "iotfleetwise:modelmanifest": {
    "arn_formats": [
     "arn:${Partition}:iotfleetwise:${Region}:${Account}:model-manifest/${Name}"
    ]
   },
   "iotfleetwise:signalcatalog": {
    "arn_formats": [
     "arn:${Partition}:iotfleetwise:${Region}:${Account}:signal-catalog/${Name}"
    ]
   },
   "iotfleetwise:statetemplate": {
    "arn_formats": [
     "arn:${Partition}:iotfleetwise:${Region}:${Account}:state-template/${StateTemplateId}"
    ]
   },
   "iotfleetwise:vehicle": {
    "arn_formats": [
     "arn:${Partition}:iotfleetwise:${Region}:${Account}:vehicle/${VehicleId}"
    ]
   },
   "iotjobsdata:thing": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:thing/${ThingName}"
    ]
   },
   "iotmanagedintegrations:CredentialLockerResource": {
    "arn_formats": [
     "arn:${Partition}:iotmanagedintegrations:${Region}:${Account}:credential-locker/${Identifier}"
    ]
   },
   "iotmanagedintegrations:ManagedThingResource": {
    "arn_formats": [
     "arn:${Partition}:iotmanagedintegrations:${Region}:${Account}:managed-thing/${Identifier}"
    ]
   },
   "iotmanagedintegrations:OtaTaskResource": {
    "arn_formats": [
     "arn:${Partition}:iotmanagedintegrations:${Region}:${Account}:ota-task/${Identifier}"
    ]
   },
   "iotmanagedintegrations:ProvisioningProfileResource": {
    "arn_formats": [
     "arn:${Partition}:iotmanagedintegrations:${Region}:${Account}:provisioning-profile/${Identifier}"
    ]
   },
   "iotsitewise:access-policy": {
    "arn_formats": [
     "arn:${Partition}:iotsitewise:${Region}:${Account}:access-policy/${AccessPolicyId}"
    ]
   },
   "iotsitewise:asset": {
    "arn_formats": [
     "arn:${Partition}:iotsitewise:${Region}:${Account}:asset/${AssetId}"
    ]
   },
   "iotsitewise:asset-model": {
    "arn_formats": [
     "arn:${Partition}:iotsitewise:${Region}:${Account}:asset-model/${AssetModelId}"
    ]
   },
   "iotsitewise:dashboard": {
    "arn_formats": [
     "arn:${Partition}:iotsitewise:${Region}:${Account}:dashboard/${DashboardId}"
    ]
   },
   "iotsitewise:dataset": {
    "arn_formats": [
     "arn:${Partition}:iotsitewise:${Region}:${Account}:dataset/${DatasetId}"
    ]
   },
   "iotsitewise:gateway": {
    "arn_formats": [
     "arn:${Partition}:iotsitewise:${Region}:${Account}:gateway/${GatewayId}"
    ]
   },
   "iotsitewise:portal": {
    "arn_formats": [
     "arn:${Partition}:iotsitewise:${Region}:${Account}:portal/${PortalId}"
    ]
   },
   "iotsitewise:project": {
    "arn_formats": [
     "arn:${Partition}:iotsitewise:${Region}:${Account}:project/${ProjectId}"
    ]
   },
   "iotsitewise:time-series": {
    "arn_formats": [
     "arn:${Partition}:iotsitewise:${Region}:${Account}:time-series/${TimeSeriesId}"
    ]
   },
   "iottwinmaker:componentType": {
    "arn_formats": [
     "arn:${Partition}:iottwinmaker:${Region}:${Account}:workspace/${WorkspaceId}/component-type/${ComponentTypeId}"
    ]
   },
   "iottwinmaker:entity": {
    "arn_formats": [
     "arn:${Partition}:iottwinmaker:${Region}:${Account}:workspace/${WorkspaceId}/entity/${EntityId}"
    ]
   },
   "iottwinmaker:metadataTransferJob": {
    "arn_formats": [
     "arn:${Partition}:iottwinmaker:${Region}:${Account}:metadata-transfer-job/${MetadataTransferJobId}"
    ]
   },
   "iottwinmaker:scene": {
    "arn_formats": [
     "arn:${Partition}:iottwinmaker:${Region}:${Account}:workspace/${WorkspaceId}/scene/${SceneId}"
    ]
   },
   "iottwinmaker:syncJob": {
    "arn_formats": [
     "arn:${Partition}:iottwinmaker:${Region}:${Account}:workspace/${WorkspaceId}/sync-job/${SyncJobId}"
    ]
   },
   "iottwinmaker:workspace": {
    "arn_formats": [
     "arn:${Partition}:iottwinmaker:${Region}:${Account}:workspace/${WorkspaceId}"
    ]
   },
   "iotwireless:Destination": {
    "arn_formats": [
     "arn:${Partition}:iotwireless:${Region}:${Account}:Destination/${DestinationName}"
    ]
   },
   "iotwireless:DeviceProfile": {
    "arn_formats": [
     "arn:${Partition}:iotwireless:${Region}:${Account}:DeviceProfile/${DeviceProfileId}"
    ]
   },
   "iotwireless:FuotaTask": {
    "arn_formats": [
     "arn:${Partition}:iotwireless:${Region}:${Account}:FuotaTask/${FuotaTaskId}"
    ]
   },
   "iotwireless:ImportTask": {
    "arn_formats": [
     "arn:${Partition}:iotwireless:${Region}:${Account}:ImportTask/${ImportTaskId}"
    ]
   },
   "iotwireless:MulticastGroup": {
    "arn_formats": [
     "arn:${Partition}:iotwireless:${Region}:${Account}:MulticastGroup/${MulticastGroupId}"
    ]
   },
   "iotwireless:NetworkAnalyzerConfiguration": {
    "arn_formats": [
     "arn:${Partition}:iotwireless:${Region}:${Account}:NetworkAnalyzerConfiguration/${NetworkAnalyzerConfigurationName}"
    ]
   },
   "iotwireless:ServiceProfile": {
    "arn_formats": [
     "arn:${Partition}:iotwireless:${Region}:${Account}:ServiceProfile/${ServiceProfileId}"
    ]
   },
   "iotwireless:SidewalkAccount": {
    "arn_formats": [
     "arn:${Partition}:iotwireless:${Region}:${Account}:SidewalkAccount/${SidewalkAccountId}"
    ]
   },
   "iotwireless:WirelessDevice": {
    "arn_formats": [
     "arn:${Partition}:iotwireless:${Region}:${Account}:WirelessDevice/${WirelessDeviceId}"
    ]
   },
   "iotwireless:WirelessGateway": {
    "arn_formats": [
     "arn:${Partition}:iotwireless:${Region}:${Account}:WirelessGateway/${WirelessGatewayId}"
    ]
   },
   "iotwireless:WirelessGatewayTaskDefinition": {
    "arn_formats": [
     "arn:${Partition}:iotwireless:${Region}:${Account}:WirelessGatewayTaskDefinition/${WirelessGatewayTaskDefinitionId}"
    ]
   },
   "iotwireless:cert": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:cert/${Certificate}"
    ]
   },
   "iotwireless:thing": {
    "arn_formats": [
     "arn:${Partition}:iot:${Region}:${Account}:thing/${ThingName}"
    ]
   },
   "iq-permission:permission": {
    "arn_formats": [
     "arn:${Partition}:iq-permission:${Region}::permission/${PermissionRequestId}"
    ]
   },
   "iq:attachment": {
    "arn_formats": [
     "arn:${Partition}:iq:${Region}::attachment/${AttachmentId}"
    ]
   },
   "iq:buyer": {
    "arn_formats": [
     "arn:${Partition}:iq:${Region}::buyer/${BuyerId}"
    ]
   },
   "iq:call": {
    "arn_formats": [
     "arn:${Partition}:iq:${Region}::call/${CallId}"
    ]
   },
   "iq:company": {
    "arn_formats": [
     "arn:${Partition}:iq:${Region}::company/${CompanyId}"
    ]
   },
   "iq:conversation": {
    "arn_formats": [
     "arn:${Partition}:iq:${Region}::conversation/${ConversationId}"
    ]
   },
   "iq:expert": {
    "arn_formats": [
     "arn:${Partition}:iq:${Region}::expert/${ExpertId}"
    ]
   },
   "iq:listing": {
    "arn_formats": [
     "arn:${Partition}:iq:${Region}::listing/${ListingId}"
    ]
   },
   "iq:paymentRequest": {
    "arn_formats": [
     "arn:${Partition}:iq:${Region}::paymentRequest/${ConversationId}/${ProposalId}/${PaymentRequestId}"
    ]
   },
   "iq:paymentSchedule": {
    "arn_formats": [
     "arn:${Partition}:iq:${Region}::paymentSchedule/${ConversationId}/${ProposalId}/${VersionId}"
    ]
   },
   "iq:permission": {
    "arn_formats": [
     "arn:${Partition}:iq-permission:${Region}::permission/${PermissionRequestId}"
    ]
   },
   "iq:proposal": {
    "arn_formats": [
     "arn:${Partition}:iq:${Region}::proposal/${ConversationId}/${ProposalId}"
    ]
   },
   "iq:request": {
    "arn_formats": [
     "arn:${Partition}:iq:${Region}::request/${RequestId}"
    ]
   },
   "iq:seller": {
    "arn_formats": [
     "arn:${Partition}:iq:${Region}::seller/${SellerAwsAccountId}"
    ]
   },
   "iq:token": {
    "arn_formats": [
     "arn:${Partition}:iq:${Region}::token/${TokenId}"
    ]
   },
   "ivs:Channel": {
    "arn_formats": [
     "arn:${Partition}:ivs:${Region}:${Account}:channel/${ResourceId}"
    ]
   },
   "ivs:Composition": {
    "arn_formats": [
     "arn:${Partition}:ivs:${Region}:${Account}:composition/${ResourceId}"
    ]
   },
   "ivs:Encoder-Configuration": {
    "arn_formats": [
     "arn:${Partition}:ivs:${Region}:${Account}:encoder-configuration/${ResourceId}"
    ]
   },
   "ivs:Ingest-Configuration": {
    "arn_formats": [
     "arn:${Partition}:ivs:${Region}:${Account}:ingest-configuration/${ResourceId}"
    ]
   },
   "ivs:Playback-Key-Pair": {
    "arn_formats": [
     "arn:${Partition}:ivs:${Region}:${Account}:playback-key/${ResourceId}"
    ]
   },
   "ivs:Playback-Restriction-Policy": {
    "arn_formats": [
     "arn:${Partition}:ivs:${Region}:${Account}:playback-restriction-policy/${ResourceId}"
    ]
   },
   "ivs:Public-Key": {
    "arn_formats": [
     "arn:${Partition}:ivs:${Region}:${Account}:public-key/${ResourceId}"
    ]
   },
   "ivs:Recording-Configuration": {
    "arn_formats": [
     "arn:${Partition}:ivs:${Region}:${Account}:recording-configuration/${ResourceId}"
    ]
   },
   "ivs:Stage": {
    "arn_formats": [
     "arn:${Partition}:ivs:${Region}:${Account}:stage/${ResourceId}"
    ]
   },
   "ivs:Storage-Configuration": {
    "arn_formats": [
     "arn:${Partition}:ivs:${Region}:${Account}:storage-configuration/${ResourceId}"
    ]
   },
   "ivs:Stream-Key": {
    "arn_formats": [
     "arn:${Partition}:ivs:${Region}:${Account}:stream-key/${ResourceId}"
    ]
   },
   "ivschat:Logging-Configuration": {
    "arn_formats": [
     "arn:${Partition}:ivschat:${Region}:${Account}:logging-configuration/${ResourceId}"
    ]
   },
   "ivschat:Room": {
    "arn_formats": [
     "arn:${Partition}:ivschat:${Region}:${Account}:room/${ResourceId}"
    ]
   },
   "kafka-cluster:cluster": {
    "arn_formats": [
     "arn:${Partition}:kafka:${Region}:${Account}:cluster/${ClusterName}/${ClusterUuid}"
    ]
   },
   "kafka-cluster:group": {
    "arn_formats": [
     "arn:${Partition}:kafka:${Region}:${Account}:group/${ClusterName}/${ClusterUuid}/${GroupName}"
    ]
   },
   "kafka-cluster:topic": {
    "arn_formats": [
     "arn:${Partition}:kafka:${Region}:${Account}:topic/${ClusterName}/${ClusterUuid}/${TopicName}"
    ]
   },
   "kafka-cluster:transactional-id": {
    "arn_formats": [
     "arn:${Partition}:kafka:${Region}:${Account}:transactional-id/${ClusterName}/${ClusterUuid}/${TransactionalId}"
    ]
   },
   "kafka:cluster": {
    "arn_formats": [
     "arn:${Partition}:kafka:${Region}:${Account}:cluster/${ClusterName}/${Uuid}"
    ]
   },
   "kafka:configuration": {
    "arn_formats": [
     "arn:${Partition}:kafka:${Region}:${Account}:configuration/${ConfigurationName}/${Uuid}"
    ]
   },
   "kafka:group": {
    "arn_formats": [
     "arn:${Partition}:kafka:${Region}:${Account}:group/${ClusterName}/${ClusterUuid}/${GroupName}"
    ]
   },
   "kafka:replicator": {
    "arn_formats": [
     "arn:${Partition}:kafka:${Region}:${Account}:replicator/${ReplicatorName}/${Uuid}"
    ]
   },
   "kafka:topic": {
    "arn_formats": [
     "arn:${Partition}:kafka:${Region}:${Account}:topic/${ClusterName}/${ClusterUuid}/${TopicName}"
    ]
   },
   "kafka:transactional-id": {
    "arn_formats": [
     "arn:${Partition}:kafka:${Region}:${Account}:transactional-id/${ClusterName}/${ClusterUuid}/${TransactionalId}"
    ]
   },
   "kafka:vpc-connection": {
    "arn_formats": [
     "arn:${Partition}:kafka:${Region}:${VpcOwnerAccount}:vpc-connection/${ClusterOwnerAccount}/${ClusterName}/${Uuid}"
    ]
   },
   "kafkaconnect:connector": {
    "arn_formats": [
     "arn:${Partition}:kafkaconnect:${Region}:${Account}:connector/${ConnectorName}/${UUID}"
    ]
   },
   "kafkaconnect:connector operation": {
    "arn_formats": [
     "arn:${Partition}:kafkaconnect:${Region}:${Account}:connector-operation/${ConnectorName}/${ConnectorUUID}/${UUID}"
    ]
   },
   "kafkaconnect:custom plugin": {
    "arn_formats": [
     "arn:${Partition}:kafkaconnect:${Region}:${Account}:custom-plugin/${CustomPluginName}/${UUID}"
    ]
   },
   "kafkaconnect:worker configuration": {
    "arn_formats": [
     "arn:${Partition}:kafkaconnect:${Region}:${Account}:worker-configuration/${WorkerConfigurationName}/${UUID}"
    ]
   },
   "kendra-ranking:rescore-execution-plan": {
    "arn_formats": [
     "arn:${Partition}:kendra-ranking:${Region}:${Account}:rescore-execution-plan/${RescoreExecutionPlanId}"
    ]
   },
   "kendra:access-control-configuration": {
    "arn_formats": [
     "arn:${Partition}:kendra:${Region}:${Account}:index/${IndexId}/access-control-configuration/${AccessControlConfigurationId}"
    ]
   },
   "kendra:data-source": {
    "arn_formats": [
     "arn:${Partition}:kendra:${Region}:${Account}:index/${IndexId}/data-source/${DataSourceId}"
    ]
   },
   "kendra:experience": {
    "arn_formats": [
     "arn:${Partition}:kendra:${Region}:${Account}:index/${IndexId}/experience/${ExperienceId}"
    ]
   },
   "kendra:faq": {
    "arn_formats": [
     "arn:${Partition}:kendra:${Region}:${Account}:index/${IndexId}/faq/${FaqId}"
    ]
   },
   "kendra:featured-results-set": {
    "arn_formats": [
     "arn:${Partition}:kendra:${Region}:${Account}:index/${IndexId}/featured-results-set/${FeaturedResultsSetId}"
    ]
   },
   "kendra:index": {
    "arn_formats": [
     "arn:${Partition}:kendra:${Region}:${Account}:index/${IndexId}"
    ]
   },
   "kendra:query-suggestions-block-list": {
    "arn_formats": [
     "arn:${Partition}:kendra:${Region}:${Account}:index/${IndexId}/query-suggestions-block-list/${QuerySuggestionsBlockListId}"
    ]
   },
   "kendra:thesaurus": {
    "arn_formats": [
     "arn:${Partition}:kendra:${Region}:${Account}:index/${IndexId}/thesaurus/${ThesaurusId}"
    ]
   },
   "kinesis:consumer": {
    "arn_formats": [
     "arn:${Partition}:kinesis:${Region}:${Account}:${StreamType}/${StreamName}/consumer/${ConsumerName}:${ConsumerCreationTimpstamp}"
    ]
   },
   "kinesis:kmsKey": {
    "arn_formats": [
     "arn:${Partition}:kms:${Region}:${Account}:key/${KeyId}"
    ]
   },
   "kinesis:stream": {
    "arn_formats": [
     "arn:${Partition}:kinesis:${Region}:${Account}:stream/${StreamName}"
    ]
   },
   "kinesisanalytics:application": {
    "arn_formats": [
     "arn:${Partition}:kinesisanalytics:${Region}:${Account}:application/${ApplicationName}"
    ]
   },
   "kinesisvideo:channel": {
    "arn_formats": [
     "arn:${Partition}:kinesisvideo:${Region}:${Account}:channel/${ChannelName}/${CreationTime}"
    ]
   },
   "kinesisvideo:stream": {
    "arn_formats": [
     "arn:${Partition}:kinesisvideo:${Region}:${Account}:stream/${StreamName}/${CreationTime}"
    ]
   },
   "kms:alias": {
    "arn_formats": [
     "arn:${Partition}:kms:${Region}:${Account}:alias/${Alias}"
    ]
   },
   "kms:key": {
    "arn_formats": [
     "arn:${Partition}:kms:${Region}:${Account}:key/${KeyId}"
    ]
   },
   "lambda:code signing config": {
    "arn_formats": [
     "arn:${Partition}:lambda:${Region}:${Account}:code-signing-config:${CodeSigningConfigId}"
    ]
   },
   "lambda:eventSourceMapping": {
    "arn_formats": [
     "arn:${Partition}:lambda:${Region}:${Account}:event-source-mapping:${UUID}"
    ]
   },
   "lambda:function": {
    "arn_formats": [
     "arn:${Partition}:lambda:${Region}:${Account}:function:${FunctionName}"
    ]
   },
   "lambda:function alias": {
    "arn_formats": [
     "arn:${Partition}:lambda:${Region}:${Account}:function:${FunctionName}:${Alias}"
    ]
   },
   "lambda:function version": {
    "arn_formats": [
     "arn:${Partition}:lambda:${Region}:${Account}:function:${FunctionName}:${Version}"
    ]
   },
   "lambda:layer": {
    "arn_formats": [
     "arn:${Partition}:lambda:${Region}:${Account}:layer:${LayerName}"
    ]
   },
   "lambda:layerVersion": {
    "arn_formats": [
     "arn:${Partition}:lambda:${Region}:${Account}:layer:${LayerName}:${LayerVersion}"
    ]
   },
   "launchwizard:deployment": {
    "arn_formats": [
     "arn:${Partition}:launchwizard:${Region}:${Account}:deployment/${DeploymentId}"
    ]
   },
   "lex:bot": {
    "arn_formats": [
     "arn:${Partition}:lex:${Region}:${Account}:bot/${BotId}",
     "arn:${Partition}:lex:${Region}:${Account}:bot:${BotName}"
    ]
   },
   "lex:bot alias": {
    "arn_formats": [
     "arn:${Partition}:lex:${Region}:${Account}:bot-alias/${BotId}/${BotAliasId}",
     "arn:${Partition}:lex:${Region}:${Account}:bot:${BotName}:${BotAlias}"
    ]
   },
   "lex:bot version": {
    "arn_formats": [
     "arn:${Partition}:lex:${Region}:${Account}:bot:${BotName}:${BotVersion}"
    ]
   },
   "lex:channel": {
    "arn_formats": [
     "arn:${Partition}:lex:${Region}:${Account}:bot-channel:${BotName}:${BotAlias}:${ChannelName}"
    ]
   },
   "lex:intent version": {
    "arn_formats": [
     "arn:${Partition}:lex:${Region}:${Account}:intent:${IntentName}:${IntentVersion}"
    ]
   },
   "lex:slottype version": {
    "arn_formats": [
     "arn:${Partition}:lex:${Region}:${Account}:slottype:${SlotName}:${SlotVersion}"
    ]
   },
   "lex:test set": {
    "arn_formats": [
     "arn:${Partition}:lex:${Region}:${Account}:test-set/${TestSetId}"
    ]
   },
   "license-manager-linux-subscriptions:subscription-provider": {
    "arn_formats": [
     "arn:${Partition}:license-manager-linux-subscriptions:${Region}:${Account}:subscription-provider/${SubscriptionProviderId}"
    ]
   },
   "license-manager-user-subscriptions:identity-provider": {
    "arn_formats": [
     "arn:${Partition}:license-manager-user-subscriptions:${Region}:${Account}:identity-provider/${IdentityProviderId}"
    ]
   },
   "license-manager-user-subscriptions:instance-user": {
    "arn_formats": [
     "arn:${Partition}:license-manager-user-subscriptions:${Region}:${Account}:instance-user/${InstanceUserId}"
    ]
   },
   "license-manager-user-subscriptions:license-server-endpoint": {
    "arn_formats": [
     "arn:${Partition}:license-manager-user-subscriptions:${Region}:${Account}:license-server-endpoint/${LicenseServerEndpointId}"
    ]
   },
   "license-manager-user-subscriptions:product-subscription": {
    "arn_formats": [
     "arn:${Partition}:license-manager-user-subscriptions:${Region}:${Account}:product-subscription/${ProductSubscriptionId}"
    ]
   },
   "license-manager:grant": {
    "arn_formats": [
     "arn:${Partition}:license-manager::${Account}:grant:${GrantId}"
    ]
   },
   "license-manager:license": {
    "arn_formats": [
     "arn:${Partition}:license-manager::${Account}:license:${LicenseId}"
    ]
   },
   "license-manager:license-configuration": {
    "arn_formats": [
     "arn:${Partition}:license-manager:${Region}:${Account}:license-configuration:${LicenseConfigurationId}"
    ]
   },
   "license-manager:report-generator": {
    "arn_formats": [
     "arn:${Partition}:license-manager:${Region}:${Account}:report-generator:${ReportGeneratorId}"
    ]
   },
   "lightsail:Alarm": {
    "arn_formats": [
     "arn:${Partition}:lightsail:${Region}:${Account}:Alarm/${Id}"
    ]
   },
   "lightsail:Bucket": {
    "arn_formats": [
     "arn:${Partition}:lightsail:${Region}:${Account}:Bucket/${Id}"
    ]
   },
   "lightsail:Certificate": {
    "arn_formats": [
     "arn:${Partition}:lightsail:${Region}:${Account}:Certificate/${Id}"
    ]
   },
   "lightsail:CloudFormationStackRecord": {
    "arn_formats": [
     "arn:${Partition}:lightsail:${Region}:${Account}:CloudFormationStackRecord/${Id}"
    ]
   },
   "lightsail:ContactMethod": {
    "arn_formats": [
     "arn:${Partition}:lightsail:${Region}:${Account}:ContactMethod/${Id}"
    ]
   },
   "lightsail:ContainerService": {
    "arn_formats": [
     "arn:${Partition}:lightsail:${Region}:${Account}:ContainerService/${Id}"
    ]
   },
   "lightsail:Disk": {
    "arn_formats": [
     "arn:${Partition}:lightsail:${Region}:${Account}:Disk/${Id}"
    ]
   },
   "lightsail:DiskSnapshot": {
    "arn_formats": [
     "arn:${Partition}:lightsail:${Region}:${Account}:DiskSnapshot/${Id}"
    ]
   },
   "lightsail:Distribution": {
    "arn_formats": [
     "arn:${Partition}:lightsail:${Region}:${Account}:Distribution/${Id}"
    ]
   },
   "lightsail:Domain": {
    "arn_formats": [
     "arn:${Partition}:lightsail:${Region}:${Account}:Domain/${Id}"
    ]
   },
   "lightsail:ExportSnapshotRecord": {
    "arn_formats": [
     "arn:${Partition}:lightsail:${Region}:${Account}:ExportSnapshotRecord/${Id}"
    ]
   },
   "lightsail:Instance": {
    "arn_formats": [
     "arn:${Partition}:lightsail:${Region}:${Account}:Instance/${Id}"
    ]
   },
   "lightsail:InstanceSnapshot": {
    "arn_formats": [
     "arn:${Partition}:lightsail:${Region}:${Account}:InstanceSnapshot/${Id}"
    ]
   },
   "lightsail:KeyPair": {
    "arn_formats": [
     "arn:${Partition}:lightsail:${Region}:${Account}:KeyPair/${Id}"
    ]
   },
   "lightsail:LoadBalancer": {
    "arn_formats": [
     "arn:${Partition}:lightsail:${Region}:${Account}:LoadBalancer/${Id}"
    ]
   },
   "lightsail:LoadBalancerTlsCertificate": {
    "arn_formats": [
     "arn:${Partition}:lightsail:${Region}:${Account}:LoadBalancerTlsCertificate/${Id}"
    ]
   },
   "lightsail:RelationalDatabase": {
    "arn_formats": [
     "arn:${Partition}:lightsail:${Region}:${Account}:RelationalDatabase/${Id}"
    ]
   },
   "lightsail:RelationalDatabaseSnapshot": {
    "arn_formats": [
     "arn:${Partition}:lightsail:${Region}:${Account}:RelationalDatabaseSnapshot/${Id}"
    ]
   },
   "lightsail:StaticIp": {
    "arn_formats": [
     "arn:${Partition}:lightsail:${Region}:${Account}:StaticIp/${Id}"
    ]
   },
   "logs:anomaly-detector": {
    "arn_formats": [
     "arn:${Partition}:logs:${Region}:${Account}:anomaly-detector:${DetectorId}"
    ]
   },
   "logs:delivery": {
    "arn_formats": [
     "arn:${Partition}:logs:${Region}:${Account}:delivery:${DeliveryName}"
    ]
   },
   "logs:delivery-destination": {
    "arn_formats": [
     "arn:${Partition}:logs:${Region}:${Account}:delivery-destination:${DeliveryDestinationName}"
    ]
   },
   "logs:delivery-source": {
    "arn_formats": [
     "arn:${Partition}:logs:${Region}:${Account}:delivery-source:${DeliverySourceName}"
    ]
   },
   "logs:destination": {
    "arn_formats": [
     "arn:${Partition}:logs:${Region}:${Account}:destination:${DestinationName}"
    ]
   },
   "logs:log-group": {
    "arn_formats": [
     "arn:${Partition}:logs:${Region}:${Account}:log-group:${LogGroupName}"
    ]
   },
   "logs:log-stream": {
    "arn_formats": [
     "arn:${Partition}:logs:${Region}:${Account}:log-group:${LogGroupName}:log-stream:${LogStreamName}"
    ]
   },
   "lookoutequipment:dataset": {
    "arn_formats": [
     "arn:${Partition}:lookoutequipment:${Region}:${Account}:dataset/${DatasetName}/${DatasetId}"
    ]
   },
   "lookoutequipment:inference-scheduler": {
    "arn_formats": [
     "arn:${Partition}:lookoutequipment:${Region}:${Account}:inference-scheduler/${InferenceSchedulerName}/${InferenceSchedulerId}"
    ]
   },
   "lookoutequipment:label-group": {
    "arn_formats": [
     "arn:${Partition}:lookoutequipment:${Region}:${Account}:label-group/${LabelGroupName}/${LabelGroupId}"
    ]
   },
   "lookoutequipment:model": {
    "arn_formats": [
     "arn:${Partition}:lookoutequipment:${Region}:${Account}:model/${ModelName}/${ModelId}"
    ]
   },
   "lookoutequipment:model-version": {
    "arn_formats": [
     "arn:${Partition}:lookoutequipment:${Region}:${Account}:model/${ModelName}/${ModelId}/model-version/${ModelVersionNumber}"
    ]
   },
   "lookoutmetrics:Alert": {
    "arn_formats": [
     "arn:${Partition}:lookoutmetrics:${Region}:${Account}:Alert:${AlertName}"
    ]
   },
   "lookoutmetrics:AnomalyDetector": {
    "arn_formats": [
     "arn:${Partition}:lookoutmetrics:${Region}:${Account}:AnomalyDetector:${AnomalyDetectorName}"
    ]
   },
   "lookoutmetrics:MetricSet": {
    "arn_formats": [
     "arn:${Partition}:lookoutmetrics:${Region}:${Account}:MetricSet/${AnomalyDetectorName}/${MetricSetName}"
    ]
   },
   "lookoutvision:model": {
    "arn_formats": [
     "arn:${Partition}:lookoutvision:${Region}:${Account}:model/${ProjectName}/${ModelVersion}"
    ]
   },
   "lookoutvision:project": {
    "arn_formats": [
     "arn:${Partition}:lookoutvision:${Region}:${Account}:project/${ProjectName}"
    ]
   },
   "m2:Application": {
    "arn_formats": [
     "arn:${Partition}:m2:${Region}:${Account}:app/${ApplicationId}"
    ]
   },
   "m2:Environment": {
    "arn_formats": [
     "arn:${Partition}:m2:${Region}:${Account}:env/${EnvironmentId}"
    ]
   },
   "machinelearning:batchprediction": {
    "arn_formats": [
     "arn:${Partition}:machinelearning:${Region}:${Account}:batchprediction/${BatchPredictionId}"
    ]
   },
   "machinelearning:datasource": {
    "arn_formats": [
     "arn:${Partition}:machinelearning:${Region}:${Account}:datasource/${DatasourceId}"
    ]
   },
   "machinelearning:evaluation": {
    "arn_formats": [
     "arn:${Partition}:machinelearning:${Region}:${Account}:evaluation/${EvaluationId}"
    ]
   },
   "machinelearning:mlmodel": {
    "arn_formats": [
     "arn:${Partition}:machinelearning:${Region}:${Account}:mlmodel/${MlModelId}"
    ]
   },
   "macie2:AllowList": {
    "arn_formats": [
     "arn:${Partition}:macie2:${Region}:${Account}:allow-list/${ResourceId}"
    ]
   },
   "macie2:ClassificationJob": {
    "arn_formats": [
     "arn:${Partition}:macie2:${Region}:${Account}:classification-job/${ResourceId}"
    ]
   },
   "macie2:CustomDataIdentifier": {
    "arn_formats": [
     "arn:${Partition}:macie2:${Region}:${Account}:custom-data-identifier/${ResourceId}"
    ]
   },
   "macie2:FindingsFilter": {
    "arn_formats": [
     "arn:${Partition}:macie2:${Region}:${Account}:findings-filter/${ResourceId}"
    ]
   },
   "macie2:Member": {
    "arn_formats": [
     "arn:${Partition}:macie2:${Region}:${Account}:member/${ResourceId}"
    ]
   },
   "managedblockchain:accessor": {
    "arn_formats": [
     "arn:${Partition}:managedblockchain:${Region}:${Account}:accessors/${AccessorId}"
    ]
   },
   "managedblockchain:invitation": {
    "arn_formats": [
     "arn:${Partition}:managedblockchain:${Region}:${Account}:invitations/${InvitationId}"
    ]
   },
   "managedblockchain:member": {
    "arn_formats": [
     "arn:${Partition}:managedblockchain:${Region}:${Account}:members/${MemberId}"
    ]
   },
   "managedblockchain:network": {
    "arn_formats": [
     "arn:${Partition}:managedblockchain:${Region}::networks/${NetworkId}"
    ]
   },
   "managedblockchain:node": {
    "arn_formats": [
     "arn:${Partition}:managedblockchain:${Region}:${Account}:nodes/${NodeId}"
    ]
   },
   "managedblockchain:proposal": {
    "arn_formats": [
     "arn:${Partition}:managedblockchain:${Region}::proposals/${ProposalId}"
    ]
   },
   "mapcredits:agreement": {
    "arn_formats": [
     "arn:${Partition}:mapcredits:::${Agreement}/${AgreementId}"
    ]
   },
   "mediaconnect:Bridge": {
    "arn_formats": [
     "arn:${Partition}:mediaconnect:${Region}:${Account}:bridge:${FlowId}:${FlowName}"
    ]
   },
   "mediaconnect:Entitlement": {
    "arn_formats": [
     "arn:${Partition}:mediaconnect:${Region}:${Account}:entitlement:${FlowId}:${EntitlementName}"
    ]
   },
   "mediaconnect:Flow": {
    "arn_formats": [
     "arn:${Partition}:mediaconnect:${Region}:${Account}:flow:${FlowId}:${FlowName}"
    ]
   },
   "mediaconnect:Gateway": {
    "arn_formats": [
     "arn:${Partition}:mediaconnect:${Region}:${Account}:gateway:${GatewayId}:${GatewayName}"
    ]
   },
   "mediaconnect:GatewayInstance": {
    "arn_formats": [
     "arn:${Partition}:mediaconnect:${Region}:${Account}:gateway:${GatewayId}:${GatewayName}:instance:${InstanceId}"
    ]
   },
   "mediaconnect:Output": {
    "arn_formats": [
     "arn:${Partition}:mediaconnect:${Region}:${Account}:output:${OutputId}:${OutputName}"
    ]
   },
   "mediaconnect:Source": {
    "arn_formats": [
     "arn:${Partition}:mediaconnect:${Region}:${Account}:source:${SourceId}:${SourceName}"
    ]
   },
   "mediaconvert:CertificateAssociation": {
    "arn_formats": [
     "arn:${Partition}:mediaconvert:${Region}:${Account}:certificates/${CertificateArn}"
    ]
   },
   "mediaconvert:Job": {
    "arn_formats": [
     "arn:${Partition}:mediaconvert:${Region}:${Account}:jobs/${JobId}"
    ]
   },
   "mediaconvert:JobTemplate": {
    "arn_formats": [
     "arn:${Partition}:mediaconvert:${Region}:${Account}:jobTemplates/${JobTemplateName}"
    ]
   },
   "mediaconvert:Preset": {
    "arn_formats": [
     "arn:${Partition}:mediaconvert:${Region}:${Account}:presets/${PresetName}"
    ]
   },
   "mediaconvert:Queue": {
    "arn_formats": [
     "arn:${Partition}:mediaconvert:${Region}:${Account}:queues/${QueueName}"
    ]
   },
   "medialive:channel": {
    "arn_formats": [
     "arn:${Partition}:medialive:${Region}:${Account}:channel:${ChannelId}"
    ]
   },
   "medialive:channel-placement-group": {
    "arn_formats": [
     "arn:${Partition}:medialive:${Region}:${Account}:channelPlacementGroup:${ClusterId}/${ChannelPlacementGroupId}"
    ]
   },
   "medialive:cloudwatch-alarm-template": {
    "arn_formats": [
     "arn:${Partition}:medialive:${Region}:${Account}:cloudwatch-alarm-template:${CloudWatchAlarmTemplateId}"
    ]
   },
   "medialive:cloudwatch-alarm-template-group": {
    "arn_formats": [
     "arn:${Partition}:medialive:${Region}:${Account}:cloudwatch-alarm-template-group:${CloudWatchAlarmTemplateGroupId}"
    ]
   },
   "medialive:cluster": {
    "arn_formats": [
     "arn:${Partition}:medialive:${Region}:${Account}:cluster:${ClusterId}"
    ]
   },
   "medialive:eventbridge-rule-template": {
    "arn_formats": [
     "arn:${Partition}:medialive:${Region}:${Account}:eventbridge-rule-template:${EventBridgeRuleTemplateId}"
    ]
   },
   "medialive:eventbridge-rule-template-group": {
    "arn_formats": [
     "arn:${Partition}:medialive:${Region}:${Account}:eventbridge-rule-template-group:${EventBridgeRuleTemplateGroupId}"
    ]
   },
   "medialive:input": {
    "arn_formats": [
     "arn:${Partition}:medialive:${Region}:${Account}:input:${InputId}"
    ]
   },
   "medialive:input-device": {
    "arn_formats": [
     "arn:${Partition}:medialive:${Region}:${Account}:inputDevice:${DeviceId}"
    ]
   },
   "medialive:input-security-group": {
    "arn_formats": [
     "arn:${Partition}:medialive:${Region}:${Account}:inputSecurityGroup:${InputSecurityGroupId}"
    ]
   },
   "medialive:multiplex": {
    "arn_formats": [
     "arn:${Partition}:medialive:${Region}:${Account}:multiplex:${MultiplexId}"
    ]
   },
   "medialive:network": {
    "arn_formats": [
     "arn:${Partition}:medialive:${Region}:${Account}:network:${NetworkId}"
    ]
   },
   "medialive:node": {
    "arn_formats": [
     "arn:${Partition}:medialive:${Region}:${Account}:node:${ClusterId}/${NodeId}"
    ]
   },
   "medialive:offering": {
    "arn_formats": [
     "arn:${Partition}:medialive:${Region}:${Account}:offering:${OfferingId}"
    ]
   },
   "medialive:reservation": {
    "arn_formats": [
     "arn:${Partition}:medialive:${Region}:${Account}:reservation:${ReservationId}"
    ]
   },
   "medialive:signal-map": {
    "arn_formats": [
     "arn:${Partition}:medialive:${Region}:${Account}:signal-map:${SignalMapId}"
    ]
   },
   "mediapackage-vod:assets": {
    "arn_formats": [
     "arn:${Partition}:mediapackage-vod:${Region}:${Account}:assets/${AssetIdentifier}"
    ]
   },
   "mediapackage-vod:packaging-configurations": {
    "arn_formats": [
     "arn:${Partition}:mediapackage-vod:${Region}:${Account}:packaging-configurations/${PackagingConfigurationIdentifier}"
    ]
   },
   "mediapackage-vod:packaging-groups": {
    "arn_formats": [
     "arn:${Partition}:mediapackage-vod:${Region}:${Account}:packaging-groups/${PackagingGroupIdentifier}"
    ]
   },
   "mediapackage:channels": {
    "arn_formats": [
     "arn:${Partition}:mediapackage:${Region}:${Account}:channels/${ChannelIdentifier}"
    ]
   },
   "mediapackage:harvest_jobs": {
    "arn_formats": [
     "arn:${Partition}:mediapackage:${Region}:${Account}:harvest_jobs/${HarvestJobIdentifier}"
    ]
   },
   "mediapackage:origin_endpoints": {
    "arn_formats": [
     "arn:${Partition}:mediapackage:${Region}:${Account}:origin_endpoints/${OriginEndpointIdentifier}"
    ]
   },
   "mediapackagev2:Channel": {
    "arn_formats": [
     "arn:${Partition}:mediapackagev2:${Region}:${Account}:channelGroup/${ChannelGroupName}/channel/${ChannelName}"
    ]
   },
   "mediapackagev2:ChannelGroup": {
    "arn_formats": [
     "arn:${Partition}:mediapackagev2:${Region}:${Account}:channelGroup/${ChannelGroupName}"
    ]
   },
   "mediapackagev2:ChannelPolicy": {
    "arn_formats": [
     "arn:${Partition}:mediapackagev2:${Region}:${Account}:channelGroup/${ChannelGroupName}/channel/${ChannelName}"
    ]
   },
   "mediapackagev2:HarvestJob": {
    "arn_formats": [
     "arn:${Partition}:mediapackagev2:${Region}:${Account}:channelGroup/${ChannelGroupName}/channel/${ChannelName}/originEndpoint/${OriginEndpointName}/harvestJob/${HarvestJobName}"
    ]
   },
   "mediapackagev2:OriginEndpoint": {
    "arn_formats": [
     "arn:${Partition}:mediapackagev2:${Region}:${Account}:channelGroup/${ChannelGroupName}/channel/${ChannelName}/originEndpoint/${OriginEndpointName}"
    ]
   },
   "mediapackagev2:OriginEndpointPolicy": {
    "arn_formats": [
     "arn:${Partition}:mediapackagev2:${Region}:${Account}:channelGroup/${ChannelGroupName}/channel/${ChannelName}/originEndpoint/${OriginEndpointName}"
    ]
   },
   "mediastore:container": {
    "arn_formats": [
     "arn:${Partition}:mediastore:${Region}:${Account}:container/${ContainerName}"
    ]
   },
   "mediastore:folder": {
    "arn_formats": [
     "arn:${Partition}:mediastore:${Region}:${Account}:container/${ContainerName}/${FolderPath}"
    ]
   },
   "mediastore:object": {
    "arn_formats": [
     "arn:${Partition}:mediastore:${Region}:${Account}:container/${ContainerName}/${ObjectPath}"
    ]
   },
   "mediatailor:channel": {
    "arn_formats": [
     "arn:${Partition}:mediatailor:${Region}:${Account}:channel/${ChannelName}"
    ]
   },
   "mediatailor:liveSource": {
    "arn_formats": [
     "arn:${Partition}:mediatailor:${Region}:${Account}:liveSource/${SourceLocationName}/${LiveSourceName}"
    ]
   },
   "mediatailor:playbackConfiguration": {
    "arn_formats": [
     "arn:${Partition}:mediatailor:${Region}:${Account}:playbackConfiguration/${ResourceId}"
    ]
   },
   "mediatailor:prefetchSchedule": {
    "arn_formats": [
     "arn:${Partition}:mediatailor:${Region}:${Account}:prefetchSchedule/${ResourceId}"
    ]
   },
   "mediatailor:program": {
    "arn_formats": [
     "arn:${Partition}:mediatailor:${Region}:${Account}:program/${ChannelName}/${ProgramName}"
    ]
   },
   "mediatailor:sourceLocation": {
    "arn_formats": [
     "arn:${Partition}:mediatailor:${Region}:${Account}:sourceLocation/${SourceLocationName}"
    ]
   },
   "mediatailor:vodSource": {
    "arn_formats": [
     "arn:${Partition}:mediatailor:${Region}:${Account}:vodSource/${SourceLocationName}/${VodSourceName}"
    ]
   },
   "medical-imaging:datastore": {
    "arn_formats": [
     "arn:${Partition}:medical-imaging:${Region}:${Account}:datastore/${DatastoreId}"
    ]
   },
   "medical-imaging:imageset": {
    "arn_formats": [
     "arn:${Partition}:medical-imaging:${Region}:${Account}:datastore/${DatastoreId}/imageset/${ImageSetId}"
    ]
   },
   "memorydb:acl": {
    "arn_formats": [
     "arn:${Partition}:memorydb:${Region}:${Account}:acl/${AclName}"
    ]
   },
   "memorydb:cluster": {
    "arn_formats": [
     "arn:${Partition}:memorydb:${Region}:${Account}:cluster/${ClusterName}"
    ]
   },
   "memorydb:multiregioncluster": {
    "arn_formats": [
     "arn:${Partition}:memorydb::${Account}:multiregioncluster/${ClusterName}"
    ]
   },
   "memorydb:multiregionparametergroup": {
    "arn_formats": [
     "arn:${Partition}:memorydb::${Account}:multiregionparametergroup/${MultiRegionParameterGroupName}"
    ]
   },
   "memorydb:parametergroup": {
    "arn_formats": [
     "arn:${Partition}:memorydb:${Region}:${Account}:parametergroup/${ParameterGroupName}"
    ]
   },
   "memorydb:reservednode": {
    "arn_formats": [
     "arn:${Partition}:memorydb:${Region}:${Account}:reservednode/${ReservationID}"
    ]
   },
   "memorydb:snapshot": {
    "arn_formats": [
     "arn:${Partition}:memorydb:${Region}:${Account}:snapshot/${SnapshotName}"
    ]
   },
   "memorydb:subnetgroup": {
    "arn_formats": [
     "arn:${Partition}:memorydb:${Region}:${Account}:subnetgroup/${SubnetGroupName}"
    ]
   },
   "memorydb:user": {
    "arn_formats": [
     "arn:${Partition}:memorydb:${Region}:${Account}:user/${UserName}"
    ]
   },
   "mgh:AutomationRunResource": {
    "arn_formats": [
     "arn:${Partition}:mgh:${Region}:${Account}:automation-run/${RunID}"
    ]
   },
   "mgh:AutomationUnitResource": {
    "arn_formats": [
     "arn:${Partition}:mgh:${Region}:${Account}:automation-unit/${AutomationUnitId}"
    ]
   },
   "mgh:ConnectionResource": {
    "arn_formats": [
     "arn:${Partition}:mgh:${Region}:${Account}:${ConnectionArn}"
    ]
   },
   "mgh:migrationTask": {
    "arn_formats": [
     "arn:${Partition}:mgh:${Region}:${Account}:progressUpdateStream/${Stream}/migrationTask/${Task}"
    ]
   },
   "mgh:progressUpdateStream": {
    "arn_formats": [
     "arn:${Partition}:mgh:${Region}:${Account}:progressUpdateStream/${Stream}"
    ]
   },
   "mgn:ApplicationResource": {
    "arn_formats": [
     "arn:${Partition}:mgn:${Region}:${Account}:application/${ApplicationID}"
    ]
   },
   "mgn:ConnectorResource": {
    "arn_formats": [
     "arn:${Partition}:mgn:${Region}:${Account}:connector/${ConnectorID}"
    ]
   },
   "mgn:ExportResource": {
    "arn_formats": [
     "arn:${Partition}:mgn:${Region}:${Account}:export/${ExportID}"
    ]
   },
   "mgn:ImportResource": {
    "arn_formats": [
     "arn:${Partition}:mgn:${Region}:${Account}:import/${ImportID}"
    ]
   },
   "mgn:JobResource": {
    "arn_formats": [
     "arn:${Partition}:mgn:${Region}:${Account}:job/${JobID}"
    ]
   },
   "mgn:LaunchConfigurationTemplateResource": {
    "arn_formats": [
     "arn:${Partition}:mgn:${Region}:${Account}:launch-configuration-template/${LaunchConfigurationTemplateID}"
    ]
   },
   "mgn:NetworkMigrationDefinitionResource": {
    "arn_formats": [
     "arn:${Partition}:mgn:${Region}:${Account}:network-migration-definition/${NetworkMigrationDefinitionID}"
    ]
   },
   "mgn:ReplicationConfigurationTemplateResource": {
    "arn_formats": [
     "arn:${Partition}:mgn:${Region}:${Account}:replication-configuration-template/${ReplicationConfigurationTemplateID}"
    ]
   },
   "mgn:SourceServerResource": {
    "arn_formats": [
     "arn:${Partition}:mgn:${Region}:${Account}:source-server/${SourceServerID}"
    ]
   },
   "mgn:VcenterClientResource": {
    "arn_formats": [
     "arn:${Partition}:mgn:${Region}:${Account}:vcenter-client/${VcenterClientID}"
    ]
   },
   "mgn:WaveResource": {
    "arn_formats": [
     "arn:${Partition}:mgn:${Region}:${Account}:wave/${WaveID}"
    ]
   },
   "migrationhub-orchestrator:template": {
    "arn_formats": [
     "arn:${Partition}:migrationhub-orchestrator:${Region}:${Account}:template/${ResourceId}"
    ]
   },
   "migrationhub-orchestrator:workflow": {
    "arn_formats": [
     "arn:${Partition}:migrationhub-orchestrator:${Region}:${Account}:workflow/${ResourceId}"
    ]
   },
   "mobiletargeting:app": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:apps/${AppId}"
    ]
   },
   "mobiletargeting:application-metrics": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:apps/${AppId}/kpis/daterange/${KpiName}"
    ]
   },
   "mobiletargeting:apps": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:apps/*"
    ]
   },
   "mobiletargeting:attribute": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:apps/${AppId}/attributes/${AttributeType}"
    ]
   },
   "mobiletargeting:campaign": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:apps/${AppId}/campaigns/${CampaignId}"
    ]
   },
   "mobiletargeting:campaign-metrics": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:apps/${AppId}/campaigns/${CampaignId}/kpis/daterange/${KpiName}"
    ]
   },
   "mobiletargeting:channel": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:apps/${AppId}/channels/${ChannelType}"
    ]
   },
   "mobiletargeting:channels": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:apps/${AppId}/channels"
    ]
   },
   "mobiletargeting:endpoint": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:apps/${AppId}/endpoints/${EndpointId}"
    ]
   },
   "mobiletargeting:event-stream": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:apps/${AppId}/eventstream"
    ]
   },
   "mobiletargeting:events": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:apps/${AppId}/events"
    ]
   },
   "mobiletargeting:export-job": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:apps/${AppId}/jobs/export/${JobId}"
    ]
   },
   "mobiletargeting:import-job": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:apps/${AppId}/jobs/import/${JobId}"
    ]
   },
   "mobiletargeting:journey": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:apps/${AppId}/journeys/${JourneyId}"
    ]
   },
   "mobiletargeting:journey-execution-activity-metrics": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:apps/${AppId}/journeys/${JourneyId}/activities/${JourneyActivityId}/execution-metrics"
    ]
   },
   "mobiletargeting:journey-execution-metrics": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:apps/${AppId}/journeys/${JourneyId}/execution-metrics"
    ]
   },
   "mobiletargeting:journey-metrics": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:apps/${AppId}/journeys/${JourneyId}/kpis/daterange/${KpiName}"
    ]
   },
   "mobiletargeting:journeys": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:apps/${AppId}/journeys"
    ]
   },
   "mobiletargeting:messages": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:apps/${AppId}/messages"
    ]
   },
   "mobiletargeting:otp": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:apps/${AppId}/otp"
    ]
   },
   "mobiletargeting:phone-number-validate": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:phone/number/validate"
    ]
   },
   "mobiletargeting:recommender": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:recommenders/${RecommenderId}"
    ]
   },
   "mobiletargeting:recommenders": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:recommenders/*"
    ]
   },
   "mobiletargeting:reports": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:reports"
    ]
   },
   "mobiletargeting:segment": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:apps/${AppId}/segments/${SegmentId}"
    ]
   },
   "mobiletargeting:template": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:templates/${TemplateName}/${TemplateType}"
    ]
   },
   "mobiletargeting:templates": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:templates"
    ]
   },
   "mobiletargeting:user": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:apps/${AppId}/users/${UserId}"
    ]
   },
   "mobiletargeting:verify-otp": {
    "arn_formats": [
     "arn:${Partition}:mobiletargeting:${Region}:${Account}:apps/${AppId}/verify-otp"
    ]
   },
   "monitron:project": {
    "arn_formats": [
     "arn:${Partition}:monitron:${Region}:${Account}:project/${ResourceId}"
    ]
   },
   "mq:brokers": {
    "arn_formats": [
     "arn:${Partition}:mq:${Region}:${Account}:broker:${BrokerName}:${BrokerId}"
    ]
   },
   "mq:configurations": {
    "arn_formats": [
     "arn:${Partition}:mq:${Region}:${Account}:configuration:${ConfigurationId}"
    ]
   },
   "neptune-db:database": {
    "arn_formats": [
     "arn:${Partition}:neptune-db:${Region}:${Account}:${ClusterResourceId}/*"
    ]
   },
   "neptune-graph:export-task": {
    "arn_formats": [
     "arn:${Partition}:neptune-graph:${Region}:${Account}:export-task/${ResourceId}"
    ]
   },
   "neptune-graph:graph": {
    "arn_formats": [
     "arn:${Partition}:neptune-graph:${Region}:${Account}:graph/${ResourceId}"
    ]
   },
   "neptune-graph:graph-snapshot": {
    "arn_formats": [
     "arn:${Partition}:neptune-graph:${Region}:${Account}:graph-snapshot/${ResourceId}"
    ]
   },
   "neptune-graph:import-task": {
    "arn_formats": [
     "arn:${Partition}:neptune-graph:${Region}:${Account}:import-task/${ResourceId}"
    ]
   },
   "network-firewall:Firewall": {
    "arn_formats": [
     "arn:${Partition}:network-firewall:${Region}:${Account}:firewall/${Name}"
    ]
   },
   "network-firewall:FirewallPolicy": {
    "arn_formats": [
     "arn:${Partition}:network-firewall:${Region}:${Account}:firewall-policy/${Name}"
    ]
   },
   "network-firewall:StatefulRuleGroup": {
    "arn_formats": [
     "arn:${Partition}:network-firewall:${Region}:${Account}:stateful-rulegroup/${Name}"
    ]
   },
   "network-firewall:StatelessRuleGroup": {
    "arn_formats": [
     "arn:${Partition}:network-firewall:${Region}:${Account}:stateless-rulegroup/${Name}"
    ]
   },
   "network-firewall:TLSInspectionConfiguration": {
    "arn_formats": [
     "arn:${Partition}:network-firewall:${Region}:${Account}:tls-configuration/${Name}"
    ]
   },
   "networkflowmonitor:monitor": {
    "arn_formats": [
     "arn:${Partition}:networkflowmonitor:${Region}:${Account}:monitor/${MonitorName}"
    ]
   },
   "networkflowmonitor:scope": {
    "arn_formats": [
     "arn:${Partition}:networkflowmonitor:${Region}:${Account}:scope/${ScopeId}"
    ]
   },
   "networkmanager:attachment": {
    "arn_formats": [
     "arn:${Partition}:networkmanager::${Account}:attachment/${ResourceId}"
    ]
   },
   "networkmanager:connect-peer": {
    "arn_formats": [
     "arn:${Partition}:networkmanager::${Account}:connect-peer/${ResourceId}"
    ]
   },
   "networkmanager:connection": {
    "arn_formats": [
     "arn:${Partition}:networkmanager::${Account}:connection/${GlobalNetworkId}/${ResourceId}"
    ]
   },
   "networkmanager:core-network": {
    "arn_formats": [
     "arn:${Partition}:networkmanager::${Account}:core-network/${ResourceId}"
    ]
   },
   "networkmanager:device": {
    "arn_formats": [
     "arn:${Partition}:networkmanager::${Account}:device/${GlobalNetworkId}/${ResourceId}"
    ]
   },
   "networkmanager:global-network": {
    "arn_formats": [
     "arn:${Partition}:networkmanager::${Account}:global-network/${ResourceId}"
    ]
   },
   "networkmanager:link": {
    "arn_formats": [
     "arn:${Partition}:networkmanager::${Account}:link/${GlobalNetworkId}/${ResourceId}"
    ]
   },
   "networkmanager:peering": {
    "arn_formats": [
     "arn:${Partition}:networkmanager::${Account}:peering/${ResourceId}"
    ]
   },
   "networkmanager:site": {
    "arn_formats": [
     "arn:${Partition}:networkmanager::${Account}:site/${GlobalNetworkId}/${ResourceId}"
    ]
   },
   "networkmonitor:monitor": {
    "arn_formats": [
     "arn:${Partition}:networkmonitor:${Region}:${Account}:monitor/${MonitorName}"
    ]
   },
   "networkmonitor:probe": {
    "arn_formats": [
     "arn:${Partition}:networkmonitor:${Region}:${Account}:probe/${ProbeId}"
    ]
   },
   "nimble:eula": {
    "arn_formats": [
     "arn:${Partition}:nimble:${Region}:${Account}:eula/${EulaId}"
    ]
   },
   "nimble:eula-acceptance": {
    "arn_formats": [
     "arn:${Partition}:nimble:${Region}:${Account}:eula-acceptance/${EulaAcceptanceId}"
    ]
   },
   "nimble:launch-profile": {
    "arn_formats": [
     "arn:${Partition}:nimble:${Region}:${Account}:launch-profile/${LaunchProfileId}"
    ]
   },
   "nimble:streaming-image": {
    "arn_formats": [
     "arn:${Partition}:nimble:${Region}:${Account}:streaming-image/${StreamingImageId}"
    ]
   },
   "nimble:streaming-session": {
    "arn_formats": [
     "arn:${Partition}:nimble:${Region}:${Account}:streaming-session/${StreamingSessionId}"
    ]
   },
   "nimble:streaming-session-backup": {
    "arn_formats": [
     "arn:${Partition}:nimble:${Region}:${Account}:streaming-session-backup/${StreamingSessionBackupId}"
    ]
   },
   "nimble:studio": {
    "arn_formats": [
     "arn:${Partition}:nimble:${Region}:${Account}:studio/${StudioId}"
    ]
   },
   "nimble:studio-component": {
    "arn_formats": [
     "arn:${Partition}:nimble:${Region}:${Account}:studio-component/${StudioComponentId}"
    ]
   },
   "notifications-contacts:EmailContactResource": {
    "arn_formats": [
     "arn:${Partition}:notifications-contacts::${Account}:emailcontact/${EmailContactId}"
    ]
   },
   "notifications:EventRule": {
    "arn_formats": [
     "arn:${Partition}:notifications::${Account}:configuration/${NotificationConfigurationId}/rule/${EventRuleId}"
    ]
   },
   "notifications:ManagedNotificationChildEvent": {
    "arn_formats": [
     "arn:${Partition}:notifications::${Account}:managed-notification-configuration/category/${Category}/sub-category/${Subcategory}/event/${NotificationEventId}/child-event/${NotificationChildEventId}"
    ]
   },
   "notifications:ManagedNotificationConfiguration": {
    "arn_formats": [
     "arn:${Partition}:notifications::${Account}:managed-notification-configuration/category/${Category}/sub-category/${Subcategory}"
    ]
   },
   "notifications:ManagedNotificationEvent": {
    "arn_formats": [
     "arn:${Partition}:notifications::${Account}:managed-notification-configuration/category/${Category}/sub-category/${Subcategory}/event/${NotificationEventId}"
    ]
   },
   "notifications:NotificationConfiguration": {
    "arn_formats": [
     "arn:${Partition}:notifications::${Account}:configuration/${NotificationConfigurationId}"
    ]
   },
   "notifications:NotificationEvent": {
    "arn_formats": [
     "arn:${Partition}:notifications:${Region}:${Account}:configuration/${NotificationConfigurationId}/event/${NotificationEventId}"
    ]
   },
   "oam:Link": {
    "arn_formats": [
     "arn:${Partition}:oam:${Region}:${Account}:link/${ResourceId}"
    ]
   },
   "oam:Sink": {
    "arn_formats": [
     "arn:${Partition}:oam:${Region}:${Account}:sink/${ResourceId}"
    ]
   },
   "omics:AnnotationStore": {
    "arn_formats": [
     "arn:${Partition}:omics:${Region}:${Account}:annotationStore/${AnnotationStoreName}"
    ]
   },
   "omics:AnnotationStoreVersion": {
    "arn_formats": [
     "arn:${Partition}:omics:${Region}:${Account}:annotationStore/${AnnotationStoreName}/version/${AnnotationStoreVersionName}"
    ]
   },
   "omics:TaggingResource": {
    "arn_formats": [
     "arn:${Partition}:omics:${Region}:${Account}:tag/${TagKey}"
    ]
   },
   "omics:TaskResource": {
    "arn_formats": [
     "arn:${Partition}:omics:${Region}:${Account}:task/${Id}"
    ]
   },
   "omics:VariantStore": {
    "arn_formats": [
     "arn:${Partition}:omics:${Region}:${Account}:variantStore/${VariantStoreName}"
    ]
   },
   "omics:readSet": {
    "arn_formats": [
     "arn:${Partition}:omics:${Region}:${Account}:sequenceStore/${SequenceStoreId}/readSet/${ReadSetId}"
    ]
   },
   "omics:reference": {
    "arn_formats": [
     "arn:${Partition}:omics:${Region}:${Account}:referenceStore/${ReferenceStoreId}/reference/${ReferenceId}"
    ]
   },
   "omics:referenceStore": {
    "arn_formats": [
     "arn:${Partition}:omics:${Region}:${Account}:referenceStore/${ReferenceStoreId}"
    ]
   },
   "omics:run": {
    "arn_formats": [
     "arn:${Partition}:omics:${Region}:${Account}:run/${Id}"
    ]
   },
   "omics:runCache": {
    "arn_formats": [
     "arn:${Partition}:omics:${Region}:${Account}:runCache/${Id}"
    ]
   },
   "omics:runGroup": {
    "arn_formats": [
     "arn:${Partition}:omics:${Region}:${Account}:runGroup/${Id}"
    ]
   },
   "omics:sequenceStore": {
    "arn_formats": [
     "arn:${Partition}:omics:${Region}:${Account}:sequenceStore/${SequenceStoreId}"
    ]
   },
   "omics:workflow": {
    "arn_formats": [
     "arn:${Partition}:omics:${Region}:${Account}:workflow/${Id}"
    ]
   },
   "one:configuration": {
    "arn_formats": [
     "arn:${Partition}:one:${Region}:${Account}:device-instance/${DeviceInstanceId}/configuration/${Version}"
    ]
   },
   "one:device-configuration-template": {
    "arn_formats": [
     "arn:${Partition}:one:${Region}:${Account}:device-configuration-template/${TemplateId}"
    ]
   },
   "one:device-instance": {
    "arn_formats": [
     "arn:${Partition}:one:${Region}:${Account}:device-instance/${DeviceInstanceId}"
    ]
   },
   "one:site": {
    "arn_formats": [
     "arn:${Partition}:one:${Region}:${Account}:site/${SiteId}"
    ]
   },
   "one:user": {
    "arn_formats": [
     "arn:${Partition}:one:${Region}:${Account}:user/${UserId}"
    ]
   },
   "opensearch:application": {
    "arn_formats": [
     "arn:${Partition}:opensearch:${Region}:${Account}:application/${AppId}"
    ]
   },
   "opensearch:datasource": {
    "arn_formats": [
     "arn:${Partition}:opensearch:${Region}:${Account}:datasource/${DataSourceName}"
    ]
   },
   "opsworks-cm:backup": {
    "arn_formats": [
     "arn:${Partition}:opsworks-cm::${Account}:backup/${ServerName}-{Date-and-Time-Stamp-of-Backup}"
    ]
   },
   "opsworks-cm:server": {
    "arn_formats": [
     "arn:${Partition}:opsworks-cm::${Account}:server/${ServerName}/${UniqueId}"
    ]
   },
   "opsworks:stack": {
    "arn_formats": [
     "arn:${Partition}:opsworks:${Region}:${Account}:stack/${StackId}/"
    ]
   },
   "organizations:account": {
    "arn_formats": [
     "arn:${Partition}:organizations::${Account}:account/o-${OrganizationId}/${AccountId}"
    ]
   },
   "organizations:awspolicy": {
    "arn_formats": [
     "arn:${Partition}:organizations::aws:policy/${PolicyType}/p-${PolicyId}"
    ]
   },
   "organizations:handshake": {
    "arn_formats": [
     "arn:${Partition}:organizations::${Account}:handshake/o-${OrganizationId}/${HandshakeType}/h-${HandshakeId}"
    ]
   },
   "organizations:organization": {
    "arn_formats": [
     "arn:${Partition}:organizations::${Account}:organization/o-${OrganizationId}"
    ]
   },
   "organizations:organizationalunit": {
    "arn_formats": [
     "arn:${Partition}:organizations::${Account}:ou/o-${OrganizationId}/ou-${OrganizationalUnitId}"
    ]
   },
   "organizations:policy": {
    "arn_formats": [
     "arn:${Partition}:organizations::${Account}:policy/o-${OrganizationId}/${PolicyType}/p-${PolicyId}"
    ]
   },
   "organizations:resourcepolicy": {
    "arn_formats": [
     "arn:${Partition}:organizations::${Account}:resourcepolicy/o-${OrganizationId}/rp-${ResourcePolicyId}"
    ]
   },
   "organizations:root": {
    "arn_formats": [
     "arn:${Partition}:organizations::${Account}:root/o-${OrganizationId}/r-${RootId}"
    ]
   },
   "osis:pipeline": {
    "arn_formats": [
     "arn:${Partition}:osis:${Region}:${Account}:pipeline/${PipelineName}"
    ]
   },
   "osis:pipeline-blueprint": {
    "arn_formats": [
     "arn:${Partition}:osis:${Region}:${Account}:blueprint/${BlueprintName}"
    ]
   },
   "outposts:outpost": {
    "arn_formats": [
     "arn:${Partition}:outposts:${Region}:${Account}:outpost/${OutpostId}"
    ]
   },
   "outposts:site": {
    "arn_formats": [
     "arn:${Partition}:outposts:${Region}:${Account}:site/${SiteId}"
    ]
   },
   "panorama:applicationInstance": {
    "arn_formats": [
     "arn:${Partition}:panorama:${Region}:${Account}:applicationInstance/${ApplicationInstanceId}"
    ]
   },
   "panorama:device": {
    "arn_formats": [
     "arn:${Partition}:panorama:${Region}:${Account}:device/${DeviceId}"
    ]
   },
   "panorama:package": {
    "arn_formats": [
     "arn:${Partition}:panorama:${Region}:${Account}:package/${PackageId}"
    ]
   },
   "partnercentral:Engagement": {
    "arn_formats": [
     "arn:${Partition}:partnercentral:${Region}::catalog/${Catalog}/engagement/${Identifier}"
    ]
   },
   "partnercentral:Opportunity": {
    "arn_formats": [
     "arn:${Partition}:partnercentral:${Region}:${Account}:catalog/${Catalog}/opportunity/${Identifier}"
    ]
   },
   "partnercentral:ResourceSnapshot": {
    "arn_formats": [
     "arn:${Partition}:partnercentral:${Region}:${Account}:catalog/${Catalog}/engagement/${EngagementIdentifier}/resource/${ResourceType}/${ResourceIdentifier}/template/${TemplateIdentifier}/resource-snapshot/${SnapshotRevision}"
    ]
   },
   "partnercentral:Solution": {
    "arn_formats": [
     "arn:${Partition}:partnercentral:${Region}:${Account}:catalog/${Catalog}/solution/${Identifier}"
    ]
   },
   "partnercentral:engagement-by-accepting-invitation-task": {
    "arn_formats": [
     "arn:${Partition}:partnercentral:${Region}::catalog/${Catalog}/engagement-by-accepting-invitation-task/${TaskId}"
    ]
   },
   "partnercentral:engagement-from-opportunity-task": {
    "arn_formats": [
     "arn:${Partition}:partnercentral:${Region}::catalog/${Catalog}/engagement-from-opportunity-task/${TaskId}"
    ]
   },
   "partnercentral:engagement-invitation": {
    "arn_formats": [
     "arn:${Partition}:partnercentral:${Region}::catalog/${Catalog}/engagement-invitation/${Identifier}"
    ]
   },
   "partnercentral:resource-snapshot-job": {
    "arn_formats": [
     "arn:${Partition}:partnercentral:${Region}:${Account}:catalog/${Catalog}/resource-snapshot-job/${Identifier}"
    ]
   },
   "payment-cryptography:alias": {
    "arn_formats": [
     "arn:${Partition}:payment-cryptography:${Region}:${Account}:alias/${Alias}"
    ]
   },
   "payment-cryptography:key": {
    "arn_formats": [
     "arn:${Partition}:payment-cryptography:${Region}:${Account}:key/${KeyId}"
    ]
   },
   "payments:payment-instrument": {
    "arn_formats": [
     "arn:${Partition}:payments::${Account}:payment-instrument:${ResourceId}"
    ]
   },
   "pca-connector-ad:Connector": {
    "arn_formats": [
     "arn:${Partition}:pca-connector-ad:${Region}:${Account}:connector/${ConnectorId}"
    ]
   },
   "pca-connector-ad:DirectoryRegistration": {
    "arn_formats": [
     "arn:${Partition}:pca-connector-ad:${Region}:${Account}:directory-registration/${DirectoryId}"
    ]
   },
   "pca-connector-ad:ServicePrincipalName": {
    "arn_formats": [
     "arn:${Partition}:pca-connector-ad:${Region}:${Account}:directory-registration/${DirectoryId}"
    ]
   },
   "pca-connector-ad:Template": {
    "arn_formats": [
     "arn:${Partition}:pca-connector-ad:${Region}:${Account}:connector/${ConnectorId}/template/${TemplateId}"
    ]
   },
   "pca-connector-ad:TemplateGroupAccessControlEntry": {
    "arn_formats": [
     "arn:${Partition}:pca-connector-ad:${Region}:${Account}:connector/${ConnectorId}/template/${TemplateId}"
    ]
   },
   "pca-connector-scep:Challenge": {
    "arn_formats": [
     "arn:${Partition}:pca-connector-scep:${Region}:${Account}:connector/${ConnectorId}/challenge/${ChallengeId}"
    ]
   },
   "pca-connector-scep:Connector": {
    "arn_formats": [
     "arn:${Partition}:pca-connector-scep:${Region}:${Account}:connector/${ConnectorId}"
    ]
   },
   "pcs:cluster": {
    "arn_formats": [
     "arn:${Partition}:pcs:${Region}:${Account}:cluster/${ClusterIdentifier}"
    ]
   },
   "pcs:computenodegroup": {
    "arn_formats": [
     "arn:${Partition}:pcs:${Region}:${Account}:cluster/${ClusterIdentifier}/computenodegroup/${ComputeNodeGroupIdentifier}"
    ]
   },
   "pcs:queue": {
    "arn_formats": [
     "arn:${Partition}:pcs:${Region}:${Account}:cluster/${ClusterIdentifier}/queue/${QueueIdentifier}"
    ]
   },
   "personalize:algorithm": {
    "arn_formats": [
     "arn:${Partition}:personalize:::algorithm/${ResourceId}"
    ]
   },
   "personalize:batchInferenceJob": {
    "arn_formats": [
     "arn:${Partition}:personalize:${Region}:${Account}:batch-inference-job/${ResourceId}"
    ]
   },
   "personalize:batchSegmentJob": {
    "arn_formats": [
     "arn:${Partition}:personalize:${Region}:${Account}:batch-segment-job/${ResourceId}"
    ]
   },
   "personalize:campaign": {
    "arn_formats": [
     "arn:${Partition}:personalize:${Region}:${Account}:campaign/${ResourceId}"
    ]
   },
   "personalize:dataDeletionJob": {
    "arn_formats": [
     "arn:${Partition}:personalize:${Region}:${Account}:data-deletion-job/${ResourceId}"
    ]
   },
   "personalize:dataInsightsJob": {
    "arn_formats": [
     "arn:${Partition}:personalize:${Region}:${Account}:data-insights-job/${ResourceId}"
    ]
   },
   "personalize:dataset": {
    "arn_formats": [
     "arn:${Partition}:personalize:${Region}:${Account}:dataset/${ResourceId}"
    ]
   },
   "personalize:datasetExportJob": {
    "arn_formats": [
     "arn:${Partition}:personalize:${Region}:${Account}:dataset-export-job/${ResourceId}"
    ]
   },
   "personalize:datasetGroup": {
    "arn_formats": [
     "arn:${Partition}:personalize:${Region}:${Account}:dataset-group/${ResourceId}"
    ]
   },
   "personalize:datasetImportJob": {
    "arn_formats": [
     "arn:${Partition}:personalize:${Region}:${Account}:dataset-import-job/${ResourceId}"
    ]
   },
   "personalize:eventTracker": {
    "arn_formats": [
     "arn:${Partition}:personalize:${Region}:${Account}:event-tracker/${ResourceId}"
    ]
   },
   "personalize:featureTransformation": {
    "arn_formats": [
     "arn:${Partition}:personalize:::feature-transformation/${ResourceId}"
    ]
   },
   "personalize:filter": {
    "arn_formats": [
     "arn:${Partition}:personalize:${Region}:${Account}:filter/${ResourceId}"
    ]
   },
   "personalize:metricAttribution": {
    "arn_formats": [
     "arn:${Partition}:personalize:${Region}:${Account}:metric-attribution/${ResourceId}"
    ]
   },
   "personalize:recipe": {
    "arn_formats": [
     "arn:${Partition}:personalize:::recipe/${ResourceId}"
    ]
   },
   "personalize:recommender": {
    "arn_formats": [
     "arn:${Partition}:personalize:${Region}:${Account}:recommender/${ResourceId}"
    ]
   },
   "personalize:schema": {
    "arn_formats": [
     "arn:${Partition}:personalize:${Region}:${Account}:schema/${ResourceId}"
    ]
   },
   "personalize:solution": {
    "arn_formats": [
     "arn:${Partition}:personalize:${Region}:${Account}:solution/${ResourceId}"
    ]
   },
   "pi:metric-resource": {
    "arn_formats": [
     "arn:${Partition}:pi:${Region}:${Account}:metrics/${ServiceType}/${Identifier}"
    ]
   },
   "pi:perf-reports-resource": {
    "arn_formats": [
     "arn:${Partition}:pi:${Region}:${Account}:perf-reports/${ServiceType}/${Identifier}/${ReportId}"
    ]
   },
   "pipes:pipe": {
    "arn_formats": [
     "arn:${Partition}:pipes:${Region}:${Account}:pipe/${Name}"
    ]
   },
   "polly:lexicon": {
    "arn_formats": [
     "arn:${Partition}:polly:${Region}:${Account}:lexicon/${LexiconName}"
    ]
   },
   "private-networks:device-identifier": {
    "arn_formats": [
     "arn:${Partition}:private-networks:${Region}:${Account}:device-identifier/${NetworkName}/${DeviceId}"
    ]
   },
   "private-networks:network": {
    "arn_formats": [
     "arn:${Partition}:private-networks:${Region}:${Account}:network/${NetworkName}"
    ]
   },
   "private-networks:network-resource": {
    "arn_formats": [
     "arn:${Partition}:private-networks:${Region}:${Account}:network-resource/${NetworkName}/${ResourceId}"
    ]
   },
   "private-networks:network-site": {
    "arn_formats": [
     "arn:${Partition}:private-networks:${Region}:${Account}:network-site/${NetworkName}/${NetworkSiteName}"
    ]
   },
   "private-networks:order": {
    "arn_formats": [
     "arn:${Partition}:private-networks:${Region}:${Account}:order/${NetworkName}/${OrderId}"
    ]
   },
   "profile:calculated-attributes": {
    "arn_formats": [
     "arn:${Partition}:profile:${Region}:${Account}:domains/${DomainName}/calculated-attributes/${CalculatedAttributeName}"
    ]
   },
   "profile:domains": {
    "arn_formats": [
     "arn:${Partition}:profile:${Region}:${Account}:domains/${DomainName}"
    ]
   },
   "profile:event-streams": {
    "arn_formats": [
     "arn:${Partition}:profile:${Region}:${Account}:domains/${DomainName}/event-streams/${EventStreamName}"
    ]
   },
   "profile:event-triggers": {
    "arn_formats": [
     "arn:${Partition}:profile:${Region}:${Account}:domains/${DomainName}/event-triggers/${EventTriggerName}"
    ]
   },
   "profile:integrations": {
    "arn_formats": [
     "arn:${Partition}:profile:${Region}:${Account}:domains/${DomainName}/integrations/${Uri}"
    ]
   },
   "profile:object-types": {
    "arn_formats": [
     "arn:${Partition}:profile:${Region}:${Account}:domains/${DomainName}/object-types/${ObjectTypeName}"
    ]
   },
   "profile:segment-definitions": {
    "arn_formats": [
     "arn:${Partition}:profile:${Region}:${Account}:domains/${DomainName}/segment-definitions/${SegmentDefinitionName}"
    ]
   },
   "proton:component": {
    "arn_formats": [
     "arn:${Partition}:proton:${Region}:${Account}:component/${Id}"
    ]
   },
   "proton:deployment": {
    "arn_formats": [
     "arn:${Partition}:proton:${Region}:${Account}:deployment/${Id}"
    ]
   },
   "proton:environment": {
    "arn_formats": [
     "arn:${Partition}:proton:${Region}:${Account}:environment/${Name}"
    ]
   },
   "proton:environment-account-connection": {
    "arn_formats": [
     "arn:${Partition}:proton:${Region}:${Account}:environment-account-connection/${Id}"
    ]
   },
   "proton:environment-template": {
    "arn_formats": [
     "arn:${Partition}:proton:${Region}:${Account}:environment-template/${Name}"
    ]
   },
   "proton:environment-template-major-version": {
    "arn_formats": [
     "arn:${Partition}:proton:${Region}:${Account}:environment-template/${TemplateName}:${MajorVersionId}"
    ]
   },
   "proton:environment-template-minor-version": {
    "arn_formats": [
     "arn:${Partition}:proton:${Region}:${Account}:environment-template/${TemplateName}:${MajorVersionId}.${MinorVersionId}"
    ]
   },
   "proton:environment-template-version": {
    "arn_formats": [
     "arn:${Partition}:proton:${Region}:${Account}:environment-template/${TemplateName}:${MajorVersion}.${MinorVersion}"
    ]
   },
   "proton:repository": {
    "arn_formats": [
     "arn:${Partition}:proton:${Region}:${Account}:repository/${Provider}:${Name}"
    ]
   },
   "proton:service": {
    "arn_formats": [
     "arn:${Partition}:proton:${Region}:${Account}:service/${Name}"
    ]
   },
   "proton:service-instance": {
    "arn_formats": [
     "arn:${Partition}:proton:${Region}:${Account}:service/${ServiceName}/service-instance/${Name}"
    ]
   },
   "proton:service-template": {
    "arn_formats": [
     "arn:${Partition}:proton:${Region}:${Account}:service-template/${Name}"
    ]
   },
   "proton:service-template-major-version": {
    "arn_formats": [
     "arn:${Partition}:proton:${Region}:${Account}:service-template/${TemplateName}:${MajorVersionId}"
    ]
   },
   "proton:service-template-minor-version": {
    "arn_formats": [
     "arn:${Partition}:proton:${Region}:${Account}:service-template/${TemplateName}:${MajorVersionId}.${MinorVersionId}"
    ]
   },
   "proton:service-template-version": {
    "arn_formats": [
     "arn:${Partition}:proton:${Region}:${Account}:service-template/${TemplateName}:${MajorVersion}.${MinorVersion}"
    ]
   },
   "purchase-orders:purchase-order": {
    "arn_formats": [
     "arn:${Partition}:purchase-orders::${Account}:purchase-order/${ResourceName}"
    ]
   },
   "q:plugin": {
    "arn_formats": [
     "arn:${Partition}:qdeveloper:${Region}:${Account}:plugin/${Identifier}"
    ]
   },
   "q:profile": {
    "arn_formats": [
     "arn:${Partition}:codewhisperer:${Region}:${Account}:profile/${Identifier}"
    ]
   },
   "qapps:application": {
    "arn_formats": [
     "arn:${Partition}:qbusiness:${Region}:${Account}:application/${ApplicationId}"
    ]
   },
   "qapps:qapp": {
    "arn_formats": [
     "arn:${Partition}:qapps:${Region}:${Account}:application/${ApplicationId}/qapp/${AppId}"
    ]
   },
   "qapps:qapp-session": {
    "arn_formats": [
     "arn:${Partition}:qapps:${Region}:${Account}:application/${ApplicationId}/qapp/${AppId}/session/${SessionId}"
    ]
   },
   "qbusiness:application": {
    "arn_formats": [
     "arn:${Partition}:qbusiness:${Region}:${Account}:application/${ApplicationId}"
    ]
   },
   "qbusiness:data-accessor": {
    "arn_formats": [
     "arn:${Partition}:qbusiness:${Region}:${Account}:application/${ApplicationId}/data-accessor/${DataAccessorId}"
    ]
   },
   "qbusiness:data-source": {
    "arn_formats": [
     "arn:${Partition}:qbusiness:${Region}:${Account}:application/${ApplicationId}/index/${IndexId}/data-source/${DataSourceId}"
    ]
   },
   "qbusiness:index": {
    "arn_formats": [
     "arn:${Partition}:qbusiness:${Region}:${Account}:application/${ApplicationId}/index/${IndexId}"
    ]
   },
   "qbusiness:integration": {
    "arn_formats": [
     "arn:${Partition}:qbusiness:${Region}:${Account}:application/${ApplicationId}/integration/${IntegrationId}"
    ]
   },
   "qbusiness:plugin": {
    "arn_formats": [
     "arn:${Partition}:qbusiness:${Region}:${Account}:application/${ApplicationId}/plugin/${PluginId}"
    ]
   },
   "qbusiness:retriever": {
    "arn_formats": [
     "arn:${Partition}:qbusiness:${Region}:${Account}:application/${ApplicationId}/retriever/${RetrieverId}"
    ]
   },
   "qbusiness:subscription": {
    "arn_formats": [
     "arn:${Partition}:qbusiness:${Region}:${Account}:application/${ApplicationId}/subscription/${SubscriptionId}"
    ]
   },
   "qbusiness:user-license": {
    "arn_formats": [
     "arn:${Partition}:qbusiness:${Region}:${Account}:application/${ApplicationId}/user-license/${UserLicenseId}"
    ]
   },
   "qbusiness:web-experience": {
    "arn_formats": [
     "arn:${Partition}:qbusiness:${Region}:${Account}:application/${ApplicationId}/web-experience/${WebExperienceId}"
    ]
   },
   "qdeveloper:codeTransformation": {
    "arn_formats": [
     "arn:${Partition}:qdeveloper:${Region}:${Account}:codeTransformation/${Identifier}"
    ]
   },
   "qldb:catalog": {
    "arn_formats": [
     "arn:${Partition}:qldb:${Region}:${Account}:ledger/${LedgerName}/information_schema/user_tables"
    ]
   },
   "qldb:ledger": {
    "arn_formats": [
     "arn:${Partition}:qldb:${Region}:${Account}:ledger/${LedgerName}"
    ]
   },
   "qldb:stream": {
    "arn_formats": [
     "arn:${Partition}:qldb:${Region}:${Account}:stream/${LedgerName}/${StreamId}"
    ]
   },
   "qldb:table": {
    "arn_formats": [
     "arn:${Partition}:qldb:${Region}:${Account}:ledger/${LedgerName}/table/${TableId}"
    ]
   },
   "quicksight:account": {
    "arn_formats": [
     "arn:${Partition}:quicksight:${Region}:${Account}:account/${ResourceId}"
    ]
   },
   "quicksight:analysis": {
    "arn_formats": [
     "arn:${Partition}:quicksight:${Region}:${Account}:analysis/${ResourceId}"
    ]
   },
   "quicksight:assetBundleExportJob": {
    "arn_formats": [
     "arn:${Partition}:quicksight:${Region}:${Account}:asset-bundle-export-job/${ResourceId}"
    ]
   },
   "quicksight:assetBundleImportJob": {
    "arn_formats": [
     "arn:${Partition}:quicksight:${Region}:${Account}:asset-bundle-import-job/${ResourceId}"
    ]
   },
   "quicksight:assignment": {
    "arn_formats": [
     "arn:${Partition}:quicksight::${Account}:assignment/${ResourceId}"
    ]
   },
   "quicksight:brand": {
    "arn_formats": [
     "arn:${Partition}:quicksight:${Region}:${Account}:brand/${ResourceId}"
    ]
   },
   "quicksight:customization": {
    "arn_formats": [
     "arn:${Partition}:quicksight:${Region}:${Account}:customization/${ResourceId}"
    ]
   },
   "quicksight:custompermissions": {
    "arn_formats": [
     "arn:${Partition}:quicksight:${Region}:${Account}:custompermissions/${ResourceId}"
    ]
   },
   "quicksight:dashboard": {
    "arn_formats": [
     "arn:${Partition}:quicksight:${Region}:${Account}:dashboard/${ResourceId}"
    ]
   },
   "quicksight:dashboardSnapshotJob": {
    "arn_formats": [
     "arn:${Partition}:quicksight:${Region}:${Account}:dashboard/${DashboardId}/snapshot-job/${ResourceId}"
    ]
   },
   "quicksight:dataset": {
    "arn_formats": [
     "arn:${Partition}:quicksight:${Region}:${Account}:dataset/${ResourceId}"
    ]
   },
   "quicksight:datasource": {
    "arn_formats": [
     "arn:${Partition}:quicksight:${Region}:${Account}:datasource/${ResourceId}"
    ]
   },
   "quicksight:emailCustomizationTemplate": {
    "arn_formats": [
     "arn:${Partition}:quicksight:${Region}:${Account}:email-customization-template/${ResourceId}"
    ]
   },
   "quicksight:folder": {
    "arn_formats": [
     "arn:${Partition}:quicksight:${Region}:${Account}:folder/${ResourceId}"
    ]
   },
   "quicksight:group": {
    "arn_formats": [
     "arn:${Partition}:quicksight:${Region}:${Account}:group/${ResourceId}"
    ]
   },
   "quicksight:ingestion": {
    "arn_formats": [
     "arn:${Partition}:quicksight:${Region}:${Account}:dataset/${DatasetId}/ingestion/${ResourceId}"
    ]
   },
   "quicksight:namespace": {
    "arn_formats": [
     "arn:${Partition}:quicksight:${Region}:${Account}:namespace/${ResourceId}"
    ]
   },
   "quicksight:refreshschedule": {
    "arn_formats": [
     "arn:${Partition}:quicksight:${Region}:${Account}:dataset/${DatasetId}/refresh-schedule/${ResourceId}"
    ]
   },
   "quicksight:template": {
    "arn_formats": [
     "arn:${Partition}:quicksight:${Region}:${Account}:template/${ResourceId}"
    ]
   },
   "quicksight:theme": {
    "arn_formats": [
     "arn:${Partition}:quicksight:${Region}:${Account}:theme/${ResourceId}"
    ]
   },
   "quicksight:topic": {
    "arn_formats": [
     "arn:${Partition}:quicksight:${Region}:${Account}:topic/${ResourceId}"
    ]
   },
   "quicksight:user": {
    "arn_formats": [
     "arn:${Partition}:quicksight:${Region}:${Account}:user/${ResourceId}"
    ]
   },
   "quicksight:vpcconnection": {
    "arn_formats": [
     "arn:${Partition}:quicksight:${Region}:${Account}:vpcConnection/${ResourceId}"
    ]
   },
   "ram:customer-managed-permission": {
    "arn_formats": [
     "arn:${Partition}:ram:${Region}:${Account}:permission/${ResourcePath}"
    ]
   },
   "ram:permission": {
    "arn_formats": [
     "arn:${Partition}:ram::${Account}:permission/${ResourcePath}"
    ]
   },
   "ram:resource-share": {
    "arn_formats": [
     "arn:${Partition}:ram:${Region}:${Account}:resource-share/${ResourcePath}"
    ]
   },
   "ram:resource-share-invitation": {
    "arn_formats": [
     "arn:${Partition}:ram:${Region}:${Account}:resource-share-invitation/${ResourcePath}"
    ]
   },
   "rbin:rule": {
    "arn_formats": [
     "arn:${Partition}:rbin:${Region}:${Account}:rule/${ResourceName}"
    ]
   },
   "rds-data:cluster": {
    "arn_formats": [
     "arn:${Partition}:rds:${Region}:${Account}:cluster:${DbClusterInstanceName}"
    ]
   },
   "rds-db:db-user": {
    "arn_formats": [
     "arn:${Partition}:rds-db:${Region}:${Account}:dbuser:${DbiResourceId}/${DbUserName}"
    ]
   },
   "rds:auto-backup": {
    "arn_formats": [
     "arn:${Partition}:rds:${Region}:${Account}:auto-backup:${DbInstanceAutomatedBackupId}"
    ]
   },
   "rds:cev": {
    "arn_formats": [
     "arn:${Partition}:rds:${Region}:${Account}:cev:${Engine}/${EngineVersion}/${CustomDbEngineVersionId}"
    ]
   },
   "rds:cluster": {
    "arn_formats": [
     "arn:${Partition}:rds:${Region}:${Account}:cluster:${DbClusterInstanceName}"
    ]
   },
   "rds:cluster-auto-backup": {
    "arn_formats": [
     "arn:${Partition}:rds:${Region}:${Account}:cluster-auto-backup:${DbClusterAutomatedBackupId}"
    ]
   },
   "rds:cluster-endpoint": {
    "arn_formats": [
     "arn:${Partition}:rds:${Region}:${Account}:cluster-endpoint:${DbClusterEndpoint}"
    ]
   },
   "rds:cluster-pg": {
    "arn_formats": [
     "arn:${Partition}:rds:${Region}:${Account}:cluster-pg:${ClusterParameterGroupName}"
    ]
   },
   "rds:cluster-snapshot": {
    "arn_formats": [
     "arn:${Partition}:rds:${Region}:${Account}:cluster-snapshot:${ClusterSnapshotName}"
    ]
   },
   "rds:db": {
    "arn_formats": [
     "arn:${Partition}:rds:${Region}:${Account}:db:${DbInstanceName}"
    ]
   },
   "rds:deployment": {
    "arn_formats": [
     "arn:${Partition}:rds:${Region}:${Account}:deployment:${BlueGreenDeploymentIdentifier}"
    ]
   },
   "rds:es": {
    "arn_formats": [
     "arn:${Partition}:rds:${Region}:${Account}:es:${SubscriptionName}"
    ]
   },
   "rds:global-cluster": {
    "arn_formats": [
     "arn:${Partition}:rds::${Account}:global-cluster:${GlobalCluster}"
    ]
   },
   "rds:integration": {
    "arn_formats": [
     "arn:${Partition}:rds:${Region}:${Account}:integration:${IntegrationIdentifier}"
    ]
   },
   "rds:og": {
    "arn_formats": [
     "arn:${Partition}:rds:${Region}:${Account}:og:${OptionGroupName}"
    ]
   },
   "rds:pg": {
    "arn_formats": [
     "arn:${Partition}:rds:${Region}:${Account}:pg:${ParameterGroupName}"
    ]
   },
   "rds:proxy": {
    "arn_formats": [
     "arn:${Partition}:rds:${Region}:${Account}:db-proxy:${DbProxyId}"
    ]
   },
   "rds:proxy-endpoint": {
    "arn_formats": [
     "arn:${Partition}:rds:${Region}:${Account}:db-proxy-endpoint:${DbProxyEndpointId}"
    ]
   },
   "rds:ri": {
    "arn_formats": [
     "arn:${Partition}:rds:${Region}:${Account}:ri:${ReservedDbInstanceName}"
    ]
   },
   "rds:secgrp": {
    "arn_formats": [
     "arn:${Partition}:rds:${Region}:${Account}:secgrp:${SecurityGroupName}"
    ]
   },
   "rds:shardgrp": {
    "arn_formats": [
     "arn:${Partition}:rds:${Region}:${Account}:shard-group:${DbShardGroupResourceId}"
    ]
   },
   "rds:snapshot": {
    "arn_formats": [
     "arn:${Partition}:rds:${Region}:${Account}:snapshot:${SnapshotName}"
    ]
   },
   "rds:snapshot-tenant-database": {
    "arn_formats": [
     "arn:${Partition}:rds:${Region}:${Account}:snapshot-tenant-database:${SnapshotName}:${TenantResourceId}"
    ]
   },
   "rds:subgrp": {
    "arn_formats": [
     "arn:${Partition}:rds:${Region}:${Account}:subgrp:${SubnetGroupName}"
    ]
   },
   "rds:target-group": {
    "arn_formats": [
     "arn:${Partition}:rds:${Region}:${Account}:target-group:${TargetGroupId}"
    ]
   },
   "rds:tenant-database": {
    "arn_formats": [
     "arn:${Partition}:rds:${Region}:${Account}:tenant-database:${TenantResourceId}"
    ]
   },
   "redshift-data:cluster": {
    "arn_formats": [
     "arn:${Partition}:redshift:${Region}:${Account}:cluster:${ClusterName}"
    ]
   },
   "redshift-data:managed-workgroup": {
    "arn_formats": [
     "arn:${Partition}:redshift-serverless:${Region}:${Account}:managed-workgroup/${ManagedWorkgroupId}"
    ]
   },
   "redshift-data:workgroup": {
    "arn_formats": [
     "arn:${Partition}:redshift-serverless:${Region}:${Account}:workgroup/${WorkgroupId}"
    ]
   },
   "redshift-serverless:endpointAccess": {
    "arn_formats": [
     "arn:${Partition}:redshift-serverless:${Region}:${Account}:managedvpcendpoint/${EndpointAccessId}"
    ]
   },
   "redshift-serverless:managed-workgroup": {
    "arn_formats": [
     "arn:${Partition}:redshift-serverless:${Region}:${Account}:managed-workgroup/${ManagedWorkgroupName}"
    ]
   },
   "redshift-serverless:namespace": {
    "arn_formats": [
     "arn:${Partition}:redshift-serverless:${Region}:${Account}:namespace/${NamespaceId}"
    ]
   },
   "redshift-serverless:recoveryPoint": {
    "arn_formats": [
     "arn:${Partition}:redshift-serverless:${Region}:${Account}:recoverypoint/${RecoveryPointId}"
    ]
   },
   "redshift-serverless:snapshot": {
    "arn_formats": [
     "arn:${Partition}:redshift-serverless:${Region}:${Account}:snapshot/${SnapshotId}"
    ]
   },
   "redshift-serverless:workgroup": {
    "arn_formats": [
     "arn:${Partition}:redshift-serverless:${Region}:${Account}:workgroup/${WorkgroupId}"
    ]
   },
   "redshift:cluster": {
    "arn_formats": [
     "arn:${Partition}:redshift:${Region}:${Account}:cluster:${ClusterName}"
    ]
   },
   "redshift:datashare": {
    "arn_formats": [
     "arn:${Partition}:redshift:${Region}:${Account}:datashare:${ProducerClusterNamespace}/${DataShareName}"
    ]
   },
   "redshift:dbgroup": {
    "arn_formats": [
     "arn:${Partition}:redshift:${Region}:${Account}:dbgroup:${ClusterName}/${DbGroup}"
    ]
   },
   "redshift:dbname": {
    "arn_formats": [
     "arn:${Partition}:redshift:${Region}:${Account}:dbname:${ClusterName}/${DbName}"
    ]
   },
   "redshift:dbuser": {
    "arn_formats": [
     "arn:${Partition}:redshift:${Region}:${Account}:dbuser:${ClusterName}/${DbUser}"
    ]
   },
   "redshift:eventsubscription": {
    "arn_formats": [
     "arn:${Partition}:redshift:${Region}:${Account}:eventsubscription:${EventSubscriptionName}"
    ]
   },
   "redshift:hsmclientcertificate": {
    "arn_formats": [
     "arn:${Partition}:redshift:${Region}:${Account}:hsmclientcertificate:${HSMClientCertificateId}"
    ]
   },
   "redshift:hsmconfiguration": {
    "arn_formats": [
     "arn:${Partition}:redshift:${Region}:${Account}:hsmconfiguration:${HSMConfigurationId}"
    ]
   },
   "redshift:integration": {
    "arn_formats": [
     "arn:${Partition}:redshift:${Region}:${Account}:integration:${IntegrationIdentifier}"
    ]
   },
   "redshift:namespace": {
    "arn_formats": [
     "arn:${Partition}:redshift:${Region}:${Account}:namespace:${ClusterNamespace}"
    ]
   },
   "redshift:parametergroup": {
    "arn_formats": [
     "arn:${Partition}:redshift:${Region}:${Account}:parametergroup:${ParameterGroupName}"
    ]
   },
   "redshift:qev2idcapplication": {
    "arn_formats": [
     "arn:${Partition}:redshift:${Region}:${Account}:qev2idcapplication:${Qev2IdcApplicationId}"
    ]
   },
   "redshift:redshiftidcapplication": {
    "arn_formats": [
     "arn:${Partition}:redshift:${Region}:${Account}:redshiftidcapplication:${RedshiftIdcApplicationId}"
    ]
   },
   "redshift:securitygroup": {
    "arn_formats": [
     "arn:${Partition}:redshift:${Region}:${Account}:securitygroup:${SecurityGroupName}/ec2securitygroup/${Owner}/${Ec2SecurityGroupId}"
    ]
   },
   "redshift:securitygroupingress-cidr": {
    "arn_formats": [
     "arn:${Partition}:redshift:${Region}:${Account}:securitygroupingress:${SecurityGroupName}/cidrip/${IpRange}"
    ]
   },
   "redshift:securitygroupingress-ec2securitygroup": {
    "arn_formats": [
     "arn:${Partition}:redshift:${Region}:${Account}:securitygroupingress:${SecurityGroupName}/ec2securitygroup/${Owner}/${Ece2SecuritygroupId}"
    ]
   },
   "redshift:snapshot": {
    "arn_formats": [
     "arn:${Partition}:redshift:${Region}:${Account}:snapshot:${ClusterName}/${SnapshotName}"
    ]
   },
   "redshift:snapshotcopygrant": {
    "arn_formats": [
     "arn:${Partition}:redshift:${Region}:${Account}:snapshotcopygrant:${SnapshotCopyGrantName}"
    ]
   },
   "redshift:snapshotschedule": {
    "arn_formats": [
     "arn:${Partition}:redshift:${Region}:${Account}:snapshotschedule:${ScheduleIdentifier}"
    ]
   },
   "redshift:subnetgroup": {
    "arn_formats": [
     "arn:${Partition}:redshift:${Region}:${Account}:subnetgroup:${SubnetGroupName}"
    ]
   },
   "redshift:usagelimit": {
    "arn_formats": [
     "arn:${Partition}:redshift:${Region}:${Account}:usagelimit:${UsageLimitId}"
    ]
   },
   "refactor-spaces:application": {
    "arn_formats": [
     "arn:${Partition}:refactor-spaces:${Region}:${Account}:environment/${EnvironmentId}/application/${ApplicationId}"
    ]
   },
   "refactor-spaces:environment": {
    "arn_formats": [
     "arn:${Partition}:refactor-spaces:${Region}:${Account}:environment/${EnvironmentId}"
    ]
   },
   "refactor-spaces:route": {
    "arn_formats": [
     "arn:${Partition}:refactor-spaces:${Region}:${Account}:environment/${EnvironmentId}/application/${ApplicationId}/route/${RouteId}"
    ]
   },
   "refactor-spaces:service": {
    "arn_formats": [
     "arn:${Partition}:refactor-spaces:${Region}:${Account}:environment/${EnvironmentId}/application/${ApplicationId}/service/${ServiceId}"
    ]
   },
   "rekognition:collection": {
    "arn_formats": [
     "arn:${Partition}:rekognition:${Region}:${Account}:collection/${CollectionId}"
    ]
   },
   "rekognition:dataset": {
    "arn_formats": [
     "arn:${Partition}:rekognition:${Region}:${Account}:project/${ProjectName}/dataset/${DatasetType}/${CreationTimestamp}"
    ]
   },
   "rekognition:project": {
    "arn_formats": [
     "arn:${Partition}:rekognition:${Region}:${Account}:project/${ProjectName}/${CreationTimestamp}"
    ]
   },
   "rekognition:projectversion": {
    "arn_formats": [
     "arn:${Partition}:rekognition:${Region}:${Account}:project/${ProjectName}/version/${VersionName}/${CreationTimestamp}"
    ]
   },
   "rekognition:streamprocessor": {
    "arn_formats": [
     "arn:${Partition}:rekognition:${Region}:${Account}:streamprocessor/${StreamprocessorId}"
    ]
   },
   "repostspace:space": {
    "arn_formats": [
     "arn:${Partition}:repostspace:${Region}:${Account}:space/${ResourceId}"
    ]
   },
   "resiliencehub:app-assessment": {
    "arn_formats": [
     "arn:${Partition}:resiliencehub:${Region}:${Account}:app-assessment/${AppAssessmentId}"
    ]
   },
   "resiliencehub:application": {
    "arn_formats": [
     "arn:${Partition}:resiliencehub:${Region}:${Account}:app/${AppId}"
    ]
   },
   "resiliencehub:recommendation-template": {
    "arn_formats": [
     "arn:${Partition}:resiliencehub:${Region}:${Account}:recommendation-template/${RecommendationTemplateId}"
    ]
   },
   "resiliencehub:resiliency-policy": {
    "arn_formats": [
     "arn:${Partition}:resiliencehub:${Region}:${Account}:resiliency-policy/${ResiliencyPolicyId}"
    ]
   },
   "resource-explorer-2:index": {
    "arn_formats": [
     "arn:${Partition}:resource-explorer-2:${Region}:${Account}:index/${IndexUuid}"
    ]
   },
   "resource-explorer-2:managed-view": {
    "arn_formats": [
     "arn:${Partition}:resource-explorer-2:${Region}:${Account}:managed-view/${ManagedViewName}/${ManagedViewUuid}"
    ]
   },
   "resource-explorer-2:view": {
    "arn_formats": [
     "arn:${Partition}:resource-explorer-2:${Region}:${Account}:view/${ViewName}/${ViewUuid}"
    ]
   },
   "resource-groups:group": {
    "arn_formats": [
     "arn:${Partition}:resource-groups:${Region}:${Account}:group/${GroupName}"
    ]
   },
   "resource-groups:tagSyncTask": {
    "arn_formats": [
     "arn:${Partition}:resource-groups:${Region}:${Account}:group/${GroupName}/tag-sync-task/${TaskId}"
    ]
   },
   "robomaker:deploymentFleet": {
    "arn_formats": [
     "arn:${Partition}:robomaker:${Region}:${Account}:deployment-fleet/${FleetName}/${CreatedOnEpoch}"
    ]
   },
   "robomaker:deploymentJob": {
    "arn_formats": [
     "arn:${Partition}:robomaker:${Region}:${Account}:deployment-job/${DeploymentJobId}"
    ]
   },
   "robomaker:robot": {
    "arn_formats": [
     "arn:${Partition}:robomaker:${Region}:${Account}:robot/${RobotName}/${CreatedOnEpoch}"
    ]
   },
   "robomaker:robotApplication": {
    "arn_formats": [
     "arn:${Partition}:robomaker:${Region}:${Account}:robot-application/${ApplicationName}/${CreatedOnEpoch}"
    ]
   },
   "robomaker:simulationApplication": {
    "arn_formats": [
     "arn:${Partition}:robomaker:${Region}:${Account}:simulation-application/${ApplicationName}/${CreatedOnEpoch}"
    ]
   },
   "robomaker:simulationJob": {
    "arn_formats": [
     "arn:${Partition}:robomaker:${Region}:${Account}:simulation-job/${SimulationJobId}"
    ]
   },
   "robomaker:simulationJobBatch": {
    "arn_formats": [
     "arn:${Partition}:robomaker:${Region}:${Account}:simulation-job-batch/${SimulationJobBatchId}"
    ]
   },
   "robomaker:world": {
    "arn_formats": [
     "arn:${Partition}:robomaker:${Region}:${Account}:world/${WorldId}"
    ]
   },
   "robomaker:worldExportJob": {
    "arn_formats": [
     "arn:${Partition}:robomaker:${Region}:${Account}:world-export-job/${WorldExportJobId}"
    ]
   },
   "robomaker:worldGenerationJob": {
    "arn_formats": [
     "arn:${Partition}:robomaker:${Region}:${Account}:world-generation-job/${WorldGenerationJobId}"
    ]
   },
   "robomaker:worldTemplate": {
    "arn_formats": [
     "arn:${Partition}:robomaker:${Region}:${Account}:world-template/${WorldTemplateJobId}"
    ]
   },
   "rolesanywhere:crl": {
    "arn_formats": [
     "arn:${Partition}:rolesanywhere:${Region}:${Account}:crl/${CrlId}"
    ]
   },
   "rolesanywhere:profile": {
    "arn_formats": [
     "arn:${Partition}:rolesanywhere:${Region}:${Account}:profile/${ProfileId}"
    ]
   },
   "rolesanywhere:subject": {
    "arn_formats": [
     "arn:${Partition}:rolesanywhere:${Region}:${Account}:subject/${SubjectId}"
    ]
   },
   "rolesanywhere:trust-anchor": {
    "arn_formats": [
     "arn:${Partition}:rolesanywhere:${Region}:${Account}:trust-anchor/${TrustAnchorId}"
    ]
   },
   "route53-recovery-cluster:routingcontrol": {
    "arn_formats": [
     "arn:${Partition}:route53-recovery-control::${Account}:controlpanel/${ControlPanelId}/routingcontrol/${RoutingControlId}"
    ]
   },
   "route53-recovery-control-config:cluster": {
    "arn_formats": [
     "arn:${Partition}:route53-recovery-control::${Account}:cluster/${ResourceId}"
    ]
   },
   "route53-recovery-control-config:controlpanel": {
    "arn_formats": [
     "arn:${Partition}:route53-recovery-control::${Account}:controlpanel/${ControlPanelId}"
    ]
   },
   "route53-recovery-control-config:routingcontrol": {
    "arn_formats": [
     "arn:${Partition}:route53-recovery-control::${Account}:controlpanel/${ControlPanelId}/routingcontrol/${RoutingControlId}"
    ]
   },
   "route53-recovery-control-config:safetyrule": {
    "arn_formats": [
     "arn:${Partition}:route53-recovery-control::${Account}:controlpanel/${ControlPanelId}/safetyrule/${SafetyRuleId}"
    ]
   },
   "route53-recovery-readiness:cell": {
    "arn_formats": [
     "arn:${Partition}:route53-recovery-readiness::${Account}:cell/${ResourceId}"
    ]
   },
   "route53-recovery-readiness:readinesscheck": {
    "arn_formats": [
     "arn:${Partition}:route53-recovery-readiness::${Account}:readiness-check/${ResourceId}"
    ]
   },
   "route53-recovery-readiness:recoverygroup": {
    "arn_formats": [
     "arn:${Partition}:route53-recovery-readiness::${Account}:recovery-group/${ResourceId}"
    ]
   },
   "route53-recovery-readiness:resourceset": {
    "arn_formats": [
     "arn:${Partition}:route53-recovery-readiness::${Account}:resource-set/${ResourceId}"
    ]
   },
   "route53:change": {
    "arn_formats": [
     "arn:${Partition}:route53:::change/${Id}"
    ]
   },
   "route53:cidrcollection": {
    "arn_formats": [
     "arn:${Partition}:route53:::cidrcollection/${Id}"
    ]
   },
   "route53:delegationset": {
    "arn_formats": [
     "arn:${Partition}:route53:::delegationset/${Id}"
    ]
   },
   "route53:healthcheck": {
    "arn_formats": [
     "arn:${Partition}:route53:::healthcheck/${Id}"
    ]
   },
   "route53:hostedzone": {
    "arn_formats": [
     "arn:${Partition}:route53:::hostedzone/${Id}"
    ]
   },
   "route53:queryloggingconfig": {
    "arn_formats": [
     "arn:${Partition}:route53:::queryloggingconfig/${Id}"
    ]
   },
   "route53:trafficpolicy": {
    "arn_formats": [
     "arn:${Partition}:route53:::trafficpolicy/${Id}"
    ]
   },
   "route53:trafficpolicyinstance": {
    "arn_formats": [
     "arn:${Partition}:route53:::trafficpolicyinstance/${Id}"
    ]
   },
   "route53:vpc": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:vpc/${VpcId}"
    ]
   },
   "route53profiles:profile": {
    "arn_formats": [
     "arn:${Partition}:route53profiles:${Region}:${Account}:profile/${ResourceId}"
    ]
   },
   "route53profiles:profile-association": {
    "arn_formats": [
     "arn:${Partition}:route53profiles:${Region}:${Account}:profile-association/${ResourceId}"
    ]
   },
   "route53resolver:firewall-config": {
    "arn_formats": [
     "arn:${Partition}:route53resolver:${Region}:${Account}:firewall-config/${ResourceId}"
    ]
   },
   "route53resolver:firewall-domain-list": {
    "arn_formats": [
     "arn:${Partition}:route53resolver:${Region}:${Account}:firewall-domain-list/${ResourceId}"
    ]
   },
   "route53resolver:firewall-rule-group": {
    "arn_formats": [
     "arn:${Partition}:route53resolver:${Region}:${Account}:firewall-rule-group/${ResourceId}"
    ]
   },
   "route53resolver:firewall-rule-group-association": {
    "arn_formats": [
     "arn:${Partition}:route53resolver:${Region}:${Account}:firewall-rule-group-association/${ResourceId}"
    ]
   },
   "route53resolver:outpost-resolver": {
    "arn_formats": [
     "arn:${Partition}:route53resolver:${Region}:${Account}:outpost-resolver/${ResourceId}"
    ]
   },
   "route53resolver:resolver-config": {
    "arn_formats": [
     "arn:${Partition}:route53resolver:${Region}:${Account}:resolver-config/${ResourceId}"
    ]
   },
   "route53resolver:resolver-dnssec-config": {
    "arn_formats": [
     "arn:${Partition}:route53resolver:${Region}:${Account}:resolver-dnssec-config/${ResourceId}"
    ]
   },
   "route53resolver:resolver-endpoint": {
    "arn_formats": [
     "arn:${Partition}:route53resolver:${Region}:${Account}:resolver-endpoint/${ResourceId}"
    ]
   },
   "route53resolver:resolver-query-log-config": {
    "arn_formats": [
     "arn:${Partition}:route53resolver:${Region}:${Account}:resolver-query-log-config/${ResourceId}"
    ]
   },
   "route53resolver:resolver-rule": {
    "arn_formats": [
     "arn:${Partition}:route53resolver:${Region}:${Account}:resolver-rule/${ResourceId}"
    ]
   },
   "rum:AppMonitorResource": {
    "arn_formats": [
     "arn:${Partition}:rum:${Region}:${Account}:appmonitor/${Name}"
    ]
   },
   "s3-object-lambda:objectlambdaaccesspoint": {
    "arn_formats": [
     "arn:${Partition}:s3-object-lambda:${Region}:${Account}:accesspoint/${AccessPointName}"
    ]
   },
   "s3-outposts:accesspoint": {
    "arn_formats": [
     "arn:${Partition}:s3-outposts:${Region}:${Account}:outpost/${OutpostId}/accesspoint/${AccessPointName}"
    ]
   },
   "s3-outposts:bucket": {
    "arn_formats": [
     "arn:${Partition}:s3-outposts:${Region}:${Account}:outpost/${OutpostId}/bucket/${BucketName}"
    ]
   },
   "s3-outposts:endpoint": {
    "arn_formats": [
     "arn:${Partition}:s3-outposts:${Region}:${Account}:outpost/${OutpostId}/endpoint/${EndpointId}"
    ]
   },
   "s3-outposts:object": {
    "arn_formats": [
     "arn:${Partition}:s3-outposts:${Region}:${Account}:outpost/${OutpostId}/bucket/${BucketName}/object/${ObjectName}"
    ]
   },
   "s3:accessgrant": {
    "arn_formats": [
     "arn:${Partition}:s3:${Region}:${Account}:access-grants/default/grant/${Token}"
    ]
   },
   "s3:accessgrantsinstance": {
    "arn_formats": [
     "arn:${Partition}:s3:${Region}:${Account}:access-grants/default"
    ]
   },
   "s3:accessgrantslocation": {
    "arn_formats": [
     "arn:${Partition}:s3:${Region}:${Account}:access-grants/default/location/${Token}"
    ]
   },
   "s3:accesspoint": {
    "arn_formats": [
     "arn:${Partition}:s3:${Region}:${Account}:accesspoint/${AccessPointName}"
    ]
   },
   "s3:bucket": {
    "arn_formats": [
     "arn:${Partition}:s3:::${BucketName}"
    ]
   },
   "s3:job": {
    "arn_formats": [
     "arn:${Partition}:s3:${Region}:${Account}:job/${JobId}"
    ]
   },
   "s3:multiregionaccesspoint": {
    "arn_formats": [
     "arn:${Partition}:s3::${Account}:accesspoint/${AccessPointAlias}"
    ]
   },
   "s3:multiregionaccesspointrequestarn": {
    "arn_formats": [
     "arn:${Partition}:s3:us-west-2:${Account}:async-request/mrap/${Operation}/${Token}"
    ]
   },
   "s3:object": {
    "arn_formats": [
     "arn:${Partition}:s3:::${BucketName}/${ObjectName}"
    ]
   },
   "s3:objectlambdaaccesspoint": {
    "arn_formats": [
     "arn:${Partition}:s3-object-lambda:${Region}:${Account}:accesspoint/${AccessPointName}"
    ]
   },
   "s3:storagelensconfiguration": {
    "arn_formats": [
     "arn:${Partition}:s3:${Region}:${Account}:storage-lens/${ConfigId}"
    ]
   },
   "s3:storagelensgroup": {
    "arn_formats": [
     "arn:${Partition}:s3:${Region}:${Account}:storage-lens-group/${Name}"
    ]
   },
   "s3express:bucket": {
    "arn_formats": [
     "arn:${Partition}:s3express:${Region}:${Account}:bucket/${BucketName}"
    ]
   },
   "s3tables:Table": {
    "arn_formats": [
     "arn:${Partition}:s3tables:${Region}:${Account}:bucket/${TableBucketName}/table/${TableID}"
    ]
   },
   "s3tables:TableBucket": {
    "arn_formats": [
     "arn:${Partition}:s3tables:${Region}:${Account}:bucket/${TableBucketName}"
    ]
   },
   "sagemaker-geospatial:EarthObservationJob": {
    "arn_formats": [
     "arn:${Partition}:sagemaker-geospatial:${Region}:${Account}:earth-observation-job/${JobID}"
    ]
   },
   "sagemaker-geospatial:RasterDataCollection": {
    "arn_formats": [
     "arn:${Partition}:sagemaker-geospatial:${Region}:${Account}:raster-data-collection/${CollectionID}"
    ]
   },
   "sagemaker-geospatial:VectorEnrichmentJob": {
    "arn_formats": [
     "arn:${Partition}:sagemaker-geospatial:${Region}:${Account}:vector-enrichment-job/${JobID}"
    ]
   },
   "sagemaker-mlflow:mlflow-tracking-server": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:mlflow-tracking-server/${MlflowTrackingServerName}"
    ]
   },
   "sagemaker:action": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:action/${ActionName}"
    ]
   },
   "sagemaker:algorithm": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:algorithm/${AlgorithmName}"
    ]
   },
   "sagemaker:app": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:app/${DomainId}/${UserProfileName}/${AppType}/${AppName}"
    ]
   },
   "sagemaker:app-image-config": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:app-image-config/${AppImageConfigName}"
    ]
   },
   "sagemaker:artifact": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:artifact/${HashOfArtifactSource}"
    ]
   },
   "sagemaker:automl-job": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:automl-job/${AutoMLJobJobName}"
    ]
   },
   "sagemaker:cluster": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:cluster/${ClusterId}"
    ]
   },
   "sagemaker:cluster-scheduler-config": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:cluster-scheduler-config/${ClusterSchedulerConfigId}"
    ]
   },
   "sagemaker:code-repository": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:code-repository/${CodeRepositoryName}"
    ]
   },
   "sagemaker:compilation-job": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:compilation-job/${CompilationJobName}"
    ]
   },
   "sagemaker:compute-quota": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:compute-quota/${ComputeQuotaId}"
    ]
   },
   "sagemaker:context": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:context/${ContextName}"
    ]
   },
   "sagemaker:data-quality-job-definition": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:data-quality-job-definition/${DataQualityJobDefinitionName}"
    ]
   },
   "sagemaker:device": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:device-fleet/${DeviceFleetName}/device/${DeviceName}"
    ]
   },
   "sagemaker:device-fleet": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:device-fleet/${DeviceFleetName}"
    ]
   },
   "sagemaker:domain": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:domain/${DomainId}"
    ]
   },
   "sagemaker:edge-deployment-plan": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:edge-deployment/${EdgeDeploymentPlanName}"
    ]
   },
   "sagemaker:edge-packaging-job": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:edge-packaging-job/${EdgePackagingJobName}"
    ]
   },
   "sagemaker:endpoint": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:endpoint/${EndpointName}"
    ]
   },
   "sagemaker:endpoint-config": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:endpoint-config/${EndpointConfigName}"
    ]
   },
   "sagemaker:experiment": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:experiment/${ExperimentName}"
    ]
   },
   "sagemaker:experiment-trial": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:experiment-trial/${TrialName}"
    ]
   },
   "sagemaker:experiment-trial-component": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:experiment-trial-component/${TrialComponentName}"
    ]
   },
   "sagemaker:feature-group": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:feature-group/${FeatureGroupName}"
    ]
   },
   "sagemaker:flow-definition": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:flow-definition/${FlowDefinitionName}"
    ]
   },
   "sagemaker:hub": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:hub/${HubName}"
    ]
   },
   "sagemaker:hub-content": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:hub-content/${HubName}/${HubContentType}/${HubContentName}"
    ]
   },
   "sagemaker:human-loop": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:human-loop/${HumanLoopName}"
    ]
   },
   "sagemaker:human-task-ui": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:human-task-ui/${HumanTaskUiName}"
    ]
   },
   "sagemaker:hyper-parameter-tuning-job": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:hyper-parameter-tuning-job/${HyperParameterTuningJobName}"
    ]
   },
   "sagemaker:image": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:image/${ImageName}"
    ]
   },
   "sagemaker:image-version": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:image-version/${ImageName}/${Version}"
    ]
   },
   "sagemaker:inference-component": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:inference-component/${InferenceComponentName}"
    ]
   },
   "sagemaker:inference-experiment": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:inference-experiment/${InferenceExperimentName}"
    ]
   },
   "sagemaker:inference-recommendations-job": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:inference-recommendations-job/${InferenceRecommendationsJobName}"
    ]
   },
   "sagemaker:labeling-job": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:labeling-job/${LabelingJobName}"
    ]
   },
   "sagemaker:lineage-group": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:lineage-group/${LineageGroupName}"
    ]
   },
   "sagemaker:mlflow-tracking-server": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:mlflow-tracking-server/${MlflowTrackingServerName}"
    ]
   },
   "sagemaker:model": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:model/${ModelName}"
    ]
   },
   "sagemaker:model-bias-job-definition": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:model-bias-job-definition/${ModelBiasJobDefinitionName}"
    ]
   },
   "sagemaker:model-card": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:model-card/${ModelCardName}"
    ]
   },
   "sagemaker:model-card-export-job": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:model-card/${ModelCardName}/export-job/${ExportJobName}"
    ]
   },
   "sagemaker:model-explainability-job-definition": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:model-explainability-job-definition/${ModelExplainabilityJobDefinitionName}"
    ]
   },
   "sagemaker:model-package": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:model-package/${ModelPackageName}"
    ]
   },
   "sagemaker:model-package-group": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:model-package-group/${ModelPackageGroupName}"
    ]
   },
   "sagemaker:model-quality-job-definition": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:model-quality-job-definition/${ModelQualityJobDefinitionName}"
    ]
   },
   "sagemaker:monitoring-schedule": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:monitoring-schedule/${MonitoringScheduleName}"
    ]
   },
   "sagemaker:monitoring-schedule-alert": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:monitoring-schedule/${MonitoringScheduleName}/alert/${MonitoringScheduleAlertName}"
    ]
   },
   "sagemaker:notebook-instance": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:notebook-instance/${NotebookInstanceName}"
    ]
   },
   "sagemaker:notebook-instance-lifecycle-config": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:notebook-instance-lifecycle-config/${NotebookInstanceLifecycleConfigName}"
    ]
   },
   "sagemaker:optimization-job": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:optimization-job/${OptimizationJobName}"
    ]
   },
   "sagemaker:partner-app": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:partner-app/${AppId}"
    ]
   },
   "sagemaker:pipeline": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:pipeline/${PipelineName}"
    ]
   },
   "sagemaker:pipeline-execution": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:pipeline/${PipelineName}/execution/${RandomString}"
    ]
   },
   "sagemaker:processing-job": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:processing-job/${ProcessingJobName}"
    ]
   },
   "sagemaker:project": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:project/${ProjectName}"
    ]
   },
   "sagemaker:reserved-capacity": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:reserved-capacity/${RandomString}"
    ]
   },
   "sagemaker:sagemaker-catalog": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:sagemaker-catalog/${ResourceCatalogName}"
    ]
   },
   "sagemaker:shared-model": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:shared-model/${SharedModelId}"
    ]
   },
   "sagemaker:shared-model-event": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:shared-model-event/${EventId}"
    ]
   },
   "sagemaker:space": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:space/${DomainId}/${SpaceName}"
    ]
   },
   "sagemaker:studio-lifecycle-config": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:studio-lifecycle-config/${StudioLifecycleConfigName}"
    ]
   },
   "sagemaker:training-job": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:training-job/${TrainingJobName}"
    ]
   },
   "sagemaker:training-plan": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:training-plan/${TrainingPlanName}"
    ]
   },
   "sagemaker:transform-job": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:transform-job/${TransformJobName}"
    ]
   },
   "sagemaker:user-profile": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:user-profile/${DomainId}/${UserProfileName}"
    ]
   },
   "sagemaker:workforce": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:workforce/${WorkforceName}"
    ]
   },
   "sagemaker:workteam": {
    "arn_formats": [
     "arn:${Partition}:sagemaker:${Region}:${Account}:workteam/${WorkteamName}"
    ]
   },
   "savingsplans:savingsplan": {
    "arn_formats": [
     "arn:${Partition}:savingsplans::${Account}:savingsplan/${ResourceId}"
    ]
   },
   "scheduler:schedule": {
    "arn_formats": [
     "arn:${Partition}:scheduler:${Region}:${Account}:schedule/${GroupName}/${ScheduleName}"
    ]
   },
   "scheduler:schedule-group": {
    "arn_formats": [
     "arn:${Partition}:scheduler:${Region}:${Account}:schedule-group/${GroupName}"
    ]
   },
   "schemas:discoverer": {
    "arn_formats": [
     "arn:${Partition}:schemas:${Region}:${Account}:discoverer/${DiscovererId}"
    ]
   },
   "schemas:registry": {
    "arn_formats": [
     "arn:${Partition}:schemas:${Region}:${Account}:registry/${RegistryName}"
    ]
   },
   "schemas:schema": {
    "arn_formats": [
     "arn:${Partition}:schemas:${Region}:${Account}:schema/${RegistryName}/${SchemaName}"
    ]
   },
   "scn:bill-of-materials-import-job": {
    "arn_formats": [
     "arn:${Partition}:scn:${Region}:${Account}:instance/${InstanceId}/bill-of-materials-import-job/${JobId}"
    ]
   },
   "scn:data-integration-flow": {
    "arn_formats": [
     "arn:${Partition}:scn:${Region}:${Account}:instance/${InstanceId}/data-integration-flows/${FlowName}"
    ]
   },
   "scn:dataset": {
    "arn_formats": [
     "arn:${Partition}:scn:${Region}:${Account}:instance/${InstanceId}/namespaces/${Namespace}/datasets/${DatasetName}"
    ]
   },
   "scn:instance": {
    "arn_formats": [
     "arn:${Partition}:scn:${Region}:${Account}:instance/${InstanceId}"
    ]
   },
   "sdb:domain": {
    "arn_formats": [
     "arn:${Partition}:sdb:${Region}:${Account}:domain/${DomainName}"
    ]
   },
   "secretsmanager:Secret": {
    "arn_formats": [
     "arn:${Partition}:secretsmanager:${Region}:${Account}:secret:${SecretId}"
    ]
   },
   "security-ir:case": {
    "arn_formats": [
     "arn:${Partition}:security-ir:${Region}:${Account}:case/${CaseId}"
    ]
   },
   "security-ir:membership": {
    "arn_formats": [
     "arn:${Partition}:security-ir:${Region}:${Account}:membership/${MembershipId}"
    ]
   },
   "securityhub:automation-rule": {
    "arn_formats": [
     "arn:${Partition}:securityhub:${Region}:${Account}:automation-rule/${AutomationRuleId}"
    ]
   },
   "securityhub:configuration-policy": {
    "arn_formats": [
     "arn:${Partition}:securityhub:${Region}:${Account}:configuration-policy/${ConfigurationPolicyId}"
    ]
   },
   "securityhub:finding-aggregator": {
    "arn_formats": [
     "arn:${Partition}:securityhub:${Region}:${Account}:finding-aggregator/${FindingAggregatorId}"
    ]
   },
   "securityhub:hub": {
    "arn_formats": [
     "arn:${Partition}:securityhub:${Region}:${Account}:hub/default"
    ]
   },
   "securityhub:product": {
    "arn_formats": [
     "arn:${Partition}:securityhub:${Region}:${Account}:product/${Company}/${ProductId}"
    ]
   },
   "securitylake:data-lake": {
    "arn_formats": [
     "arn:${Partition}:securitylake:${Region}:${Account}:data-lake/default"
    ]
   },
   "securitylake:subscriber": {
    "arn_formats": [
     "arn:${Partition}:securitylake:${Region}:${Account}:subscriber/${SubscriberId}"
    ]
   },
   "serverlessrepo:applications": {
    "arn_formats": [
     "arn:${Partition}:serverlessrepo:${Region}:${Account}:applications/${ResourceId}"
    ]
   },
   "servicecatalog:Application": {
    "arn_formats": [
     "arn:${Partition}:servicecatalog:${Region}:${Account}:/applications/${ApplicationId}"
    ]
   },
   "servicecatalog:AttributeGroup": {
    "arn_formats": [
     "arn:${Partition}:servicecatalog:${Region}:${Account}:/attribute-groups/${AttributeGroupId}"
    ]
   },
   "servicecatalog:Portfolio": {
    "arn_formats": [
     "arn:${Partition}:catalog:${Region}:${Account}:portfolio/${PortfolioId}"
    ]
   },
   "servicecatalog:Product": {
    "arn_formats": [
     "arn:${Partition}:catalog:${Region}:${Account}:product/${ProductId}"
    ]
   },
   "servicediscovery:namespace": {
    "arn_formats": [
     "arn:${Partition}:servicediscovery:${Region}:${Account}:namespace/${NamespaceId}"
    ]
   },
   "servicediscovery:service": {
    "arn_formats": [
     "arn:${Partition}:servicediscovery:${Region}:${Account}:service/${ServiceId}"
    ]
   },
   "servicequotas:quota": {
    "arn_formats": [
     "arn:${Partition}:servicequotas:${Region}:${Account}:${ServiceCode}/${QuotaCode}"
    ]
   },
   "ses:addon-instance": {
    "arn_formats": [
     "arn:${Partition}:ses:${Region}:${Account}:addon-instance/${AddonInstanceId}"
    ]
   },
   "ses:addon-subscription": {
    "arn_formats": [
     "arn:${Partition}:ses:${Region}:${Account}:addon-subscription/${AddonSubscriptionId}"
    ]
   },
   "ses:configuration-set": {
    "arn_formats": [
     "arn:${Partition}:ses:${Region}:${Account}:configuration-set/${ConfigurationSetName}"
    ]
   },
   "ses:contact-list": {
    "arn_formats": [
     "arn:${Partition}:ses:${Region}:${Account}:contact-list/${ContactListName}"
    ]
   },
   "ses:custom-verification-email-template": {
    "arn_formats": [
     "arn:${Partition}:ses:${Region}:${Account}:custom-verification-email-template/${TemplateName}"
    ]
   },
   "ses:dedicated-ip-pool": {
    "arn_formats": [
     "arn:${Partition}:ses:${Region}:${Account}:dedicated-ip-pool/${DedicatedIPPool}"
    ]
   },
   "ses:deliverability-test-report": {
    "arn_formats": [
     "arn:${Partition}:ses:${Region}:${Account}:deliverability-test-report/${ReportId}"
    ]
   },
   "ses:export-job": {
    "arn_formats": [
     "arn:${Partition}:ses:${Region}:${Account}:export-job/${ExportJobId}"
    ]
   },
   "ses:identity": {
    "arn_formats": [
     "arn:${Partition}:ses:${Region}:${Account}:identity/${IdentityName}"
    ]
   },
   "ses:import-job": {
    "arn_formats": [
     "arn:${Partition}:ses:${Region}:${Account}:import-job/${ImportJobId}"
    ]
   },
   "ses:mailmanager-address-list": {
    "arn_formats": [
     "arn:${Partition}:ses:${Region}:${Account}:mailmanager-address-list/${AddressListId}"
    ]
   },
   "ses:mailmanager-archive": {
    "arn_formats": [
     "arn:${Partition}:ses:${Region}:${Account}:mailmanager-archive/${ArchiveId}"
    ]
   },
   "ses:mailmanager-ingress-point": {
    "arn_formats": [
     "arn:${Partition}:ses:${Region}:${Account}:mailmanager-ingress-point/${IngressPointId}"
    ]
   },
   "ses:mailmanager-rule-set": {
    "arn_formats": [
     "arn:${Partition}:ses:${Region}:${Account}:mailmanager-rule-set/${RuleSetId}"
    ]
   },
   "ses:mailmanager-smtp-relay": {
    "arn_formats": [
     "arn:${Partition}:ses:${Region}:${Account}:mailmanager-smtp-relay/${RelayId}"
    ]
   },
   "ses:mailmanager-traffic-policy": {
    "arn_formats": [
     "arn:${Partition}:ses:${Region}:${Account}:mailmanager-traffic-policy/${TrafficPolicyId}"
    ]
   },
   "ses:multi-region-endpoint": {
    "arn_formats": [
     "arn:${Partition}:ses:${Region}:${Account}:multi-region-endpoint/${EndpointName}"
    ]
   },
   "ses:template": {
    "arn_formats": [
     "arn:${Partition}:ses:${Region}:${Account}:template/${TemplateName}"
    ]
   },
   "shield:attack": {
    "arn_formats": [
     "arn:${Partition}:shield::${Account}:attack/${Id}"
    ]
   },
   "shield:protection": {
    "arn_formats": [
     "arn:${Partition}:shield::${Account}:protection/${Id}"
    ]
   },
   "shield:protection-group": {
    "arn_formats": [
     "arn:${Partition}:shield::${Account}:protection-group/${Id}"
    ]
   },
   "signer:signing-job": {
    "arn_formats": [
     "arn:${Partition}:signer:${Region}:${Account}:/signing-jobs/${JobId}"
    ]
   },
   "signer:signing-profile": {
    "arn_formats": [
     "arn:${Partition}:signer:${Region}:${Account}:/signing-profiles/${ProfileName}"
    ]
   },
   "simspaceweaver:Simulation": {
    "arn_formats": [
     "arn:${Partition}:simspaceweaver:${Region}:${Account}:simulation/${SimulationName}"
    ]
   },
   "sms-voice:ConfigurationSet": {
    "arn_formats": [
     "arn:${Partition}:sms-voice:${Region}:${Account}:configuration-set/${ConfigurationSetName}"
    ]
   },
   "sms-voice:Message": {
    "arn_formats": [
     "arn:${Partition}:sms-voice:${Region}:${Account}:message/${MessageId}"
    ]
   },
   "sms-voice:OptOutList": {
    "arn_formats": [
     "arn:${Partition}:sms-voice:${Region}:${Account}:opt-out-list/${OptOutListName}"
    ]
   },
   "sms-voice:PhoneNumber": {
    "arn_formats": [
     "arn:${Partition}:sms-voice:${Region}:${Account}:phone-number/${PhoneNumberId}"
    ]
   },
   "sms-voice:Pool": {
    "arn_formats": [
     "arn:${Partition}:sms-voice:${Region}:${Account}:pool/${PoolId}"
    ]
   },
   "sms-voice:ProtectConfiguration": {
    "arn_formats": [
     "arn:${Partition}:sms-voice:${Region}:${Account}:protect-configuration/${ProtectConfigurationId}"
    ]
   },
   "sms-voice:Registration": {
    "arn_formats": [
     "arn:${Partition}:sms-voice:${Region}:${Account}:registration/${RegistrationId}"
    ]
   },
   "sms-voice:RegistrationAttachment": {
    "arn_formats": [
     "arn:${Partition}:sms-voice:${Region}:${Account}:registration-attachment/${RegistrationAttachmentId}"
    ]
   },
   "sms-voice:SenderId": {
    "arn_formats": [
     "arn:${Partition}:sms-voice:${Region}:${Account}:sender-id/${SenderId}/${IsoCountryCode}"
    ]
   },
   "sms-voice:VerifiedDestinationNumber": {
    "arn_formats": [
     "arn:${Partition}:sms-voice:${Region}:${Account}:verified-destination-number/${VerifiedDestinationNumberId}"
    ]
   },
   "snow-device-management:managed-device": {
    "arn_formats": [
     "arn:${Partition}:snow-device-management:${Region}:${Account}:managed-device/${ResourceId}"
    ]
   },
   "snow-device-management:task": {
    "arn_formats": [
     "arn:${Partition}:snow-device-management:${Region}:${Account}:task/${ResourceId}"
    ]
   },
   "sns:topic": {
    "arn_formats": [
     "arn:${Partition}:sns:${Region}:${Account}:${TopicName}"
    ]
   },
   "social-messaging:phone-number-id": {
    "arn_formats": [
     "arn:${Partition}:social-messaging:${Region}:${Account}:phone-number-id/${OriginationPhoneNumberId}"
    ]
   },
   "social-messaging:waba": {
    "arn_formats": [
     "arn:${Partition}:social-messaging:${Region}:${Account}:waba/${WabaId}"
    ]
   },
   "sqlworkbench:chart": {
    "arn_formats": [
     "arn:${Partition}:sqlworkbench:${Region}:${Account}:chart/${ResourceId}"
    ]
   },
   "sqlworkbench:connection": {
    "arn_formats": [
     "arn:${Partition}:sqlworkbench:${Region}:${Account}:connection/${ResourceId}"
    ]
   },
   "sqlworkbench:notebook": {
    "arn_formats": [
     "arn:${Partition}:sqlworkbench:${Region}:${Account}:notebook/${ResourceId}"
    ]
   },
   "sqlworkbench:query": {
    "arn_formats": [
     "arn:${Partition}:sqlworkbench:${Region}:${Account}:query/${ResourceId}"
    ]
   },
   "sqs:queue": {
    "arn_formats": [
     "arn:${Partition}:sqs:${Region}:${Account}:${QueueName}"
    ]
   },
   "ssm-contacts:contact": {
    "arn_formats": [
     "arn:${Partition}:ssm-contacts:${Region}:${Account}:contact/${ContactAlias}"
    ]
   },
   "ssm-contacts:contactchannel": {
    "arn_formats": [
     "arn:${Partition}:ssm-contacts:${Region}:${Account}:contactchannel/${ContactAlias}/${ContactChannelId}"
    ]
   },
   "ssm-contacts:engagement": {
    "arn_formats": [
     "arn:${Partition}:ssm-contacts:${Region}:${Account}:engagement/${ContactAlias}/${EngagementId}"
    ]
   },
   "ssm-contacts:page": {
    "arn_formats": [
     "arn:${Partition}:ssm-contacts:${Region}:${Account}:page/${ContactAlias}/${PageId}"
    ]
   },
   "ssm-contacts:rotation": {
    "arn_formats": [
     "arn:${Partition}:ssm-contacts:${Region}:${Account}:rotation/${RotationId}"
    ]
   },
   "ssm-incidents:incident-record": {
    "arn_formats": [
     "arn:${Partition}:ssm-incidents::${Account}:incident-record/${ResponsePlan}/${IncidentRecord}"
    ]
   },
   "ssm-incidents:replication-set": {
    "arn_formats": [
     "arn:${Partition}:ssm-incidents::${Account}:replication-set/${ReplicationSet}"
    ]
   },
   "ssm-incidents:response-plan": {
    "arn_formats": [
     "arn:${Partition}:ssm-incidents::${Account}:response-plan/${ResponsePlan}"
    ]
   },
   "ssm-quicksetup:configuration-manager": {
    "arn_formats": [
     "arn:${Partition}:ssm-quicksetup:${Region}:${Account}:configuration-manager/${ConfigurationManagerId}"
    ]
   },
   "ssm-sap:application": {
    "arn_formats": [
     "arn:${Partition}:ssm-sap:${Region}:${Account}:${ApplicationType}/${ApplicationId}"
    ]
   },
   "ssm-sap:component": {
    "arn_formats": [
     "arn:${Partition}:ssm-sap:${Region}:${Account}:${ApplicationType}/${ApplicationId}/COMPONENT/${ComponentId}"
    ]
   },
   "ssm-sap:database": {
    "arn_formats": [
     "arn:${Partition}:ssm-sap:${Region}:${Account}:${ApplicationType}/${ApplicationId}/DB/${DatabaseId}"
    ]
   },
   "ssm:association": {
    "arn_formats": [
     "arn:${Partition}:ssm:${Region}:${Account}:association/${AssociationId}"
    ]
   },
   "ssm:automation-definition": {
    "arn_formats": [
     "arn:${Partition}:ssm:${Region}:${Account}:automation-definition/${AutomationDefinitionName}:${VersionId}"
    ]
   },
   "ssm:automation-execution": {
    "arn_formats": [
     "arn:${Partition}:ssm:${Region}:${Account}:automation-execution/${AutomationExecutionId}"
    ]
   },
   "ssm:bucket": {
    "arn_formats": [
     "arn:${Partition}:s3:::${BucketName}"
    ]
   },
   "ssm:document": {
    "arn_formats": [
     "arn:${Partition}:ssm:${Region}:${Account}:document/${DocumentName}"
    ]
   },
   "ssm:iam-role": {
    "arn_formats": [
     "arn:${Partition}:iam::${Account}:role/${RoleName}"
    ]
   },
   "ssm:instance": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:instance/${InstanceId}"
    ]
   },
   "ssm:maintenancewindow": {
    "arn_formats": [
     "arn:${Partition}:ssm:${Region}:${Account}:maintenancewindow/${ResourceId}"
    ]
   },
   "ssm:managed-instance": {
    "arn_formats": [
     "arn:${Partition}:ssm:${Region}:${Account}:managed-instance/${InstanceId}"
    ]
   },
   "ssm:managed-instance-inventory": {
    "arn_formats": [
     "arn:${Partition}:ssm:${Region}:${Account}:managed-instance-inventory/${InstanceId}"
    ]
   },
   "ssm:opsitem": {
    "arn_formats": [
     "arn:${Partition}:ssm:${Region}:${Account}:opsitem/${ResourceId}"
    ]
   },
   "ssm:opsitemgroup": {
    "arn_formats": [
     "arn:${Partition}:ssm:${Region}:${Account}:opsitemgroup/default"
    ]
   },
   "ssm:opsmetadata": {
    "arn_formats": [
     "arn:${Partition}:ssm:${Region}:${Account}:opsmetadata/${ResourceId}"
    ]
   },
   "ssm:parameter": {
    "arn_formats": [
     "arn:${Partition}:ssm:${Region}:${Account}:parameter/${ParameterNameWithoutLeadingSlash}"
    ]
   },
   "ssm:patchbaseline": {
    "arn_formats": [
     "arn:${Partition}:ssm:${Region}:${Account}:patchbaseline/${PatchBaselineIdResourceId}"
    ]
   },
   "ssm:resourcedatasync": {
    "arn_formats": [
     "arn:${Partition}:ssm:${Region}:${Account}:resource-data-sync/${SyncName}"
    ]
   },
   "ssm:servicesetting": {
    "arn_formats": [
     "arn:${Partition}:ssm:${Region}:${Account}:servicesetting/${ResourceId}"
    ]
   },
   "ssm:session": {
    "arn_formats": [
     "arn:${Partition}:ssm:${Region}:${Account}:session/${SessionId}"
    ]
   },
   "ssm:task": {
    "arn_formats": [
     "arn:${Partition}:ecs:${Region}:${Account}:task/${TaskId}"
    ]
   },
   "ssm:windowtarget": {
    "arn_formats": [
     "arn:${Partition}:ssm:${Region}:${Account}:windowtarget/${WindowTargetId}"
    ]
   },
   "ssm:windowtask": {
    "arn_formats": [
     "arn:${Partition}:ssm:${Region}:${Account}:windowtask/${WindowTaskId}"
    ]
   },
   "sso-oauth:Application": {
    "arn_formats": [
     "arn:${Partition}:sso::${AccountId}:application/${InstanceId}/${ApplicationId}"
    ]
   },
   "sso:Account": {
    "arn_formats": [
     "arn:${Partition}:sso:::account/${AccountId}"
    ]
   },
   "sso:Application": {
    "arn_formats": [
     "arn:${Partition}:sso::${AccountId}:application/${InstanceId}/${ApplicationId}"
    ]
   },
   "sso:ApplicationProvider": {
    "arn_formats": [
     "arn:${Partition}:sso::aws:applicationProvider/${ApplicationProviderId}"
    ]
   },
   "sso:Instance": {
    "arn_formats": [
     "arn:${Partition}:sso:::instance/${InstanceId}"
    ]
   },
   "sso:PermissionSet": {
    "arn_formats": [
     "arn:${Partition}:sso:::permissionSet/${InstanceId}/${PermissionSetId}"
    ]
   },
   "sso:TrustedTokenIssuer": {
    "arn_formats": [
     "arn:${Partition}:sso::${AccountId}:trustedTokenIssuer/${InstanceId}/${TrustedTokenIssuerId}"
    ]
   },
   "states:activity": {
    "arn_formats": [
     "arn:${Partition}:states:${Region}:${Account}:activity:${ActivityName}"
    ]
   },
   "states:execution": {
    "arn_formats": [
     "arn:${Partition}:states:${Region}:${Account}:execution:${StateMachineName}:${ExecutionId}"
    ]
   },
   "states:express": {
    "arn_formats": [
     "arn:${Partition}:states:${Region}:${Account}:express:${StateMachineName}:${ExecutionId}:${ExpressId}"
    ]
   },
   "states:labelled execution": {
    "arn_formats": [
     "arn:${Partition}:states:${Region}:${Account}:execution:${StateMachineName}/${MapRunLabel}:${ExecutionId}"
    ]
   },
   "states:labelled express": {
    "arn_formats": [
     "arn:${Partition}:states:${Region}:${Account}:express:${StateMachineName}/${MapRunLabel}:${ExecutionId}:${ExpressId}"
    ]
   },
   "states:maprun": {
    "arn_formats": [
     "arn:${Partition}:states:${Region}:${Account}:mapRun:${StateMachineName}/${MapRunLabel}:${MapRunId}"
    ]
   },
   "states:statemachine": {
    "arn_formats": [
     "arn:${Partition}:states:${Region}:${Account}:stateMachine:${StateMachineName}"
    ]
   },
   "states:statemachinealias": {
    "arn_formats": [
     "arn:${Partition}:states:${Region}:${Account}:stateMachine:${StateMachineName}:${StateMachineAliasName}"
    ]
   },
   "states:statemachineversion": {
    "arn_formats": [
     "arn:${Partition}:states:${Region}:${Account}:stateMachine:${StateMachineName}:${StateMachineVersionId}"
    ]
   },
   "storagegateway:cache-report": {
    "arn_formats": [
     "arn:${Partition}:storagegateway:${Region}:${Account}:share/${ShareId}/cache-report/${CacheReportId}"
    ]
   },
   "storagegateway:device": {
    "arn_formats": [
     "arn:${Partition}:storagegateway:${Region}:${Account}:gateway/${GatewayId}/device/${Vtldevice}"
    ]
   },
   "storagegateway:fs-association": {
    "arn_formats": [
     "arn:${Partition}:storagegateway:${Region}:${Account}:fs-association/${FsaId}"
    ]
   },
   "storagegateway:gateway": {
    "arn_formats": [
     "arn:${Partition}:storagegateway:${Region}:${Account}:gateway/${GatewayId}"
    ]
   },
   "storagegateway:share": {
    "arn_formats": [
     "arn:${Partition}:storagegateway:${Region}:${Account}:share/${ShareId}"
    ]
   },
   "storagegateway:tape": {
    "arn_formats": [
     "arn:${Partition}:storagegateway:${Region}:${Account}:tape/${TapeBarcode}"
    ]
   },
   "storagegateway:tapepool": {
    "arn_formats": [
     "arn:${Partition}:storagegateway:${Region}:${Account}:tapepool/${PoolId}"
    ]
   },
   "storagegateway:target": {
    "arn_formats": [
     "arn:${Partition}:storagegateway:${Region}:${Account}:gateway/${GatewayId}/target/${IscsiTarget}"
    ]
   },
   "storagegateway:volume": {
    "arn_formats": [
     "arn:${Partition}:storagegateway:${Region}:${Account}:gateway/${GatewayId}/volume/${VolumeId}"
    ]
   },
   "sts:role": {
    "arn_formats": [
     "arn:${Partition}:iam::${Account}:role/${RoleNameWithPath}"
    ]
   },
   "sts:root-user": {
    "arn_formats": [
     "arn:${Partition}:iam::${Account}:root"
    ]
   },
   "sts:self-session": {
    "arn_formats": [
     "arn:${Partition}:sts::${Account}:self"
    ]
   },
   "sts:user": {
    "arn_formats": [
     "arn:${Partition}:iam::${Account}:user/${UserNameWithPath}"
    ]
   },
   "swf:domain": {
    "arn_formats": [
     "arn:${Partition}:swf::${Account}:/domain/${DomainName}"
    ]
   },
   "synthetics:canary": {
    "arn_formats": [
     "arn:${Partition}:synthetics:${Region}:${Account}:canary:${CanaryName}"
    ]
   },
   "synthetics:group": {
    "arn_formats": [
     "arn:${Partition}:synthetics:${Region}:${Account}:group:${GroupId}"
    ]
   },
   "textract:adapter": {
    "arn_formats": [
     "arn:${Partition}:textract:${Region}:${Account}:/adapters/${AdapterId}"
    ]
   },
   "textract:adapterversion": {
    "arn_formats": [
     "arn:${Partition}:textract:${Region}:${Account}:/adapters/${AdapterId}/versions/${AdapterVersion}"
    ]
   },
   "thinclient:device": {
    "arn_formats": [
     "arn:${Partition}:thinclient:${Region}:${Account}:device/${DeviceId}"
    ]
   },
   "thinclient:environment": {
    "arn_formats": [
     "arn:${Partition}:thinclient:${Region}:${Account}:environment/${EnvironmentId}"
    ]
   },
   "thinclient:softwareset": {
    "arn_formats": [
     "arn:${Partition}:thinclient:${Region}:${Account}:softwareset/${SoftwareSetId}"
    ]
   },
   "timestream-influxdb:db-cluster": {
    "arn_formats": [
     "arn:${Partition}:timestream-influxdb:${Region}:${Account}:db-cluster/${DbClusterId}"
    ]
   },
   "timestream-influxdb:db-instance": {
    "arn_formats": [
     "arn:${Partition}:timestream-influxdb:${Region}:${Account}:db-instance/${DbInstanceIdentifier}"
    ]
   },
   "timestream-influxdb:db-parameter-group": {
    "arn_formats": [
     "arn:${Partition}:timestream-influxdb:${Region}:${Account}:db-parameter-group/${DbParameterGroupIdentifier}"
    ]
   },
   "timestream:database": {
    "arn_formats": [
     "arn:${Partition}:timestream:${Region}:${Account}:database/${DatabaseName}"
    ]
   },
   "timestream:scheduled-query": {
    "arn_formats": [
     "arn:${Partition}:timestream:${Region}:${Account}:scheduled-query/${ScheduledQueryName}"
    ]
   },
   "timestream:table": {
    "arn_formats": [
     "arn:${Partition}:timestream:${Region}:${Account}:database/${DatabaseName}/table/${TableName}"
    ]
   },
   "tnb:function-instance": {
    "arn_formats": [
     "arn:${Partition}:tnb:${Region}:${Account}:function-instance/${FunctionInstanceId}"
    ]
   },
   "tnb:function-package": {
    "arn_formats": [
     "arn:${Partition}:tnb:${Region}:${Account}:function-package/${FunctionPackageId}"
    ]
   },
   "tnb:network-instance": {
    "arn_formats": [
     "arn:${Partition}:tnb:${Region}:${Account}:network-instance/${NetworkInstanceId}"
    ]
   },
   "tnb:network-operation": {
    "arn_formats": [
     "arn:${Partition}:tnb:${Region}:${Account}:network-operation/${NetworkOperationId}"
    ]
   },
   "tnb:network-package": {
    "arn_formats": [
     "arn:${Partition}:tnb:${Region}:${Account}:network-package/${NetworkPackageId}"
    ]
   },
   "transcribe:callanalyticscategory": {
    "arn_formats": [
     "arn:${Partition}:transcribe:${Region}:${Account}:analytics-category/${CategoryName}"
    ]
   },
   "transcribe:callanalyticsjob": {
    "arn_formats": [
     "arn:${Partition}:transcribe:${Region}:${Account}:analytics/${JobName}"
    ]
   },
   "transcribe:languagemodel": {
    "arn_formats": [
     "arn:${Partition}:transcribe:${Region}:${Account}:language-model/${ModelName}"
    ]
   },
   "transcribe:medicalscribejob": {
    "arn_formats": [
     "arn:${Partition}:transcribe:${Region}:${Account}:medical-scribe-job/${JobName}"
    ]
   },
   "transcribe:medicaltranscriptionjob": {
    "arn_formats": [
     "arn:${Partition}:transcribe:${Region}:${Account}:medical-transcription-job/${JobName}"
    ]
   },
   "transcribe:medicalvocabulary": {
    "arn_formats": [
     "arn:${Partition}:transcribe:${Region}:${Account}:medical-vocabulary/${VocabularyName}"
    ]
   },
   "transcribe:transcriptionjob": {
    "arn_formats": [
     "arn:${Partition}:transcribe:${Region}:${Account}:transcription-job/${JobName}"
    ]
   },
   "transcribe:vocabulary": {
    "arn_formats": [
     "arn:${Partition}:transcribe:${Region}:${Account}:vocabulary/${VocabularyName}"
    ]
   },
   "transcribe:vocabularyfilter": {
    "arn_formats": [
     "arn:${Partition}:transcribe:${Region}:${Account}:vocabulary-filter/${VocabularyFilterName}"
    ]
   },
   "transfer:agreement": {
    "arn_formats": [
     "arn:${Partition}:transfer:${Region}:${Account}:agreement/${ServerId}/${AgreementId}"
    ]
   },
   "transfer:certificate": {
    "arn_formats": [
     "arn:${Partition}:transfer:${Region}:${Account}:certificate/${CertificateId}"
    ]
   },
   "transfer:connector": {
    "arn_formats": [
     "arn:${Partition}:transfer:${Region}:${Account}:connector/${ConnectorId}"
    ]
   },
   "transfer:host-key": {
    "arn_formats": [
     "arn:${Partition}:transfer:${Region}:${Account}:host-key/${ServerId}/${HostKeyId}"
    ]
   },
   "transfer:profile": {
    "arn_formats": [
     "arn:${Partition}:transfer:${Region}:${Account}:profile/${ProfileId}"
    ]
   },
   "transfer:server": {
    "arn_formats": [
     "arn:${Partition}:transfer:${Region}:${Account}:server/${ServerId}"
    ]
   },
   "transfer:user": {
    "arn_formats": [
     "arn:${Partition}:transfer:${Region}:${Account}:user/${ServerId}/${UserName}"
    ]
   },
   "transfer:webapp": {
    "arn_formats": [
     "arn:${Partition}:transfer:${Region}:${Account}:webapp/${WebAppId}"
    ]
   },
   "transfer:workflow": {
    "arn_formats": [
     "arn:${Partition}:transfer:${Region}:${Account}:workflow/${WorkflowId}"
    ]
   },
   "translate:parallel-data": {
    "arn_formats": [
     "arn:${Partition}:translate:${Region}:${Account}:parallel-data/${ResourceName}"
    ]
   },
   "translate:terminology": {
    "arn_formats": [
     "arn:${Partition}:translate:${Region}:${Account}:terminology/${ResourceName}"
    ]
   },
   "trustedadvisor:checks": {
    "arn_formats": [
     "arn:${Partition}:trustedadvisor:${Region}:${Account}:checks/${CategoryCode}/${CheckId}"
    ]
   },
   "ts:execution": {
    "arn_formats": [
     "arn:${Partition}:ts::${Account}:execution/${UserId}/${ToolId}/${ExecutionId}"
    ]
   },
   "ts:tool": {
    "arn_formats": [
     "arn:${Partition}:ts::aws:tool/${ToolId}"
    ]
   },
   "vendor-insights:DataSource": {
    "arn_formats": [
     "arn:${Partition}:vendor-insights:::data-source:${ResourceId}"
    ]
   },
   "vendor-insights:SecurityProfile": {
    "arn_formats": [
     "arn:${Partition}:vendor-insights:::security-profile:${ResourceId}"
    ]
   },
   "verifiedpermissions:policy-store": {
    "arn_formats": [
     "arn:${Partition}:verifiedpermissions::${Account}:policy-store/${PolicyStoreId}"
    ]
   },
   "voiceid:domain": {
    "arn_formats": [
     "arn:${Partition}:voiceid:${Region}:${Account}:domain/${DomainId}"
    ]
   },
   "vpc-lattice-svcs:Service": {
    "arn_formats": [
     "arn:${Partition}:vpc-lattice:${Region}:${Account}:service/${ServiceId}/${RequestPath}"
    ]
   },
   "vpc-lattice-svcs:TCP Service": {
    "arn_formats": [
     "arn:${Partition}:vpc-lattice:${Region}:${Account}:service/${ServiceId}"
    ]
   },
   "vpc-lattice:AccessLogSubscription": {
    "arn_formats": [
     "arn:${Partition}:vpc-lattice:${Region}:${Account}:accesslogsubscription/${AccessLogSubscriptionId}"
    ]
   },
   "vpc-lattice:Listener": {
    "arn_formats": [
     "arn:${Partition}:vpc-lattice:${Region}:${Account}:service/${ServiceId}/listener/${ListenerId}"
    ]
   },
   "vpc-lattice:ResourceConfiguration": {
    "arn_formats": [
     "arn:${Partition}:vpc-lattice:${Region}:${Account}:resourceconfiguration/${ResourceConfigurationId}"
    ]
   },
   "vpc-lattice:ResourceEndpointAssociation": {
    "arn_formats": [
     "arn:${Partition}:vpc-lattice:${Region}:${Account}:resourceendpointassociation/${ResourceEndpointAssociationId}"
    ]
   },
   "vpc-lattice:ResourceGateway": {
    "arn_formats": [
     "arn:${Partition}:vpc-lattice:${Region}:${Account}:resourcegateway/${ResourceGatewayId}"
    ]
   },
   "vpc-lattice:Rule": {
    "arn_formats": [
     "arn:${Partition}:vpc-lattice:${Region}:${Account}:service/${ServiceId}/listener/${ListenerId}/rule/${RuleId}"
    ]
   },
   "vpc-lattice:Service": {
    "arn_formats": [
     "arn:${Partition}:vpc-lattice:${Region}:${Account}:service/${ServiceId}"
    ]
   },
   "vpc-lattice:ServiceNetwork": {
    "arn_formats": [
     "arn:${Partition}:vpc-lattice:${Region}:${Account}:servicenetwork/${ServiceNetworkId}"
    ]
   },
   "vpc-lattice:ServiceNetworkResourceAssociation": {
    "arn_formats": [
     "arn:${Partition}:vpc-lattice:${Region}:${Account}:servicenetworkresourceassociation/${ServiceNetworkResourceAssociationId}"
    ]
   },
   "vpc-lattice:ServiceNetworkServiceAssociation": {
    "arn_formats": [
     "arn:${Partition}:vpc-lattice:${Region}:${Account}:servicenetworkserviceassociation/${ServiceNetworkServiceAssociationId}"
    ]
   },
   "vpc-lattice:ServiceNetworkVpcAssociation": {
    "arn_formats": [
     "arn:${Partition}:vpc-lattice:${Region}:${Account}:servicenetworkvpcassociation/${ServiceNetworkVpcAssociationId}"
    ]
   },
   "vpc-lattice:TargetGroup": {
    "arn_formats": [
     "arn:${Partition}:vpc-lattice:${Region}:${Account}:targetgroup/${TargetGroupId}"
    ]
   },
   "waf-regional:bytematchset": {
    "arn_formats": [
     "arn:${Partition}:waf-regional:${Region}:${Account}:bytematchset/${Id}"
    ]
   },
   "waf-regional:geomatchset": {
    "arn_formats": [
     "arn:${Partition}:waf-regional:${Region}:${Account}:geomatchset/${Id}"
    ]
   },
   "waf-regional:ipset": {
    "arn_formats": [
     "arn:${Partition}:waf-regional:${Region}:${Account}:ipset/${Id}"
    ]
   },
   "waf-regional:loadbalancer/app/": {
    "arn_formats": [
     "arn:${Partition}:elasticloadbalancing:${Region}:${Account}:loadbalancer/app/${LoadBalancerName}/${LoadBalancerId}"
    ]
   },
   "waf-regional:ratebasedrule": {
    "arn_formats": [
     "arn:${Partition}:waf-regional:${Region}:${Account}:ratebasedrule/${Id}"
    ]
   },
   "waf-regional:regexmatchset": {
    "arn_formats": [
     "arn:${Partition}:waf-regional:${Region}:${Account}:regexmatch/${Id}"
    ]
   },
   "waf-regional:regexpatternset": {
    "arn_formats": [
     "arn:${Partition}:waf-regional:${Region}:${Account}:regexpatternset/${Id}"
    ]
   },
   "waf-regional:rule": {
    "arn_formats": [
     "arn:${Partition}:waf-regional:${Region}:${Account}:rule/${Id}"
    ]
   },
   "waf-regional:rulegroup": {
    "arn_formats": [
     "arn:${Partition}:waf-regional:${Region}:${Account}:rulegroup/${Id}"
    ]
   },
   "waf-regional:sizeconstraintset": {
    "arn_formats": [
     "arn:${Partition}:waf-regional:${Region}:${Account}:sizeconstraintset/${Id}"
    ]
   },
   "waf-regional:sqlinjectionmatchset": {
    "arn_formats": [
     "arn:${Partition}:waf-regional:${Region}:${Account}:sqlinjectionset/${Id}"
    ]
   },
   "waf-regional:webacl": {
    "arn_formats": [
     "arn:${Partition}:waf-regional:${Region}:${Account}:webacl/${Id}"
    ]
   },
   "waf-regional:xssmatchset": {
    "arn_formats": [
     "arn:${Partition}:waf-regional:${Region}:${Account}:xssmatchset/${Id}"
    ]
   },
   "waf:bytematchset": {
    "arn_formats": [
     "arn:${Partition}:waf::${Account}:bytematchset/${Id}"
    ]
   },
   "waf:geomatchset": {
    "arn_formats": [
     "arn:${Partition}:waf::${Account}:geomatchset/${Id}"
    ]
   },
   "waf:ipset": {
    "arn_formats": [
     "arn:${Partition}:waf::${Account}:ipset/${Id}"
    ]
   },
   "waf:ratebasedrule": {
    "arn_formats": [
     "arn:${Partition}:waf::${Account}:ratebasedrule/${Id}"
    ]
   },
   "waf:regexmatchset": {
    "arn_formats": [
     "arn:${Partition}:waf::${Account}:regexmatch/${Id}"
    ]
   },
   "waf:regexpatternset": {
    "arn_formats": [
     "arn:${Partition}:waf::${Account}:regexpatternset/${Id}"
    ]
   },
   "waf:rule": {
    "arn_formats": [
     "arn:${Partition}:waf::${Account}:rule/${Id}"
    ]
   },
   "waf:rulegroup": {
    "arn_formats": [
     "arn:${Partition}:waf::${Account}:rulegroup/${Id}"
    ]
   },
   "waf:sizeconstraintset": {
    "arn_formats": [
     "arn:${Partition}:waf::${Account}:sizeconstraintset/${Id}"
    ]
   },
   "waf:sqlinjectionmatchset": {
    "arn_formats": [
     "arn:${Partition}:waf::${Account}:sqlinjectionset/${Id}"
    ]
   },
   "waf:webacl": {
    "arn_formats": [
     "arn:${Partition}:waf::${Account}:webacl/${Id}"
    ]
   },
   "waf:xssmatchset": {
    "arn_formats": [
     "arn:${Partition}:waf::${Account}:xssmatchset/${Id}"
    ]
   },
   "wafv2:apigateway": {
    "arn_formats": [
     "arn:${Partition}:apigateway:${Region}::/restapis/${ApiId}/stages/${StageName}"
    ]
   },
   "wafv2:apprunner": {
    "arn_formats": [
     "arn:${Partition}:apprunner:${Region}:${Account}:service/${ServiceName}/${ServiceId}"
    ]
   },
   "wafv2:appsync": {
    "arn_formats": [
     "arn:${Partition}:appsync:${Region}:${Account}:apis/${GraphQLAPIId}"
    ]
   },
   "wafv2:ipset": {
    "arn_formats": [
     "arn:${Partition}:wafv2:${Region}:${Account}:${Scope}/ipset/${Name}/${Id}"
    ]
   },
   "wafv2:loadbalancer/app/": {
    "arn_formats": [
     "arn:${Partition}:elasticloadbalancing:${Region}:${Account}:loadbalancer/app/${LoadBalancerName}/${LoadBalancerId}"
    ]
   },
   "wafv2:managedruleset": {
    "arn_formats": [
     "arn:${Partition}:wafv2:${Region}:${Account}:${Scope}/managedruleset/${Name}/${Id}"
    ]
   },
   "wafv2:regexpatternset": {
    "arn_formats": [
     "arn:${Partition}:wafv2:${Region}:${Account}:${Scope}/regexpatternset/${Name}/${Id}"
    ]
   },
   "wafv2:rulegroup": {
    "arn_formats": [
     "arn:${Partition}:wafv2:${Region}:${Account}:${Scope}/rulegroup/${Name}/${Id}"
    ]
   },
   "wafv2:userpool": {
    "arn_formats": [
     "arn:${Partition}:cognito-idp:${Region}:${Account}:userpool/${UserPoolId}"
    ]
   },
   "wafv2:verified-access-instance": {
    "arn_formats": [
     "arn:${Partition}:ec2:${Region}:${Account}:verified-access-instance/${VerifiedAccessInstanceId}"
    ]
   },
   "wafv2:webacl": {
    "arn_formats": [
     "arn:${Partition}:wafv2:${Region}:${Account}:${Scope}/webacl/${Name}/${Id}"
    ]
   },
   "wellarchitected:lens": {
    "arn_formats": [
     "arn:${Partition}:wellarchitected:${Region}:${Account}:lens/${ResourceId}"
    ]
   },
   "wellarchitected:profile": {
    "arn_formats": [
     "arn:${Partition}:wellarchitected:${Region}:${Account}:profile/${ResourceId}"
    ]
   },
   "wellarchitected:review-template": {
    "arn_formats": [
     "arn:${Partition}:wellarchitected:${Region}:${Account}:review-template/${ResourceId}"
    ]
   },
   "wellarchitected:workload": {
    "arn_formats": [
     "arn:${Partition}:wellarchitected:${Region}:${Account}:workload/${ResourceId}"
    ]
   },
   "wickr:network": {
    "arn_formats": [
     "arn:${Partition}:wickr:${Region}:${Account}:network/${NetworkId}"
    ]
   },
   "wisdom:AIAgent": {
    "arn_formats": [
     "arn:${Partition}:wisdom:${Region}:${Account}:ai-agent/${AssistantId}/${AIAgentId}"
    ]
   },
   "wisdom:AIGuardrail": {
    "arn_formats": [
     "arn:${Partition}:wisdom:${Region}:${Account}:ai-guardrail/${AssistantId}/${AIGuardrailId}"
    ]
   },
   "wisdom:AIPrompt": {
    "arn_formats": [
     "arn:${Partition}:wisdom:${Region}:${Account}:ai-prompt/${AssistantId}/${AIPromptId}"
    ]
   },
   "wisdom:Assistant": {
    "arn_formats": [
     "arn:${Partition}:wisdom:${Region}:${Account}:assistant/${AssistantId}"
    ]
   },
   "wisdom:AssistantAssociation": {
    "arn_formats": [
     "arn:${Partition}:wisdom:${Region}:${Account}:association/${AssistantId}/${AssistantAssociationId}"
    ]
   },
   "wisdom:Content": {
    "arn_formats": [
     "arn:${Partition}:wisdom:${Region}:${Account}:content/${KnowledgeBaseId}/${ContentId}"
    ]
   },
   "wisdom:ContentAssociation": {
    "arn_formats": [
     "arn:${Partition}:wisdom:${Region}:${Account}:content-association/${KnowledgeBaseId}/${ContentId}/${ContentAssociationId}"
    ]
   },
   "wisdom:KnowledgeBase": {
    "arn_formats": [
     "arn:${Partition}:wisdom:${Region}:${Account}:knowledge-base/${KnowledgeBaseId}"
    ]
   },
   "wisdom:MessageTemplate": {
    "arn_formats": [
     "arn:${Partition}:wisdom:${Region}:${Account}:message-template/${KnowledgeBaseId}/${MessageTemplateId}"
    ]
   },
   "wisdom:QuickResponse": {
    "arn_formats": [
     "arn:${Partition}:wisdom:${Region}:${Account}:quick-response/${KnowledgeBaseId}/${QuickResponseId}"
    ]
   },
   "wisdom:Session": {
    "arn_formats": [
     "arn:${Partition}:wisdom:${Region}:${Account}:session/${AssistantId}/${SessionId}"
    ]
   },
   "workdocs:organization": {
    "arn_formats": [
     "arn:${Partition}:workdocs:${Region}:${Account}:organization/${ResourceId}"
    ]
   },
   "worklink:fleet": {
    "arn_formats": [
     "arn:${Partition}:worklink::${Account}:fleet/${FleetName}"
    ]
   },
   "workmail:organization": {
    "arn_formats": [
     "arn:${Partition}:workmail:${Region}:${Account}:organization/${ResourceId}"
    ]
   },
   "workmailmessageflow:RawMessage": {
    "arn_formats": [
     "arn:${Partition}:workmailmessageflow:${Region}:${Account}:message/${OrganizationId}/${Context}/${MessageId}"
    ]
   },
   "workspaces-web:browserSettings": {
    "arn_formats": [
     "arn:${Partition}:workspaces-web:${Region}:${Account}:browserSettings/${BrowserSettingsId}"
    ]
   },
   "workspaces-web:dataProtectionSettings": {
    "arn_formats": [
     "arn:${Partition}:workspaces-web:${Region}:${Account}:dataProtectionSettings/${DataProtectionSettingsId}"
    ]
   },
   "workspaces-web:identityProvider": {
    "arn_formats": [
     "arn:${Partition}:workspaces-web:${Region}:${Account}:identityProvider/${PortalId}/${IdentityProviderId}"
    ]
   },
   "workspaces-web:ipAccessSettings": {
    "arn_formats": [
     "arn:${Partition}:workspaces-web:${Region}:${Account}:ipAccessSettings/${IpAccessSettingsId}"
    ]
   },
   "workspaces-web:networkSettings": {
    "arn_formats": [
     "arn:${Partition}:workspaces-web:${Region}:${Account}:networkSettings/${NetworkSettingsId}"
    ]
   },
   "workspaces-web:portal": {
    "arn_formats": [
     "arn:${Partition}:workspaces-web:${Region}:${Account}:portal/${PortalId}"
    ]
   },
   "workspaces-web:trustStore": {
    "arn_formats": [
     "arn:${Partition}:workspaces-web:${Region}:${Account}:trustStore/${TrustStoreId}"
    ]
   },
   "workspaces-web:userAccessLoggingSettings": {
    "arn_formats": [
     "arn:${Partition}:workspaces-web:${Region}:${Account}:userAccessLoggingSettings/${UserAccessLoggingSettingsId}"
    ]
   },
   "workspaces-web:userSettings": {
    "arn_formats": [
     "arn:${Partition}:workspaces-web:${Region}:${Account}:userSettings/${UserSettingsId}"
    ]
   },
   "workspaces:connectionalias": {
    "arn_formats": [
     "arn:${Partition}:workspaces:${Region}:${Account}:connectionalias/${ConnectionAliasId}"
    ]
   },
   "workspaces:directoryid": {
    "arn_formats": [
     "arn:${Partition}:workspaces:${Region}:${Account}:directory/${DirectoryId}"
    ]
   },
   "workspaces:workspaceapplication": {
    "arn_formats": [
     "arn:${Partition}:workspaces:${Region}:${Account}:workspaceapplication/${WorkSpaceApplicationId}"
    ]
   },
   "workspaces:workspacebundle": {
    "arn_formats": [
     "arn:${Partition}:workspaces:${Region}:${Account}:workspacebundle/${BundleId}"
    ]
   },
   "workspaces:workspaceid": {
    "arn_formats": [
     "arn:${Partition}:workspaces:${Region}:${Account}:workspace/${WorkspaceId}"
    ]
   },
   "workspaces:workspaceimage": {
    "arn_formats": [
     "arn:${Partition}:workspaces:${Region}:${Account}:workspaceimage/${ImageId}"
    ]
   },
   "workspaces:workspaceipgroup": {
    "arn_formats": [
     "arn:${Partition}:workspaces:${Region}:${Account}:workspaceipgroup/${GroupId}"
    ]
   },
   "workspaces:workspacespoolid": {
    "arn_formats": [
     "arn:${Partition}:workspaces:${Region}:${Account}:workspacespool/${PoolId}"
    ]
   },
   "xray:group": {
    "arn_formats": [
     "arn:${Partition}:xray:${Region}:${Account}:group/${GroupName}/${Id}"
    ]
   },
   "xray:sampling-rule": {
    "arn_formats": [
     "arn:${Partition}:xray:${Region}:${Account}:sampling-rule/${SamplingRuleName}"
    ]
   }
  },
  "resources_asterisk": {
   "enum": [
    "a2c:GetContainerizationJobDetails",
    "a2c:GetDeploymentJobDetails",
    "a2c:StartContainerizationJob",
    "a2c:StartDeploymentJob",
    "a4b:ApproveSkill",
    "a4b:AssociateSkillWithUsers",
    "a4b:CompleteRegistration",
    "a4b:CreateAddressBook",
    "a4b:CreateBusinessReportSchedule",
    "a4b:CreateConferenceProvider",
    "a4b:CreateContact",
    "a4b:CreateGatewayGroup",
    "a4b:CreateNetworkProfile",
    "a4b:CreateProfile",
    "a4b:CreateSkillGroup",
    "a4b:GetConferencePreference",
    "a4b:GetInvitationConfiguration",
    "a4b:ListBusinessReportSchedules",
    "a4b:ListConferenceProviders",
    "a4b:ListGatewayGroups",
    "a4b:ListSkills",
    "a4b:ListSkillsStoreCategories",
    "a4b:ListSkillsStoreSkillsByCategory",
    "a4b:PutConferencePreference",
    "a4b:PutDeviceSetupEvents",
    "a4b:PutInvitationConfiguration",
    "a4b:RegisterAVSDevice",
    "a4b:RegisterDevice",
    "a4b:RejectSkill",
    "a4b:ResolveRoom",
    "a4b:SearchAddressBooks",
    "a4b:SearchContacts",
    "a4b:SearchDevices",
    "a4b:SearchNetworkProfiles",
    "a4b:SearchProfiles",
    "a4b:SearchRooms",
    "a4b:SearchSkillGroups",
    "a4b:SearchUsers",
    "a4b:SendAnnouncement",
    "a4b:StartDeviceSync",
    "access-analyzer:CancelPolicyGeneration",
    "access-analyzer:CheckAccessNotGranted",
    "access-analyzer:CheckNoNewAccess",
    "access-analyzer:CheckNoPublicAccess",
    "access-analyzer:GetGeneratedPolicy",
    "access-analyzer:ListAnalyzers",
    "access-analyzer:ListPolicyGenerations",
    "access-analyzer:StartPolicyGeneration",
    "access-analyzer:ValidatePolicy",
    "acm:GetAccountConfiguration",
    "acm:ListCertificates",
    "acm:PutAccountConfiguration",
    "acm:RequestCertificate",
    "acm-pca:CreateCertificateAuthority",
    "acm-pca:ListCertificateAuthorities",
    "activate:CreateForm",
    "activate:GetAccountContact",
    "activate:GetContentInfo",
    "activate:GetCosts",
    "activate:GetCredits",
    "activate:GetMemberInfo",
    "activate:GetProgram",
    "activate:PutMemberInfo",
    "aiops:CreateInvestigationGroup",
    "aiops:ListInvestigationGroups",
    "airflow:ListEnvironments",
    "amplify:ListApps",
    "amplify:ListResourcesForWebACL",
    "amplifybackend:ListS3Buckets",
    "amplifyuibuilder:CreateComponent",
    "amplifyuibuilder:CreateForm",
    "amplifyuibuilder:CreateTheme",
    "amplifyuibuilder:ExchangeCodeForToken",
    "amplifyuibuilder:ExportComponents",
    "amplifyuibuilder:ExportForms",
    "amplifyuibuilder:ExportThemes",
    "amplifyuibuilder:GetMetadata",
    "amplifyuibuilder:ListCodegenJobs",
    "amplifyuibuilder:ListComponents",
    "amplifyuibuilder:ListForms",
    "amplifyuibuilder:ListThemes",
    "amplifyuibuilder:PutMetadataFlag",
    "amplifyuibuilder:RefreshToken",
    "amplifyuibuilder:ResetMetadataFlag",
    "amplifyuibuilder:StartCodegenJob",
    "aoss:BatchGetCollection",
    "aoss:BatchGetEffectiveLifecyclePolicy",
    "aoss:BatchGetLifecyclePolicy",
    "aoss:BatchGetVpcEndpoint",
    "aoss:CreateAccessPolicy",
    "aoss:CreateCollection",
    "aoss:CreateLifecyclePolicy",
    "aoss:CreateSecurityConfig",
    "aoss:CreateSecurityPolicy",
    "aoss:CreateVpcEndpoint",
    "aoss:DeleteAccessPolicy",
    "aoss:DeleteLifecyclePolicy",
    "aoss:DeleteSecurityConfig",
    "aoss:DeleteSecurityPolicy",
    "aoss:DeleteVpcEndpoint",
    "aoss:GetAccessPolicy",
    "aoss:GetAccountSettings",
    "aoss:GetPoliciesStats",
    "aoss:GetSecurityConfig",
    "aoss:GetSecurityPolicy",
    "aoss:ListAccessPolicies",
    "aoss:ListCollections",
    "aoss:ListLifecyclePolicies",
    "aoss:ListSecurityConfigs",
    "aoss:ListSecurityPolicies",
    "aoss:ListTagsForResource",
    "aoss:ListVpcEndpoints",
    "aoss:TagResource",
    "aoss:UntagResource",
    "aoss:UpdateAccessPolicy",
    "aoss:UpdateAccountSettings",
    "aoss:UpdateLifecyclePolicy",
    "aoss:UpdateSecurityConfig",
    "aoss:UpdateSecurityPolicy",
    "aoss:UpdateVpcEndpoint",
    "app-integrations:ListApplicationAssociations",
    "app-integrations:ListApplications",
    "app-integrations:ListDataIntegrationAssociations",
    "app-integrations:ListDataIntegrations",
    "app-integrations:ListEventIntegrationAssociations",
    "app-integrations:ListEventIntegrations",
    "appconfig:CreateApplication",
    "appconfig:CreateDeploymentStrategy",
    "appconfig:CreateExtension",
    "appconfig:CreateExtensionAssociation",
    "appconfig:GetAccountSettings",
    "appconfig:ListApplications",
    "appconfig:ListDeploymentStrategies",
    "appconfig:ListExtensionAssociations",
    "appconfig:ListExtensions",
    "appconfig:UpdateAccountSettings",
    "appfabric:CreateAppBundle",
    "appfabric:ListAppBundles",
    "appflow:CreateConnectorProfile",
    "appflow:CreateFlow",
    "appflow:DescribeConnectorProfiles",
    "appflow:DescribeConnectors",
    "appflow:DescribeFlows",
    "appflow:RegisterConnector",
    "application-autoscaling:DescribeScalableTargets",
    "application-autoscaling:DescribeScalingActivities",
    "application-autoscaling:DescribeScalingPolicies",
    "application-autoscaling:DescribeScheduledActions",
    "application-autoscaling:GetPredictiveScalingForecast",
    "application-cost-profiler:DeleteReportDefinition",
    "application-cost-profiler:GetReportDefinition",
    "application-cost-profiler:ImportApplicationUsage",
    "application-cost-profiler:ListReportDefinitions",
    "application-cost-profiler:PutReportDefinition",
    "application-cost-profiler:UpdateReportDefinition",
    "application-signals:CreateServiceLevelObjective",
    "application-signals:GetService",
    "application-signals:Link",
    "application-signals:ListObservedEntities",
    "application-signals:ListServiceDependencies",
    "application-signals:ListServiceDependents",
    "application-signals:ListServiceLevelObjectives",
    "application-signals:ListServiceOperations",
    "application-signals:ListServices",
    "application-signals:StartDiscovery",
    "application-transformation:GetContainerization",
    "application-transformation:GetDeployment",
    "application-transformation:GetGroupingAssessment",
    "application-transformation:GetPortingCompatibilityAssessment",
    "application-transformation:GetPortingRecommendationAssessment",
    "application-transformation:GetRuntimeAssessment",
    "application-transformation:PutLogData",
    "application-transformation:PutMetricData",
    "application-transformation:StartContainerization",
    "application-transformation:StartDeployment",
    "application-transformation:StartGroupingAssessment",
    "application-transformation:StartPortingCompatibilityAssessment",
    "application-transformation:StartPortingRecommendationAssessment",
    "application-transformation:StartRuntimeAssessment",
    "applicationinsights:AddWorkload",
    "applicationinsights:CreateApplication",
    "applicationinsights:CreateComponent",
    "applicationinsights:CreateLogPattern",
    "applicationinsights:DeleteApplication",
    "applicationinsights:DeleteComponent",
    "applicationinsights:DeleteLogPattern",
    "applicationinsights:DescribeApplication",
    "applicationinsights:DescribeComponent",
    "applicationinsights:DescribeComponentConfiguration",
    "applicationinsights:DescribeComponentConfigurationRecommendation",
    "applicationinsights:DescribeLogPattern",
    "applicationinsights:DescribeObservation",
    "applicationinsights:DescribeProblem",
    "applicationinsights:DescribeProblemObservations",
    "applicationinsights:DescribeWorkload",
    "applicationinsights:Link",
    "applicationinsights:ListApplications",
    "applicationinsights:ListComponents",
    "applicationinsights:ListConfigurationHistory",
    "applicationinsights:ListLogPatternSets",
    "applicationinsights:ListLogPatterns",
    "applicationinsights:ListProblems",
    "applicationinsights:ListTagsForResource",
    "applicationinsights:ListWorkloads",
    "applicationinsights:RemoveWorkload",
    "applicationinsights:TagResource",
    "applicationinsights:UntagResource",
    "applicationinsights:UpdateApplication",
    "applicationinsights:UpdateComponent",
    "applicationinsights:UpdateComponentConfiguration",
    "applicationinsights:UpdateLogPattern",
    "applicationinsights:UpdateProblem",
    "applicationinsights:UpdateWorkload",
    "appmesh:ListMeshes",
    "appmesh-preview:ListMeshes",
    "apprunner:ListAutoScalingConfigurations",
    "apprunner:ListConnections",
    "apprunner:ListObservabilityConfigurations",
    "apprunner:ListServices",
    "apprunner:ListVpcConnectors",
    "apprunner:ListVpcIngressConnections",
    "appstream:CreateAppBlock",
    "appstream:CreateDirectoryConfig",
    "appstream:CreateUsageReportSubscription",
    "appstream:CreateUser",
    "appstream:DeleteDirectoryConfig",
    "appstream:DeleteUsageReportSubscription",
    "appstream:DeleteUser",
    "appstream:DescribeDirectoryConfigs",
    "appstream:DescribeUsageReportSubscriptions",
    "appstream:DescribeUsers",
    "appstream:DisableUser",
    "appstream:EnableUser",
    "appstream:ExpireSession",
    "appstream:ListTagsForResource",
    "appstream:UpdateDirectoryConfig",
    "appstudio:GetAccountStatus",
    "appstudio:GetEnablementJobStatus",
    "appstudio:StartEnablementJob",
    "appstudio:StartRollbackEnablementJob",
    "appstudio:StartTeamDeployment",
    "appsync:CreateApi",
    "appsync:CreateApiCache",
    "appsync:CreateApiKey",
    "appsync:CreateDataSource",
    "appsync:CreateDomainName",
    "appsync:CreateFunction",
    "appsync:CreateGraphqlApi",
    "appsync:CreateResolver",
    "appsync:CreateType",
    "appsync:DeleteApiCache",
    "appsync:DeleteApiKey",
    "appsync:DeleteDataSource",
    "appsync:DeleteFunction",
    "appsync:DeleteResolver",
    "appsync:DeleteResourcePolicy",
    "appsync:DeleteType",
    "appsync:EvaluateCode",
    "appsync:EvaluateMappingTemplate",
    "appsync:FlushApiCache",
    "appsync:GetApiCache",
    "appsync:GetDataSource",
    "appsync:GetDataSourceIntrospection",
    "appsync:GetFunction",
    "appsync:GetGraphqlApiEnvironmentVariables",
    "appsync:GetIntrospectionSchema",
    "appsync:GetResolver",
    "appsync:GetResourcePolicy",
    "appsync:GetSchemaCreationStatus",
    "appsync:GetType",
    "appsync:ListApiKeys",
    "appsync:ListApis",
    "appsync:ListDataSources",
    "appsync:ListDomainNames",
    "appsync:ListFunctions",
    "appsync:ListGraphqlApis",
    "appsync:ListResolvers",
    "appsync:ListResolversByFunction",
    "appsync:ListSourceApiAssociations",
    "appsync:ListTypes",
    "appsync:ListTypesByAssociation",
    "appsync:PutGraphqlApiEnvironmentVariables",
    "appsync:PutResourcePolicy",
    "appsync:SetWebACL",
    "appsync:StartDataSourceIntrospection",
    "appsync:StartSchemaCreation",
    "appsync:UpdateApiCache",
    "appsync:UpdateApiKey",
    "appsync:UpdateDataSource",
    "appsync:UpdateFunction",
    "appsync:UpdateResolver",
    "appsync:UpdateType",
    "apptest:CreateTestCase",
    "apptest:CreateTestConfiguration",
    "apptest:CreateTestSuite",
    "apptest:ListTagsForResource",
    "apptest:ListTestCases",
    "apptest:ListTestConfigurations",
    "apptest:ListTestRuns",
    "apptest:ListTestSuites",
    "apptest:StartTestRun",
    "aps:CreateWorkspace",
    "aps:GetDefaultScraperConfiguration",
    "aps:ListScrapers",
    "aps:ListWorkspaces",
    "arc-zonal-shift:GetAutoshiftObserverNotificationStatus",
    "arc-zonal-shift:ListAutoshifts",
    "arc-zonal-shift:ListManagedResources",
    "arc-zonal-shift:ListZonalShifts",
    "arc-zonal-shift:UpdateAutoshiftObserverNotificationStatus",
    "arsenal:RegisterOnPremisesAgent",
    "artifact:GetAccountSettings",
    "artifact:ListAgreements",
    "artifact:ListCustomerAgreements",
    "artifact:ListReports",
    "artifact:PutAccountSettings",
    "athena:GetCatalogs",
    "athena:GetExecutionEngine",
    "athena:GetExecutionEngines",
    "athena:GetNamespace",
    "athena:GetNamespaces",
    "athena:GetQueryExecutions",
    "athena:GetTable",
    "athena:GetTables",
    "athena:ListApplicationDPUSizes",
    "athena:ListCapacityReservations",
    "athena:ListDataCatalogs",
    "athena:ListEngineVersions",
    "athena:ListExecutors",
    "athena:ListWorkGroups",
    "athena:RunQuery",
    "auditmanager:CreateAssessment",
    "auditmanager:CreateAssessmentFramework",
    "auditmanager:CreateControl",
    "auditmanager:DeleteAssessmentFrameworkShare",
    "auditmanager:DeregisterAccount",
    "auditmanager:DeregisterOrganizationAdminAccount",
    "auditmanager:GetAccountStatus",
    "auditmanager:GetDelegations",
    "auditmanager:GetEvidenceFileUploadUrl",
    "auditmanager:GetInsights",
    "auditmanager:GetInsightsByAssessment",
    "auditmanager:GetOrganizationAdminAccount",
    "auditmanager:GetServicesInScope",
    "auditmanager:GetSettings",
    "auditmanager:ListAssessmentControlInsightsByControlDomain",
    "auditmanager:ListAssessmentFrameworkShareRequests",
    "auditmanager:ListAssessmentFrameworks",
    "auditmanager:ListAssessmentReports",
    "auditmanager:ListAssessments",
    "auditmanager:ListControlDomainInsights",
    "auditmanager:ListControlDomainInsightsByAssessment",
    "auditmanager:ListControlInsightsByControlDomain",
    "auditmanager:ListControls",
    "auditmanager:ListKeywordsForDataSource",
    "auditmanager:ListNotifications",
    "auditmanager:RegisterAccount",
    "auditmanager:RegisterOrganizationAdminAccount",
    "auditmanager:UpdateAssessmentFrameworkShare",
    "auditmanager:UpdateSettings",
    "auditmanager:ValidateAssessmentReportIntegrity",
    "autoscaling:DescribeAccountLimits",
    "autoscaling:DescribeAdjustmentTypes",
    "autoscaling:DescribeAutoScalingGroups",
    "autoscaling:DescribeAutoScalingInstances",
    "autoscaling:DescribeAutoScalingNotificationTypes",
    "autoscaling:DescribeInstanceRefreshes",
    "autoscaling:DescribeLaunchConfigurations",
    "autoscaling:DescribeLifecycleHookTypes",
    "autoscaling:DescribeLifecycleHooks",
    "autoscaling:DescribeLoadBalancerTargetGroups",
    "autoscaling:DescribeLoadBalancers",
    "autoscaling:DescribeMetricCollectionTypes",
    "autoscaling:DescribeNotificationConfigurations",
    "autoscaling:DescribePolicies",
    "autoscaling:DescribeScalingActivities",
    "autoscaling:DescribeScalingProcessTypes",
    "autoscaling:DescribeScheduledActions",
    "autoscaling:DescribeTags",
    "autoscaling:DescribeTerminationPolicyTypes",
    "autoscaling:DescribeTrafficSources",
    "autoscaling:DescribeWarmPool",
    "autoscaling:GetPredictiveScalingForecast",
    "autoscaling-plans:CreateScalingPlan",
    "autoscaling-plans:DeleteScalingPlan",
    "autoscaling-plans:DescribeScalingPlanResources",
    "autoscaling-plans:DescribeScalingPlans",
    "autoscaling-plans:GetScalingPlanResourceForecastData",
    "autoscaling-plans:UpdateScalingPlan",
    "aws-marketplace:AcceptAgreementApprovalRequest",
    "aws-marketplace:AcceptAgreementRequest",
    "aws-marketplace:AssociateProductsWithPrivateMarketplace",
    "aws-marketplace:BatchMeterUsage",
    "aws-marketplace:CancelAgreement",
    "aws-marketplace:CancelAgreementRequest",
    "aws-marketplace:CompleteTask",
    "aws-marketplace:CreateAgreementRequest",
    "aws-marketplace:CreatePrivateMarketplaceRequests",
    "aws-marketplace:DescribeAgreement",
    "aws-marketplace:DescribeAssessment",
    "aws-marketplace:DescribeBuilds",
    "aws-marketplace:DescribePrivateMarketplaceRequests",
    "aws-marketplace:DescribeProcurementSystemConfiguration",
    "aws-marketplace:DescribeTask",
    "aws-marketplace:DisassociateProductsFromPrivateMarketplace",
    "aws-marketplace:GetAgreementApprovalRequest",
    "aws-marketplace:GetAgreementRequest",
    "aws-marketplace:GetAgreementTerms",
    "aws-marketplace:GetEntitlements",
    "aws-marketplace:ListAgreementApprovalRequests",
    "aws-marketplace:ListAgreementCharges",
    "aws-marketplace:ListAgreementRequests",
    "aws-marketplace:ListAssessments",
    "aws-marketplace:ListBuilds",
    "aws-marketplace:ListChangeSets",
    "aws-marketplace:ListEntities",
    "aws-marketplace:ListEntitlementDetails",
    "aws-marketplace:ListPrivateListings",
    "aws-marketplace:ListPrivateMarketplaceRequests",
    "aws-marketplace:ListTasks",
    "aws-marketplace:MeterUsage",
    "aws-marketplace:PutProcurementSystemConfiguration",
    "aws-marketplace:RegisterUsage",
    "aws-marketplace:RejectAgreementApprovalRequest",
    "aws-marketplace:ResolveCustomer",
    "aws-marketplace:SearchAgreements",
    "aws-marketplace:StartBuild",
    "aws-marketplace:Subscribe",
    "aws-marketplace:Unsubscribe",
    "aws-marketplace:UpdateAgreementApprovalRequest",
    "aws-marketplace:UpdatePurchaseOrders",
    "aws-marketplace:UpdateTask",
    "aws-marketplace:ViewSubscriptions",
    "aws-marketplace-management:GetAdditionalSellerNotificationRecipients",
    "aws-marketplace-management:GetBankAccountVerificationDetails",
    "aws-marketplace-management:GetSecondaryUserVerificationDetails",
    "aws-marketplace-management:GetSellerVerificationDetails",
    "aws-marketplace-management:PutAdditionalSellerNotificationRecipients",
    "aws-marketplace-management:PutBankAccountVerificationDetails",
    "aws-marketplace-management:PutSecondaryUserVerificationDetails",
    "aws-marketplace-management:PutSellerVerificationDetails",
    "aws-marketplace-management:uploadFiles",
    "aws-marketplace-management:viewMarketing",
    "aws-marketplace-management:viewReports",
    "aws-marketplace-management:viewSettings",
    "aws-marketplace-management:viewSupport",
    "aws-portal:GetConsoleActionSetEnforced",
    "aws-portal:ModifyAccount",
    "aws-portal:ModifyBilling",
    "aws-portal:ModifyPaymentMethods",
    "aws-portal:UpdateConsoleActionSetEnforced",
    "aws-portal:ViewAccount",
    "aws-portal:ViewBilling",
    "aws-portal:ViewPaymentMethods",
    "aws-portal:ViewUsage",
    "awsconnector:GetConnectorHealth",
    "awsconnector:RegisterConnector",
    "awsconnector:ValidateConnectorId",
    "b2bi:CreateProfile",
    "b2bi:CreateTransformer",
    "b2bi:ListCapabilities",
    "b2bi:ListPartnerships",
    "b2bi:ListProfiles",
    "b2bi:ListTransformers",
    "backup:DescribeBackupJob",
    "backup:DescribeCopyJob",
    "backup:DescribeGlobalSettings",
    "backup:DescribeProtectedResource",
    "backup:DescribeRegionSettings",
    "backup:DescribeReportJob",
    "backup:DescribeRestoreJob",
    "backup:ExportBackupPlanTemplate",
    "backup:GetBackupPlanFromJSON",
    "backup:GetBackupPlanFromTemplate",
    "backup:GetRestoreJobMetadata",
    "backup:GetRestoreTestingInferredMetadata",
    "backup:GetSupportedResourceTypes",
    "backup:ListBackupJobSummaries",
    "backup:ListBackupJobs",
    "backup:ListBackupPlanTemplates",
    "backup:ListBackupPlans",
    "backup:ListBackupVaults",
    "backup:ListCopyJobSummaries",
    "backup:ListCopyJobs",
    "backup:ListFrameworks",
    "backup:ListIndexedRecoveryPoints",
    "backup:ListIndexedRecoveryPointsForSearch",
    "backup:ListLegalHolds",
    "backup:ListProtectedResources",
    "backup:ListRecoveryPointsByResource",
    "backup:ListReportJobs",
    "backup:ListReportPlans",
    "backup:ListRestoreJobSummaries",
    "backup:ListRestoreJobs",
    "backup:ListRestoreJobsByProtectedResource",
    "backup:ListRestoreTestingPlans",
    "backup:PutRestoreValidationResult",
    "backup:StopBackupJob",
    "backup:UpdateGlobalSettings",
    "backup:UpdateRegionSettings",
    "backup-gateway:CreateGateway",
    "backup-gateway:ImportHypervisorConfiguration",
    "backup-gateway:ListGateways",
    "backup-gateway:ListHypervisors",
    "backup-gateway:ListVirtualMachines",
    "backup-search:ListSearchJobs",
    "backup-search:ListSearchResultExportJobs",
    "backup-search:StartSearchJob",
    "backup-storage:CommitBackupJob",
    "backup-storage:DeleteObjects",
    "backup-storage:DescribeBackupJob",
    "backup-storage:GetBaseBackup",
    "backup-storage:GetChunk",
    "backup-storage:GetIncrementalBaseBackup",
    "backup-storage:GetObjectMetadata",
    "backup-storage:ListChunks",
    "backup-storage:ListObjects",
    "backup-storage:MountCapsule",
    "backup-storage:NotifyObjectComplete",
    "backup-storage:PutChunk",
    "backup-storage:PutObject",
    "backup-storage:StartObject",
    "backup-storage:UpdateObjectComplete",
    "batch:DescribeComputeEnvironments",
    "batch:DescribeJobDefinitions",
    "batch:DescribeJobQueues",
    "batch:DescribeJobs",
    "batch:DescribeSchedulingPolicies",
    "batch:ListConsumableResources",
    "batch:ListJobs",
    "batch:ListSchedulingPolicies",
    "bcm-data-exports:ListExports",
    "bcm-data-exports:ListTables",
    "bcm-pricing-calculator:CreateBillScenario",
    "bcm-pricing-calculator:CreateWorkloadEstimate",
    "bcm-pricing-calculator:GetPreferences",
    "bcm-pricing-calculator:ListBillEstimates",
    "bcm-pricing-calculator:ListBillScenarios",
    "bcm-pricing-calculator:ListTagsForResource",
    "bcm-pricing-calculator:ListWorkloadEstimates",
    "bcm-pricing-calculator:TagResource",
    "bcm-pricing-calculator:UntagResource",
    "bcm-pricing-calculator:UpdatePreferences",
    "bedrock:AssociateThirdPartyKnowledgeBase",
    "bedrock:CreateAgent",
    "bedrock:CreateBlueprint",
    "bedrock:CreateFlow",
    "bedrock:CreateFoundationModelAgreement",
    "bedrock:CreateGuardrail",
    "bedrock:CreateKnowledgeBase",
    "bedrock:CreateMarketplaceModelEndpoint",
    "bedrock:CreateModelImportJob",
    "bedrock:CreatePrompt",
    "bedrock:CreateSession",
    "bedrock:DeleteFoundationModelAgreement",
    "bedrock:DeleteMarketplaceModelAgreement",
    "bedrock:DeleteModelInvocationLoggingConfiguration",
    "bedrock:GenerateQuery",
    "bedrock:GetBlueprintRecommendation",
    "bedrock:GetFoundationModelAvailability",
    "bedrock:GetModelInvocationLoggingConfiguration",
    "bedrock:GetUseCaseForModelAccess",
    "bedrock:InvokeBuilder",
    "bedrock:InvokeInlineAgent",
    "bedrock:ListAgents",
    "bedrock:ListAsyncInvokes",
    "bedrock:ListCustomModels",
    "bedrock:ListEvaluationJobs",
    "bedrock:ListFlows",
    "bedrock:ListFoundationModelAgreementOffers",
    "bedrock:ListFoundationModels",
    "bedrock:ListImportedModels",
    "bedrock:ListInferenceProfiles",
    "bedrock:ListKnowledgeBases",
    "bedrock:ListMarketplaceModelEndpoints",
    "bedrock:ListModelCopyJobs",
    "bedrock:ListModelCustomizationJobs",
    "bedrock:ListModelEvaluationJobs",
    "bedrock:ListModelImportJobs",
    "bedrock:ListModelInvocationJobs",
    "bedrock:ListPromptRouters",
    "bedrock:ListProvisionedModelThroughputs",
    "bedrock:ListSessions",
    "bedrock:OptimizePrompt",
    "bedrock:PutFoundationModelEntitlement",
    "bedrock:PutModelInvocationLoggingConfiguration",
    "bedrock:PutUseCaseForModelAccess",
    "bedrock:Rerank",
    "bedrock:RetrieveAndGenerate",
    "bedrock:ValidateFlowDefinition",
    "billing:GetBillingData",
    "billing:GetBillingDetails",
    "billing:GetBillingNotifications",
    "billing:GetBillingPreferences",
    "billing:GetContractInformation",
    "billing:GetCredits",
    "billing:GetIAMAccessPreference",
    "billing:GetSellerOfRecord",
    "billing:ListBillingViews",
    "billing:PutContractInformation",
    "billing:RedeemCredits",
    "billing:UpdateBillingPreferences",
    "billing:UpdateIAMAccessPreference",
    "billingconductor:CreatePricingRule",
    "billingconductor:ListAccountAssociations",
    "billingconductor:ListBillingGroupCostReports",
    "billingconductor:ListBillingGroups",
    "billingconductor:ListCustomLineItems",
    "billingconductor:ListPricingPlans",
    "billingconductor:ListPricingRules",
    "braket:AcceptUserAgreement",
    "braket:AccessBraketFeature",
    "braket:CreateJob",
    "braket:CreateQuantumTask",
    "braket:GetDevice",
    "braket:GetServiceLinkedRoleStatus",
    "braket:GetUserAgreementStatus",
    "braket:SearchDevices",
    "braket:SearchJobs",
    "braket:SearchQuantumTasks",
    "budgets:DescribeBudgetActionsForAccount",
    "bugbust:CreateEvent",
    "bugbust:ListEvents",
    "cases:CreateDomain",
    "cases:ListDomains",
    "cases:ListTagsForResource",
    "ce:CreateAnomalyMonitor",
    "ce:CreateAnomalySubscription",
    "ce:CreateCostCategoryDefinition",
    "ce:CreateNotificationSubscription",
    "ce:CreateReport",
    "ce:DeleteNotificationSubscription",
    "ce:DeleteReport",
    "ce:DescribeNotificationSubscription",
    "ce:DescribeReport",
    "ce:GetApproximateUsageRecords",
    "ce:GetCommitmentPurchaseAnalysis",
    "ce:GetConsoleActionSetEnforced",
    "ce:GetPreferences",
    "ce:GetReservationCoverage",
    "ce:GetReservationPurchaseRecommendation",
    "ce:GetReservationUtilization",
    "ce:GetRightsizingRecommendation",
    "ce:GetSavingsPlanPurchaseRecommendationDetails",
    "ce:GetSavingsPlansCoverage",
    "ce:GetSavingsPlansPurchaseRecommendation",
    "ce:GetSavingsPlansUtilization",
    "ce:GetSavingsPlansUtilizationDetails",
    "ce:ListCommitmentPurchaseAnalyses",
    "ce:ListCostAllocationTagBackfillHistory",
    "ce:ListCostAllocationTags",
    "ce:ListCostCategoryDefinitions",
    "ce:ListSavingsPlansPurchaseRecommendationGeneration",
    "ce:ProvideAnomalyFeedback",
    "ce:StartCommitmentPurchaseAnalysis",
    "ce:StartCostAllocationTagBackfill",
    "ce:StartSavingsPlansPurchaseRecommendationGeneration",
    "ce:UpdateConsoleActionSetEnforced",
    "ce:UpdateCostAllocationTagsStatus",
    "ce:UpdateNotificationSubscription",
    "ce:UpdatePreferences",
    "ce:UpdateReport",
    "chatbot:CreateChimeWebhookConfiguration",
    "chatbot:CreateCustomAction",
    "chatbot:CreateMicrosoftTeamsChannelConfiguration",
    "chatbot:CreateSlackChannelConfiguration",
    "chatbot:DeleteMicrosoftTeamsConfiguredTeam",
    "chatbot:DeleteMicrosoftTeamsUserIdentity",
    "chatbot:DeleteSlackUserIdentity",
    "chatbot:DeleteSlackWorkspaceAuthorization",
    "chatbot:DescribeChimeWebhookConfigurations",
    "chatbot:DescribeSlackChannelConfigurations",
    "chatbot:DescribeSlackChannels",
    "chatbot:DescribeSlackUserIdentities",
    "chatbot:DescribeSlackWorkspaces",
    "chatbot:GetAccountPreferences",
    "chatbot:GetMicrosoftTeamsChannelConfiguration",
    "chatbot:GetMicrosoftTeamsOauthParameters",
    "chatbot:GetSlackOauthParameters",
    "chatbot:ListCustomActions",
    "chatbot:ListMicrosoftTeamsChannelConfigurations",
    "chatbot:ListMicrosoftTeamsConfiguredTeams",
    "chatbot:ListMicrosoftTeamsUserIdentities",
    "chatbot:ListTagsForResource",
    "chatbot:RedeemMicrosoftTeamsOauthCode",
    "chatbot:RedeemSlackOauthCode",
    "chatbot:TagResource",
    "chatbot:UntagResource",
    "chatbot:UpdateAccountPreferences",
    "chime:AcceptDelegate",
    "chime:ActivateUsers",
    "chime:AddDomain",
    "chime:AddOrUpdateGroups",
    "chime:AssociatePhoneNumberWithUser",
    "chime:AssociatePhoneNumbersWithVoiceConnectorGroup",
    "chime:AssociateSigninDelegateGroupsWithAccount",
    "chime:AssociateVoiceConnectorConnect",
    "chime:AuthorizeDirectory",
    "chime:BatchCreateRoomMembership",
    "chime:BatchDeletePhoneNumber",
    "chime:BatchSuspendUser",
    "chime:BatchUnsuspendUser",
    "chime:BatchUpdatePhoneNumber",
    "chime:BatchUpdateUser",
    "chime:ConnectDirectory",
    "chime:CreateAccount",
    "chime:CreateApiKey",
    "chime:CreateAppInstance",
    "chime:CreateAppInstanceBot",
    "chime:CreateAppInstanceUser",
    "chime:CreateBot",
    "chime:CreateCDRBucket",
    "chime:CreateConnectAnalyticsConnector",
    "chime:CreateConnectCallTransferConnector",
    "chime:CreateMediaCapturePipeline",
    "chime:CreateMediaConcatenationPipeline",
    "chime:CreateMediaInsightsPipelineConfiguration",
    "chime:CreateMediaLiveConnectorPipeline",
    "chime:CreateMediaPipelineKinesisVideoStreamPool",
    "chime:CreateMeeting",
    "chime:CreateMeetingWithAttendees",
    "chime:CreatePhoneNumberOrder",
    "chime:CreateRoom",
    "chime:CreateRoomMembership",
    "chime:CreateSipMediaApplication",
    "chime:CreateUser",
    "chime:CreateVoiceConnector",
    "chime:CreateVoiceProfile",
    "chime:CreateVoiceProfileDomain",
    "chime:DeleteAccount",
    "chime:DeleteAccountOpenIdConfig",
    "chime:DeleteApiKey",
    "chime:DeleteCDRBucket",
    "chime:DeleteDelegate",
    "chime:DeleteDomain",
    "chime:DeleteEventsConfiguration",
    "chime:DeleteGroups",
    "chime:DeletePhoneNumber",
    "chime:DeleteRoom",
    "chime:DeleteRoomMembership",
    "chime:DeleteSipRule",
    "chime:DeleteVoiceConnectorGroup",
    "chime:DisassociatePhoneNumberFromUser",
    "chime:DisassociatePhoneNumbersFromVoiceConnectorGroup",
    "chime:DisassociateSigninDelegateGroupsFromAccount",
    "chime:DisassociateVoiceConnectorConnect",
    "chime:DisconnectDirectory",
    "chime:GetAccount",
    "chime:GetAccountResource",
    "chime:GetAccountSettings",
    "chime:GetAccountWithOpenIdConfig",
    "chime:GetBot",
    "chime:GetCDRBucket",
    "chime:GetDomain",
    "chime:GetEventsConfiguration",
    "chime:GetGlobalSettings",
    "chime:GetMeetingDetail",
    "chime:GetMessagingSessionEndpoint",
    "chime:GetPhoneNumber",
    "chime:GetPhoneNumberOrder",
    "chime:GetPhoneNumberSettings",
    "chime:GetRetentionSettings",
    "chime:GetRoom",
    "chime:GetSipRule",
    "chime:GetTelephonyLimits",
    "chime:GetUser",
    "chime:GetUserActivityReportData",
    "chime:GetUserByEmail",
    "chime:GetUserSettings",
    "chime:GetVoiceConnectorGroup",
    "chime:InviteDelegate",
    "chime:InviteUsers",
    "chime:InviteUsersFromProvider",
    "chime:ListAccountUsageReportData",
    "chime:ListAccounts",
    "chime:ListApiKeys",
    "chime:ListAvailableVoiceConnectorRegions",
    "chime:ListBots",
    "chime:ListCDRBucket",
    "chime:ListCallingRegions",
    "chime:ListDelegates",
    "chime:ListDirectories",
    "chime:ListDomains",
    "chime:ListGroups",
    "chime:ListMediaCapturePipelines",
    "chime:ListMediaInsightsPipelineConfigurations",
    "chime:ListMediaPipelineKinesisVideoStreamPools",
    "chime:ListMediaPipelines",
    "chime:ListMeetingEvents",
    "chime:ListMeetings",
    "chime:ListMeetingsReportData",
    "chime:ListPhoneNumberOrders",
    "chime:ListPhoneNumbers",
    "chime:ListRoomMemberships",
    "chime:ListRooms",
    "chime:ListSipMediaApplications",
    "chime:ListSupportedPhoneNumberCountries",
    "chime:ListUsers",
    "chime:ListVoiceConnectorGroups",
    "chime:ListVoiceConnectors",
    "chime:ListVoiceProfileDomains",
    "chime:LogoutUser",
    "chime:PutEventsConfiguration",
    "chime:PutRetentionSettings",
    "chime:RedactConversationMessage",
    "chime:RedactRoomMessage",
    "chime:RegenerateSecurityToken",
    "chime:RenameAccount",
    "chime:RenewDelegate",
    "chime:ResetAccountResource",
    "chime:ResetPersonalPIN",
    "chime:RestorePhoneNumber",
    "chime:RetrieveDataExports",
    "chime:SearchAvailablePhoneNumbers",
    "chime:StartDataExport",
    "chime:StartMeetingTranscription",
    "chime:StopMeetingTranscription",
    "chime:SubmitSupportRequest",
    "chime:SuspendUsers",
    "chime:UnauthorizeDirectory",
    "chime:UpdateAccount",
    "chime:UpdateAccountOpenIdConfig",
    "chime:UpdateAccountResource",
    "chime:UpdateAccountSettings",
    "chime:UpdateBot",
    "chime:UpdateCDRSettings",
    "chime:UpdateGlobalSettings",
    "chime:UpdatePhoneNumber",
    "chime:UpdatePhoneNumberSettings",
    "chime:UpdateRoom",
    "chime:UpdateRoomMembership",
    "chime:UpdateSupportedLicenses",
    "chime:UpdateUser",
    "chime:UpdateUserLicenses",
    "chime:UpdateUserSettings",
    "chime:ValidateAccountResource",
    "chime:ValidateE911Address",
    "cleanrooms:ListCollaborations",
    "cleanrooms:ListConfiguredTables",
    "cleanrooms:ListMemberships",
    "cleanrooms-ml:CreateConfiguredModelAlgorithm",
    "cleanrooms-ml:CreateTrainingDataset",
    "cleanrooms-ml:DeleteMLConfiguration",
    "cleanrooms-ml:GetMLConfiguration",
    "cleanrooms-ml:ListAudienceModels",
    "cleanrooms-ml:ListCollaborationConfiguredModelAlgorithmAssociations",
    "cleanrooms-ml:ListCollaborationMLInputChannels",
    "cleanrooms-ml:ListCollaborationTrainedModelInferenceJobs",
    "cleanrooms-ml:ListCollaborationTrainedModels",
    "cleanrooms-ml:ListConfiguredAudienceModels",
    "cleanrooms-ml:ListConfiguredModelAlgorithmAssociations",
    "cleanrooms-ml:ListConfiguredModelAlgorithms",
    "cleanrooms-ml:ListMLInputChannels",
    "cleanrooms-ml:ListTrainedModelInferenceJobs",
    "cleanrooms-ml:ListTrainedModels",
    "cleanrooms-ml:ListTrainingDatasets",
    "cleanrooms-ml:PutMLConfiguration",
    "cloud9:CreateEnvironmentEC2",
    "cloud9:CreateEnvironmentSSH",
    "cloud9:GetMigrationExperiences",
    "cloud9:GetUserPublicKey",
    "cloud9:GetUserSettings",
    "cloud9:ListEnvironments",
    "cloud9:UpdateUserSettings",
    "cloud9:ValidateEnvironmentName",
    "clouddirectory:CreateSchema",
    "clouddirectory:ListDevelopmentSchemaArns",
    "clouddirectory:ListDirectories",
    "clouddirectory:ListManagedSchemaArns",
    "clouddirectory:ListPublishedSchemaArns",
    "clouddirectory:PutSchemaFromJson",
    "cloudformation:ActivateOrganizationsAccess",
    "cloudformation:ActivateType",
    "cloudformation:BatchDescribeTypeConfigurations",
    "cloudformation:CancelResourceRequest",
    "cloudformation:CreateGeneratedTemplate",
    "cloudformation:CreateResource",
    "cloudformation:CreateStackSet",
    "cloudformation:CreateUploadBucket",
    "cloudformation:DeactivateOrganizationsAccess",
    "cloudformation:DeactivateType",
    "cloudformation:DeleteGeneratedTemplate",
    "cloudformation:DeleteResource",
    "cloudformation:DeregisterType",
    "cloudformation:DescribeAccountLimits",
    "cloudformation:DescribeGeneratedTemplate",
    "cloudformation:DescribeOrganizationsAccess",
    "cloudformation:DescribePublisher",
    "cloudformation:DescribeResourceScan",
    "cloudformation:DescribeStackDriftDetectionStatus",
    "cloudformation:DescribeType",
    "cloudformation:DescribeTypeRegistration",
    "cloudformation:EstimateTemplateCost",
    "cloudformation:GetGeneratedTemplate",
    "cloudformation:GetResource",
    "cloudformation:GetResourceRequestStatus",
    "cloudformation:ListExports",
    "cloudformation:ListGeneratedTemplates",
    "cloudformation:ListImports",
    "cloudformation:ListResourceRequests",
    "cloudformation:ListResourceScanRelatedResources",
    "cloudformation:ListResourceScanResources",
    "cloudformation:ListResourceScans",
    "cloudformation:ListResources",
    "cloudformation:ListStackSets",
    "cloudformation:ListStacks",
    "cloudformation:ListTypeRegistrations",
    "cloudformation:ListTypeVersions",
    "cloudformation:ListTypes",
    "cloudformation:PublishType",
    "cloudformation:RegisterPublisher",
    "cloudformation:RegisterType",
    "cloudformation:SetTypeConfiguration",
    "cloudformation:SetTypeDefaultVersion",
    "cloudformation:StartResourceScan",
    "cloudformation:TestType",
    "cloudformation:UpdateGeneratedTemplate",
    "cloudformation:UpdateResource",
    "cloudformation:ValidateTemplate",
    "cloudfront:CreateFieldLevelEncryptionConfig",
    "cloudfront:CreateFieldLevelEncryptionProfile",
    "cloudfront:CreateKeyGroup",
    "cloudfront:CreateMonitoringSubscription",
    "cloudfront:CreateOriginAccessControl",
    "cloudfront:CreatePublicKey",
    "cloudfront:CreateSavingsPlan",
    "cloudfront:CreateVpcOrigin",
    "cloudfront:DeleteKeyGroup",
    "cloudfront:DeleteMonitoringSubscription",
    "cloudfront:DeletePublicKey",
    "cloudfront:GetKeyGroup",
    "cloudfront:GetKeyGroupConfig",
    "cloudfront:GetMonitoringSubscription",
    "cloudfront:GetPublicKey",
    "cloudfront:GetPublicKeyConfig",
    "cloudfront:GetSavingsPlan",
    "cloudfront:ListAnycastIpLists",
    "cloudfront:ListCachePolicies",
    "cloudfront:ListCloudFrontOriginAccessIdentities",
    "cloudfront:ListContinuousDeploymentPolicies",
    "cloudfront:ListDistributions",
    "cloudfront:ListDistributionsByAnycastIpListId",
    "cloudfront:ListDistributionsByCachePolicyId",
    "cloudfront:ListDistributionsByKeyGroup",
    "cloudfront:ListDistributionsByLambdaFunction",
    "cloudfront:ListDistributionsByOriginRequestPolicyId",
    "cloudfront:ListDistributionsByRealtimeLogConfig",
    "cloudfront:ListDistributionsByResponseHeadersPolicyId",
    "cloudfront:ListDistributionsByVpcOriginId",
    "cloudfront:ListDistributionsByWebACLId",
    "cloudfront:ListFieldLevelEncryptionConfigs",
    "cloudfront:ListFieldLevelEncryptionProfiles",
    "cloudfront:ListFunctions",
    "cloudfront:ListKeyGroups",
    "cloudfront:ListKeyValueStores",
    "cloudfront:ListOriginAccessControls",
    "cloudfront:ListOriginRequestPolicies",
    "cloudfront:ListPublicKeys",
    "cloudfront:ListRateCards",
    "cloudfront:ListRealtimeLogConfigs",
    "cloudfront:ListResponseHeadersPolicies",
    "cloudfront:ListSavingsPlans",
    "cloudfront:ListStreamingDistributions",
    "cloudfront:ListUsages",
    "cloudfront:ListVpcOrigins",
    "cloudfront:UpdateFieldLevelEncryptionConfig",
    "cloudfront:UpdateKeyGroup",
    "cloudfront:UpdatePublicKey",
    "cloudfront:UpdateSavingsPlan",
    "cloudhsm:DeleteHsm",
    "cloudhsm:DescribeBackups",
    "cloudhsm:DescribeClusters",
    "cloudshell:CreateEnvironment",
    "cloudshell:DescribeEnvironments",
    "cloudtrail:DeregisterOrganizationDelegatedAdmin",
    "cloudtrail:DescribeTrails",
    "cloudtrail:GetImport",
    "cloudtrail:ListChannels",
    "cloudtrail:ListDashboards",
    "cloudtrail:ListEventDataStores",
    "cloudtrail:ListImportFailures",
    "cloudtrail:ListImports",
    "cloudtrail:ListPublicKeys",
    "cloudtrail:ListServiceLinkedChannels",
    "cloudtrail:ListTrails",
    "cloudtrail:LookupEvents",
    "cloudtrail:RegisterOrganizationDelegatedAdmin",
    "cloudtrail:SearchSampleQueries",
    "cloudtrail:StartImport",
    "cloudtrail:StopImport",
    "cloudwatch:BatchGetServiceLevelIndicatorReport",
    "cloudwatch:CreateServiceLevelObjective",
    "cloudwatch:DeleteAnomalyDetector",
    "cloudwatch:DescribeAlarmsForMetric",
    "cloudwatch:DescribeAnomalyDetectors",
    "cloudwatch:DescribeInsightRules",
    "cloudwatch:EnableTopologyDiscovery",
    "cloudwatch:GenerateQuery",
    "cloudwatch:GetMetricData",
    "cloudwatch:GetMetricStatistics",
    "cloudwatch:GetMetricWidgetImage",
    "cloudwatch:GetTopologyDiscoveryStatus",
    "cloudwatch:GetTopologyMap",
    "cloudwatch:Link",
    "cloudwatch:ListDashboards",
    "cloudwatch:ListEntitiesForMetric",
    "cloudwatch:ListManagedInsightRules",
    "cloudwatch:ListMetricStreams",
    "cloudwatch:ListMetrics",
    "cloudwatch:ListServiceLevelObjectives",
    "cloudwatch:ListServices",
    "cloudwatch:PutAnomalyDetector",
    "cloudwatch:PutManagedInsightRules",
    "cloudwatch:PutMetricData",
    "codeartifact:CreateDomain",
    "codeartifact:CreatePackageGroup",
    "codeartifact:CreateRepository",
    "codeartifact:ListDomains",
    "codeartifact:ListRepositories",
    "codebuild:DeleteOAuthToken",
    "codebuild:DeleteSourceCredentials",
    "codebuild:ImportSourceCredentials",
    "codebuild:ListBuildBatches",
    "codebuild:ListBuilds",
    "codebuild:ListConnectedOAuthAccounts",
    "codebuild:ListCuratedEnvironmentImages",
    "codebuild:ListFleets",
    "codebuild:ListProjects",
    "codebuild:ListReportGroups",
    "codebuild:ListReports",
    "codebuild:ListRepositories",
    "codebuild:ListSharedProjects",
    "codebuild:ListSharedReportGroups",
    "codebuild:ListSourceCredentials",
    "codebuild:PersistOAuthToken",
    "codecatalyst:AcceptConnection",
    "codecatalyst:CreateIdentityCenterApplication",
    "codecatalyst:CreateSpace",
    "codecatalyst:GetPendingConnection",
    "codecatalyst:ListConnections",
    "codecatalyst:ListIdentityCenterApplications",
    "codecatalyst:ListIdentityCenterApplicationsForSpace",
    "codecatalyst:RejectConnection",
    "codecommit:CreateApprovalRuleTemplate",
    "codecommit:DeleteApprovalRuleTemplate",
    "codecommit:GetApprovalRuleTemplate",
    "codecommit:ListApprovalRuleTemplates",
    "codecommit:ListRepositories",
    "codecommit:ListRepositoriesForApprovalRuleTemplate",
    "codecommit:UpdateApprovalRuleTemplateContent",
    "codecommit:UpdateApprovalRuleTemplateDescription",
    "codecommit:UpdateApprovalRuleTemplateName",
    "codeconnections:CreateConnection",
    "codeconnections:CreateHost",
    "codeconnections:DeleteSyncConfiguration",
    "codeconnections:GetIndividualAccessToken",
    "codeconnections:GetInstallationUrl",
    "codeconnections:GetResourceSyncStatus",
    "codeconnections:GetSyncBlockerSummary",
    "codeconnections:GetSyncConfiguration",
    "codeconnections:ListHosts",
    "codeconnections:ListInstallationTargets",
    "codeconnections:ListRepositoryLinks",
    "codeconnections:ListRepositorySyncDefinitions",
    "codeconnections:ListSyncConfigurations",
    "codeconnections:RegisterAppCode",
    "codeconnections:StartAppRegistrationHandshake",
    "codeconnections:StartOAuthHandshake",
    "codeconnections:UpdateSyncBlocker",
    "codeconnections:UpdateSyncConfiguration",
    "codedeploy:BatchGetDeploymentTargets",
    "codedeploy:ContinueDeployment",
    "codedeploy:CreateCloudFormationDeployment",
    "codedeploy:DeleteGitHubAccountToken",
    "codedeploy:DeleteResourcesByExternalId",
    "codedeploy:GetDeploymentTarget",
    "codedeploy:ListApplications",
    "codedeploy:ListDeploymentConfigs",
    "codedeploy:ListDeploymentTargets",
    "codedeploy:ListGitHubAccountTokenNames",
    "codedeploy:ListOnPremisesInstances",
    "codedeploy:PutLifecycleEventHookExecutionStatus",
    "codedeploy:SkipWaitTimeForInstanceTermination",
    "codedeploy:StopDeployment",
    "codedeploy-commands-secure:GetDeploymentSpecification",
    "codedeploy-commands-secure:PollHostCommand",
    "codedeploy-commands-secure:PutHostCommandAcknowledgement",
    "codedeploy-commands-secure:PutHostCommandComplete",
    "codeguru:GetCodeGuruFreeTrialSummary",
    "codeguru-profiler:CreateProfilingGroup",
    "codeguru-profiler:GetFindingsReportAccountSummary",
    "codeguru-profiler:ListProfilingGroups",
    "codeguru-reviewer:AssociateRepository",
    "codeguru-reviewer:CreateConnectionToken",
    "codeguru-reviewer:GetMetricsData",
    "codeguru-reviewer:ListCodeReviews",
    "codeguru-reviewer:ListRepositoryAssociations",
    "codeguru-reviewer:ListThirdPartyRepositories",
    "codeguru-security:DeleteScansByCategory",
    "codeguru-security:GetAccountConfiguration",
    "codeguru-security:GetMetricsSummary",
    "codeguru-security:ListFindings",
    "codeguru-security:ListFindingsMetrics",
    "codeguru-security:ListScans",
    "codeguru-security:UpdateAccountConfiguration",
    "codepipeline:AcknowledgeJob",
    "codepipeline:AcknowledgeThirdPartyJob",
    "codepipeline:GetActionType",
    "codepipeline:GetJobDetails",
    "codepipeline:GetThirdPartyJobDetails",
    "codepipeline:ListActionTypes",
    "codepipeline:ListPipelines",
    "codepipeline:ListRuleTypes",
    "codepipeline:PollForThirdPartyJobs",
    "codepipeline:PutJobFailureResult",
    "codepipeline:PutJobSuccessResult",
    "codepipeline:PutThirdPartyJobFailureResult",
    "codepipeline:PutThirdPartyJobSuccessResult",
    "codestar:CreateProject",
    "codestar:DescribeUserProfile",
    "codestar:ListProjects",
    "codestar:ListUserProfiles",
    "codestar:VerifyServiceRole",
    "codestar-connections:CreateConnection",
    "codestar-connections:CreateHost",
    "codestar-connections:DeleteSyncConfiguration",
    "codestar-connections:GetIndividualAccessToken",
    "codestar-connections:GetInstallationUrl",
    "codestar-connections:GetResourceSyncStatus",
    "codestar-connections:GetSyncBlockerSummary",
    "codestar-connections:GetSyncConfiguration",
    "codestar-connections:ListHosts",
    "codestar-connections:ListInstallationTargets",
    "codestar-connections:ListRepositoryLinks",
    "codestar-connections:ListRepositorySyncDefinitions",
    "codestar-connections:ListSyncConfigurations",
    "codestar-connections:RegisterAppCode",
    "codestar-connections:StartAppRegistrationHandshake",
    "codestar-connections:StartOAuthHandshake",
    "codestar-connections:UpdateSyncBlocker",
    "codestar-connections:UpdateSyncConfiguration",
    "codestar-notifications:DeleteTarget",
    "codestar-notifications:ListEventTypes",
    "codestar-notifications:ListNotificationRules",
    "codestar-notifications:ListTargets",
    "codewhisperer:GenerateRecommendations",
    "codewhisperer:ListProfiles",
    "cognito-identity:CreateIdentityPool",
    "cognito-identity:DeleteIdentities",
    "cognito-identity:DescribeIdentity",
    "cognito-identity:GetCredentialsForIdentity",
    "cognito-identity:GetId",
    "cognito-identity:GetOpenIdToken",
    "cognito-identity:ListIdentityPools",
    "cognito-identity:SetIdentityPoolRoles",
    "cognito-identity:SetPrincipalTagAttributeMap",
    "cognito-identity:UnlinkIdentity",
    "cognito-idp:AssociateSoftwareToken",
    "cognito-idp:ChangePassword",
    "cognito-idp:ConfirmDevice",
    "cognito-idp:ConfirmForgotPassword",
    "cognito-idp:ConfirmSignUp",
    "cognito-idp:CreateUserPool",
    "cognito-idp:DeleteUser",
    "cognito-idp:DeleteUserAttributes",
    "cognito-idp:DescribeUserPoolDomain",
    "cognito-idp:ForgetDevice",
    "cognito-idp:ForgotPassword",
    "cognito-idp:GetDevice",
    "cognito-idp:GetUser",
    "cognito-idp:GetUserAttributeVerificationCode",
    "cognito-idp:GlobalSignOut",
    "cognito-idp:InitiateAuth",
    "cognito-idp:ListDevices",
    "cognito-idp:ListUserPools",
    "cognito-idp:ResendConfirmationCode",
    "cognito-idp:RespondToAuthChallenge",
    "cognito-idp:RevokeToken",
    "cognito-idp:SetUserMFAPreference",
    "cognito-idp:SetUserSettings",
    "cognito-idp:SignUp",
    "cognito-idp:UpdateDeviceStatus",
    "cognito-idp:UpdateUserAttributes",
    "cognito-idp:VerifySoftwareToken",
    "cognito-idp:VerifyUserAttribute",
    "cognito-sync:QueryRecords",
    "comprehend:BatchDetectDominantLanguage",
    "comprehend:BatchDetectEntities",
    "comprehend:BatchDetectKeyPhrases",
    "comprehend:BatchDetectSentiment",
    "comprehend:BatchDetectSyntax",
    "comprehend:BatchDetectTargetedSentiment",
    "comprehend:ContainsPiiEntities",
    "comprehend:DetectDominantLanguage",
    "comprehend:DetectKeyPhrases",
    "comprehend:DetectPiiEntities",
    "comprehend:DetectSentiment",
    "comprehend:DetectSyntax",
    "comprehend:DetectTargetedSentiment",
    "comprehend:DetectToxicContent",
    "comprehend:ListDocumentClassificationJobs",
    "comprehend:ListDocumentClassifierSummaries",
    "comprehend:ListDocumentClassifiers",
    "comprehend:ListDominantLanguageDetectionJobs",
    "comprehend:ListEndpoints",
    "comprehend:ListEntitiesDetectionJobs",
    "comprehend:ListEntityRecognizerSummaries",
    "comprehend:ListEntityRecognizers",
    "comprehend:ListEventsDetectionJobs",
    "comprehend:ListFlywheels",
    "comprehend:ListKeyPhrasesDetectionJobs",
    "comprehend:ListPiiEntitiesDetectionJobs",
    "comprehend:ListSentimentDetectionJobs",
    "comprehend:ListTargetedSentimentDetectionJobs",
    "comprehend:ListTopicsDetectionJobs",
    "comprehendmedical:DescribeEntitiesDetectionV2Job",
    "comprehendmedical:DescribeICD10CMInferenceJob",
    "comprehendmedical:DescribePHIDetectionJob",
    "comprehendmedical:DescribeRxNormInferenceJob",
    "comprehendmedical:DescribeSNOMEDCTInferenceJob",
    "comprehendmedical:DetectEntitiesV2",
    "comprehendmedical:DetectPHI",
    "comprehendmedical:InferICD10CM",
    "comprehendmedical:InferRxNorm",
    "comprehendmedical:InferSNOMEDCT",
    "comprehendmedical:ListEntitiesDetectionV2Jobs",
    "comprehendmedical:ListICD10CMInferenceJobs",
    "comprehendmedical:ListPHIDetectionJobs",
    "comprehendmedical:ListRxNormInferenceJobs",
    "comprehendmedical:ListSNOMEDCTInferenceJobs",
    "comprehendmedical:StartEntitiesDetectionV2Job",
    "comprehendmedical:StartICD10CMInferenceJob",
    "comprehendmedical:StartPHIDetectionJob",
    "comprehendmedical:StartRxNormInferenceJob",
    "comprehendmedical:StartSNOMEDCTInferenceJob",
    "comprehendmedical:StopEntitiesDetectionV2Job",
    "comprehendmedical:StopICD10CMInferenceJob",
    "comprehendmedical:StopPHIDetectionJob",
    "comprehendmedical:StopRxNormInferenceJob",
    "comprehendmedical:StopSNOMEDCTInferenceJob",
    "compute-optimizer:DeleteRecommendationPreferences",
    "compute-optimizer:DescribeRecommendationExportJobs",
    "compute-optimizer:ExportAutoScalingGroupRecommendations",
    "compute-optimizer:ExportEBSVolumeRecommendations",
    "compute-optimizer:ExportEC2InstanceRecommendations",
    "compute-optimizer:ExportECSServiceRecommendations",
    "compute-optimizer:ExportIdleRecommendations",
    "compute-optimizer:ExportLambdaFunctionRecommendations",
    "compute-optimizer:ExportLicenseRecommendations",
    "compute-optimizer:ExportRDSDatabaseRecommendations",
    "compute-optimizer:GetAutoScalingGroupRecommendations",
    "compute-optimizer:GetEBSVolumeRecommendations",
    "compute-optimizer:GetEC2InstanceRecommendations",
    "compute-optimizer:GetEC2RecommendationProjectedMetrics",
    "compute-optimizer:GetECSServiceRecommendationProjectedMetrics",
    "compute-optimizer:GetECSServiceRecommendations",
    "compute-optimizer:GetEffectiveRecommendationPreferences",
    "compute-optimizer:GetEnrollmentStatus",
    "compute-optimizer:GetEnrollmentStatusesForOrganization",
    "compute-optimizer:GetIdleRecommendations",
    "compute-optimizer:GetLambdaFunctionRecommendations",
    "compute-optimizer:GetLicenseRecommendations",
    "compute-optimizer:GetRDSDatabaseRecommendationProjectedMetrics",
    "compute-optimizer:GetRDSDatabaseRecommendations",
    "compute-optimizer:GetRecommendationPreferences",
    "compute-optimizer:GetRecommendationSummaries",
    "compute-optimizer:PutRecommendationPreferences",
    "compute-optimizer:UpdateEnrollmentStatus",
    "config:BatchGetResourceConfig",
    "config:DeleteDeliveryChannel",
    "config:DeletePendingAggregationRequest",
    "config:DeleteRemediationExceptions",
    "config:DeleteResourceConfig",
    "config:DeleteRetentionConfiguration",
    "config:DeliverConfigSnapshot",
    "config:DescribeAggregationAuthorizations",
    "config:DescribeComplianceByConfigRule",
    "config:DescribeComplianceByResource",
    "config:DescribeConfigRuleEvaluationStatus",
    "config:DescribeConfigRules",
    "config:DescribeConfigurationAggregators",
    "config:DescribeConformancePackStatus",
    "config:DescribeConformancePacks",
    "config:DescribeDeliveryChannelStatus",
    "config:DescribeDeliveryChannels",
    "config:DescribeOrganizationConfigRuleStatuses",
    "config:DescribeOrganizationConfigRules",
    "config:DescribeOrganizationConformancePackStatuses",
    "config:DescribeOrganizationConformancePacks",
    "config:DescribePendingAggregationRequests",
    "config:DescribeRemediationExceptions",
    "config:DescribeRetentionConfigurations",
    "config:GetComplianceDetailsByResource",
    "config:GetComplianceSummaryByConfigRule",
    "config:GetComplianceSummaryByResourceType",
    "config:GetDiscoveredResourceCounts",
    "config:GetResourceConfigHistory",
    "config:GetResourceEvaluationSummary",
    "config:ListConfigurationRecorders",
    "config:ListConformancePackComplianceScores",
    "config:ListDiscoveredResources",
    "config:ListResourceEvaluations",
    "config:ListStoredQueries",
    "config:PutConfigurationRecorder",
    "config:PutDeliveryChannel",
    "config:PutEvaluations",
    "config:PutRemediationExceptions",
    "config:PutResourceConfig",
    "config:PutRetentionConfiguration",
    "config:PutServiceLinkedConfigurationRecorder",
    "config:SelectResourceConfig",
    "config:StartRemediationExecution",
    "config:StartResourceEvaluation",
    "connect:CreateInstance",
    "connect:ListInstances",
    "connect:SendChatIntegrationEvent",
    "connect:SendIntegrationEvent",
    "connect-campaigns:DeleteConnectInstanceConfig",
    "connect-campaigns:DeleteConnectInstanceIntegration",
    "connect-campaigns:DeleteInstanceOnboardingJob",
    "connect-campaigns:GetConnectInstanceConfig",
    "connect-campaigns:GetInstanceOnboardingJobStatus",
    "connect-campaigns:ListCampaigns",
    "connect-campaigns:ListConnectInstanceIntegrations",
    "connect-campaigns:PutConnectInstanceIntegration",
    "connect-campaigns:StartInstanceOnboardingJob",
    "consoleapp:ListDeviceIdentities",
    "consolidatedbilling:GetAccountBillingRole",
    "consolidatedbilling:ListLinkedAccounts",
    "controlcatalog:ListCommonControls",
    "controlcatalog:ListDomains",
    "controlcatalog:ListObjectives",
    "controltower:CreateLandingZone",
    "controltower:CreateManagedAccount",
    "controltower:DeregisterManagedAccount",
    "controltower:DeregisterOrganizationalUnit",
    "controltower:DescribeAccountFactoryConfig",
    "controltower:DescribeCoreService",
    "controltower:DescribeGuardrail",
    "controltower:DescribeGuardrailForTarget",
    "controltower:DescribeLandingZoneConfiguration",
    "controltower:DescribeManagedAccount",
    "controltower:DescribeManagedOrganizationalUnit",
    "controltower:DescribeRegisterOrganizationalUnitOperation",
    "controltower:DescribeSingleSignOn",
    "controltower:DisableGuardrail",
    "controltower:EnableBaseline",
    "controltower:EnableGuardrail",
    "controltower:GetAccountInfo",
    "controltower:GetAvailableUpdates",
    "controltower:GetBaselineOperation",
    "controltower:GetControlOperation",
    "controltower:GetGuardrailComplianceStatus",
    "controltower:GetHomeRegion",
    "controltower:GetLandingZoneDriftStatus",
    "controltower:GetLandingZoneOperation",
    "controltower:GetLandingZoneStatus",
    "controltower:ListBaselines",
    "controltower:ListControlOperations",
    "controltower:ListDirectoryGroups",
    "controltower:ListDriftDetails",
    "controltower:ListEnabledBaselines",
    "controltower:ListEnabledControls",
    "controltower:ListEnabledGuardrails",
    "controltower:ListExtendGovernancePrecheckDetails",
    "controltower:ListExternalConfigRuleCompliance",
    "controltower:ListGuardrailViolations",
    "controltower:ListGuardrails",
    "controltower:ListGuardrailsForTarget",
    "controltower:ListLandingZoneOperations",
    "controltower:ListLandingZones",
    "controltower:ListManagedAccounts",
    "controltower:ListManagedAccountsForGuardrail",
    "controltower:ListManagedAccountsForParent",
    "controltower:ListManagedOrganizationalUnits",
    "controltower:ListManagedOrganizationalUnitsForGuardrail",
    "controltower:ManageOrganizationalUnit",
    "controltower:PerformPreLaunchChecks",
    "controltower:SetupLandingZone",
    "controltower:UpdateAccountFactoryConfig",
    "cost-optimization-hub:GetPreferences",
    "cost-optimization-hub:GetRecommendation",
    "cost-optimization-hub:ListEnrollmentStatuses",
    "cost-optimization-hub:ListRecommendationSummaries",
    "cost-optimization-hub:ListRecommendations",
    "cost-optimization-hub:UpdateEnrollmentStatus",
    "cost-optimization-hub:UpdatePreferences",
    "cur:DescribeReportDefinitions",
    "cur:GetClassicReport",
    "cur:GetClassicReportPreferences",
    "cur:GetUsageReport",
    "cur:PutClassicReportPreferences",
    "cur:ValidateReportDestination",
    "customer-verification:CreateCustomerVerificationDetails",
    "customer-verification:CreateUploadUrls",
    "customer-verification:GetCustomerVerificationDetails",
    "customer-verification:GetCustomerVerificationEligibility",
    "customer-verification:UpdateCustomerVerificationDetails",
    "databrew:CreateDataset",
    "databrew:CreateProfileJob",
    "databrew:CreateProject",
    "databrew:CreateRecipe",
    "databrew:CreateRecipeJob",
    "databrew:CreateRuleset",
    "databrew:CreateSchedule",
    "databrew:ListDatasets",
    "databrew:ListJobs",
    "databrew:ListProjects",
    "databrew:ListRecipes",
    "databrew:ListRulesets",
    "databrew:ListSchedules",
    "dataexchange:CreateDataGrant",
    "dataexchange:CreateDataSet",
    "dataexchange:CreateEventAction",
    "dataexchange:CreateJob",
    "dataexchange:ListDataGrants",
    "dataexchange:ListDataSets",
    "dataexchange:ListEventActions",
    "dataexchange:ListJobs",
    "dataexchange:ListReceivedDataGrants",
    "datapipeline:CreatePipeline",
    "datapipeline:GetAccountLimits",
    "datapipeline:ListPipelines",
    "datapipeline:PollForTask",
    "datapipeline:PutAccountLimits",
    "datapipeline:ReportTaskRunnerHeartbeat",
    "datasync:CreateAgent",
    "datasync:CreateLocationAzureBlob",
    "datasync:CreateLocationEfs",
    "datasync:CreateLocationFsxLustre",
    "datasync:CreateLocationFsxOntap",
    "datasync:CreateLocationFsxOpenZfs",
    "datasync:CreateLocationFsxWindows",
    "datasync:CreateLocationHdfs",
    "datasync:CreateLocationNfs",
    "datasync:CreateLocationObjectStorage",
    "datasync:CreateLocationS3",
    "datasync:CreateLocationSmb",
    "datasync:ListAgents",
    "datasync:ListDiscoveryJobs",
    "datasync:ListLocations",
    "datasync:ListStorageSystems",
    "datasync:ListTaskExecutions",
    "datasync:ListTasks",
    "datazone:AcceptPredictions",
    "datazone:AcceptSubscriptionRequest",
    "datazone:AddEntityOwner",
    "datazone:AddPolicyGrant",
    "datazone:AssociateEnvironmentRole",
    "datazone:CancelMetadataGenerationRun",
    "datazone:CancelSubscription",
    "datazone:CreateAsset",
    "datazone:CreateAssetFilter",
    "datazone:CreateAssetRevision",
    "datazone:CreateAssetType",
    "datazone:CreateConnection",
    "datazone:CreateDataProduct",
    "datazone:CreateDataProductRevision",
    "datazone:CreateDataSource",
    "datazone:CreateDomain",
    "datazone:CreateDomainUnit",
    "datazone:CreateEnvironment",
    "datazone:CreateEnvironmentAction",
    "datazone:CreateEnvironmentBlueprint",
    "datazone:CreateEnvironmentProfile",
    "datazone:CreateFormType",
    "datazone:CreateGlossary",
    "datazone:CreateGlossaryTerm",
    "datazone:CreateGroupProfile",
    "datazone:CreateListingChangeSet",
    "datazone:CreateProject",
    "datazone:CreateProjectMembership",
    "datazone:CreateProjectProfile",
    "datazone:CreateRule",
    "datazone:CreateSubscriptionGrant",
    "datazone:CreateSubscriptionRequest",
    "datazone:CreateSubscriptionTarget",
    "datazone:CreateUserProfile",
    "datazone:DeleteAsset",
    "datazone:DeleteAssetFilter",
    "datazone:DeleteAssetType",
    "datazone:DeleteConnection",
    "datazone:DeleteDataProduct",
    "datazone:DeleteDataSource",
    "datazone:DeleteDomainSharingPolicy",
    "datazone:DeleteDomainUnit",
    "datazone:DeleteEnvironment",
    "datazone:DeleteEnvironmentAction",
    "datazone:DeleteEnvironmentBlueprint",
    "datazone:DeleteEnvironmentBlueprintConfiguration",
    "datazone:DeleteEnvironmentProfile",
    "datazone:DeleteFormType",
    "datazone:DeleteGlossary",
    "datazone:DeleteGlossaryTerm",
    "datazone:DeleteListing",
    "datazone:DeleteProject",
    "datazone:DeleteProjectMembership",
    "datazone:DeleteProjectProfile",
    "datazone:DeleteRule",
    "datazone:DeleteSubscriptionGrant",
    "datazone:DeleteSubscriptionRequest",
    "datazone:DeleteSubscriptionTarget",
    "datazone:DeleteTimeSeriesDataPoints",
    "datazone:DisassociateEnvironmentRole",
    "datazone:GetAsset",
    "datazone:GetAssetFilter",
    "datazone:GetAssetType",
    "datazone:GetConnection",
    "datazone:GetDataProduct",
    "datazone:GetDataSource",
    "datazone:GetDataSourceRun",
    "datazone:GetDomainExecutionRoleCredentials",
    "datazone:GetDomainSharingPolicy",
    "datazone:GetDomainUnit",
    "datazone:GetEnvironment",
    "datazone:GetEnvironmentAction",
    "datazone:GetEnvironmentActionLink",
    "datazone:GetEnvironmentBlueprint",
    "datazone:GetEnvironmentBlueprintConfiguration",
    "datazone:GetEnvironmentCredentials",
    "datazone:GetEnvironmentProfile",
    "datazone:GetFormType",
    "datazone:GetGlossary",
    "datazone:GetGlossaryTerm",
    "datazone:GetGroupProfile",
    "datazone:GetIamPortalLoginUrl",
    "datazone:GetJobRun",
    "datazone:GetLineageEvent",
    "datazone:GetLineageNode",
    "datazone:GetListing",
    "datazone:GetMetadataGenerationRun",
    "datazone:GetProject",
    "datazone:GetProjectProfile",
    "datazone:GetRule",
    "datazone:GetSubscription",
    "datazone:GetSubscriptionEligibility",
    "datazone:GetSubscriptionGrant",
    "datazone:GetSubscriptionRequestDetails",
    "datazone:GetSubscriptionTarget",
    "datazone:GetTimeSeriesDataPoint",
    "datazone:GetUserProfile",
    "datazone:ListAccountEnvironments",
    "datazone:ListAssetFilters",
    "datazone:ListAssetRevisions",
    "datazone:ListConnections",
    "datazone:ListDataProductRevisions",
    "datazone:ListDataSourceRunActivities",
    "datazone:ListDataSourceRuns",
    "datazone:ListDataSources",
    "datazone:ListDomainUnitsForParent",
    "datazone:ListDomains",
    "datazone:ListEntityOwners",
    "datazone:ListEnvironmentActions",
    "datazone:ListEnvironmentBlueprintConfigurationSummaries",
    "datazone:ListEnvironmentBlueprintConfigurations",
    "datazone:ListEnvironmentBlueprints",
    "datazone:ListEnvironmentProfiles",
    "datazone:ListEnvironments",
    "datazone:ListGroupsForUser",
    "datazone:ListJobRuns",
    "datazone:ListLineageEvents",
    "datazone:ListLineageNodeHistory",
    "datazone:ListMetadataGenerationRuns",
    "datazone:ListNotifications",
    "datazone:ListPolicyGrants",
    "datazone:ListProjectMemberships",
    "datazone:ListProjectProfiles",
    "datazone:ListProjects",
    "datazone:ListRules",
    "datazone:ListSubscriptionGrants",
    "datazone:ListSubscriptionRequests",
    "datazone:ListSubscriptionTargets",
    "datazone:ListSubscriptions",
    "datazone:ListTimeSeriesDataPoints",
    "datazone:ListWarehouseMetadata",
    "datazone:PostLineageEvent",
    "datazone:PostTimeSeriesDataPoints",
    "datazone:ProvisionDomain",
    "datazone:PutDomainSharingPolicy",
    "datazone:PutEnvironmentBlueprintConfiguration",
    "datazone:RefreshToken",
    "datazone:RejectPredictions",
    "datazone:RejectSubscriptionRequest",
    "datazone:RemoveEntityOwner",
    "datazone:RemovePolicyGrant",
    "datazone:RevokeSubscription",
    "datazone:Search",
    "datazone:SearchGroupProfiles",
    "datazone:SearchListings",
    "datazone:SearchRules",
    "datazone:SearchTypes",
    "datazone:SearchUserProfiles",
    "datazone:SsoLogin",
    "datazone:SsoLogout",
    "datazone:StartDataSourceRun",
    "datazone:StartMetadataGenerationRun",
    "datazone:StopMetadataGenerationRun",
    "datazone:UpdateAssetFilter",
    "datazone:UpdateConnection",
    "datazone:UpdateDataSource",
    "datazone:UpdateDataSourceRunActivities",
    "datazone:UpdateDomainUnit",
    "datazone:UpdateEnvironment",
    "datazone:UpdateEnvironmentAction",
    "datazone:UpdateEnvironmentBlueprint",
    "datazone:UpdateEnvironmentConfiguration",
    "datazone:UpdateEnvironmentDeploymentStatus",
    "datazone:UpdateEnvironmentProfile",
    "datazone:UpdateGlossary",
    "datazone:UpdateGlossaryTerm",
    "datazone:UpdateGroupProfile",
    "datazone:UpdateProject",
    "datazone:UpdateProjectProfile",
    "datazone:UpdateRule",
    "datazone:UpdateSubscriptionGrantStatus",
    "datazone:UpdateSubscriptionRequest",
    "datazone:UpdateSubscriptionTarget",
    "datazone:UpdateUserProfile",
    "datazone:ValidatePassRole",
    "dax:CreateParameterGroup",
    "dax:CreateSubnetGroup",
    "dax:DeleteParameterGroup",
    "dax:DeleteSubnetGroup",
    "dax:DescribeDefaultParameters",
    "dax:DescribeEvents",
    "dax:DescribeParameterGroups",
    "dax:DescribeParameters",
    "dax:DescribeSubnetGroups",
    "dax:UpdateParameterGroup",
    "dax:UpdateSubnetGroup",
    "dbqms:CreateFavoriteQuery",
    "dbqms:CreateQueryHistory",
    "dbqms:CreateTab",
    "dbqms:DeleteFavoriteQueries",
    "dbqms:DeleteQueryHistory",
    "dbqms:DeleteTab",
    "dbqms:DescribeFavoriteQueries",
    "dbqms:DescribeQueryHistory",
    "dbqms:DescribeTabs",
    "dbqms:GetQueryString",
    "dbqms:UpdateFavoriteQuery",
    "dbqms:UpdateQueryHistory",
    "dbqms:UpdateTab",
    "deadline:ListAvailableMeteredProducts",
    "deepcomposer:AssociateCoupon",
    "deeplens:AssociateServiceRoleToAccount",
    "deeplens:CreateDeviceCertificates",
    "deeplens:CreateModel",
    "deeplens:CreateProject",
    "deeplens:GetAssociatedResources",
    "deeplens:GetDeploymentStatus",
    "deeplens:ImportProjectFromTemplate",
    "deeplens:ListDeployments",
    "deeplens:ListDevices",
    "deeplens:ListModels",
    "deeplens:ListProjects",
    "deeplens:RegisterDevice",
    "deepracer:AdminDescribeAccountKey",
    "deepracer:AdminGetAccountConfig",
    "deepracer:AdminListAssociatedResources",
    "deepracer:AdminListAssociatedUsers",
    "deepracer:AdminManageUser",
    "deepracer:AdminSetAccountConfig",
    "deepracer:AdminUpdateAccountKey",
    "deepracer:CreateCar",
    "deepracer:CreateLeaderboard",
    "deepracer:GetAccountConfig",
    "deepracer:GetAlias",
    "deepracer:GetCars",
    "deepracer:ImportModel",
    "deepracer:ListLeaderboards",
    "deepracer:ListModels",
    "deepracer:ListPrivateLeaderboards",
    "deepracer:ListSubscribedPrivateLeaderboards",
    "deepracer:ListTracks",
    "deepracer:MigrateModels",
    "deepracer:SetAlias",
    "deepracer:TestRewardFunction",
    "detective:BatchGetMembershipDatasources",
    "detective:CreateGraph",
    "detective:DisableOrganizationAdminAccount",
    "detective:EnableOrganizationAdminAccount",
    "detective:GetPricingInformation",
    "detective:ListGraphs",
    "detective:ListInvitations",
    "detective:ListOrganizationAdminAccount",
    "devicefarm:CreateInstanceProfile",
    "devicefarm:CreateProject",
    "devicefarm:CreateTestGridProject",
    "devicefarm:CreateVPCEConfiguration",
    "devicefarm:GetAccountSettings",
    "devicefarm:GetOfferingStatus",
    "devicefarm:ListDeviceInstances",
    "devicefarm:ListDevices",
    "devicefarm:ListInstanceProfiles",
    "devicefarm:ListOfferingPromotions",
    "devicefarm:ListOfferingTransactions",
    "devicefarm:ListOfferings",
    "devicefarm:ListProjects",
    "devicefarm:ListTestGridProjects",
    "devicefarm:ListVPCEConfigurations",
    "devicefarm:PurchaseOffering",
    "devicefarm:RenewOffering",
    "devops-guru:DeleteInsight",
    "devops-guru:DescribeAccountHealth",
    "devops-guru:DescribeAccountOverview",
    "devops-guru:DescribeAnomaly",
    "devops-guru:DescribeEventSourcesConfig",
    "devops-guru:DescribeFeedback",
    "devops-guru:DescribeInsight",
    "devops-guru:DescribeOrganizationHealth",
    "devops-guru:DescribeOrganizationOverview",
    "devops-guru:DescribeOrganizationResourceCollectionHealth",
    "devops-guru:DescribeResourceCollectionHealth",
    "devops-guru:DescribeServiceIntegration",
    "devops-guru:GetCostEstimation",
    "devops-guru:GetResourceCollection",
    "devops-guru:ListAnomaliesForInsight",
    "devops-guru:ListAnomalousLogGroups",
    "devops-guru:ListEvents",
    "devops-guru:ListInsights",
    "devops-guru:ListMonitoredResources",
    "devops-guru:ListNotificationChannels",
    "devops-guru:ListOrganizationInsights",
    "devops-guru:ListRecommendations",
    "devops-guru:PutFeedback",
    "devops-guru:SearchInsights",
    "devops-guru:SearchOrganizationInsights",
    "devops-guru:StartCostEstimation",
    "devops-guru:UpdateEventSourcesConfig",
    "devops-guru:UpdateResourceCollection",
    "devops-guru:UpdateServiceIntegration",
    "directconnect:ConfirmCustomerAgreement",
    "directconnect:CreateDirectConnectGateway",
    "directconnect:DeleteDirectConnectGatewayAssociationProposal",
    "directconnect:DescribeCustomerMetadata",
    "directconnect:DescribeLocations",
    "directconnect:DescribeVirtualGateways",
    "directconnect:UpdateDirectConnectGatewayAssociation",
    "discovery:AssociateConfigurationItemsToApplication",
    "discovery:BatchDeleteAgents",
    "discovery:BatchDeleteImportData",
    "discovery:CreateApplication",
    "discovery:CreateTags",
    "discovery:DeleteApplications",
    "discovery:DeleteTags",
    "discovery:DescribeAgents",
    "discovery:DescribeBatchDeleteConfigurationTask",
    "discovery:DescribeConfigurations",
    "discovery:DescribeContinuousExports",
    "discovery:DescribeExportConfigurations",
    "discovery:DescribeExportTasks",
    "discovery:DescribeImportTasks",
    "discovery:DescribeTags",
    "discovery:DisassociateConfigurationItemsFromApplication",
    "discovery:ExportConfigurations",
    "discovery:GetDiscoverySummary",
    "discovery:GetNetworkConnectionGraph",
    "discovery:ListConfigurations",
    "discovery:ListServerNeighbors",
    "discovery:StartBatchDeleteConfigurationTask",
    "discovery:StartContinuousExport",
    "discovery:StartDataCollectionByAgentIds",
    "discovery:StartExportTask",
    "discovery:StartImportTask",
    "discovery:StopContinuousExport",
    "discovery:StopDataCollectionByAgentIds",
    "discovery:UpdateApplication",
    "dlm:CreateLifecyclePolicy",
    "dlm:GetLifecyclePolicies",
    "dms:BatchStartRecommendations",
    "dms:CreateDataProvider",
    "dms:CreateEndpoint",
    "dms:CreateEventSubscription",
    "dms:CreateFleetAdvisorCollector",
    "dms:CreateInstanceProfile",
    "dms:CreateReplicationInstance",
    "dms:CreateReplicationSubnetGroup",
    "dms:DeleteFleetAdvisorCollector",
    "dms:DeleteFleetAdvisorDatabases",
    "dms:DescribeAccountAttributes",
    "dms:DescribeCertificates",
    "dms:DescribeConnections",
    "dms:DescribeDataMigrations",
    "dms:DescribeEndpointSettings",
    "dms:DescribeEndpointTypes",
    "dms:DescribeEndpoints",
    "dms:DescribeEngineVersions",
    "dms:DescribeEventCategories",
    "dms:DescribeEventSubscriptions",
    "dms:DescribeEvents",
    "dms:DescribeFleetAdvisorCollectors",
    "dms:DescribeFleetAdvisorDatabases",
    "dms:DescribeFleetAdvisorLsaAnalysis",
    "dms:DescribeFleetAdvisorSchemaObjectSummary",
    "dms:DescribeFleetAdvisorSchemas",
    "dms:DescribeOrderableReplicationInstances",
    "dms:DescribePendingMaintenanceActions",
    "dms:DescribeRecommendationLimitations",
    "dms:DescribeRecommendations",
    "dms:DescribeReplicationConfigs",
    "dms:DescribeReplicationInstances",
    "dms:DescribeReplicationSubnetGroups",
    "dms:DescribeReplicationTasks",
    "dms:DescribeReplications",
    "dms:ImportCertificate",
    "dms:ModifyEventSubscription",
    "dms:ModifyFleetAdvisorCollector",
    "dms:ModifyFleetAdvisorCollectorStatuses",
    "dms:ModifyReplicationSubnetGroup",
    "dms:RunFleetAdvisorLsaAnalysis",
    "dms:StartRecommendations",
    "dms:UpdateSubscriptionsToEventBridge",
    "dms:UploadFileMetadataList",
    "docdb-elastic:CreateCluster",
    "docdb-elastic:ListClusterSnapshots",
    "docdb-elastic:ListClusters",
    "docdb-elastic:ListPendingMaintenanceActions",
    "drs:BatchDeleteSnapshotRequestForDrs",
    "drs:CreateExtendedSourceServer",
    "drs:CreateLaunchConfigurationTemplate",
    "drs:CreateReplicationConfigurationTemplate",
    "drs:CreateSourceNetwork",
    "drs:CreateSourceServerForDrs",
    "drs:DescribeJobs",
    "drs:DescribeLaunchConfigurationTemplates",
    "drs:DescribeRecoveryInstances",
    "drs:DescribeReplicationConfigurationTemplates",
    "drs:DescribeReplicationServerAssociationsForDrs",
    "drs:DescribeSnapshotRequestsForDrs",
    "drs:DescribeSourceNetworks",
    "drs:DescribeSourceServers",
    "drs:GetAgentInstallationAssetsForDrs",
    "drs:GetChannelCommandsForDrs",
    "drs:InitializeService",
    "drs:ListExtensibleSourceServers",
    "drs:ListStagingAccounts",
    "drs:ListTagsForResource",
    "drs:SendChannelCommandResultForDrs",
    "drs:SendClientLogsForDrs",
    "drs:SendClientMetricsForDrs",
    "ds:CheckAlias",
    "ds:ConnectDirectory",
    "ds:CreateDirectory",
    "ds:CreateIdentityPoolDirectory",
    "ds:CreateMicrosoftAD",
    "ds:DescribeDirectories",
    "ds:DescribeSnapshots",
    "ds:DescribeTrusts",
    "ds:GetDirectoryLimits",
    "ds:ListLogSubscriptions",
    "dsql:ListClusters",
    "dynamodb:DescribeEndpoints",
    "dynamodb:DescribeLimits",
    "dynamodb:DescribeReservedCapacity",
    "dynamodb:DescribeReservedCapacityOfferings",
    "dynamodb:GetAbacStatus",
    "dynamodb:ListBackups",
    "dynamodb:ListContributorInsights",
    "dynamodb:ListExports",
    "dynamodb:ListGlobalTables",
    "dynamodb:ListImports",
    "dynamodb:ListStreams",
    "dynamodb:ListTables",
    "dynamodb:PurchaseReservedCapacityOfferings",
    "dynamodb:UpdateAbacStatus",
    "ec2:AcceptReservedInstancesExchangeQuote",
    "ec2:AdvertiseByoipCidr",
    "ec2:AssociateIpamByoasn",
    "ec2:AssociateTrunkInterface",
    "ec2:BundleInstance",
    "ec2:CancelBundleTask",
    "ec2:CancelConversionTask",
    "ec2:CancelReservedInstancesListing",
    "ec2:ConfirmProductInstance",
    "ec2:CreateDefaultSubnet",
    "ec2:CreateDefaultVpc",
    "ec2:CreateReservedInstancesListing",
    "ec2:CreateSpotDatafeedSubscription",
    "ec2:CreateSubnetCidrReservation",
    "ec2:DeleteQueuedReservedInstances",
    "ec2:DeleteSpotDatafeedSubscription",
    "ec2:DeleteSubnetCidrReservation",
    "ec2:DeprovisionByoipCidr",
    "ec2:DeregisterInstanceEventNotificationAttributes",
    "ec2:DescribeAccountAttributes",
    "ec2:DescribeAddressTransfers",
    "ec2:DescribeAddresses",
    "ec2:DescribeAddressesAttribute",
    "ec2:DescribeAggregateIdFormat",
    "ec2:DescribeAvailabilityZones",
    "ec2:DescribeAwsNetworkPerformanceMetricSubscriptions",
    "ec2:DescribeBundleTasks",
    "ec2:DescribeByoipCidrs",
    "ec2:DescribeCapacityBlockOfferings",
    "ec2:DescribeCapacityReservationBillingRequests",
    "ec2:DescribeCapacityReservationFleets",
    "ec2:DescribeCapacityReservations",
    "ec2:DescribeCarrierGateways",
    "ec2:DescribeClassicLinkInstances",
    "ec2:DescribeCoipPools",
    "ec2:DescribeConversionTasks",
    "ec2:DescribeCustomerGateways",
    "ec2:DescribeDeclarativePoliciesReports",
    "ec2:DescribeDhcpOptions",
    "ec2:DescribeEgressOnlyInternetGateways",
    "ec2:DescribeElasticGpus",
    "ec2:DescribeExportImageTasks",
    "ec2:DescribeExportTasks",
    "ec2:DescribeFastLaunchImages",
    "ec2:DescribeFastSnapshotRestores",
    "ec2:DescribeFleets",
    "ec2:DescribeFlowLogs",
    "ec2:DescribeFpgaImages",
    "ec2:DescribeHostReservationOfferings",
    "ec2:DescribeHostReservations",
    "ec2:DescribeHosts",
    "ec2:DescribeIamInstanceProfileAssociations",
    "ec2:DescribeIdFormat",
    "ec2:DescribeIdentityIdFormat",
    "ec2:DescribeImages",
    "ec2:DescribeImportImageTasks",
    "ec2:DescribeImportSnapshotTasks",
    "ec2:DescribeInstanceConnectEndpoints",
    "ec2:DescribeInstanceCreditSpecifications",
    "ec2:DescribeInstanceEventNotificationAttributes",
    "ec2:DescribeInstanceEventWindows",
    "ec2:DescribeInstanceImageMetadata",
    "ec2:DescribeInstanceStatus",
    "ec2:DescribeInstanceTopology",
    "ec2:DescribeInstanceTypeOfferings",
    "ec2:DescribeInstanceTypes",
    "ec2:DescribeInstances",
    "ec2:DescribeInternetGateways",
    "ec2:DescribeIpamByoasn",
    "ec2:DescribeIpamExternalResourceVerificationTokens",
    "ec2:DescribeIpamPools",
    "ec2:DescribeIpamResourceDiscoveries",
    "ec2:DescribeIpamResourceDiscoveryAssociations",
    "ec2:DescribeIpamScopes",
    "ec2:DescribeIpams",
    "ec2:DescribeIpv6Pools",
    "ec2:DescribeKeyPairs",
    "ec2:DescribeLaunchTemplateVersions",
    "ec2:DescribeLaunchTemplates",
    "ec2:DescribeLocalGatewayRouteTablePermissions",
    "ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
    "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
    "ec2:DescribeLocalGatewayRouteTables",
    "ec2:DescribeLocalGatewayVirtualInterfaceGroups",
    "ec2:DescribeLocalGatewayVirtualInterfaces",
    "ec2:DescribeLocalGateways",
    "ec2:DescribeLockedSnapshots",
    "ec2:DescribeMacHosts",
    "ec2:DescribeManagedPrefixLists",
    "ec2:DescribeMovingAddresses",
    "ec2:DescribeNatGateways",
    "ec2:DescribeNetworkAcls",
    "ec2:DescribeNetworkInsightsAccessScopeAnalyses",
    "ec2:DescribeNetworkInsightsAccessScopes",
    "ec2:DescribeNetworkInsightsAnalyses",
    "ec2:DescribeNetworkInsightsPaths",
    "ec2:DescribeNetworkInterfaceAttribute",
    "ec2:DescribeNetworkInterfacePermissions",
    "ec2:DescribeNetworkInterfaces",
    "ec2:DescribePlacementGroups",
    "ec2:DescribePrefixLists",
    "ec2:DescribePrincipalIdFormat",
    "ec2:DescribePublicIpv4Pools",
    "ec2:DescribeRegions",
    "ec2:DescribeReplaceRootVolumeTasks",
    "ec2:DescribeReservedInstances",
    "ec2:DescribeReservedInstancesListings",
    "ec2:DescribeReservedInstancesModifications",
    "ec2:DescribeReservedInstancesOfferings",
    "ec2:DescribeRouteTables",
    "ec2:DescribeScheduledInstanceAvailability",
    "ec2:DescribeScheduledInstances",
    "ec2:DescribeSecurityGroupRules",
    "ec2:DescribeSecurityGroupVpcAssociations",
    "ec2:DescribeSecurityGroups",
    "ec2:DescribeSnapshotTierStatus",
    "ec2:DescribeSnapshots",
    "ec2:DescribeSpotDatafeedSubscription",
    "ec2:DescribeSpotFleetRequests",
    "ec2:DescribeSpotInstanceRequests",
    "ec2:DescribeSpotPriceHistory",
    "ec2:DescribeStaleSecurityGroups",
    "ec2:DescribeStoreImageTasks",
    "ec2:DescribeSubnets",
    "ec2:DescribeTags",
    "ec2:DescribeTrafficMirrorFilterRules",
    "ec2:DescribeTrafficMirrorFilters",
    "ec2:DescribeTrafficMirrorSessions",
    "ec2:DescribeTrafficMirrorTargets",
    "ec2:DescribeTransitGatewayAttachments",
    "ec2:DescribeTransitGatewayConnectPeers",
    "ec2:DescribeTransitGatewayConnects",
    "ec2:DescribeTransitGatewayMulticastDomains",
    "ec2:DescribeTransitGatewayPeeringAttachments",
    "ec2:DescribeTransitGatewayPolicyTables",
    "ec2:DescribeTransitGatewayRouteTableAnnouncements",
    "ec2:DescribeTransitGatewayRouteTables",
    "ec2:DescribeTransitGatewayVpcAttachments",
    "ec2:DescribeTransitGateways",
    "ec2:DescribeTrunkInterfaceAssociations",
    "ec2:DescribeVerifiedAccessEndpoints",
    "ec2:DescribeVerifiedAccessGroups",
    "ec2:DescribeVerifiedAccessInstanceLoggingConfigurations",
    "ec2:DescribeVerifiedAccessInstanceWebAclAssociations",
    "ec2:DescribeVerifiedAccessInstances",
    "ec2:DescribeVerifiedAccessTrustProviders",
    "ec2:DescribeVolumeStatus",
    "ec2:DescribeVolumes",
    "ec2:DescribeVolumesModifications",
    "ec2:DescribeVpcBlockPublicAccessExclusions",
    "ec2:DescribeVpcBlockPublicAccessOptions",
    "ec2:DescribeVpcClassicLink",
    "ec2:DescribeVpcClassicLinkDnsSupport",
    "ec2:DescribeVpcEndpointConnectionNotifications",
    "ec2:DescribeVpcEndpointConnections",
    "ec2:DescribeVpcEndpointServiceConfigurations",
    "ec2:DescribeVpcEndpointServices",
    "ec2:DescribeVpcEndpoints",
    "ec2:DescribeVpcPeeringConnections",
    "ec2:DescribeVpcs",
    "ec2:DescribeVpnConnections",
    "ec2:DescribeVpnGateways",
    "ec2:DisableAllowedImagesSettings",
    "ec2:DisableAwsNetworkPerformanceMetricSubscription",
    "ec2:DisableEbsEncryptionByDefault",
    "ec2:DisableImageBlockPublicAccess",
    "ec2:DisableIpamOrganizationAdminAccount",
    "ec2:DisableSerialConsoleAccess",
    "ec2:DisableSnapshotBlockPublicAccess",
    "ec2:DisassociateIpamByoasn",
    "ec2:DisassociateTrunkInterface",
    "ec2:EnableAllowedImagesSettings",
    "ec2:EnableAwsNetworkPerformanceMetricSubscription",
    "ec2:EnableEbsEncryptionByDefault",
    "ec2:EnableImageBlockPublicAccess",
    "ec2:EnableIpamOrganizationAdminAccount",
    "ec2:EnableReachabilityAnalyzerOrganizationSharing",
    "ec2:EnableSerialConsoleAccess",
    "ec2:EnableSnapshotBlockPublicAccess",
    "ec2:ExportTransitGatewayRoutes",
    "ec2:GetAllowedImagesSettings",
    "ec2:GetAssociatedIpv6PoolCidrs",
    "ec2:GetAwsNetworkPerformanceData",
    "ec2:GetDefaultCreditSpecification",
    "ec2:GetEbsDefaultKmsKeyId",
    "ec2:GetEbsEncryptionByDefault",
    "ec2:GetHostReservationPurchasePreview",
    "ec2:GetImageBlockPublicAccessState",
    "ec2:GetInstanceMetadataDefaults",
    "ec2:GetInstanceTypesFromInstanceRequirements",
    "ec2:GetReservedInstancesExchangeQuote",
    "ec2:GetSerialConsoleAccessStatus",
    "ec2:GetSnapshotBlockPublicAccessState",
    "ec2:GetSpotPlacementScores",
    "ec2:GetSubnetCidrReservations",
    "ec2:GetTransitGatewayAttachmentPropagations",
    "ec2:GetTransitGatewayPrefixListReferences",
    "ec2:GetTransitGatewayRouteTableAssociations",
    "ec2:GetTransitGatewayRouteTablePropagations",
    "ec2:GetVpnConnectionDeviceTypes",
    "ec2:InjectApiError",
    "ec2:ListImagesInRecycleBin",
    "ec2:ListSnapshotsInRecycleBin",
    "ec2:ModifyAvailabilityZoneGroup",
    "ec2:ModifyDefaultCreditSpecification",
    "ec2:ModifyEbsDefaultKmsKeyId",
    "ec2:ModifyIdFormat",
    "ec2:ModifyIdentityIdFormat",
    "ec2:ModifyInstanceMetadataDefaults",
    "ec2:ModifyVpcBlockPublicAccessOptions",
    "ec2:MoveAddressToVpc",
    "ec2:ProvisionByoipCidr",
    "ec2:PurchaseReservedInstancesOffering",
    "ec2:PurchaseScheduledInstances",
    "ec2:RegisterInstanceEventNotificationAttributes",
    "ec2:ReplaceImageCriteriaInAllowedImagesSettings",
    "ec2:ResetEbsDefaultKmsKeyId",
    "ec2:RestoreAddressToClassic",
    "ec2:RunScheduledInstances",
    "ec2:StartDeclarativePoliciesReport",
    "ec2:WithdrawByoipCidr",
    "ec2messages:AcknowledgeMessage",
    "ec2messages:DeleteMessage",
    "ec2messages:FailMessage",
    "ec2messages:GetEndpoint",
    "ec2messages:GetMessages",
    "ec2messages:SendReply",
    "ecr:BatchImportUpstreamImage",
    "ecr:CreatePullThroughCacheRule",
    "ecr:CreateRepositoryCreationTemplate",
    "ecr:DeletePullThroughCacheRule",
    "ecr:DeleteRegistryPolicy",
    "ecr:DeleteRepositoryCreationTemplate",
    "ecr:DescribePullThroughCacheRules",
    "ecr:DescribeRegistry",
    "ecr:DescribeRepositoryCreationTemplates",
    "ecr:GetAccountSetting",
    "ecr:GetAuthorizationToken",
    "ecr:GetImageCopyStatus",
    "ecr:GetRegistryPolicy",
    "ecr:GetRegistryScanningConfiguration",
    "ecr:PutAccountSetting",
    "ecr:PutRegistryPolicy",
    "ecr:PutRegistryScanningConfiguration",
    "ecr:PutReplicationConfiguration",
    "ecr:UpdatePullThroughCacheRule",
    "ecr:UpdateRepositoryCreationTemplate",
    "ecr:ValidatePullThroughCacheRule",
    "ecr-public:GetAuthorizationToken",
    "ecs:CreateCapacityProvider",
    "ecs:CreateTaskSet",
    "ecs:DeleteAccountSetting",
    "ecs:DeregisterTaskDefinition",
    "ecs:DescribeTaskDefinition",
    "ecs:DiscoverPollEndpoint",
    "ecs:ListAccountSettings",
    "ecs:ListClusters",
    "ecs:ListServices",
    "ecs:ListServicesByNamespace",
    "ecs:ListTaskDefinitionFamilies",
    "ecs:ListTaskDefinitions",
    "ecs:PutAccountSetting",
    "ecs:PutAccountSettingDefault",
    "eks:CreateCluster",
    "eks:CreateEksAnywhereSubscription",
    "eks:DescribeAddonConfiguration",
    "eks:DescribeAddonVersions",
    "eks:DescribeClusterVersions",
    "eks:ListAccessPolicies",
    "eks:ListClusters",
    "eks:ListEksAnywhereSubscriptions",
    "eks:RegisterCluster",
    "elasticache:DescribeCacheEngineVersions",
    "elasticache:DescribeEngineDefaultParameters",
    "elasticache:DescribeEvents",
    "elasticache:DescribeReservedCacheNodesOfferings",
    "elasticache:DescribeServiceUpdates",
    "elasticbeanstalk:CheckDNSAvailability",
    "elasticbeanstalk:CreateStorageLocation",
    "elasticbeanstalk:DescribeAccountAttributes",
    "elasticbeanstalk:ListPlatformBranches",
    "elasticfilesystem:CreateFileSystem",
    "elasticfilesystem:DescribeAccountPreferences",
    "elasticfilesystem:PutAccountPreferences",
    "elasticloadbalancing:DescribeAccountLimits",
    "elasticloadbalancing:DescribeCapacityReservation",
    "elasticloadbalancing:DescribeInstanceHealth",
    "elasticloadbalancing:DescribeListenerAttributes",
    "elasticloadbalancing:DescribeListenerCertificates",
    "elasticloadbalancing:DescribeListeners",
    "elasticloadbalancing:DescribeLoadBalancerAttributes",
    "elasticloadbalancing:DescribeLoadBalancerPolicies",
    "elasticloadbalancing:DescribeLoadBalancerPolicyTypes",
    "elasticloadbalancing:DescribeLoadBalancers",
    "elasticloadbalancing:DescribeRules",
    "elasticloadbalancing:DescribeSSLPolicies",
    "elasticloadbalancing:DescribeTags",
    "elasticloadbalancing:DescribeTargetGroupAttributes",
    "elasticloadbalancing:DescribeTargetGroups",
    "elasticloadbalancing:DescribeTargetHealth",
    "elasticloadbalancing:DescribeTrustStoreAssociations",
    "elasticloadbalancing:DescribeTrustStoreRevocations",
    "elasticloadbalancing:DescribeTrustStores",
    "elasticloadbalancing:SetWebAcl",
    "elasticmapreduce:CreateRepository",
    "elasticmapreduce:CreateSecurityConfiguration",
    "elasticmapreduce:CreateStudio",
    "elasticmapreduce:DeleteRepository",
    "elasticmapreduce:DeleteSecurityConfiguration",
    "elasticmapreduce:DescribeReleaseLabel",
    "elasticmapreduce:DescribeRepository",
    "elasticmapreduce:DescribeSecurityConfiguration",
    "elasticmapreduce:GetBlockPublicAccessConfiguration",
    "elasticmapreduce:LinkRepository",
    "elasticmapreduce:ListClusters",
    "elasticmapreduce:ListEditors",
    "elasticmapreduce:ListNotebookExecutions",
    "elasticmapreduce:ListReleaseLabels",
    "elasticmapreduce:ListRepositories",
    "elasticmapreduce:ListSecurityConfigurations",
    "elasticmapreduce:ListStudioSessionMappings",
    "elasticmapreduce:ListStudios",
    "elasticmapreduce:ListSupportedInstanceTypes",
    "elasticmapreduce:PutBlockPublicAccessConfiguration",
    "elasticmapreduce:RunJobFlow",
    "elasticmapreduce:UnlinkRepository",
    "elasticmapreduce:UpdateRepository",
    "elasticmapreduce:ViewEventsFromAllClustersInConsole",
    "elastictranscoder:CreatePipeline",
    "elastictranscoder:CreatePreset",
    "elastictranscoder:ListJobsByStatus",
    "elastictranscoder:ListPipelines",
    "elastictranscoder:ListPresets",
    "elastictranscoder:TestRole",
    "elemental-activations:CompleteAccountRegistration",
    "elemental-activations:CompleteFileUpload",
    "elemental-activations:ConfirmAccount",
    "elemental-activations:DownloadKickstart",
    "elemental-activations:DownloadSoftware",
    "elemental-activations:GenerateLicense",
    "elemental-activations:GenerateLicenses",
    "elemental-activations:GetArtifactGroupSoftwareVersions",
    "elemental-activations:GetAsset",
    "elemental-activations:GetAssets",
    "elemental-activations:GetProductAdvisories",
    "elemental-activations:GetSoftwareVersions",
    "elemental-activations:StartFileUpload",
    "elemental-appliances-software:CompleteUpload",
    "elemental-appliances-software:CreateOrderV1",
    "elemental-appliances-software:GetAvsCorrectAddress",
    "elemental-appliances-software:GetBillingAddresses",
    "elemental-appliances-software:GetDeliveryAddressesV2",
    "elemental-appliances-software:GetOrder",
    "elemental-appliances-software:GetOrdersV2",
    "elemental-appliances-software:GetTaxes",
    "elemental-appliances-software:ListQuotes",
    "elemental-appliances-software:StartUpload",
    "elemental-appliances-software:SubmitOrderV1",
    "elemental-support-cases:CheckCasePermission",
    "elemental-support-cases:CreateCase",
    "elemental-support-cases:GetCasePermission",
    "elemental-support-cases:GetCases",
    "elemental-support-cases:GetUICache",
    "elemental-support-content:Query",
    "emr-containers:CreateCertificate",
    "emr-containers:CreateJobTemplate",
    "emr-containers:CreateSecurityConfiguration",
    "emr-containers:CreateVirtualCluster",
    "emr-containers:ListJobTemplates",
    "emr-containers:ListSecurityConfigurations",
    "emr-containers:ListVirtualClusters",
    "emr-serverless:CreateApplication",
    "emr-serverless:ListApplications",
    "entityresolution:AddPolicyStatement",
    "entityresolution:CreateIdMappingWorkflow",
    "entityresolution:CreateIdNamespace",
    "entityresolution:CreateMatchingWorkflow",
    "entityresolution:CreateSchemaMapping",
    "entityresolution:DeletePolicyStatement",
    "entityresolution:GetPolicy",
    "entityresolution:ListIdMappingWorkflows",
    "entityresolution:ListIdNamespaces",
    "entityresolution:ListMatchingWorkflows",
    "entityresolution:ListSchemaMappings",
    "entityresolution:ListTagsForResource",
    "entityresolution:PutPolicy",
    "entityresolution:UseIdNamespace",
    "entityresolution:UseWorkflow",
    "es:AcceptInboundConnection",
    "es:AcceptInboundCrossClusterSearchConnection",
    "es:AuthorizeVpcEndpointAccess",
    "es:CreateApplication",
    "es:CreateElasticsearchServiceRole",
    "es:CreatePackage",
    "es:CreateServiceRole",
    "es:CreateVpcEndpoint",
    "es:DeleteElasticsearchServiceRole",
    "es:DeleteInboundConnection",
    "es:DeleteInboundCrossClusterSearchConnection",
    "es:DeleteOutboundConnection",
    "es:DeleteOutboundCrossClusterSearchConnection",
    "es:DeletePackage",
    "es:DeleteVpcEndpoint",
    "es:DescribeElasticsearchInstanceTypeLimits",
    "es:DescribeInboundConnections",
    "es:DescribeInboundCrossClusterSearchConnections",
    "es:DescribeInstanceTypeLimits",
    "es:DescribeOutboundConnections",
    "es:DescribeOutboundCrossClusterSearchConnections",
    "es:DescribePackages",
    "es:DescribeReservedElasticsearchInstanceOfferings",
    "es:DescribeReservedElasticsearchInstances",
    "es:DescribeReservedInstanceOfferings",
    "es:DescribeReservedInstances",
    "es:DescribeVpcEndpoints",
    "es:GetPackageVersionHistory",
    "es:ListDomainNames",
    "es:ListDomainsForPackage",
    "es:ListElasticsearchInstanceTypeDetails",
    "es:ListElasticsearchInstanceTypes",
    "es:ListElasticsearchVersions",
    "es:ListInstanceTypeDetails",
    "es:ListVersions",
    "es:ListVpcEndpointAccess",
    "es:ListVpcEndpoints",
    "es:ListVpcEndpointsForDomain",
    "es:PurchaseReservedElasticsearchInstanceOffering",
    "es:PurchaseReservedInstanceOffering",
    "es:RejectInboundConnection",
    "es:RejectInboundCrossClusterSearchConnection",
    "es:RevokeVpcEndpointAccess",
    "es:UpdatePackage",
    "es:UpdatePackageScope",
    "es:UpdateVpcEndpoint",
    "events:ListApiDestinations",
    "events:ListArchives",
    "events:ListConnections",
    "events:ListEndpoints",
    "events:ListEventBuses",
    "events:ListEventSources",
    "events:ListPartnerEventSources",
    "events:ListReplays",
    "events:ListRuleNamesByTarget",
    "events:ListRules",
    "events:PutPartnerEvents",
    "events:PutPermission",
    "events:RemovePermission",
    "events:TestEventPattern",
    "evidently:CreateExperiment",
    "evidently:CreateFeature",
    "evidently:CreateLaunch",
    "evidently:CreateProject",
    "evidently:CreateSegment",
    "evidently:ListExperiments",
    "evidently:ListFeatures",
    "evidently:ListLaunches",
    "evidently:ListProjects",
    "evidently:ListSegmentReferences",
    "evidently:ListSegments",
    "evidently:ListTagsForResource",
    "evidently:TestSegmentPattern",
    "finspace:CreateKxEnvironment",
    "finspace:ListKxEnvironments",
    "firehose:ListDeliveryStreams",
    "fis:GetTargetResourceType",
    "fis:ListActions",
    "fis:ListExperimentTemplates",
    "fis:ListExperiments",
    "fis:ListTargetResourceTypes",
    "fms:AssociateAdminAccount",
    "fms:AssociateThirdPartyFirewall",
    "fms:DeleteNotificationChannel",
    "fms:DisassociateAdminAccount",
    "fms:DisassociateThirdPartyFirewall",
    "fms:GetAdminAccount",
    "fms:GetAdminScope",
    "fms:GetNotificationChannel",
    "fms:GetThirdPartyFirewallAssociationStatus",
    "fms:ListAdminAccountsForOrganization",
    "fms:ListAdminsManagingAccount",
    "fms:ListAppsLists",
    "fms:ListDiscoveredResources",
    "fms:ListMemberAccounts",
    "fms:ListPolicies",
    "fms:ListProtocolsLists",
    "fms:ListResourceSets",
    "fms:ListThirdPartyFirewallFirewallPolicies",
    "fms:PutAdminAccount",
    "fms:PutNotificationChannel",
    "forecast:CreateAutoPredictor",
    "forecast:ListDatasetGroups",
    "forecast:ListDatasetImportJobs",
    "forecast:ListDatasets",
    "forecast:ListExplainabilities",
    "forecast:ListExplainabilityExports",
    "forecast:ListForecastExportJobs",
    "forecast:ListForecasts",
    "forecast:ListMonitors",
    "forecast:ListPredictorBacktestExportJobs",
    "forecast:ListPredictors",
    "forecast:ListWhatIfAnalyses",
    "forecast:ListWhatIfForecastExports",
    "forecast:ListWhatIfForecasts",
    "frauddetector:BatchCreateVariable",
    "frauddetector:CreateList",
    "frauddetector:CreateVariable",
    "frauddetector:GetKMSEncryptionKey",
    "frauddetector:PutKMSEncryptionKey",
    "freertos:CreateSubscription",
    "freertos:DescribeHardwarePlatform",
    "freertos:GetEmpPatchUrl",
    "freertos:GetSoftwareURL",
    "freertos:GetSoftwareURLForConfiguration",
    "freertos:GetSubscriptionBillingAmount",
    "freertos:ListFreeRTOSVersions",
    "freertos:ListHardwarePlatforms",
    "freertos:ListHardwareVendors",
    "freertos:ListSoftwareConfigurations",
    "freertos:ListSoftwarePatches",
    "freertos:ListSubscriptionEmails",
    "freertos:ListSubscriptions",
    "freertos:UpdateEmailRecipients",
    "freertos:VerifyEmail",
    "freetier:GetFreeTierAlertPreference",
    "freetier:GetFreeTierUsage",
    "freetier:PutFreeTierAlertPreference",
    "fsx:DescribeBackups",
    "fsx:DescribeDataRepositoryAssociations",
    "fsx:DescribeDataRepositoryTasks",
    "fsx:DescribeFileCaches",
    "fsx:DescribeFileSystems",
    "fsx:DescribeSharedVpcConfiguration",
    "fsx:DescribeSnapshots",
    "fsx:DescribeStorageVirtualMachines",
    "fsx:DescribeVolumes",
    "fsx:UpdateSharedVpcConfiguration",
    "gamelift:AcceptMatch",
    "gamelift:CreateAlias",
    "gamelift:CreateBuild",
    "gamelift:CreateContainerFleet",
    "gamelift:CreateContainerGroupDefinition",
    "gamelift:CreateFleet",
    "gamelift:CreateGameServerGroup",
    "gamelift:CreateGameSession",
    "gamelift:CreateGameSessionQueue",
    "gamelift:CreateLocation",
    "gamelift:CreateMatchmakingConfiguration",
    "gamelift:CreateMatchmakingRuleSet",
    "gamelift:CreatePlayerSession",
    "gamelift:CreatePlayerSessions",
    "gamelift:CreateScript",
    "gamelift:CreateVpcPeeringAuthorization",
    "gamelift:CreateVpcPeeringConnection",
    "gamelift:DeleteVpcPeeringAuthorization",
    "gamelift:DeleteVpcPeeringConnection",
    "gamelift:DescribeEC2InstanceLimits",
    "gamelift:DescribeFleetAttributes",
    "gamelift:DescribeFleetCapacity",
    "gamelift:DescribeFleetUtilization",
    "gamelift:DescribeGameSessionDetails",
    "gamelift:DescribeGameSessionPlacement",
    "gamelift:DescribeGameSessionQueues",
    "gamelift:DescribeGameSessions",
    "gamelift:DescribeMatchmaking",
    "gamelift:DescribeMatchmakingConfigurations",
    "gamelift:DescribeMatchmakingRuleSets",
    "gamelift:DescribePlayerSessions",
    "gamelift:DescribeVpcPeeringAuthorizations",
    "gamelift:DescribeVpcPeeringConnections",
    "gamelift:GetGameSessionLogUrl",
    "gamelift:ListAliases",
    "gamelift:ListBuilds",
    "gamelift:ListContainerFleets",
    "gamelift:ListContainerGroupDefinitions",
    "gamelift:ListFleetDeployments",
    "gamelift:ListFleets",
    "gamelift:ListGameServerGroups",
    "gamelift:ListLocations",
    "gamelift:ListScripts",
    "gamelift:SearchGameSessions",
    "gamelift:StartMatchBackfill",
    "gamelift:StartMatchmaking",
    "gamelift:StopGameSessionPlacement",
    "gamelift:StopMatchmaking",
    "gamelift:TerminateGameSession",
    "gamelift:UpdateGameSession",
    "gamelift:ValidateMatchmakingRuleSet",
    "gameliftstreams:CreateApplication",
    "gameliftstreams:CreateStreamGroup",
    "gameliftstreams:ListApplications",
    "gameliftstreams:ListStreamGroups",
    "gameliftstreams:ListStreamSessionsByAccount",
    "glacier:GetDataRetrievalPolicy",
    "glacier:ListProvisionedCapacity",
    "glacier:ListVaults",
    "glacier:PurchaseProvisionedCapacity",
    "glacier:SetDataRetrievalPolicy",
    "globalaccelerator:AdvertiseByoipCidr",
    "globalaccelerator:CreateAccelerator",
    "globalaccelerator:CreateCrossAccountAttachment",
    "globalaccelerator:CreateCustomRoutingAccelerator",
    "globalaccelerator:DeprovisionByoipCidr",
    "globalaccelerator:ListAccelerators",
    "globalaccelerator:ListByoipCidrs",
    "globalaccelerator:ListCrossAccountAttachments",
    "globalaccelerator:ListCrossAccountResourceAccounts",
    "globalaccelerator:ListCrossAccountResources",
    "globalaccelerator:ListCustomRoutingAccelerators",
    "globalaccelerator:ListCustomRoutingPortMappingsByDestination",
    "globalaccelerator:ProvisionByoipCidr",
    "globalaccelerator:WithdrawByoipCidr",
    "glue:BatchGetCustomEntityTypes",
    "glue:BatchGetStageFiles",
    "glue:CheckSchemaVersionValidity",
    "glue:CreateClassifier",
    "glue:CreateCrawler",
    "glue:CreateCustomEntityType",
    "glue:CreateDataQualityRuleset",
    "glue:CreateDevEndpoint",
    "glue:CreateInboundIntegration",
    "glue:CreateMLTransform",
    "glue:CreateScript",
    "glue:CreateSecurityConfiguration",
    "glue:DeleteClassifier",
    "glue:DeleteCustomEntityType",
    "glue:DeleteSecurityConfiguration",
    "glue:DeregisterDataPreview",
    "glue:DescribeConnectionType",
    "glue:DescribeInboundIntegrations",
    "glue:GetClassifier",
    "glue:GetClassifiers",
    "glue:GetColumnStatisticsTaskRun",
    "glue:GetColumnStatisticsTaskRuns",
    "glue:GetColumnStatisticsTaskSettings",
    "glue:GetCrawlerMetrics",
    "glue:GetCrawlers",
    "glue:GetCustomEntityType",
    "glue:GetDataPreviewStatement",
    "glue:GetDataflowGraph",
    "glue:GetDevEndpoints",
    "glue:GetEnvironment",
    "glue:GetExecutors",
    "glue:GetExecutorsThreads",
    "glue:GetGeneratedCode",
    "glue:GetJobBookmark",
    "glue:GetJobs",
    "glue:GetLogParsingStatus",
    "glue:GetMapping",
    "glue:GetNotebookInstanceStatus",
    "glue:GetPlan",
    "glue:GetQueries",
    "glue:GetQuery",
    "glue:GetRecipeAction",
    "glue:GetSecurityConfiguration",
    "glue:GetSecurityConfigurations",
    "glue:GetStage",
    "glue:GetStageAttempt",
    "glue:GetStageAttemptTaskList",
    "glue:GetStageAttemptTaskSummary",
    "glue:GetStageFiles",
    "glue:GetStages",
    "glue:GetStorage",
    "glue:GetStorageUnit",
    "glue:GetTriggers",
    "glue:GlueNotebookAuthorize",
    "glue:GlueNotebookRefreshCredentials",
    "glue:ListBlueprints",
    "glue:ListColumnStatisticsTaskRuns",
    "glue:ListConnectionTypes",
    "glue:ListCrawlers",
    "glue:ListCustomEntityTypes",
    "glue:ListDevEndpoints",
    "glue:ListJobs",
    "glue:ListRegistries",
    "glue:ListSessions",
    "glue:ListTriggers",
    "glue:ListUsageProfiles",
    "glue:ListWorkflows",
    "glue:RequestLogParsing",
    "glue:ResetJobBookmark",
    "glue:RunDataPreviewStatement",
    "glue:SendFeedback",
    "glue:SendRecipeAction",
    "glue:StartCompletion",
    "glue:StartCrawlerSchedule",
    "glue:StartNotebook",
    "glue:StopCrawlerSchedule",
    "glue:TerminateNotebook",
    "glue:TestConnection",
    "glue:UpdateClassifier",
    "glue:UpdateCrawlerSchedule",
    "glue:UseGlueStudio",
    "grafana:CreateWorkspace",
    "grafana:ListWorkspaces",
    "greengrass:AssociateServiceRoleToAccount",
    "greengrass:CreateConnectorDefinition",
    "greengrass:CreateCoreDefinition",
    "greengrass:CreateDeviceDefinition",
    "greengrass:CreateFunctionDefinition",
    "greengrass:CreateGroup",
    "greengrass:CreateLoggerDefinition",
    "greengrass:CreateResourceDefinition",
    "greengrass:CreateSoftwareUpdateJob",
    "greengrass:CreateSubscriptionDefinition",
    "greengrass:DisassociateServiceRoleFromAccount",
    "greengrass:GetServiceRoleForAccount",
    "greengrass:ListBulkDeployments",
    "greengrass:ListComponents",
    "greengrass:ListConnectorDefinitions",
    "greengrass:ListCoreDefinitions",
    "greengrass:ListCoreDevices",
    "greengrass:ListDeviceDefinitions",
    "greengrass:ListFunctionDefinitions",
    "greengrass:ListGroups",
    "greengrass:ListLoggerDefinitions",
    "greengrass:ListResourceDefinitions",
    "greengrass:ListSubscriptionDefinitions",
    "greengrass:StartBulkDeployment",
    "groundstation:CreateConfig",
    "groundstation:CreateDataflowEndpointGroup",
    "groundstation:CreateEphemeris",
    "groundstation:CreateMissionProfile",
    "groundstation:GetMinuteUsage",
    "groundstation:ListConfigs",
    "groundstation:ListContacts",
    "groundstation:ListDataflowEndpointGroups",
    "groundstation:ListEphemerides",
    "groundstation:ListGroundStations",
    "groundstation:ListMissionProfiles",
    "groundstation:ListSatellites",
    "groundstation:RegisterAgent",
    "groundstation:ReserveContact",
    "groundtruthlabeling:AssociatePatchToManifestJob",
    "groundtruthlabeling:CreateBatch",
    "groundtruthlabeling:CreateIntakeForm",
    "groundtruthlabeling:CreateProject",
    "groundtruthlabeling:CreateWorkflowDefinition",
    "groundtruthlabeling:DescribeConsoleJob",
    "groundtruthlabeling:GenerateLIDARPreviewTaskConfigJob",
    "groundtruthlabeling:GetBatch",
    "groundtruthlabeling:GetIntakeFormStatus",
    "groundtruthlabeling:ListBatches",
    "groundtruthlabeling:ListDatasetObjects",
    "groundtruthlabeling:ListProjects",
    "groundtruthlabeling:RunFilterOrSampleDatasetJob",
    "groundtruthlabeling:RunGenerateManifestByCrawlingJob",
    "groundtruthlabeling:RunGenerateManifestMetricsJob",
    "groundtruthlabeling:UpdateBatch",
    "guardduty:AcceptAdministratorInvitation",
    "guardduty:AcceptInvitation",
    "guardduty:ArchiveFindings",
    "guardduty:CreateDetector",
    "guardduty:CreateIPSet",
    "guardduty:CreateMalwareProtectionPlan",
    "guardduty:CreateMembers",
    "guardduty:CreatePublishingDestination",
    "guardduty:CreateSampleFindings",
    "guardduty:CreateThreatIntelSet",
    "guardduty:DeclineInvitations",
    "guardduty:DeleteInvitations",
    "guardduty:DeleteMembers",
    "guardduty:DescribeMalwareScans",
    "guardduty:DescribeOrganizationConfiguration",
    "guardduty:DisableOrganizationAdminAccount",
    "guardduty:DisassociateFromAdministratorAccount",
    "guardduty:DisassociateFromMasterAccount",
    "guardduty:DisassociateMembers",
    "guardduty:EnableOrganizationAdminAccount",
    "guardduty:GetAdministratorAccount",
    "guardduty:GetFindings",
    "guardduty:GetFindingsStatistics",
    "guardduty:GetInvitationsCount",
    "guardduty:GetMalwareScanSettings",
    "guardduty:GetMasterAccount",
    "guardduty:GetMemberDetectors",
    "guardduty:GetMembers",
    "guardduty:GetOrganizationStatistics",
    "guardduty:GetRemainingFreeTrialDays",
    "guardduty:GetUsageStatistics",
    "guardduty:InviteMembers",
    "guardduty:ListDetectors",
    "guardduty:ListFilters",
    "guardduty:ListFindings",
    "guardduty:ListIPSets",
    "guardduty:ListInvitations",
    "guardduty:ListMalwareProtectionPlans",
    "guardduty:ListMembers",
    "guardduty:ListOrganizationAdminAccounts",
    "guardduty:ListPublishingDestinations",
    "guardduty:ListThreatIntelSets",
    "guardduty:SendSecurityTelemetry",
    "guardduty:StartMalwareScan",
    "guardduty:StartMonitoringMembers",
    "guardduty:StopMonitoringMembers",
    "guardduty:UnarchiveFindings",
    "guardduty:UpdateFindingsFeedback",
    "guardduty:UpdateMalwareScanSettings",
    "guardduty:UpdateMemberDetectors",
    "guardduty:UpdateOrganizationConfiguration",
    "health:DescribeAffectedAccountsForOrganization",
    "health:DescribeAffectedEntitiesForOrganization",
    "health:DescribeEntityAggregates",
    "health:DescribeEntityAggregatesForOrganization",
    "health:DescribeEventAggregates",
    "health:DescribeEventDetailsForOrganization",
    "health:DescribeEventTypes",
    "health:DescribeEvents",
    "health:DescribeEventsForOrganization",
    "health:DescribeHealthServiceStatusForOrganization",
    "health:DisableHealthServiceAccessForOrganization",
    "health:EnableHealthServiceAccessForOrganization",
    "healthlake:CreateFHIRDatastore",
    "healthlake:ListFHIRDatastores",
    "honeycode:ApproveTeamAssociation",
    "honeycode:CreateTeam",
    "honeycode:CreateTenant",
    "honeycode:DeleteDomains",
    "honeycode:DeregisterGroups",
    "honeycode:DescribeTeam",
    "honeycode:ListDomains",
    "honeycode:ListGroups",
    "honeycode:ListTagsForResource",
    "honeycode:ListTeamAssociations",
    "honeycode:ListTenants",
    "honeycode:RegisterDomainForVerification",
    "honeycode:RegisterGroups",
    "honeycode:RejectTeamAssociation",
    "honeycode:RestartDomainVerification",
    "honeycode:TagResource",
    "honeycode:UntagResource",
    "honeycode:UpdateTeam",
    "iam:CreateAccountAlias",
    "iam:DeleteAccountAlias",
    "iam:DeleteAccountPasswordPolicy",
    "iam:DeleteCloudFrontPublicKey",
    "iam:DisableOrganizationsRootCredentialsManagement",
    "iam:DisableOrganizationsRootSessions",
    "iam:EnableOrganizationsRootCredentialsManagement",
    "iam:EnableOrganizationsRootSessions",
    "iam:GenerateCredentialReport",
    "iam:GetAccountAuthorizationDetails",
    "iam:GetAccountEmailAddress",
    "iam:GetAccountName",
    "iam:GetAccountPasswordPolicy",
    "iam:GetAccountSummary",
    "iam:GetCloudFrontPublicKey",
    "iam:GetContextKeysForCustomPolicy",
    "iam:GetCredentialReport",
    "iam:GetOrganizationsAccessReport",
    "iam:GetServiceLastAccessedDetails",
    "iam:GetServiceLastAccessedDetailsWithEntities",
    "iam:ListAccountAliases",
    "iam:ListCloudFrontPublicKeys",
    "iam:ListGroups",
    "iam:ListInstanceProfiles",
    "iam:ListOpenIDConnectProviders",
    "iam:ListOrganizationsFeatures",
    "iam:ListPolicies",
    "iam:ListRoles",
    "iam:ListSAMLProviders",
    "iam:ListSTSRegionalEndpointsStatus",
    "iam:ListServerCertificates",
    "iam:ListUsers",
    "iam:ListVirtualMFADevices",
    "iam:SetSTSRegionalEndpointStatus",
    "iam:SetSecurityTokenServicePreferences",
    "iam:SimulateCustomPolicy",
    "iam:UpdateAccountEmailAddress",
    "iam:UpdateAccountName",
    "iam:UpdateAccountPasswordPolicy",
    "iam:UpdateCloudFrontPublicKey",
    "iam:UploadCloudFrontPublicKey",
    "identity-sync:CreateSyncProfile",
    "identitystore-auth:BatchDeleteSession",
    "identitystore-auth:BatchGetSession",
    "identitystore-auth:ListSessions",
    "imagebuilder:ListComponents",
    "imagebuilder:ListContainerRecipes",
    "imagebuilder:ListDistributionConfigurations",
    "imagebuilder:ListImagePipelines",
    "imagebuilder:ListImageRecipes",
    "imagebuilder:ListImages",
    "imagebuilder:ListInfrastructureConfigurations",
    "imagebuilder:ListLifecyclePolicies",
    "imagebuilder:ListWaitingWorkflowSteps",
    "imagebuilder:ListWorkflows",
    "importexport:CancelJob",
    "importexport:CreateJob",
    "importexport:GetShippingLabel",
    "importexport:GetStatus",
    "importexport:ListJobs",
    "importexport:UpdateJob",
    "inspector:AddAttributesToFindings",
    "inspector:CreateAssessmentTarget",
    "inspector:CreateAssessmentTemplate",
    "inspector:CreateExclusionsPreview",
    "inspector:CreateResourceGroup",
    "inspector:DeleteAssessmentRun",
    "inspector:DeleteAssessmentTarget",
    "inspector:DeleteAssessmentTemplate",
    "inspector:DescribeAssessmentRuns",
    "inspector:DescribeAssessmentTargets",
    "inspector:DescribeAssessmentTemplates",
    "inspector:DescribeCrossAccountAccessRole",
    "inspector:DescribeExclusions",
    "inspector:DescribeFindings",
    "inspector:DescribeResourceGroups",
    "inspector:DescribeRulesPackages",
    "inspector:GetAssessmentReport",
    "inspector:GetExclusionsPreview",
    "inspector:GetTelemetryMetadata",
    "inspector:ListAssessmentRunAgents",
    "inspector:ListAssessmentRuns",
    "inspector:ListAssessmentTargets",
    "inspector:ListAssessmentTemplates",
    "inspector:ListEventSubscriptions",
    "inspector:ListExclusions",
    "inspector:ListFindings",
    "inspector:ListRulesPackages",
    "inspector:ListTagsForResource",
    "inspector:PreviewAgents",
    "inspector:RegisterCrossAccountAccessRole",
    "inspector:RemoveAttributesFromFindings",
    "inspector:SetTagsForResource",
    "inspector:StartAssessmentRun",
    "inspector:StopAssessmentRun",
    "inspector:SubscribeToEvent",
    "inspector:UnsubscribeFromEvent",
    "inspector:UpdateAssessmentTarget",
    "inspector-scan:ScanSbom",
    "inspector2:AssociateMember",
    "inspector2:BatchGetAccountStatus",
    "inspector2:BatchGetCodeSnippet",
    "inspector2:BatchGetFindingDetails",
    "inspector2:BatchGetFreeTrialInfo",
    "inspector2:BatchGetMemberEc2DeepInspectionStatus",
    "inspector2:BatchUpdateMemberEc2DeepInspectionStatus",
    "inspector2:CancelFindingsReport",
    "inspector2:CancelSbomExport",
    "inspector2:CreateFindingsReport",
    "inspector2:CreateSbomExport",
    "inspector2:DescribeOrganizationConfiguration",
    "inspector2:Disable",
    "inspector2:DisableDelegatedAdminAccount",
    "inspector2:DisassociateMember",
    "inspector2:Enable",
    "inspector2:EnableDelegatedAdminAccount",
    "inspector2:GetCisScanReport",
    "inspector2:GetCisScanResultDetails",
    "inspector2:GetConfiguration",
    "inspector2:GetDelegatedAdminAccount",
    "inspector2:GetEc2DeepInspectionConfiguration",
    "inspector2:GetEncryptionKey",
    "inspector2:GetFindingsReportStatus",
    "inspector2:GetMember",
    "inspector2:GetSbomExport",
    "inspector2:ListAccountPermissions",
    "inspector2:ListCisScanConfigurations",
    "inspector2:ListCisScanResultsAggregatedByChecks",
    "inspector2:ListCisScanResultsAggregatedByTargetResource",
    "inspector2:ListCisScans",
    "inspector2:ListCoverage",
    "inspector2:ListCoverageStatistics",
    "inspector2:ListDelegatedAdminAccounts",
    "inspector2:ListFilters",
    "inspector2:ListFindingAggregations",
    "inspector2:ListFindings",
    "inspector2:ListMembers",
    "inspector2:ListTagsForResource",
    "inspector2:ListUsageTotals",
    "inspector2:ResetEncryptionKey",
    "inspector2:SearchVulnerabilities",
    "inspector2:SendCisSessionHealth",
    "inspector2:SendCisSessionTelemetry",
    "inspector2:StartCisSession",
    "inspector2:StopCisSession",
    "inspector2:UpdateConfiguration",
    "inspector2:UpdateEc2DeepInspectionConfiguration",
    "inspector2:UpdateEncryptionKey",
    "inspector2:UpdateOrgEc2DeepInspectionConfiguration",
    "inspector2:UpdateOrganizationConfiguration",
    "internetmonitor:Link",
    "internetmonitor:ListInternetEvents",
    "internetmonitor:ListMonitors",
    "invoicing:BatchGetInvoiceProfile",
    "invoicing:CreateInvoiceUnit",
    "invoicing:GetInvoiceEmailDeliveryPreferences",
    "invoicing:GetInvoicePDF",
    "invoicing:ListInvoiceSummaries",
    "invoicing:ListInvoiceUnits",
    "invoicing:PutInvoiceEmailDeliveryPreferences",
    "iot:AttachThingPrincipal",
    "iot:CancelAuditMitigationActionsTask",
    "iot:CancelAuditTask",
    "iot:CancelDetectMitigationActionsTask",
    "iot:ClearDefaultAuthorizer",
    "iot:CreateAuditSuppression",
    "iot:CreateCertificateFromCsr",
    "iot:CreateKeysAndCertificate",
    "iot:CreateTopicRuleDestination",
    "iot:DeleteAccountAuditConfiguration",
    "iot:DeleteAuditSuppression",
    "iot:DeleteRegistrationCode",
    "iot:DeleteV2LoggingLevel",
    "iot:DescribeAccountAuditConfiguration",
    "iot:DescribeAuditFinding",
    "iot:DescribeAuditMitigationActionsTask",
    "iot:DescribeAuditSuppression",
    "iot:DescribeAuditTask",
    "iot:DescribeDefaultAuthorizer",
    "iot:DescribeDetectMitigationActionsTask",
    "iot:DescribeEndpoint",
    "iot:DescribeEventConfigurations",
    "iot:DescribeThingRegistrationTask",
    "iot:DetachThingPrincipal",
    "iot:GetIndexingConfiguration",
    "iot:GetLoggingOptions",
    "iot:GetPackageConfiguration",
    "iot:GetRegistrationCode",
    "iot:GetV2LoggingOptions",
    "iot:ListAttachedPolicies",
    "iot:ListAuditFindings",
    "iot:ListAuditMitigationActionsExecutions",
    "iot:ListAuditMitigationActionsTasks",
    "iot:ListAuditSuppressions",
    "iot:ListAuditTasks",
    "iot:ListAuthorizers",
    "iot:ListBillingGroups",
    "iot:ListCACertificates",
    "iot:ListCertificateProviders",
    "iot:ListCertificates",
    "iot:ListCertificatesByCA",
    "iot:ListCommands",
    "iot:ListCustomMetrics",
    "iot:ListDetectMitigationActionsTasks",
    "iot:ListDimensions",
    "iot:ListDomainConfigurations",
    "iot:ListFleetMetrics",
    "iot:ListIndices",
    "iot:ListJobTemplates",
    "iot:ListJobs",
    "iot:ListManagedJobTemplates",
    "iot:ListMitigationActions",
    "iot:ListOTAUpdates",
    "iot:ListOutgoingCertificates",
    "iot:ListPackageVersions",
    "iot:ListPackages",
    "iot:ListPolicies",
    "iot:ListPolicyPrincipals",
    "iot:ListPrincipalPolicies",
    "iot:ListPrincipalThings",
    "iot:ListProvisioningTemplates",
    "iot:ListRelatedResourcesForAuditFinding",
    "iot:ListRetainedMessages",
    "iot:ListRoleAliases",
    "iot:ListScheduledAudits",
    "iot:ListStreams",
    "iot:ListThingGroups",
    "iot:ListThingPrincipals",
    "iot:ListThingRegistrationTaskReports",
    "iot:ListThingRegistrationTasks",
    "iot:ListThingTypes",
    "iot:ListThings",
    "iot:ListTopicRuleDestinations",
    "iot:ListTopicRules",
    "iot:ListTunnels",
    "iot:ListV2LoggingLevels",
    "iot:OpenTunnel",
    "iot:PutVerificationStateOnViolation",
    "iot:RegisterCACertificate",
    "iot:RegisterCertificate",
    "iot:RegisterCertificateWithoutCA",
    "iot:RegisterThing",
    "iot:SetLoggingOptions",
    "iot:SetV2LoggingLevel",
    "iot:SetV2LoggingOptions",
    "iot:StartAuditMitigationActionsTask",
    "iot:StartOnDemandAuditTask",
    "iot:StartThingRegistrationTask",
    "iot:StopThingRegistrationTask",
    "iot:UpdateAccountAuditConfiguration",
    "iot:UpdateAuditSuppression",
    "iot:UpdateEventConfigurations",
    "iot:UpdateIndexingConfiguration",
    "iot:UpdatePackageConfiguration",
    "iot:ValidateSecurityProfileBehaviors",
    "iot-device-tester:CheckVersion",
    "iot-device-tester:DownloadTestSuite",
    "iot-device-tester:LatestIdt",
    "iot-device-tester:SendMetrics",
    "iot-device-tester:SupportedVersion",
    "iot1click:ClaimDevicesByClaimCode",
    "iot1click:ListDevices",
    "iot1click:ListProjects",
    "iotanalytics:DescribeLoggingOptions",
    "iotanalytics:ListChannels",
    "iotanalytics:ListDatasets",
    "iotanalytics:ListDatastores",
    "iotanalytics:ListPipelines",
    "iotanalytics:PutLoggingOptions",
    "iotanalytics:RunPipelineActivity",
    "iotdeviceadvisor:CreateSuiteDefinition",
    "iotdeviceadvisor:GetEndpoint",
    "iotdeviceadvisor:ListSuiteDefinitions",
    "iotdeviceadvisor:StartSuiteRun",
    "iotevents:DescribeDetectorModelAnalysis",
    "iotevents:DescribeLoggingOptions",
    "iotevents:GetDetectorModelAnalysisResults",
    "iotevents:ListAlarmModels",
    "iotevents:ListDetectorModels",
    "iotevents:ListInputRoutings",
    "iotevents:ListInputs",
    "iotevents:PutLoggingOptions",
    "iotevents:StartDetectorModelAnalysis",
    "iotfleethub:CreateApplication",
    "iotfleethub:ListApplications",
    "iotfleetwise:GetEncryptionConfiguration",
    "iotfleetwise:GetLoggingOptions",
    "iotfleetwise:GetRegisterAccountStatus",
    "iotfleetwise:ListCampaigns",
    "iotfleetwise:ListDecoderManifests",
    "iotfleetwise:ListFleets",
    "iotfleetwise:ListModelManifests",
    "iotfleetwise:ListSignalCatalogs",
    "iotfleetwise:ListStateTemplates",
    "iotfleetwise:ListVehicles",
    "iotfleetwise:PutEncryptionConfiguration",
    "iotfleetwise:PutLoggingOptions",
    "iotfleetwise:RegisterAccount",
    "iotmanagedintegrations:CreateCredentialLocker",
    "iotmanagedintegrations:CreateDestination",
    "iotmanagedintegrations:CreateEventLogConfiguration",
    "iotmanagedintegrations:CreateManagedThing",
    "iotmanagedintegrations:CreateNotificationConfiguration",
    "iotmanagedintegrations:CreateOtaTask",
    "iotmanagedintegrations:CreateOtaTaskConfiguration",
    "iotmanagedintegrations:CreateProvisioningProfile",
    "iotmanagedintegrations:DeleteDestination",
    "iotmanagedintegrations:DeleteEventLogConfiguration",
    "iotmanagedintegrations:DeleteNotificationConfiguration",
    "iotmanagedintegrations:DeleteOtaTaskConfiguration",
    "iotmanagedintegrations:GetCustomEndpoint",
    "iotmanagedintegrations:GetDefaultEncryptionConfiguration",
    "iotmanagedintegrations:GetDestination",
    "iotmanagedintegrations:GetDeviceDiscovery",
    "iotmanagedintegrations:GetEventLogConfiguration",
    "iotmanagedintegrations:GetHubConfiguration",
    "iotmanagedintegrations:GetNotificationConfiguration",
    "iotmanagedintegrations:GetOtaTaskConfiguration",
    "iotmanagedintegrations:GetRuntimeLogConfiguration",
    "iotmanagedintegrations:GetSchemaVersion",
    "iotmanagedintegrations:ListCredentialLockers",
    "iotmanagedintegrations:ListDestinations",
    "iotmanagedintegrations:ListEventLogConfigurations",
    "iotmanagedintegrations:ListManagedThings",
    "iotmanagedintegrations:ListNotificationConfigurations",
    "iotmanagedintegrations:ListOtaTaskConfigurations",
    "iotmanagedintegrations:ListOtaTasks",
    "iotmanagedintegrations:ListProvisioningProfiles",
    "iotmanagedintegrations:ListSchemaVersions",
    "iotmanagedintegrations:PutDefaultEncryptionConfiguration",
    "iotmanagedintegrations:PutHubConfiguration",
    "iotmanagedintegrations:PutRuntimeLogConfiguration",
    "iotmanagedintegrations:RegisterCustomEndpoint",
    "iotmanagedintegrations:ResetRuntimeLogConfiguration",
    "iotmanagedintegrations:SendManagedThingCommand",
    "iotmanagedintegrations:StartDeviceDiscovery",
    "iotmanagedintegrations:UpdateDestination",
    "iotmanagedintegrations:UpdateEventLogConfiguration",
    "iotmanagedintegrations:UpdateNotificationConfiguration",
    "iotsitewise:CreateAssetModel",
    "iotsitewise:CreateBulkImportJob",
    "iotsitewise:CreateDataset",
    "iotsitewise:CreateGateway",
    "iotsitewise:CreatePortal",
    "iotsitewise:DescribeBulkImportJob",
    "iotsitewise:DescribeDefaultEncryptionConfiguration",
    "iotsitewise:DescribeLoggingOptions",
    "iotsitewise:DescribeStorageConfiguration",
    "iotsitewise:EnableSiteWiseIntegration",
    "iotsitewise:ExecuteQuery",
    "iotsitewise:InvokeAssistant",
    "iotsitewise:ListAssetModels",
    "iotsitewise:ListBulkImportJobs",
    "iotsitewise:ListDatasets",
    "iotsitewise:ListGateways",
    "iotsitewise:ListPortals",
    "iotsitewise:PutDefaultEncryptionConfiguration",
    "iotsitewise:PutLoggingOptions",
    "iotsitewise:PutStorageConfiguration",
    "iottwinmaker:CreateMetadataTransferJob",
    "iottwinmaker:CreateWorkspace",
    "iottwinmaker:GetPricingPlan",
    "iottwinmaker:ListMetadataTransferJobs",
    "iottwinmaker:ListWorkspaces",
    "iottwinmaker:UpdatePricingPlan",
    "iotwireless:AssociateAwsAccountWithPartnerAccount",
    "iotwireless:CreateDestination",
    "iotwireless:CreateDeviceProfile",
    "iotwireless:CreateFuotaTask",
    "iotwireless:CreateMulticastGroup",
    "iotwireless:CreateServiceProfile",
    "iotwireless:CreateWirelessDevice",
    "iotwireless:CreateWirelessGateway",
    "iotwireless:CreateWirelessGatewayTaskDefinition",
    "iotwireless:DeleteQueuedMessages",
    "iotwireless:GetEventConfigurationByResourceTypes",
    "iotwireless:GetLogLevelsByResourceTypes",
    "iotwireless:GetMetricConfiguration",
    "iotwireless:GetMetrics",
    "iotwireless:GetPositionEstimate",
    "iotwireless:GetServiceEndpoint",
    "iotwireless:ListDestinations",
    "iotwireless:ListDeviceProfiles",
    "iotwireless:ListEventConfigurations",
    "iotwireless:ListFuotaTasks",
    "iotwireless:ListMulticastGroups",
    "iotwireless:ListNetworkAnalyzerConfigurations",
    "iotwireless:ListPartnerAccounts",
    "iotwireless:ListPositionConfigurations",
    "iotwireless:ListQueuedMessages",
    "iotwireless:ListServiceProfiles",
    "iotwireless:ListWirelessDeviceImportTasks",
    "iotwireless:ListWirelessDevices",
    "iotwireless:ListWirelessGatewayTaskDefinitions",
    "iotwireless:ListWirelessGateways",
    "iotwireless:ResetAllResourceLogLevels",
    "iotwireless:StartSingleWirelessDeviceImportTask",
    "iotwireless:UpdateEventConfigurationByResourceTypes",
    "iotwireless:UpdateLogLevelsByResourceTypes",
    "iotwireless:UpdateMetricConfiguration",
    "iq:CreateConversation",
    "iq:CreateExpert",
    "iq:CreateListing",
    "iq:CreateMilestoneProposal",
    "iq:CreatePaymentRequest",
    "iq:CreateProject",
    "iq:CreateRequest",
    "iq:CreateScheduledProposal",
    "iq:CreateSeller",
    "iq:CreateUpfrontProposal",
    "iq:InitiateCall",
    "iq:UploadAttachment",
    "ivs:ListEncoderConfigurations",
    "ivs:ListIngestConfigurations",
    "ivs:ListPlaybackRestrictionPolicies",
    "ivs:ListPublicKeys",
    "ivs:ListStorageConfigurations",
    "kafka:DescribeClusterOperation",
    "kafka:DescribeClusterOperationV2",
    "kafka:GetBootstrapBrokers",
    "kafka:GetCompatibleKafkaVersions",
    "kafka:ListClusters",
    "kafka:ListClustersV2",
    "kafka:ListConfigurations",
    "kafka:ListKafkaVersions",
    "kafka:ListReplicators",
    "kafka:ListVpcConnections",
    "kafkaconnect:CreateConnector",
    "kafkaconnect:CreateCustomPlugin",
    "kafkaconnect:CreateWorkerConfiguration",
    "kafkaconnect:ListConnectors",
    "kafkaconnect:ListCustomPlugins",
    "kafkaconnect:ListWorkerConfigurations",
    "kendra:CreateIndex",
    "kendra:ListIndices",
    "kendra-ranking:CreateRescoreExecutionPlan",
    "kendra-ranking:ListRescoreExecutionPlans",
    "kinesis:DescribeLimits",
    "kinesis:DisableEnhancedMonitoring",
    "kinesis:EnableEnhancedMonitoring",
    "kinesis:ListStreams",
    "kinesis:UpdateShardCount",
    "kinesis:UpdateStreamMode",
    "kinesisanalytics:CreateApplication",
    "kinesisanalytics:DiscoverInputSchema",
    "kinesisanalytics:ListApplications",
    "kinesisvideo:ListEdgeAgentConfigurations",
    "kinesisvideo:ListSignalingChannels",
    "kinesisvideo:ListStreams",
    "kms:ConnectCustomKeyStore",
    "kms:CreateCustomKeyStore",
    "kms:CreateKey",
    "kms:DeleteCustomKeyStore",
    "kms:DescribeCustomKeyStores",
    "kms:DisconnectCustomKeyStore",
    "kms:GenerateRandom",
    "kms:ListAliases",
    "kms:ListKeys",
    "kms:ListRetirableGrants",
    "kms:UpdateCustomKeyStore",
    "lakeformation:AddLFTagsToResource",
    "lakeformation:BatchGrantPermissions",
    "lakeformation:BatchRevokePermissions",
    "lakeformation:CancelTransaction",
    "lakeformation:CommitTransaction",
    "lakeformation:CreateDataCellsFilter",
    "lakeformation:CreateLFTag",
    "lakeformation:CreateLFTagExpression",
    "lakeformation:CreateLakeFormationIdentityCenterConfiguration",
    "lakeformation:CreateLakeFormationOptIn",
    "lakeformation:DeleteDataCellsFilter",
    "lakeformation:DeleteLFTag",
    "lakeformation:DeleteLFTagExpression",
    "lakeformation:DeleteLakeFormationIdentityCenterConfiguration",
    "lakeformation:DeleteLakeFormationOptIn",
    "lakeformation:DeleteObjectsOnCancel",
    "lakeformation:DeregisterResource",
    "lakeformation:DescribeLakeFormationIdentityCenterConfiguration",
    "lakeformation:DescribeResource",
    "lakeformation:DescribeTransaction",
    "lakeformation:ExtendTransaction",
    "lakeformation:GetDataAccess",
    "lakeformation:GetDataCellsFilter",
    "lakeformation:GetDataLakePrincipal",
    "lakeformation:GetDataLakeSettings",
    "lakeformation:GetEffectivePermissionsForPath",
    "lakeformation:GetLFTag",
    "lakeformation:GetLFTagExpression",
    "lakeformation:GetQueryState",
    "lakeformation:GetQueryStatistics",
    "lakeformation:GetResourceLFTags",
    "lakeformation:GetTableObjects",
    "lakeformation:GetWorkUnitResults",
    "lakeformation:GetWorkUnits",
    "lakeformation:GrantPermissions",
    "lakeformation:ListDataCellsFilter",
    "lakeformation:ListLFTagExpressions",
    "lakeformation:ListLFTags",
    "lakeformation:ListLakeFormationOptIns",
    "lakeformation:ListPermissions",
    "lakeformation:ListResources",
    "lakeformation:ListTableStorageOptimizers",
    "lakeformation:ListTransactions",
    "lakeformation:PutDataLakeSettings",
    "lakeformation:RegisterResource",
    "lakeformation:RemoveLFTagsFromResource",
    "lakeformation:RevokePermissions",
    "lakeformation:SearchDatabasesByLFTags",
    "lakeformation:SearchTablesByLFTags",
    "lakeformation:StartQueryPlanning",
    "lakeformation:StartTransaction",
    "lakeformation:UpdateDataCellsFilter",
    "lakeformation:UpdateLFTag",
    "lakeformation:UpdateLFTagExpression",
    "lakeformation:UpdateLakeFormationIdentityCenterConfiguration",
    "lakeformation:UpdateResource",
    "lakeformation:UpdateTableObjects",
    "lakeformation:UpdateTableStorageOptimizer",
    "lambda:CreateCodeSigningConfig",
    "lambda:CreateEventSourceMapping",
    "lambda:GetAccountSettings",
    "lambda:ListCodeSigningConfigs",
    "lambda:ListEventSourceMappings",
    "lambda:ListFunctions",
    "lambda:ListLayerVersions",
    "lambda:ListLayers",
    "launchwizard:CreateAdditionalNode",
    "launchwizard:CreateSettingsSet",
    "launchwizard:DeleteAdditionalNode",
    "launchwizard:DeleteApp",
    "launchwizard:DeleteSettingsSet",
    "launchwizard:DescribeAdditionalNode",
    "launchwizard:DescribeProvisionedApp",
    "launchwizard:DescribeProvisioningEvents",
    "launchwizard:DescribeSettingsSet",
    "launchwizard:GetInfrastructureSuggestion",
    "launchwizard:GetIpAddress",
    "launchwizard:GetResourceCostEstimate",
    "launchwizard:GetResourceRecommendation",
    "launchwizard:GetSettingsSet",
    "launchwizard:GetWorkload",
    "launchwizard:GetWorkloadAsset",
    "launchwizard:GetWorkloadAssets",
    "launchwizard:GetWorkloadDeploymentPattern",
    "launchwizard:ListAdditionalNodes",
    "launchwizard:ListAllowedResources",
    "launchwizard:ListDeploymentEvents",
    "launchwizard:ListDeployments",
    "launchwizard:ListProvisionedApps",
    "launchwizard:ListResourceCostEstimates",
    "launchwizard:ListSettingsSets",
    "launchwizard:ListWorkloadDeploymentOptions",
    "launchwizard:ListWorkloadDeploymentPatterns",
    "launchwizard:ListWorkloads",
    "launchwizard:PutSettingsSet",
    "launchwizard:StartProvisioning",
    "launchwizard:UpdateSettingsSet",
    "lex:CreateTestSet",
    "lex:CreateUploadUrl",
    "lex:GetBotAliases",
    "lex:GetBots",
    "lex:GetBuiltinIntent",
    "lex:GetBuiltinIntents",
    "lex:GetBuiltinSlotTypes",
    "lex:GetImport",
    "lex:GetIntents",
    "lex:GetMigration",
    "lex:GetMigrations",
    "lex:GetSlotTypes",
    "lex:ListBots",
    "lex:ListBuiltInIntents",
    "lex:ListBuiltInSlotTypes",
    "lex:ListExports",
    "lex:ListImports",
    "lex:ListTestExecutions",
    "lex:ListTestSets",
    "license-manager:CheckInLicense",
    "license-manager:CheckoutLicense",
    "license-manager:CreateLicense",
    "license-manager:CreateLicenseConfiguration",
    "license-manager:CreateLicenseConversionTaskForResource",
    "license-manager:CreateLicenseManagerReportGenerator",
    "license-manager:DeleteToken",
    "license-manager:ExtendLicenseConsumption",
    "license-manager:GetAccessToken",
    "license-manager:GetLicenseConversionTask",
    "license-manager:GetServiceSettings",
    "license-manager:ListDistributedGrants",
    "license-manager:ListLicenseConfigurations",
    "license-manager:ListLicenseConversionTasks",
    "license-manager:ListLicenseSpecificationsForResource",
    "license-manager:ListLicenses",
    "license-manager:ListReceivedGrants",
    "license-manager:ListReceivedGrantsForOrganization",
    "license-manager:ListReceivedLicenses",
    "license-manager:ListReceivedLicensesForOrganization",
    "license-manager:ListResourceInventory",
    "license-manager:ListTokens",
    "license-manager:UpdateServiceSettings",
    "license-manager-linux-subscriptions:GetServiceSettings",
    "license-manager-linux-subscriptions:ListLinuxSubscriptionInstances",
    "license-manager-linux-subscriptions:ListLinuxSubscriptions",
    "license-manager-linux-subscriptions:ListRegisteredSubscriptionProviders",
    "license-manager-linux-subscriptions:RegisterSubscriptionProvider",
    "license-manager-linux-subscriptions:UpdateServiceSettings",
    "license-manager-user-subscriptions:ListIdentityProviders",
    "license-manager-user-subscriptions:ListInstances",
    "license-manager-user-subscriptions:ListLicenseServerEndpoints",
    "license-manager-user-subscriptions:RegisterIdentityProvider",
    "lightsail:AllocateStaticIp",
    "lightsail:CopySnapshot",
    "lightsail:CreateBucket",
    "lightsail:CreateCertificate",
    "lightsail:CreateCloudFormationStack",
    "lightsail:CreateContactMethod",
    "lightsail:CreateContainerService",
    "lightsail:CreateContainerServiceRegistryLogin",
    "lightsail:CreateDisk",
    "lightsail:CreateDistribution",
    "lightsail:CreateDomain",
    "lightsail:CreateInstances",
    "lightsail:CreateKeyPair",
    "lightsail:CreateLoadBalancer",
    "lightsail:CreateRelationalDatabase",
    "lightsail:CreateRelationalDatabaseSnapshot",
    "lightsail:DeleteAutoSnapshot",
    "lightsail:DeleteContactMethod",
    "lightsail:DisableAddOn",
    "lightsail:DownloadDefaultKeyPair",
    "lightsail:EnableAddOn",
    "lightsail:GetActiveNames",
    "lightsail:GetAlarms",
    "lightsail:GetAutoSnapshots",
    "lightsail:GetBlueprints",
    "lightsail:GetBucketAccessKeys",
    "lightsail:GetBucketBundles",
    "lightsail:GetBucketMetricData",
    "lightsail:GetBuckets",
    "lightsail:GetBundles",
    "lightsail:GetCertificates",
    "lightsail:GetCloudFormationStackRecords",
    "lightsail:GetContactMethods",
    "lightsail:GetContainerAPIMetadata",
    "lightsail:GetContainerImages",
    "lightsail:GetContainerLog",
    "lightsail:GetContainerServiceDeployments",
    "lightsail:GetContainerServiceMetricData",
    "lightsail:GetContainerServicePowers",
    "lightsail:GetContainerServices",
    "lightsail:GetDisk",
    "lightsail:GetDiskSnapshot",
    "lightsail:GetDiskSnapshots",
    "lightsail:GetDisks",
    "lightsail:GetDistributionBundles",
    "lightsail:GetDistributionLatestCacheReset",
    "lightsail:GetDistributionMetricData",
    "lightsail:GetDistributions",
    "lightsail:GetDomain",
    "lightsail:GetDomains",
    "lightsail:GetExportSnapshotRecords",
    "lightsail:GetInstance",
    "lightsail:GetInstanceMetricData",
    "lightsail:GetInstancePortStates",
    "lightsail:GetInstanceSnapshot",
    "lightsail:GetInstanceSnapshots",
    "lightsail:GetInstanceState",
    "lightsail:GetInstances",
    "lightsail:GetKeyPair",
    "lightsail:GetKeyPairs",
    "lightsail:GetLoadBalancer",
    "lightsail:GetLoadBalancerMetricData",
    "lightsail:GetLoadBalancerTlsCertificates",
    "lightsail:GetLoadBalancerTlsPolicies",
    "lightsail:GetLoadBalancers",
    "lightsail:GetOperation",
    "lightsail:GetOperations",
    "lightsail:GetOperationsForResource",
    "lightsail:GetRegions",
    "lightsail:GetRelationalDatabase",
    "lightsail:GetRelationalDatabaseBlueprints",
    "lightsail:GetRelationalDatabaseBundles",
    "lightsail:GetRelationalDatabaseEvents",
    "lightsail:GetRelationalDatabaseLogEvents",
    "lightsail:GetRelationalDatabaseLogStreams",
    "lightsail:GetRelationalDatabaseMetricData",
    "lightsail:GetRelationalDatabaseParameters",
    "lightsail:GetRelationalDatabaseSnapshot",
    "lightsail:GetRelationalDatabaseSnapshots",
    "lightsail:GetRelationalDatabases",
    "lightsail:GetStaticIp",
    "lightsail:GetStaticIps",
    "lightsail:ImportKeyPair",
    "lightsail:IsVpcPeered",
    "lightsail:PeerVpc",
    "lightsail:SendContactMethodVerification",
    "lightsail:UnpeerVpc",
    "logs:CancelExportTask",
    "logs:CreateLogDelivery",
    "logs:DeleteAccountPolicy",
    "logs:DeleteIndexPolicy",
    "logs:DeleteIntegration",
    "logs:DeleteLogDelivery",
    "logs:DeleteQueryDefinition",
    "logs:DeleteResourcePolicy",
    "logs:DescribeAccountPolicies",
    "logs:DescribeConfigurationTemplates",
    "logs:DescribeDeliveries",
    "logs:DescribeDeliveryDestinations",
    "logs:DescribeDeliverySources",
    "logs:DescribeDestinations",
    "logs:DescribeExportTasks",
    "logs:DescribeFieldIndexes",
    "logs:DescribeIndexPolicies",
    "logs:DescribeLogGroups",
    "logs:DescribeQueries",
    "logs:DescribeQueryDefinitions",
    "logs:DescribeResourcePolicies",
    "logs:GetIntegration",
    "logs:GetLogDelivery",
    "logs:Link",
    "logs:ListEntitiesForLogGroup",
    "logs:ListIntegrations",
    "logs:ListLogDeliveries",
    "logs:ListLogGroupsForEntity",
    "logs:ListLogGroupsForQuery",
    "logs:PutAccountPolicy",
    "logs:PutIndexPolicy",
    "logs:PutIntegration",
    "logs:PutQueryDefinition",
    "logs:PutResourcePolicy",
    "logs:StopLiveTail",
    "logs:StopQuery",
    "logs:TestMetricFilter",
    "logs:TestTransformer",
    "logs:UpdateLogDelivery",
    "lookoutequipment:DescribeDataIngestionJob",
    "lookoutequipment:ListDatasets",
    "lookoutequipment:ListInferenceSchedulers",
    "lookoutequipment:ListModels",
    "lookoutequipment:ListRetrainingSchedulers",
    "lookoutmetrics:GetSampleData",
    "lookoutmetrics:ListAnomalyDetectors",
    "lookoutvision:CreateDataset",
    "lookoutvision:DeleteDataset",
    "lookoutvision:DescribeDataset",
    "lookoutvision:DescribeModelPackagingJob",
    "lookoutvision:DescribeTrialDetection",
    "lookoutvision:ListDatasetEntries",
    "lookoutvision:ListModelPackagingJobs",
    "lookoutvision:ListModels",
    "lookoutvision:ListProjects",
    "lookoutvision:ListTrialDetections",
    "lookoutvision:StartTrialDetection",
    "lookoutvision:UpdateDatasetEntries",
    "m2:CreateApplication",
    "m2:CreateEnvironment",
    "m2:GetSignedBluinsightsUrl",
    "m2:ListApplications",
    "m2:ListEngineVersions",
    "m2:ListEnvironments",
    "m2:ListTagsForResource",
    "machinelearning:DescribeBatchPredictions",
    "machinelearning:DescribeDataSources",
    "machinelearning:DescribeEvaluations",
    "machinelearning:DescribeMLModels",
    "macie2:AcceptInvitation",
    "macie2:BatchUpdateAutomatedDiscoveryAccounts",
    "macie2:CreateAllowList",
    "macie2:CreateInvitations",
    "macie2:CreateSampleFindings",
    "macie2:DeclineInvitations",
    "macie2:DeleteInvitations",
    "macie2:DescribeBuckets",
    "macie2:DescribeOrganizationConfiguration",
    "macie2:DisableMacie",
    "macie2:DisableOrganizationAdminAccount",
    "macie2:DisassociateFromAdministratorAccount",
    "macie2:DisassociateFromMasterAccount",
    "macie2:EnableMacie",
    "macie2:EnableOrganizationAdminAccount",
    "macie2:GetAdministratorAccount",
    "macie2:GetAutomatedDiscoveryConfiguration",
    "macie2:GetBucketStatistics",
    "macie2:GetClassificationExportConfiguration",
    "macie2:GetClassificationScope",
    "macie2:GetFindingStatistics",
    "macie2:GetFindings",
    "macie2:GetFindingsPublicationConfiguration",
    "macie2:GetInvitationsCount",
    "macie2:GetMacieSession",
    "macie2:GetMasterAccount",
    "macie2:GetResourceProfile",
    "macie2:GetRevealConfiguration",
    "macie2:GetSensitiveDataOccurrences",
    "macie2:GetSensitiveDataOccurrencesAvailability",
    "macie2:GetSensitivityInspectionTemplate",
    "macie2:GetUsageStatistics",
    "macie2:GetUsageTotals",
    "macie2:ListAllowLists",
    "macie2:ListAutomatedDiscoveryAccounts",
    "macie2:ListClassificationJobs",
    "macie2:ListClassificationScopes",
    "macie2:ListCustomDataIdentifiers",
    "macie2:ListFindings",
    "macie2:ListFindingsFilters",
    "macie2:ListInvitations",
    "macie2:ListManagedDataIdentifiers",
    "macie2:ListMembers",
    "macie2:ListOrganizationAdminAccounts",
    "macie2:ListResourceProfileArtifacts",
    "macie2:ListResourceProfileDetections",
    "macie2:ListSensitivityInspectionTemplates",
    "macie2:PutClassificationExportConfiguration",
    "macie2:PutFindingsPublicationConfiguration",
    "macie2:SearchResources",
    "macie2:TestCustomDataIdentifier",
    "macie2:UpdateAutomatedDiscoveryConfiguration",
    "macie2:UpdateClassificationScope",
    "macie2:UpdateMacieSession",
    "macie2:UpdateMemberSession",
    "macie2:UpdateOrganizationConfiguration",
    "macie2:UpdateResourceProfile",
    "macie2:UpdateResourceProfileDetections",
    "macie2:UpdateRevealConfiguration",
    "macie2:UpdateSensitivityInspectionTemplate",
    "managedblockchain:CreateAccessor",
    "managedblockchain:CreateNetwork",
    "managedblockchain:GET",
    "managedblockchain:Invoke",
    "managedblockchain:InvokeRpcBitcoinMainnet",
    "managedblockchain:InvokeRpcBitcoinTestnet",
    "managedblockchain:InvokeRpcPolygonMainnet",
    "managedblockchain:InvokeRpcPolygonMumbaiTestnet",
    "managedblockchain:ListAccessors",
    "managedblockchain:ListInvitations",
    "managedblockchain:ListNetworks",
    "managedblockchain:POST",
    "managedblockchain-query:BatchGetTokenBalance",
    "managedblockchain-query:GetAssetContract",
    "managedblockchain-query:GetTokenBalance",
    "managedblockchain-query:GetTransaction",
    "managedblockchain-query:ListAssetContracts",
    "managedblockchain-query:ListFilteredTransactionEvents",
    "managedblockchain-query:ListTokenBalances",
    "managedblockchain-query:ListTransactionEvents",
    "managedblockchain-query:ListTransactions",
    "marketplacecommerceanalytics:GenerateDataSet",
    "marketplacecommerceanalytics:StartSupportDataExport",
    "mechanicalturk:AcceptQualificationRequest",
    "mechanicalturk:ApproveAssignment",
    "mechanicalturk:AssociateQualificationWithWorker",
    "mechanicalturk:CreateAdditionalAssignmentsForHIT",
    "mechanicalturk:CreateHIT",
    "mechanicalturk:CreateHITType",
    "mechanicalturk:CreateHITWithHITType",
    "mechanicalturk:CreateQualificationType",
    "mechanicalturk:CreateWorkerBlock",
    "mechanicalturk:DeleteHIT",
    "mechanicalturk:DeleteQualificationType",
    "mechanicalturk:DeleteWorkerBlock",
    "mechanicalturk:DisassociateQualificationFromWorker",
    "mechanicalturk:GetAccountBalance",
    "mechanicalturk:GetAssignment",
    "mechanicalturk:GetFileUploadURL",
    "mechanicalturk:GetHIT",
    "mechanicalturk:GetQualificationScore",
    "mechanicalturk:GetQualificationType",
    "mechanicalturk:ListAssignmentsForHIT",
    "mechanicalturk:ListBonusPayments",
    "mechanicalturk:ListHITs",
    "mechanicalturk:ListHITsForQualificationType",
    "mechanicalturk:ListQualificationRequests",
    "mechanicalturk:ListQualificationTypes",
    "mechanicalturk:ListReviewPolicyResultsForHIT",
    "mechanicalturk:ListReviewableHITs",
    "mechanicalturk:ListWorkerBlocks",
    "mechanicalturk:ListWorkersWithQualificationType",
    "mechanicalturk:NotifyWorkers",
    "mechanicalturk:RejectAssignment",
    "mechanicalturk:RejectQualificationRequest",
    "mechanicalturk:SendBonus",
    "mechanicalturk:SendTestEventNotification",
    "mechanicalturk:UpdateExpirationForHIT",
    "mechanicalturk:UpdateHITReviewStatus",
    "mechanicalturk:UpdateHITTypeOfHIT",
    "mechanicalturk:UpdateNotificationSettings",
    "mechanicalturk:UpdateQualificationType",
    "mediaconnect:AddFlowMediaStreams",
    "mediaconnect:AddFlowOutputs",
    "mediaconnect:AddFlowSources",
    "mediaconnect:AddFlowVpcInterfaces",
    "mediaconnect:CreateFlow",
    "mediaconnect:DeleteFlow",
    "mediaconnect:DescribeFlow",
    "mediaconnect:DescribeFlowSourceMetadata",
    "mediaconnect:DescribeFlowSourceThumbnail",
    "mediaconnect:DescribeOffering",
    "mediaconnect:DescribeReservation",
    "mediaconnect:DiscoverGatewayPollEndpoint",
    "mediaconnect:GrantFlowEntitlements",
    "mediaconnect:ListEntitlements",
    "mediaconnect:ListFlows",
    "mediaconnect:ListGateways",
    "mediaconnect:ListOfferings",
    "mediaconnect:ListReservations",
    "mediaconnect:ListTagsForResource",
    "mediaconnect:PollGateway",
    "mediaconnect:PurchaseOffering",
    "mediaconnect:RemoveFlowMediaStream",
    "mediaconnect:RemoveFlowOutput",
    "mediaconnect:RemoveFlowSource",
    "mediaconnect:RemoveFlowVpcInterface",
    "mediaconnect:RevokeFlowEntitlement",
    "mediaconnect:StartFlow",
    "mediaconnect:StopFlow",
    "mediaconnect:SubmitGatewayStateChange",
    "mediaconnect:TagResource",
    "mediaconnect:UntagResource",
    "mediaconnect:UpdateFlow",
    "mediaconnect:UpdateFlowEntitlement",
    "mediaconnect:UpdateFlowMediaStream",
    "mediaconnect:UpdateFlowOutput",
    "mediaconnect:UpdateFlowSource",
    "mediaconvert:AssociateCertificate",
    "mediaconvert:CreatePreset",
    "mediaconvert:CreateQueue",
    "mediaconvert:DeletePolicy",
    "mediaconvert:DescribeEndpoints",
    "mediaconvert:DisassociateCertificate",
    "mediaconvert:GetPolicy",
    "mediaconvert:ListJobTemplates",
    "mediaconvert:ListPresets",
    "mediaconvert:ListQueues",
    "mediaconvert:ListVersions",
    "mediaconvert:PutPolicy",
    "mediaimport:CreateDatabaseBinarySnapshot",
    "medialive:BatchDelete",
    "medialive:BatchStart",
    "medialive:BatchStop",
    "medialive:DescribeAccountConfiguration",
    "medialive:ListChannelPlacementGroups",
    "medialive:ListChannels",
    "medialive:ListCloudWatchAlarmTemplateGroups",
    "medialive:ListCloudWatchAlarmTemplates",
    "medialive:ListClusters",
    "medialive:ListEventBridgeRuleTemplateGroups",
    "medialive:ListEventBridgeRuleTemplates",
    "medialive:ListInputDeviceTransfers",
    "medialive:ListInputDevices",
    "medialive:ListInputSecurityGroups",
    "medialive:ListInputs",
    "medialive:ListMultiplexPrograms",
    "medialive:ListMultiplexes",
    "medialive:ListNetworks",
    "medialive:ListNodes",
    "medialive:ListOfferings",
    "medialive:ListReservations",
    "medialive:ListSignalMaps",
    "medialive:ListVersions",
    "medialive:PollAnywhere",
    "medialive:SubmitAnywhereStateChange",
    "medialive:UpdateAccountConfiguration",
    "mediapackage:CreateChannel",
    "mediapackage:CreateHarvestJob",
    "mediapackage:CreateOriginEndpoint",
    "mediapackage:ListChannels",
    "mediapackage:ListHarvestJobs",
    "mediapackage:ListOriginEndpoints",
    "mediapackage-vod:CreateAsset",
    "mediapackage-vod:CreatePackagingConfiguration",
    "mediapackage-vod:CreatePackagingGroup",
    "mediapackage-vod:ListAssets",
    "mediapackage-vod:ListPackagingConfigurations",
    "mediapackage-vod:ListPackagingGroups",
    "mediapackagev2:ListChannelGroups",
    "mediastore:CreateContainer",
    "mediastore:ListContainers",
    "mediatailor:CreateChannel",
    "mediatailor:CreateLiveSource",
    "mediatailor:CreateProgram",
    "mediatailor:CreateSourceLocation",
    "mediatailor:CreateVodSource",
    "mediatailor:ListAlerts",
    "mediatailor:ListChannels",
    "mediatailor:ListLiveSources",
    "mediatailor:ListPlaybackConfigurations",
    "mediatailor:ListSourceLocations",
    "mediatailor:ListVodSources",
    "mediatailor:PutPlaybackConfiguration",
    "medical-imaging:CreateDatastore",
    "medical-imaging:ListDatastores",
    "memorydb:CreateParameterGroup",
    "memorydb:CreateSubnetGroup",
    "memorydb:CreateUser",
    "memorydb:DescribeEngineVersions",
    "memorydb:DescribeEvents",
    "memorydb:DescribeReservedNodesOfferings",
    "memorydb:DescribeServiceUpdates",
    "mgh:CreateAutomationRun",
    "mgh:CreateAutomationUnit",
    "mgh:CreateHomeRegionControl",
    "mgh:DeleteHomeRegionControl",
    "mgh:DescribeApplicationState",
    "mgh:DescribeHomeRegionControls",
    "mgh:GetHomeRegion",
    "mgh:ListApplicationStates",
    "mgh:ListAutomationRuns",
    "mgh:ListAutomationUnits",
    "mgh:ListConnections",
    "mgh:ListMigrationTasks",
    "mgh:ListProgressUpdateStreams",
    "mgh:ListTagsForResource",
    "mgh:NotifyApplicationState",
    "mgh:TagResource",
    "mgh:UntagResource",
    "mgn:BatchDeleteSnapshotRequestForMgn",
    "mgn:CreateApplication",
    "mgn:CreateConnector",
    "mgn:CreateLaunchConfigurationTemplate",
    "mgn:CreateNetworkMigrationDefinition",
    "mgn:CreateReplicationConfigurationTemplate",
    "mgn:CreateVcenterClientForMgn",
    "mgn:CreateWave",
    "mgn:DescribeJobs",
    "mgn:DescribeLaunchConfigurationTemplates",
    "mgn:DescribeReplicationConfigurationTemplates",
    "mgn:DescribeReplicationServerAssociationsForMgn",
    "mgn:DescribeSnapshotRequestsForMgn",
    "mgn:DescribeSourceServers",
    "mgn:DescribeVcenterClients",
    "mgn:GetAgentInstallationAssetsForMgn",
    "mgn:GetChannelCommandsForMgn",
    "mgn:InitializeService",
    "mgn:ListApplications",
    "mgn:ListConnectors",
    "mgn:ListExports",
    "mgn:ListImports",
    "mgn:ListManagedAccounts",
    "mgn:ListNetworkMigrationDefinitions",
    "mgn:ListTagsForResource",
    "mgn:ListWaves",
    "mgn:RegisterAgentForMgn",
    "mgn:SendChannelCommandResultForMgn",
    "mgn:SendClientLogsForMgn",
    "mgn:SendClientMetricsForMgn",
    "mgn:StartExport",
    "mgn:StartImport",
    "mgn:VerifyClientRoleForMgn",
    "migrationhub-orchestrator:CreateTemplate",
    "migrationhub-orchestrator:GetMessage",
    "migrationhub-orchestrator:ListPlugins",
    "migrationhub-orchestrator:ListTemplates",
    "migrationhub-orchestrator:ListWorkflows",
    "migrationhub-orchestrator:RegisterPlugin",
    "migrationhub-orchestrator:SendMessage",
    "migrationhub-strategy:GetAntiPattern",
    "migrationhub-strategy:GetApplicationComponentDetails",
    "migrationhub-strategy:GetApplicationComponentStrategies",
    "migrationhub-strategy:GetAssessment",
    "migrationhub-strategy:GetImportFileTask",
    "migrationhub-strategy:GetLatestAssessmentId",
    "migrationhub-strategy:GetMessage",
    "migrationhub-strategy:GetPortfolioPreferences",
    "migrationhub-strategy:GetPortfolioSummary",
    "migrationhub-strategy:GetRecommendationReportDetails",
    "migrationhub-strategy:GetServerDetails",
    "migrationhub-strategy:GetServerStrategies",
    "migrationhub-strategy:ListAnalyzableServers",
    "migrationhub-strategy:ListAntiPatterns",
    "migrationhub-strategy:ListApplicationComponents",
    "migrationhub-strategy:ListCollectors",
    "migrationhub-strategy:ListImportFileTask",
    "migrationhub-strategy:ListJarArtifacts",
    "migrationhub-strategy:ListServers",
    "migrationhub-strategy:PutLogData",
    "migrationhub-strategy:PutMetricData",
    "migrationhub-strategy:PutPortfolioPreferences",
    "migrationhub-strategy:RegisterCollector",
    "migrationhub-strategy:SendMessage",
    "migrationhub-strategy:StartAssessment",
    "migrationhub-strategy:StartImportFileTask",
    "migrationhub-strategy:StartRecommendationReportGeneration",
    "migrationhub-strategy:StopAssessment",
    "migrationhub-strategy:UpdateApplicationComponentConfig",
    "migrationhub-strategy:UpdateCollectorConfiguration",
    "migrationhub-strategy:UpdateServerConfig",
    "mobileanalytics:GetFinancialReports",
    "mobileanalytics:GetReports",
    "mobileanalytics:PutEvents",
    "monitron:CreateProject",
    "monitron:ListProjects",
    "mq:CreateBroker",
    "mq:CreateConfiguration",
    "mq:DescribeBrokerEngineTypes",
    "mq:DescribeBrokerInstanceOptions",
    "mq:ListBrokers",
    "mq:ListConfigurations",
    "network-firewall:ListRuleGroups",
    "networkflowmonitor:CreateScope",
    "networkflowmonitor:ListMonitors",
    "networkflowmonitor:ListScopes",
    "networkflowmonitor:Publish",
    "networkmanager:CreateGlobalNetwork",
    "networkmanager:ListCoreNetworks",
    "networkmanager:ListOrganizationServiceAccessStatus",
    "networkmanager:ListPeerings",
    "networkmanager:StartOrganizationServiceAccessUpdate",
    "networkmanager-chat:CancelMessageResponse",
    "networkmanager-chat:CreateConversation",
    "networkmanager-chat:DeleteConversation",
    "networkmanager-chat:ListConversationMessages",
    "networkmanager-chat:ListConversations",
    "networkmanager-chat:NotifyConversationIsActive",
    "networkmanager-chat:SendConversationMessage",
    "networkmonitor:CreateProbe",
    "networkmonitor:ListMonitors",
    "nimble:GetFeatureMap",
    "nimble:ListStudios",
    "notifications:CreateEventRule",
    "notifications:CreateNotificationConfiguration",
    "notifications:DeregisterNotificationHub",
    "notifications:DisableNotificationsAccessForOrganization",
    "notifications:EnableNotificationsAccessForOrganization",
    "notifications:GetFeatureOptInStatus",
    "notifications:GetNotificationsAccessForOrganization",
    "notifications:ListEventRules",
    "notifications:ListManagedNotificationChildEvents",
    "notifications:ListManagedNotificationConfigurations",
    "notifications:ListManagedNotificationEvents",
    "notifications:ListNotificationConfigurations",
    "notifications:ListNotificationEvents",
    "notifications:ListNotificationHubs",
    "notifications:ListTagsForResource",
    "notifications:PutFeatureOptInStatus",
    "notifications:RegisterNotificationHub",
    "notifications-contacts:CreateEmailContact",
    "notifications-contacts:ListEmailContacts",
    "notifications-contacts:ListTagsForResource",
    "oam:CreateSink",
    "oam:ListLinks",
    "oam:ListSinks",
    "observabilityadmin:GetTelemetryEvaluationStatus",
    "observabilityadmin:GetTelemetryEvaluationStatusForOrganization",
    "observabilityadmin:ListResourceTelemetry",
    "observabilityadmin:ListResourceTelemetryForOrganization",
    "observabilityadmin:StartTelemetryEvaluation",
    "observabilityadmin:StartTelemetryEvaluationForOrganization",
    "observabilityadmin:StopTelemetryEvaluation",
    "observabilityadmin:StopTelemetryEvaluationForOrganization",
    "omics:AcceptShare",
    "omics:CancelAnnotationImportJob",
    "omics:CancelVariantImportJob",
    "omics:CreateAnnotationStore",
    "omics:CreateReferenceStore",
    "omics:CreateRunCache",
    "omics:CreateRunGroup",
    "omics:CreateSequenceStore",
    "omics:CreateShare",
    "omics:CreateVariantStore",
    "omics:CreateWorkflow",
    "omics:DeleteShare",
    "omics:GetAnnotationImportJob",
    "omics:GetShare",
    "omics:GetVariantImportJob",
    "omics:ListAnnotationImportJobs",
    "omics:ListAnnotationStores",
    "omics:ListReferenceStores",
    "omics:ListRunCaches",
    "omics:ListRunGroups",
    "omics:ListRuns",
    "omics:ListSequenceStores",
    "omics:ListShares",
    "omics:ListTagsForResource",
    "omics:ListVariantImportJobs",
    "omics:ListVariantStores",
    "omics:ListWorkflows",
    "one:CreateDeviceConfigurationTemplate",
    "one:CreateDeviceInstance",
    "one:CreateSite",
    "one:ListDeviceConfigurationTemplates",
    "one:ListDeviceInstances",
    "one:ListSites",
    "one:ListUsers",
    "opsworks:CreateStack",
    "opsworks:CreateUserProfile",
    "opsworks:DeleteUserProfile",
    "opsworks:DescribeMyUserProfile",
    "opsworks:DescribeOperatingSystems",
    "opsworks:DescribeUserProfiles",
    "opsworks:UpdateMyUserProfile",
    "opsworks:UpdateUserProfile",
    "opsworks-cm:AssociateNode",
    "opsworks-cm:CreateBackup",
    "opsworks-cm:CreateServer",
    "opsworks-cm:DeleteBackup",
    "opsworks-cm:DeleteServer",
    "opsworks-cm:DescribeAccountAttributes",
    "opsworks-cm:DescribeBackups",
    "opsworks-cm:DescribeEvents",
    "opsworks-cm:DescribeNodeAssociationStatus",
    "opsworks-cm:DescribeServers",
    "opsworks-cm:DisassociateNode",
    "opsworks-cm:ExportServerEngineAttribute",
    "opsworks-cm:ListTagsForResource",
    "opsworks-cm:RestoreServer",
    "opsworks-cm:StartMaintenance",
    "opsworks-cm:TagResource",
    "opsworks-cm:UntagResource",
    "opsworks-cm:UpdateServer",
    "opsworks-cm:UpdateServerEngineAttributes",
    "organizations:CreateAccount",
    "organizations:CreateGovCloudAccount",
    "organizations:CreateOrganization",
    "organizations:CreatePolicy",
    "organizations:DeleteOrganization",
    "organizations:DeleteResourcePolicy",
    "organizations:DescribeCreateAccountStatus",
    "organizations:DescribeOrganization",
    "organizations:DescribeResourcePolicy",
    "organizations:DisableAWSServiceAccess",
    "organizations:EnableAWSServiceAccess",
    "organizations:EnableAllFeatures",
    "organizations:LeaveOrganization",
    "organizations:ListAWSServiceAccessForOrganization",
    "organizations:ListAccounts",
    "organizations:ListCreateAccountStatus",
    "organizations:ListDelegatedAdministrators",
    "organizations:ListHandshakesForAccount",
    "organizations:ListHandshakesForOrganization",
    "organizations:ListPolicies",
    "organizations:ListRoots",
    "osis:CreatePipeline",
    "osis:ListPipelineBlueprints",
    "osis:ListPipelines",
    "osis:ValidatePipeline",
    "outposts:CancelOrder",
    "outposts:CreatePrivateConnectivityConfig",
    "outposts:CreateSite",
    "outposts:GetCatalogItem",
    "outposts:GetConnection",
    "outposts:GetOrder",
    "outposts:GetPrivateConnectivityConfig",
    "outposts:ListAssets",
    "outposts:ListCapacityTasks",
    "outposts:ListCatalogItems",
    "outposts:ListOrders",
    "outposts:ListOutposts",
    "outposts:ListSites",
    "outposts:ListTagsForResource",
    "outposts:StartConnection",
    "panorama:CreateApplicationInstance",
    "panorama:CreateJobForDevices",
    "panorama:CreateNodeFromTemplateJob",
    "panorama:CreatePackage",
    "panorama:CreatePackageImportJob",
    "panorama:DescribeDeviceJob",
    "panorama:DescribeNode",
    "panorama:DescribeNodeFromTemplateJob",
    "panorama:DescribePackageImportJob",
    "panorama:DescribeSoftware",
    "panorama:GetWebSocketURL",
    "panorama:ListDevices",
    "panorama:ListNodeFromTemplateJobs",
    "panorama:ListNodes",
    "panorama:ListPackageImportJobs",
    "panorama:ListPackages",
    "panorama:ProvisionDevice",
    "partnercentral:CreateEngagement",
    "partnercentral:CreateEngagementInvitation",
    "partnercentral:CreateOpportunity",
    "partnercentral:CreateResourceSnapshotJob",
    "partnercentral:GetSellingSystemSettings",
    "partnercentral:ListEngagementByAcceptingInvitationTasks",
    "partnercentral:ListEngagementFromOpportunityTasks",
    "partnercentral:ListEngagementInvitations",
    "partnercentral:ListEngagements",
    "partnercentral:ListOpportunities",
    "partnercentral:ListResourceSnapshotJobs",
    "partnercentral:ListSolutions",
    "partnercentral:ListTagsForResource",
    "partnercentral:PutSellingSystemSettings",
    "partnercentral:StartEngagementByAcceptingInvitationTask",
    "partnercentral:StartEngagementFromOpportunityTask",
    "partnercentral:TagResource",
    "partnercentral:UntagResource",
    "partnercentral-account-management:AssociatePartnerAccount",
    "partnercentral-account-management:AssociatePartnerUser",
    "partnercentral-account-management:DisassociatePartnerUser",
    "payment-cryptography:CreateKey",
    "payment-cryptography:DecryptData",
    "payment-cryptography:EncryptData",
    "payment-cryptography:GenerateCardValidationData",
    "payment-cryptography:GenerateMac",
    "payment-cryptography:GeneratePinData",
    "payment-cryptography:GetParametersForExport",
    "payment-cryptography:GetParametersForImport",
    "payment-cryptography:ImportKey",
    "payment-cryptography:ListAliases",
    "payment-cryptography:ListKeys",
    "payment-cryptography:ReEncryptData",
    "payment-cryptography:TranslatePinData",
    "payment-cryptography:VerifyAuthRequestCryptogram",
    "payment-cryptography:VerifyCardValidationData",
    "payment-cryptography:VerifyMac",
    "payment-cryptography:VerifyPinData",
    "payments:AcceptFinancingApplicationTerms",
    "payments:CreateFinancingApplication",
    "payments:CreatePaymentInstrument",
    "payments:DeletePaymentInstrument",
    "payments:GetFinancingApplication",
    "payments:GetFinancingLine",
    "payments:GetFinancingLineWithdrawal",
    "payments:GetFinancingOption",
    "payments:GetPaymentStatus",
    "payments:ListFinancingApplications",
    "payments:ListFinancingLineWithdrawals",
    "payments:ListFinancingLines",
    "payments:ListPaymentInstruments",
    "payments:ListPaymentPreferences",
    "payments:ListPaymentProgramOptions",
    "payments:ListPaymentProgramStatus",
    "payments:MakePayment",
    "payments:UpdateFinancingApplication",
    "payments:UpdatePaymentInstrument",
    "payments:UpdatePaymentPreferences",
    "pca-connector-ad:CreateConnector",
    "pca-connector-ad:CreateDirectoryRegistration",
    "pca-connector-ad:ListConnectors",
    "pca-connector-ad:ListDirectoryRegistrations",
    "pca-connector-ad:ListTagsForResource",
    "pca-connector-scep:CreateChallenge",
    "pca-connector-scep:CreateConnector",
    "pca-connector-scep:ListChallengeMetadata",
    "pca-connector-scep:ListConnectors",
    "pca-connector-scep:ListTagsForResource",
    "pcs:CreateCluster",
    "pcs:ListClusters",
    "pcs:ListTagsForResource",
    "personalize:ListBatchInferenceJobs",
    "personalize:ListBatchSegmentJobs",
    "personalize:ListCampaigns",
    "personalize:ListDataDeletionJobs",
    "personalize:ListDataInsightsJobs",
    "personalize:ListDatasetExportJobs",
    "personalize:ListDatasetGroups",
    "personalize:ListDatasetImportJobs",
    "personalize:ListDatasets",
    "personalize:ListEventTrackers",
    "personalize:ListFilters",
    "personalize:ListMetricAttributionMetrics",
    "personalize:ListMetricAttributions",
    "personalize:ListRecipes",
    "personalize:ListRecommenders",
    "personalize:ListSchemas",
    "personalize:ListSolutionVersions",
    "personalize:ListSolutions",
    "personalize:ListTagsForResource",
    "personalize:PutActionInteractions",
    "personalize:PutEvents",
    "personalize:TagResource",
    "personalize:UntagResource",
    "pipes:ListPipes",
    "polly:DescribeVoices",
    "polly:GetSpeechSynthesisTask",
    "polly:ListLexicons",
    "polly:ListSpeechSynthesisTasks",
    "pricing:DescribeServices",
    "pricing:GetAttributeValues",
    "pricing:GetPriceListFileUrl",
    "pricing:GetProducts",
    "pricing:ListPriceLists",
    "private-networks:ListNetworks",
    "private-networks:ListTagsForResource",
    "private-networks:Ping",
    "profile:GetProfileObjectTypeTemplate",
    "profile:ListAccountIntegrations",
    "profile:ListDomains",
    "profile:ListProfileObjectTypeTemplates",
    "proton:CreateEnvironmentAccountConnection",
    "proton:CreateServiceSyncConfig",
    "proton:CreateTemplateSyncConfig",
    "proton:DeleteAccountRoles",
    "proton:DeleteServiceSyncConfig",
    "proton:DeleteTemplateSyncConfig",
    "proton:GetAccountRoles",
    "proton:GetAccountSettings",
    "proton:GetRepositorySyncStatus",
    "proton:GetResourceTemplateVersionStatusCounts",
    "proton:GetResourcesSummary",
    "proton:GetServiceInstanceSyncStatus",
    "proton:GetServiceSyncBlockerSummary",
    "proton:GetServiceSyncConfig",
    "proton:GetTemplateSyncConfig",
    "proton:GetTemplateSyncStatus",
    "proton:ListDeployments",
    "proton:ListEnvironmentAccountConnections",
    "proton:ListEnvironmentTemplates",
    "proton:ListEnvironments",
    "proton:ListRepositories",
    "proton:ListRepositorySyncDefinitions",
    "proton:ListServiceInstances",
    "proton:ListServiceTemplates",
    "proton:ListServices",
    "proton:UpdateAccountRoles",
    "proton:UpdateAccountSettings",
    "proton:UpdateServiceSyncBlocker",
    "proton:UpdateServiceSyncConfig",
    "proton:UpdateTemplateSyncConfig",
    "purchase-orders:GetConsoleActionSetEnforced",
    "purchase-orders:ListPurchaseOrders",
    "purchase-orders:UpdateConsoleActionSetEnforced",
    "q:AssociateConnectorResource",
    "q:CreateAuthGrant",
    "q:CreateOAuthAppConnection",
    "q:GenerateCodeFromCommands",
    "q:GetConnector",
    "q:GetConversation",
    "q:GetIdentityMetadata",
    "q:GetTroubleshootingResults",
    "q:ListConversations",
    "q:ListDashboardMetrics",
    "q:ListPluginProviders",
    "q:PassRequest",
    "q:RejectConnector",
    "q:SendEvent",
    "q:SendMessage",
    "q:StartConversation",
    "q:StartTroubleshootingAnalysis",
    "q:StartTroubleshootingResolutionExplanation",
    "q:UpdateAuthGrant",
    "q:UpdateOAuthAppConnection",
    "q:UpdateTroubleshootingCommandResult",
    "qbusiness:AddUserLicenses",
    "qbusiness:CreateApplication",
    "qbusiness:CreateLicense",
    "qbusiness:ListApplications",
    "qbusiness:ListPluginTypeActions",
    "qbusiness:ListPluginTypeMetadata",
    "qbusiness:ListUserLicenses",
    "qbusiness:RemoveUserLicenses",
    "qdeveloper:StartAgentSession",
    "qldb:ListJournalS3Exports",
    "qldb:ListLedgers",
    "quicksight:AccountConfigurations",
    "quicksight:CreateAccountCustomization",
    "quicksight:CreateAccountSubscription",
    "quicksight:CreateDataSource",
    "quicksight:CreateRoleMembership",
    "quicksight:CreateVPCConnection",
    "quicksight:DeleteBrandAssignment",
    "quicksight:DeleteCustomPermissions",
    "quicksight:DeleteDefaultQBusinessApplication",
    "quicksight:DeleteIdentityPropagationConfig",
    "quicksight:DeleteRoleCustomPermission",
    "quicksight:DeleteRoleMembership",
    "quicksight:DescribeAccountSettings",
    "quicksight:DescribeBrandAssignment",
    "quicksight:DescribeDashboardsQAConfiguration",
    "quicksight:DescribeDefaultQBusinessApplication",
    "quicksight:DescribeIpRestriction",
    "quicksight:DescribeKeyRegistration",
    "quicksight:DescribeQPersonalizationConfiguration",
    "quicksight:DescribeQuickSightQSearchConfiguration",
    "quicksight:DescribeRoleCustomPermission",
    "quicksight:GenerateEmbedUrlForRegisteredUserWithIdentity",
    "quicksight:GetAnonymousUserEmbedUrl",
    "quicksight:GetGroupMapping",
    "quicksight:GetSessionEmbedUrl",
    "quicksight:ListBrands",
    "quicksight:ListCustomPermissions",
    "quicksight:ListCustomerManagedKeys",
    "quicksight:ListDataSets",
    "quicksight:ListDataSources",
    "quicksight:ListIdentityPropagationConfigs",
    "quicksight:ListIngestions",
    "quicksight:ListKMSKeysForUser",
    "quicksight:ListNamespaces",
    "quicksight:ListRefreshSchedules",
    "quicksight:ListRoleMemberships",
    "quicksight:ListTopicRefreshSchedules",
    "quicksight:ListTopicReviewedAnswers",
    "quicksight:ListTopics",
    "quicksight:ListVPCConnections",
    "quicksight:RegisterCustomerManagedKey",
    "quicksight:RemoveCustomerManagedKey",
    "quicksight:ScopeDownPolicy",
    "quicksight:SearchDirectoryGroups",
    "quicksight:SetGroupMapping",
    "quicksight:StartDashboardSnapshotJobSchedule",
    "quicksight:Subscribe",
    "quicksight:Unsubscribe",
    "quicksight:UpdateAccountSettings",
    "quicksight:UpdateApplicationWithTokenExchangeGrant",
    "quicksight:UpdateBrandAssignment",
    "quicksight:UpdateDashboardsQAConfiguration",
    "quicksight:UpdateDefaultQBusinessApplication",
    "quicksight:UpdateIdentityPropagationConfig",
    "quicksight:UpdateIpRestriction",
    "quicksight:UpdateKeyRegistration",
    "quicksight:UpdatePublicSharingSettings",
    "quicksight:UpdateQPersonalizationConfiguration",
    "quicksight:UpdateQuickSightQSearchConfiguration",
    "quicksight:UpdateResourcePermissions",
    "quicksight:UpdateRoleCustomPermission",
    "quicksight:UpdateSPICECapacityConfiguration",
    "ram:CreatePermission",
    "ram:CreateResourceShare",
    "ram:EnableSharingWithAwsOrganization",
    "ram:GetResourcePolicies",
    "ram:GetResourceShareAssociations",
    "ram:GetResourceShareInvitations",
    "ram:GetResourceShares",
    "ram:ListPermissionVersions",
    "ram:ListPermissions",
    "ram:ListPrincipals",
    "ram:ListReplacePermissionAssociationsWork",
    "ram:ListResourceTypes",
    "ram:ListResources",
    "rbin:ListRules",
    "rds:CancelExportTask",
    "rds:CreateDBProxy",
    "rds:CrossRegionCommunication",
    "rds:DescribeAccountAttributes",
    "rds:DescribeCertificates",
    "rds:DescribeDBEngineVersions",
    "rds:DescribeDBRecommendations",
    "rds:DescribeEngineDefaultClusterParameters",
    "rds:DescribeEngineDefaultParameters",
    "rds:DescribeEventCategories",
    "rds:DescribeEvents",
    "rds:DescribeOptionGroupOptions",
    "rds:DescribeOrderableDBInstanceOptions",
    "rds:DescribeRecommendationGroups",
    "rds:DescribeRecommendations",
    "rds:DescribeReservedDBInstancesOfferings",
    "rds:DescribeSourceRegions",
    "rds:ModifyCertificates",
    "rds:ModifyDBRecommendation",
    "rds:ModifyRecommendation",
    "redshift:AcceptReservedNodeExchange",
    "redshift:AddPartner",
    "redshift:AuthorizeEndpointAccess",
    "redshift:CancelQuery",
    "redshift:CancelQuerySession",
    "redshift:CreateAuthenticationProfile",
    "redshift:CreateEndpointAccess",
    "redshift:CreateInboundIntegration",
    "redshift:CreateQev2IdcApplication",
    "redshift:CreateRedshiftIdcApplication",
    "redshift:CreateSavedQuery",
    "redshift:CreateScheduledAction",
    "redshift:DeleteAuthenticationProfile",
    "redshift:DeleteEndpointAccess",
    "redshift:DeletePartner",
    "redshift:DeleteSavedQueries",
    "redshift:DeleteScheduledAction",
    "redshift:DeregisterNamespace",
    "redshift:DescribeAccountAttributes",
    "redshift:DescribeAuthenticationProfiles",
    "redshift:DescribeClusterDbRevisions",
    "redshift:DescribeClusterParameterGroups",
    "redshift:DescribeClusterSecurityGroups",
    "redshift:DescribeClusterSnapshots",
    "redshift:DescribeClusterSubnetGroups",
    "redshift:DescribeClusterTracks",
    "redshift:DescribeClusterVersions",
    "redshift:DescribeClusters",
    "redshift:DescribeCustomDomainAssociations",
    "redshift:DescribeDataShares",
    "redshift:DescribeDataSharesForConsumer",
    "redshift:DescribeDataSharesForProducer",
    "redshift:DescribeDefaultClusterParameters",
    "redshift:DescribeEndpointAccess",
    "redshift:DescribeEndpointAuthorization",
    "redshift:DescribeEventCategories",
    "redshift:DescribeEventSubscriptions",
    "redshift:DescribeEvents",
    "redshift:DescribeHsmClientCertificates",
    "redshift:DescribeHsmConfigurations",
    "redshift:DescribeInboundIntegrations",
    "redshift:DescribeNodeConfigurationOptions",
    "redshift:DescribeOrderableClusterOptions",
    "redshift:DescribePartners",
    "redshift:DescribeQev2IdcApplications",
    "redshift:DescribeQuery",
    "redshift:DescribeRedshiftIdcApplications",
    "redshift:DescribeReservedNodeExchangeStatus",
    "redshift:DescribeReservedNodeOfferings",
    "redshift:DescribeReservedNodes",
    "redshift:DescribeSavedQueries",
    "redshift:DescribeScheduledActions",
    "redshift:DescribeSnapshotCopyGrants",
    "redshift:DescribeStorage",
    "redshift:DescribeTable",
    "redshift:DescribeTableRestoreStatus",
    "redshift:ExecuteQuery",
    "redshift:FetchResults",
    "redshift:GetReservedNodeExchangeConfigurationOptions",
    "redshift:GetReservedNodeExchangeOfferings",
    "redshift:ListDatabases",
    "redshift:ListRecommendations",
    "redshift:ListSavedQueries",
    "redshift:ListSchemas",
    "redshift:ListTables",
    "redshift:ModifyAuthenticationProfile",
    "redshift:ModifyClusterMaintenance",
    "redshift:ModifyEndpointAccess",
    "redshift:ModifySavedQuery",
    "redshift:ModifyScheduledAction",
    "redshift:PurchaseReservedNodeOffering",
    "redshift:RegisterNamespace",
    "redshift:RevokeEndpointAccess",
    "redshift:UpdatePartnerStatus",
    "redshift:ViewQueriesFromConsole",
    "redshift:ViewQueriesInConsole",
    "redshift-data:CancelStatement",
    "redshift-data:DescribeStatement",
    "redshift-data:GetStatementResult",
    "redshift-data:ListStatements",
    "redshift-serverless:CreateUsageLimit",
    "redshift-serverless:DeleteResourcePolicy",
    "redshift-serverless:DeleteScheduledAction",
    "redshift-serverless:DeleteSnapshotCopyConfiguration",
    "redshift-serverless:DeleteUsageLimit",
    "redshift-serverless:DescribeOneTimeCredit",
    "redshift-serverless:GetResourcePolicy",
    "redshift-serverless:GetScheduledAction",
    "redshift-serverless:GetTableRestoreStatus",
    "redshift-serverless:GetTrack",
    "redshift-serverless:GetUsageLimit",
    "redshift-serverless:ListCustomDomainAssociations",
    "redshift-serverless:ListManagedWorkgroups",
    "redshift-serverless:ListNamespaces",
    "redshift-serverless:ListScheduledActions",
    "redshift-serverless:ListTableRestoreStatus",
    "redshift-serverless:ListTracks",
    "redshift-serverless:ListUsageLimits",
    "redshift-serverless:ListWorkgroups",
    "redshift-serverless:PutResourcePolicy",
    "redshift-serverless:UpdateScheduledAction",
    "redshift-serverless:UpdateSnapshotCopyConfiguration",
    "redshift-serverless:UpdateUsageLimit",
    "refactor-spaces:CreateApplication",
    "refactor-spaces:CreateEnvironment",
    "refactor-spaces:CreateRoute",
    "refactor-spaces:CreateService",
    "refactor-spaces:DeleteResourcePolicy",
    "refactor-spaces:GetResourcePolicy",
    "refactor-spaces:ListEnvironments",
    "refactor-spaces:ListTagsForResource",
    "refactor-spaces:PutResourcePolicy",
    "rekognition:CompareFaces",
    "rekognition:CreateCollection",
    "rekognition:CreateFaceLivenessSession",
    "rekognition:DescribeProjects",
    "rekognition:DetectFaces",
    "rekognition:DetectLabels",
    "rekognition:DetectProtectiveEquipment",
    "rekognition:DetectText",
    "rekognition:GetCelebrityInfo",
    "rekognition:GetCelebrityRecognition",
    "rekognition:GetContentModeration",
    "rekognition:GetFaceDetection",
    "rekognition:GetFaceLivenessSessionResults",
    "rekognition:GetFaceSearch",
    "rekognition:GetLabelDetection",
    "rekognition:GetMediaAnalysisJob",
    "rekognition:GetPersonTracking",
    "rekognition:GetSegmentDetection",
    "rekognition:GetTextDetection",
    "rekognition:ListCollections",
    "rekognition:ListMediaAnalysisJobs",
    "rekognition:RecognizeCelebrities",
    "rekognition:StartCelebrityRecognition",
    "rekognition:StartContentModeration",
    "rekognition:StartFaceDetection",
    "rekognition:StartFaceLivenessSession",
    "rekognition:StartLabelDetection",
    "rekognition:StartPersonTracking",
    "rekognition:StartSegmentDetection",
    "rekognition:StartTextDetection",
    "repostspace:CreateSpace",
    "repostspace:ListSpaces",
    "resiliencehub:CreateApp",
    "resiliencehub:CreateResiliencyPolicy",
    "resiliencehub:DescribeMetricsExport",
    "resiliencehub:ListAppAssessments",
    "resiliencehub:ListApps",
    "resiliencehub:ListMetrics",
    "resiliencehub:ListResiliencyPolicies",
    "resiliencehub:ListSuggestedResiliencyPolicies",
    "resiliencehub:ListTagsForResource",
    "resiliencehub:StartMetricsExport",
    "resource-explorer:ListResourceTypes",
    "resource-explorer:ListResources",
    "resource-explorer:ListTags",
    "resource-explorer-2:AssociateDefaultView",
    "resource-explorer-2:BatchGetView",
    "resource-explorer-2:CreateIndex",
    "resource-explorer-2:CreateManagedView",
    "resource-explorer-2:CreateView",
    "resource-explorer-2:DisassociateDefaultView",
    "resource-explorer-2:GetAccountLevelServiceConfiguration",
    "resource-explorer-2:GetDefaultView",
    "resource-explorer-2:GetIndex",
    "resource-explorer-2:ListIndexes",
    "resource-explorer-2:ListIndexesForMembers",
    "resource-explorer-2:ListManagedViews",
    "resource-explorer-2:ListSupportedResourceTypes",
    "resource-explorer-2:ListViews",
    "resource-groups:CreateGroup",
    "resource-groups:GetAccountSettings",
    "resource-groups:ListGroups",
    "resource-groups:ListResourceTypes",
    "resource-groups:SearchResources",
    "resource-groups:UpdateAccountSettings",
    "rhelkb:GetRhelURL",
    "robomaker:BatchDeleteWorlds",
    "robomaker:BatchDescribeSimulationJob",
    "robomaker:CreateDeploymentJob",
    "robomaker:CreateFleet",
    "robomaker:CreateRobot",
    "robomaker:CreateRobotApplication",
    "robomaker:CreateSimulationApplication",
    "robomaker:CreateSimulationJob",
    "robomaker:CreateWorldTemplate",
    "robomaker:ListDeploymentJobs",
    "robomaker:ListFleets",
    "robomaker:ListRobotApplications",
    "robomaker:ListRobots",
    "robomaker:ListSimulationApplications",
    "robomaker:ListSimulationJobBatches",
    "robomaker:ListSimulationJobs",
    "robomaker:ListSupportedAvailabilityZones",
    "robomaker:ListWorldExportJobs",
    "robomaker:ListWorldGenerationJobs",
    "robomaker:ListWorldTemplates",
    "robomaker:ListWorlds",
    "robomaker:StartSimulationJobBatch",
    "robomaker:UpdateRobotDeployment",
    "rolesanywhere:CreateProfile",
    "rolesanywhere:CreateTrustAnchor",
    "rolesanywhere:ImportCrl",
    "rolesanywhere:ListCrls",
    "rolesanywhere:ListProfiles",
    "rolesanywhere:ListSubjects",
    "rolesanywhere:ListTagsForResource",
    "rolesanywhere:ListTrustAnchors",
    "route53:CreateCidrCollection",
    "route53:CreateHealthCheck",
    "route53:CreateHostedZone",
    "route53:CreateReusableDelegationSet",
    "route53:CreateTrafficPolicy",
    "route53:GetAccountLimit",
    "route53:GetCheckerIpRanges",
    "route53:GetGeoLocation",
    "route53:GetHealthCheckCount",
    "route53:GetHostedZoneCount",
    "route53:GetTrafficPolicyInstanceCount",
    "route53:ListCidrCollections",
    "route53:ListGeoLocations",
    "route53:ListHealthChecks",
    "route53:ListHostedZones",
    "route53:ListHostedZonesByName",
    "route53:ListHostedZonesByVPC",
    "route53:ListReusableDelegationSets",
    "route53:ListTrafficPolicies",
    "route53:ListTrafficPolicyInstances",
    "route53:TestDNSAnswer",
    "route53-recovery-cluster:ListRoutingControls",
    "route53-recovery-control-config:ListAssociatedRoute53HealthChecks",
    "route53-recovery-control-config:ListClusters",
    "route53-recovery-control-config:ListControlPanels",
    "route53-recovery-control-config:ListRoutingControls",
    "route53-recovery-control-config:ListTagsForResource",
    "route53-recovery-readiness:CreateCrossAccountAuthorization",
    "route53-recovery-readiness:DeleteCrossAccountAuthorization",
    "route53-recovery-readiness:ListCells",
    "route53-recovery-readiness:ListCrossAccountAuthorizations",
    "route53-recovery-readiness:ListReadinessChecks",
    "route53-recovery-readiness:ListRecoveryGroups",
    "route53-recovery-readiness:ListResourceSets",
    "route53-recovery-readiness:ListRules",
    "route53-recovery-readiness:ListTagsForResources",
    "route53domains:AcceptDomainTransferFromAnotherAwsAccount",
    "route53domains:AssociateDelegationSignerToDomain",
    "route53domains:CancelDomainTransferToAnotherAwsAccount",
    "route53domains:CheckDomainAvailability",
    "route53domains:CheckDomainTransferability",
    "route53domains:DeleteDomain",
    "route53domains:DeleteTagsForDomain",
    "route53domains:DisableDomainAutoRenew",
    "route53domains:DisableDomainTransferLock",
    "route53domains:DisassociateDelegationSignerFromDomain",
    "route53domains:EnableDomainAutoRenew",
    "route53domains:EnableDomainTransferLock",
    "route53domains:GetContactReachabilityStatus",
    "route53domains:GetDomainDetail",
    "route53domains:GetDomainSuggestions",
    "route53domains:GetOperationDetail",
    "route53domains:ListDomains",
    "route53domains:ListOperations",
    "route53domains:ListPrices",
    "route53domains:ListTagsForDomain",
    "route53domains:PushDomain",
    "route53domains:RegisterDomain",
    "route53domains:RejectDomainTransferFromAnotherAwsAccount",
    "route53domains:RenewDomain",
    "route53domains:ResendContactReachabilityEmail",
    "route53domains:ResendOperationAuthorization",
    "route53domains:RetrieveDomainAuthCode",
    "route53domains:TransferDomain",
    "route53domains:TransferDomainToAnotherAwsAccount",
    "route53domains:UpdateDomainContact",
    "route53domains:UpdateDomainContactPrivacy",
    "route53domains:UpdateDomainNameservers",
    "route53domains:UpdateTagsForDomain",
    "route53domains:ViewBilling",
    "route53profiles:AssociateProfile",
    "route53profiles:AssociateResourceToProfile",
    "route53profiles:CreateProfile",
    "route53profiles:DeleteProfile",
    "route53profiles:DisassociateProfile",
    "route53profiles:DisassociateResourceFromProfile",
    "route53profiles:GetProfile",
    "route53profiles:GetProfileAssociation",
    "route53profiles:GetProfileResourceAssociation",
    "route53profiles:ListProfileAssociations",
    "route53profiles:ListProfileResourceAssociations",
    "route53profiles:ListProfiles",
    "route53profiles:ListTagsForResource",
    "route53profiles:UpdateProfileResourceAssociation",
    "route53resolver:CreateResolverQueryLogConfig",
    "route53resolver:GetResolverQueryLogConfigAssociation",
    "route53resolver:ListFirewallConfigs",
    "route53resolver:ListFirewallDomainLists",
    "route53resolver:ListFirewallRuleGroupAssociations",
    "route53resolver:ListFirewallRuleGroups",
    "route53resolver:ListOutpostResolvers",
    "route53resolver:ListResolverEndpoints",
    "route53resolver:ListResolverQueryLogConfigAssociations",
    "route53resolver:ListResolverQueryLogConfigs",
    "route53resolver:ListResolverRuleAssociations",
    "route53resolver:ListResolverRules",
    "rum:ListAppMonitors",
    "rum:ListTagsForResource",
    "s3:CreateJob",
    "s3:CreateStorageLensGroup",
    "s3:GetAccessPoint",
    "s3:GetAccountPublicAccessBlock",
    "s3:ListAccessGrantsInstances",
    "s3:ListAccessPoints",
    "s3:ListAccessPointsForObjectLambda",
    "s3:ListAllMyBuckets",
    "s3:ListJobs",
    "s3:ListMultiRegionAccessPoints",
    "s3:ListStorageLensConfigurations",
    "s3:ListStorageLensGroups",
    "s3:PutAccessPointPublicAccessBlock",
    "s3:PutAccountPublicAccessBlock",
    "s3:PutStorageLensConfiguration",
    "s3-outposts:GetAccessPoint",
    "s3-outposts:ListAccessPoints",
    "s3-outposts:ListEndpoints",
    "s3-outposts:ListOutpostsWithS3",
    "s3-outposts:ListRegionalBuckets",
    "s3-outposts:ListSharedEndpoints",
    "s3express:ListAllMyDirectoryBuckets",
    "s3tables:ListTableBuckets",
    "sagemaker:CreateLineageGroupPolicy",
    "sagemaker:DeleteLineageGroupPolicy",
    "sagemaker:DeleteResourcePolicy",
    "sagemaker:DescribeLineageGroup",
    "sagemaker:DisableSagemakerServicecatalogPortfolio",
    "sagemaker:EnableSagemakerServicecatalogPortfolio",
    "sagemaker:GetLineageGroupPolicy",
    "sagemaker:GetResourcePolicy",
    "sagemaker:GetSagemakerServicecatalogPortfolioStatus",
    "sagemaker:GetSearchSuggestions",
    "sagemaker:ListActions",
    "sagemaker:ListAlgorithms",
    "sagemaker:ListAppImageConfigs",
    "sagemaker:ListApps",
    "sagemaker:ListArtifacts",
    "sagemaker:ListAssociations",
    "sagemaker:ListAutoMLJobs",
    "sagemaker:ListCandidatesForAutoMLJob",
    "sagemaker:ListClusterSchedulerConfigs",
    "sagemaker:ListClusters",
    "sagemaker:ListCodeRepositories",
    "sagemaker:ListCompilationJobs",
    "sagemaker:ListComputeQuotas",
    "sagemaker:ListContexts",
    "sagemaker:ListDataQualityJobDefinitions",
    "sagemaker:ListDeviceFleets",
    "sagemaker:ListDevices",
    "sagemaker:ListDomains",
    "sagemaker:ListEdgeDeploymentPlans",
    "sagemaker:ListEdgePackagingJobs",
    "sagemaker:ListEndpointConfigs",
    "sagemaker:ListEndpoints",
    "sagemaker:ListExperiments",
    "sagemaker:ListFeatureGroups",
    "sagemaker:ListFlowDefinitions",
    "sagemaker:ListHubs",
    "sagemaker:ListHumanLoops",
    "sagemaker:ListHumanTaskUis",
    "sagemaker:ListHyperParameterTuningJobs",
    "sagemaker:ListImages",
    "sagemaker:ListInferenceComponents",
    "sagemaker:ListInferenceExperiments",
    "sagemaker:ListInferenceRecommendationsJobSteps",
    "sagemaker:ListInferenceRecommendationsJobs",
    "sagemaker:ListLabelingJobs",
    "sagemaker:ListLineageGroups",
    "sagemaker:ListMlflowTrackingServers",
    "sagemaker:ListModelBiasJobDefinitions",
    "sagemaker:ListModelCards",
    "sagemaker:ListModelExplainabilityJobDefinitions",
    "sagemaker:ListModelMetadata",
    "sagemaker:ListModelPackageGroups",
    "sagemaker:ListModelQualityJobDefinitions",
    "sagemaker:ListModels",
    "sagemaker:ListMonitoringAlertHistory",
    "sagemaker:ListMonitoringAlerts",
    "sagemaker:ListMonitoringExecutions",
    "sagemaker:ListMonitoringSchedules",
    "sagemaker:ListNotebookInstanceLifecycleConfigs",
    "sagemaker:ListNotebookInstances",
    "sagemaker:ListOptimizationJobs",
    "sagemaker:ListPartnerApps",
    "sagemaker:ListPipelines",
    "sagemaker:ListProcessingJobs",
    "sagemaker:ListProjects",
    "sagemaker:ListResourceCatalogs",
    "sagemaker:ListSharedModelEvents",
    "sagemaker:ListSharedModels",
    "sagemaker:ListSpaces",
    "sagemaker:ListStageDevices",
    "sagemaker:ListStudioLifecycleConfigs",
    "sagemaker:ListSubscribedWorkteams",
    "sagemaker:ListTrainingJobs",
    "sagemaker:ListTrainingPlans",
    "sagemaker:ListTransformJobs",
    "sagemaker:ListTrialComponents",
    "sagemaker:ListTrials",
    "sagemaker:ListUserProfiles",
    "sagemaker:ListWorkforces",
    "sagemaker:ListWorkteams",
    "sagemaker:PutLineageGroupPolicy",
    "sagemaker:PutResourcePolicy",
    "sagemaker:QueryLineage",
    "sagemaker:RenderUiTemplate",
    "sagemaker:Search",
    "sagemaker:SearchTrainingPlanOfferings",
    "sagemaker-data-science-assistant:SendConversation",
    "sagemaker-geospatial:ListEarthObservationJobs",
    "sagemaker-geospatial:ListRasterDataCollections",
    "sagemaker-geospatial:ListVectorEnrichmentJobs",
    "sagemaker-geospatial:SearchRasterDataCollection",
    "sagemaker-groundtruth-synthetic:CreateProject",
    "sagemaker-groundtruth-synthetic:DeleteProject",
    "sagemaker-groundtruth-synthetic:GetAccountDetails",
    "sagemaker-groundtruth-synthetic:GetBatch",
    "sagemaker-groundtruth-synthetic:GetProject",
    "sagemaker-groundtruth-synthetic:ListBatchDataTransfers",
    "sagemaker-groundtruth-synthetic:ListBatchSummaries",
    "sagemaker-groundtruth-synthetic:ListProjectDataTransfers",
    "sagemaker-groundtruth-synthetic:ListProjectSummaries",
    "sagemaker-groundtruth-synthetic:StartBatchDataTransfer",
    "sagemaker-groundtruth-synthetic:StartProjectDataTransfer",
    "sagemaker-groundtruth-synthetic:UpdateBatch",
    "sagemaker-mlflow:AccessUI",
    "savingsplans:CreateSavingsPlan",
    "savingsplans:DescribeSavingsPlansOfferingRates",
    "savingsplans:DescribeSavingsPlansOfferings",
    "scheduler:ListScheduleGroups",
    "scheduler:ListSchedules",
    "schemas:CreateDiscoverer",
    "schemas:GetDiscoveredSchema",
    "sdb:ListDomains",
    "secretsmanager:BatchGetSecretValue",
    "secretsmanager:GetRandomPassword",
    "secretsmanager:ListSecrets",
    "security-ir:CreateCase",
    "security-ir:CreateMembership",
    "security-ir:ListCases",
    "security-ir:ListMemberships",
    "securityhub:BatchGetConfigurationPolicyAssociations",
    "securityhub:BatchGetSecurityControls",
    "securityhub:BatchGetStandardsControlAssociations",
    "securityhub:BatchUpdateStandardsControlAssociations",
    "securityhub:CreateAutomationRule",
    "securityhub:CreateConfigurationPolicy",
    "securityhub:CreateFindingAggregator",
    "securityhub:GetConfigurationPolicyAssociation",
    "securityhub:GetSecurityControlDefinition",
    "securityhub:ListAutomationRules",
    "securityhub:ListConfigurationPolicies",
    "securityhub:ListConfigurationPolicyAssociations",
    "securityhub:ListFindingAggregators",
    "securityhub:ListSecurityControlDefinitions",
    "securityhub:ListStandardsControlAssociations",
    "securityhub:UpdateSecurityControl",
    "securitylake:CreateDataLakeExceptionSubscription",
    "securitylake:CreateSubscriber",
    "securitylake:DeleteDataLakeExceptionSubscription",
    "securitylake:DeregisterDataLakeDelegatedAdministrator",
    "securitylake:GetDataLakeExceptionSubscription",
    "securitylake:ListDataLakeExceptions",
    "securitylake:ListDataLakes",
    "securitylake:ListLogSources",
    "securitylake:ListSubscribers",
    "securitylake:RegisterDataLakeDelegatedAdministrator",
    "securitylake:UpdateDataLakeExceptionSubscription",
    "serverlessrepo:CreateApplication",
    "serverlessrepo:ListApplications",
    "serverlessrepo:SearchApplications",
    "servicecatalog:AssociateBudgetWithResource",
    "servicecatalog:AssociateProductWithPortfolio",
    "servicecatalog:BatchAssociateServiceActionWithProvisioningArtifact",
    "servicecatalog:BatchDisassociateServiceActionFromProvisioningArtifact",
    "servicecatalog:CopyProduct",
    "servicecatalog:CreateProvisionedProductPlan",
    "servicecatalog:CreateServiceAction",
    "servicecatalog:CreateTagOption",
    "servicecatalog:DeleteConstraint",
    "servicecatalog:DeleteProvisionedProductPlan",
    "servicecatalog:DeleteServiceAction",
    "servicecatalog:DeleteTagOption",
    "servicecatalog:DescribeConstraint",
    "servicecatalog:DescribeCopyProductStatus",
    "servicecatalog:DescribePortfolioShareStatus",
    "servicecatalog:DescribeProductView",
    "servicecatalog:DescribeProvisionedProduct",
    "servicecatalog:DescribeProvisionedProductPlan",
    "servicecatalog:DescribeRecord",
    "servicecatalog:DescribeServiceAction",
    "servicecatalog:DescribeServiceActionExecutionParameters",
    "servicecatalog:DescribeTagOption",
    "servicecatalog:DisableAWSOrganizationsAccess",
    "servicecatalog:DisassociateBudgetFromResource",
    "servicecatalog:DisassociateProductFromPortfolio",
    "servicecatalog:EnableAWSOrganizationsAccess",
    "servicecatalog:ExecuteProvisionedProductPlan",
    "servicecatalog:ExecuteProvisionedProductServiceAction",
    "servicecatalog:GetAWSOrganizationsAccessStatus",
    "servicecatalog:GetConfiguration",
    "servicecatalog:GetProvisionedProductOutputs",
    "servicecatalog:ListAcceptedPortfolioShares",
    "servicecatalog:ListApplications",
    "servicecatalog:ListAttributeGroups",
    "servicecatalog:ListBudgetsForResource",
    "servicecatalog:ListConstraintsForPortfolio",
    "servicecatalog:ListOrganizationPortfolioAccess",
    "servicecatalog:ListPortfolios",
    "servicecatalog:ListProvisionedProductPlans",
    "servicecatalog:ListProvisioningArtifactsForServiceAction",
    "servicecatalog:ListRecordHistory",
    "servicecatalog:ListResourcesForTagOption",
    "servicecatalog:ListServiceActions",
    "servicecatalog:ListStackInstancesForProvisionedProduct",
    "servicecatalog:ListTagOptions",
    "servicecatalog:NotifyProvisionProductEngineWorkflowResult",
    "servicecatalog:NotifyTerminateProvisionedProductEngineWorkflowResult",
    "servicecatalog:NotifyUpdateProvisionedProductEngineWorkflowResult",
    "servicecatalog:PutConfiguration",
    "servicecatalog:ScanProvisionedProducts",
    "servicecatalog:SearchProducts",
    "servicecatalog:SearchProductsAsAdmin",
    "servicecatalog:SearchProvisionedProducts",
    "servicecatalog:SyncResource",
    "servicecatalog:TerminateProvisionedProduct",
    "servicecatalog:UpdateConstraint",
    "servicecatalog:UpdateProvisionedProduct",
    "servicecatalog:UpdateProvisionedProductProperties",
    "servicecatalog:UpdateServiceAction",
    "servicecatalog:UpdateTagOption",
    "servicediscovery:CreateHttpNamespace",
    "servicediscovery:CreatePrivateDnsNamespace",
    "servicediscovery:CreatePublicDnsNamespace",
    "servicediscovery:DiscoverInstances",
    "servicediscovery:DiscoverInstancesRevision",
    "servicediscovery:GetInstance",
    "servicediscovery:GetInstancesHealthStatus",
    "servicediscovery:GetOperation",
    "servicediscovery:ListInstances",
    "servicediscovery:ListNamespaces",
    "servicediscovery:ListOperations",
    "servicediscovery:ListServices",
    "servicediscovery:ListTagsForResource",
    "servicediscovery:TagResource",
    "servicediscovery:UntagResource",
    "servicediscovery:UpdateInstanceCustomHealthStatus",
    "serviceextract:GetConfig",
    "servicequotas:AssociateServiceQuotaTemplate",
    "servicequotas:DeleteServiceQuotaIncreaseRequestFromTemplate",
    "servicequotas:DisassociateServiceQuotaTemplate",
    "servicequotas:GetAWSDefaultServiceQuota",
    "servicequotas:GetAssociationForServiceQuotaTemplate",
    "servicequotas:GetRequestedServiceQuotaChange",
    "servicequotas:GetServiceQuota",
    "servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
    "servicequotas:ListAWSDefaultServiceQuotas",
    "servicequotas:ListRequestedServiceQuotaChangeHistory",
    "servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
    "servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
    "servicequotas:ListServiceQuotas",
    "servicequotas:ListServices",
    "servicequotas:ListTagsForResource",
    "servicequotas:TagResource",
    "servicequotas:UntagResource",
    "ses:CloneReceiptRuleSet",
    "ses:CreateAddonInstance",
    "ses:CreateAddonSubscription",
    "ses:CreateAddressList",
    "ses:CreateArchive",
    "ses:CreateConfigurationSetTrackingOptions",
    "ses:CreateExportJob",
    "ses:CreateImportJob",
    "ses:CreateIngressPoint",
    "ses:CreateMultiRegionEndpoint",
    "ses:CreateReceiptFilter",
    "ses:CreateReceiptRule",
    "ses:CreateReceiptRuleSet",
    "ses:CreateRelay",
    "ses:CreateRuleSet",
    "ses:CreateTemplate",
    "ses:CreateTrafficPolicy",
    "ses:DeleteConfigurationSetTrackingOptions",
    "ses:DeleteIdentity",
    "ses:DeleteIdentityPolicy",
    "ses:DeleteReceiptFilter",
    "ses:DeleteReceiptRule",
    "ses:DeleteReceiptRuleSet",
    "ses:DeleteSuppressedDestination",
    "ses:DeleteTemplate",
    "ses:DeleteVerifiedEmailAddress",
    "ses:DescribeActiveReceiptRuleSet",
    "ses:DescribeConfigurationSet",
    "ses:DescribeReceiptRule",
    "ses:DescribeReceiptRuleSet",
    "ses:GetAccount",
    "ses:GetAccountSendingEnabled",
    "ses:GetBlacklistReports",
    "ses:GetDedicatedIp",
    "ses:GetDeliverabilityDashboardOptions",
    "ses:GetDomainDeliverabilityCampaign",
    "ses:GetIdentityDkimAttributes",
    "ses:GetIdentityMailFromDomainAttributes",
    "ses:GetIdentityNotificationAttributes",
    "ses:GetIdentityPolicies",
    "ses:GetIdentityVerificationAttributes",
    "ses:GetMessageInsights",
    "ses:GetSendQuota",
    "ses:GetSendStatistics",
    "ses:GetSuppressedDestination",
    "ses:GetTemplate",
    "ses:ListAddonInstances",
    "ses:ListAddonSubscriptions",
    "ses:ListAddressLists",
    "ses:ListArchiveExports",
    "ses:ListArchiveSearches",
    "ses:ListArchives",
    "ses:ListConfigurationSets",
    "ses:ListContactLists",
    "ses:ListCustomVerificationEmailTemplates",
    "ses:ListDedicatedIpPools",
    "ses:ListDeliverabilityTestReports",
    "ses:ListDomainDeliverabilityCampaigns",
    "ses:ListEmailIdentities",
    "ses:ListEmailTemplates",
    "ses:ListExportJobs",
    "ses:ListIdentities",
    "ses:ListIdentityPolicies",
    "ses:ListImportJobs",
    "ses:ListIngressPoints",
    "ses:ListMultiRegionEndpoints",
    "ses:ListReceiptFilters",
    "ses:ListReceiptRuleSets",
    "ses:ListRelays",
    "ses:ListRuleSets",
    "ses:ListSuppressedDestinations",
    "ses:ListTemplates",
    "ses:ListTrafficPolicies",
    "ses:ListVerifiedEmailAddresses",
    "ses:PutAccountDedicatedIpWarmupAttributes",
    "ses:PutAccountDetails",
    "ses:PutAccountSendingAttributes",
    "ses:PutAccountSuppressionAttributes",
    "ses:PutAccountVdmAttributes",
    "ses:PutDedicatedIpWarmupAttributes",
    "ses:PutDeliverabilityDashboardOption",
    "ses:PutIdentityPolicy",
    "ses:PutSuppressedDestination",
    "ses:ReorderReceiptRuleSet",
    "ses:SetActiveReceiptRuleSet",
    "ses:SetIdentityDkimEnabled",
    "ses:SetIdentityFeedbackForwardingEnabled",
    "ses:SetIdentityHeadersInNotificationsEnabled",
    "ses:SetIdentityMailFromDomain",
    "ses:SetIdentityNotificationTopic",
    "ses:SetReceiptRulePosition",
    "ses:TestRenderTemplate",
    "ses:UpdateAccountSendingEnabled",
    "ses:UpdateConfigurationSetReputationMetricsEnabled",
    "ses:UpdateConfigurationSetSendingEnabled",
    "ses:UpdateConfigurationSetTrackingOptions",
    "ses:UpdateReceiptRule",
    "ses:UpdateTemplate",
    "ses:VerifyDomainDkim",
    "ses:VerifyDomainIdentity",
    "ses:VerifyEmailAddress",
    "ses:VerifyEmailIdentity",
    "shield:AssociateDRTLogBucket",
    "shield:AssociateDRTRole",
    "shield:AssociateProactiveEngagementDetails",
    "shield:CreateProtection",
    "shield:CreateProtectionGroup",
    "shield:CreateSubscription",
    "shield:DeleteSubscription",
    "shield:DescribeAttackStatistics",
    "shield:DescribeDRTAccess",
    "shield:DescribeEmergencyContactSettings",
    "shield:DescribeSubscription",
    "shield:DisableApplicationLayerAutomaticResponse",
    "shield:DisableProactiveEngagement",
    "shield:DisassociateDRTLogBucket",
    "shield:DisassociateDRTRole",
    "shield:EnableApplicationLayerAutomaticResponse",
    "shield:EnableProactiveEngagement",
    "shield:GetSubscriptionState",
    "shield:ListAttacks",
    "shield:ListProtectionGroups",
    "shield:ListProtections",
    "shield:UpdateApplicationLayerAutomaticResponse",
    "shield:UpdateEmergencyContactSettings",
    "shield:UpdateSubscription",
    "signer:GetSigningPlatform",
    "signer:ListSigningJobs",
    "signer:ListSigningPlatforms",
    "signer:ListSigningProfiles",
    "signer:PutSigningProfile",
    "signin:CreateTrustedIdentityPropagationApplicationForConsole",
    "signin:ListTrustedIdentityPropagationApplicationsForConsole",
    "simspaceweaver:ListSimulations",
    "simspaceweaver:ListTagsForResource",
    "simspaceweaver:StartSimulation",
    "sms:CreateApp",
    "sms:CreateReplicationJob",
    "sms:DeleteApp",
    "sms:DeleteAppLaunchConfiguration",
    "sms:DeleteAppReplicationConfiguration",
    "sms:DeleteAppValidationConfiguration",
    "sms:DeleteReplicationJob",
    "sms:DeleteServerCatalog",
    "sms:DisassociateConnector",
    "sms:GenerateChangeSet",
    "sms:GenerateTemplate",
    "sms:GetApp",
    "sms:GetAppLaunchConfiguration",
    "sms:GetAppReplicationConfiguration",
    "sms:GetAppValidationConfiguration",
    "sms:GetAppValidationOutput",
    "sms:GetConnectors",
    "sms:GetMessages",
    "sms:GetReplicationJobs",
    "sms:GetReplicationRuns",
    "sms:GetServers",
    "sms:ImportAppCatalog",
    "sms:ImportServerCatalog",
    "sms:LaunchApp",
    "sms:ListApps",
    "sms:NotifyAppValidationOutput",
    "sms:PutAppLaunchConfiguration",
    "sms:PutAppReplicationConfiguration",
    "sms:PutAppValidationConfiguration",
    "sms:SendMessage",
    "sms:StartAppReplication",
    "sms:StartOnDemandAppReplication",
    "sms:StartOnDemandReplicationRun",
    "sms:StopAppReplication",
    "sms:TerminateApp",
    "sms:UpdateApp",
    "sms:UpdateReplicationJob",
    "sms-voice:CreateConfigurationSet",
    "sms-voice:CreateConfigurationSetEventDestination",
    "sms-voice:CreateOptOutList",
    "sms-voice:CreateProtectConfiguration",
    "sms-voice:CreateRegistration",
    "sms-voice:CreateRegistrationAttachment",
    "sms-voice:CreateVerifiedDestinationNumber",
    "sms-voice:DeleteAccountDefaultProtectConfiguration",
    "sms-voice:DeleteConfigurationSetEventDestination",
    "sms-voice:DeleteMediaMessageSpendLimitOverride",
    "sms-voice:DeleteTextMessageSpendLimitOverride",
    "sms-voice:DeleteVoiceMessageSpendLimitOverride",
    "sms-voice:DescribeAccountAttributes",
    "sms-voice:DescribeAccountLimits",
    "sms-voice:DescribeRegistrationFieldDefinitions",
    "sms-voice:DescribeRegistrationSectionDefinitions",
    "sms-voice:DescribeRegistrationTypeDefinitions",
    "sms-voice:DescribeSpendLimits",
    "sms-voice:GetConfigurationSetEventDestinations",
    "sms-voice:ListConfigurationSets",
    "sms-voice:RequestSenderId",
    "sms-voice:SetMediaMessageSpendLimitOverride",
    "sms-voice:SetTextMessageSpendLimitOverride",
    "sms-voice:SetVoiceMessageSpendLimitOverride",
    "sms-voice:UpdateConfigurationSetEventDestination",
    "snow-device-management:CreateTask",
    "snow-device-management:DescribeExecution",
    "snow-device-management:ListDevices",
    "snow-device-management:ListExecutions",
    "snow-device-management:ListTagsForResource",
    "snow-device-management:ListTasks",
    "snowball:CancelCluster",
    "snowball:CancelJob",
    "snowball:CreateAddress",
    "snowball:CreateCluster",
    "snowball:CreateJob",
    "snowball:CreateLongTermPricing",
    "snowball:CreateReturnShippingLabel",
    "snowball:DescribeAddress",
    "snowball:DescribeAddresses",
    "snowball:DescribeCluster",
    "snowball:DescribeJob",
    "snowball:DescribeReturnShippingLabel",
    "snowball:GetJobManifest",
    "snowball:GetJobUnlockCode",
    "snowball:GetSnowballUsage",
    "snowball:GetSoftwareUpdates",
    "snowball:ListClusterJobs",
    "snowball:ListClusters",
    "snowball:ListCompatibleImages",
    "snowball:ListJobs",
    "snowball:ListLongTermPricing",
    "snowball:ListPickupLocations",
    "snowball:ListServiceVersions",
    "snowball:UpdateCluster",
    "snowball:UpdateJob",
    "snowball:UpdateJobShipmentState",
    "snowball:UpdateLongTermPricing",
    "sns:CheckIfPhoneNumberIsOptedOut",
    "sns:CreatePlatformApplication",
    "sns:CreatePlatformEndpoint",
    "sns:CreateSMSSandboxPhoneNumber",
    "sns:DeleteEndpoint",
    "sns:DeletePlatformApplication",
    "sns:DeleteSMSSandboxPhoneNumber",
    "sns:GetEndpointAttributes",
    "sns:GetPlatformApplicationAttributes",
    "sns:GetSMSAttributes",
    "sns:GetSMSSandboxAccountStatus",
    "sns:GetSubscriptionAttributes",
    "sns:ListEndpointsByPlatformApplication",
    "sns:ListOriginationNumbers",
    "sns:ListPhoneNumbersOptedOut",
    "sns:ListPlatformApplications",
    "sns:ListSMSSandboxPhoneNumbers",
    "sns:ListSubscriptions",
    "sns:ListTopics",
    "sns:OptInPhoneNumber",
    "sns:SetEndpointAttributes",
    "sns:SetPlatformApplicationAttributes",
    "sns:SetSMSAttributes",
    "sns:SetSubscriptionAttributes",
    "sns:Unsubscribe",
    "sns:VerifySMSSandboxPhoneNumber",
    "social-messaging:AssociateWhatsAppBusinessAccount",
    "social-messaging:ListLinkedWhatsAppBusinessAccounts",
    "sqlworkbench:BatchDeleteFolder",
    "sqlworkbench:CreateAccount",
    "sqlworkbench:CreateFolder",
    "sqlworkbench:DeleteQCustomContext",
    "sqlworkbench:DeleteSqlGenerationContext",
    "sqlworkbench:DeleteTab",
    "sqlworkbench:GenerateSession",
    "sqlworkbench:GetAccountInfo",
    "sqlworkbench:GetAccountSettings",
    "sqlworkbench:GetAutocompletionMetadata",
    "sqlworkbench:GetAutocompletionResource",
    "sqlworkbench:GetQCustomContext",
    "sqlworkbench:GetQSqlPromptQuotas",
    "sqlworkbench:GetQSqlRecommendations",
    "sqlworkbench:GetQueryExecutionHistory",
    "sqlworkbench:GetSchemaInference",
    "sqlworkbench:GetSqlGenerationContext",
    "sqlworkbench:GetSqlRecommendations",
    "sqlworkbench:GetUserInfo",
    "sqlworkbench:GetUserWorkspaceSettings",
    "sqlworkbench:ListConnections",
    "sqlworkbench:ListDatabases",
    "sqlworkbench:ListFiles",
    "sqlworkbench:ListNotebooks",
    "sqlworkbench:ListQueryExecutionHistory",
    "sqlworkbench:ListRedshiftClusters",
    "sqlworkbench:ListSampleDatabases",
    "sqlworkbench:ListTabs",
    "sqlworkbench:ListTaggedResources",
    "sqlworkbench:PassAccountSettings",
    "sqlworkbench:PutQCustomContext",
    "sqlworkbench:PutSqlGenerationContext",
    "sqlworkbench:PutTab",
    "sqlworkbench:PutUserWorkspaceSettings",
    "sqlworkbench:UpdateAccountConnectionSettings",
    "sqlworkbench:UpdateAccountExportSettings",
    "sqlworkbench:UpdateAccountGeneralSettings",
    "sqlworkbench:UpdateAccountQSqlSettings",
    "sqlworkbench:UpdateFolder",
    "sqs:ListQueues",
    "ssm:CancelCommand",
    "ssm:CreateActivation",
    "ssm:CreateMaintenanceWindow",
    "ssm:CreateOpsItem",
    "ssm:CreateOpsMetadata",
    "ssm:CreatePatchBaseline",
    "ssm:DeleteActivation",
    "ssm:DeleteInventory",
    "ssm:DescribeActivations",
    "ssm:DescribeAutomationExecutions",
    "ssm:DescribeAvailablePatches",
    "ssm:DescribeInstanceInformation",
    "ssm:DescribeInstancePatchStatesForPatchGroup",
    "ssm:DescribeInstanceProperties",
    "ssm:DescribeInventoryDeletions",
    "ssm:DescribeMaintenanceWindowExecutionTaskInvocations",
    "ssm:DescribeMaintenanceWindowExecutionTasks",
    "ssm:DescribeMaintenanceWindowSchedule",
    "ssm:DescribeMaintenanceWindows",
    "ssm:DescribeMaintenanceWindowsForTarget",
    "ssm:DescribeOpsItems",
    "ssm:DescribeParameters",
    "ssm:DescribePatchBaselines",
    "ssm:DescribePatchGroupState",
    "ssm:DescribePatchGroups",
    "ssm:DescribePatchProperties",
    "ssm:DescribeSessions",
    "ssm:ExecuteAPI",
    "ssm:GetCommandInvocation",
    "ssm:GetDeployablePatchSnapshotForInstance",
    "ssm:GetExecutionPreview",
    "ssm:GetInventory",
    "ssm:GetInventorySchema",
    "ssm:GetMaintenanceWindowExecution",
    "ssm:GetMaintenanceWindowExecutionTask",
    "ssm:GetMaintenanceWindowExecutionTaskInvocation",
    "ssm:GetManifest",
    "ssm:GetPatchBaselineForPatchGroup",
    "ssm:ListAssociations",
    "ssm:ListCommandInvocations",
    "ssm:ListCommands",
    "ssm:ListComplianceItems",
    "ssm:ListComplianceSummaries",
    "ssm:ListDocuments",
    "ssm:ListInventoryEntries",
    "ssm:ListOpsItemEvents",
    "ssm:ListOpsItemRelatedItems",
    "ssm:ListOpsMetadata",
    "ssm:ListResourceComplianceSummaries",
    "ssm:ListResourceDataSync",
    "ssm:PutConfigurePackageResult",
    "ssm:PutInventory",
    "ssm:RegisterManagedInstance",
    "ssm:StartExecutionPreview",
    "ssm-contacts:ListContacts",
    "ssm-contacts:ListEngagements",
    "ssm-contacts:ListPreviewRotationShifts",
    "ssm-contacts:ListRotations",
    "ssm-guiconnect:CancelConnection",
    "ssm-guiconnect:GetConnection",
    "ssm-guiconnect:ListConnections",
    "ssm-guiconnect:StartConnection",
    "ssm-incidents:CreateReplicationSet",
    "ssm-incidents:CreateResponsePlan",
    "ssm-incidents:ListIncidentRecords",
    "ssm-incidents:ListReplicationSets",
    "ssm-incidents:ListResponsePlans",
    "ssm-quicksetup:GetServiceSettings",
    "ssm-quicksetup:ListConfigurationManagers",
    "ssm-quicksetup:ListQuickSetupTypes",
    "ssm-quicksetup:UpdateServiceSettings",
    "ssm-sap:BackupDatabase",
    "ssm-sap:DeleteResourcePermission",
    "ssm-sap:GetApplication",
    "ssm-sap:GetDatabase",
    "ssm-sap:GetOperation",
    "ssm-sap:GetResourcePermission",
    "ssm-sap:ListApplications",
    "ssm-sap:ListDatabases",
    "ssm-sap:ListOperationEvents",
    "ssm-sap:ListOperations",
    "ssm-sap:ListTagsForResource",
    "ssm-sap:PutResourcePermission",
    "ssm-sap:RegisterApplication",
    "ssm-sap:RestoreDatabase",
    "ssm-sap:UpdateHANABackupSettings",
    "ssmmessages:CreateControlChannel",
    "ssmmessages:CreateDataChannel",
    "ssmmessages:OpenControlChannel",
    "ssmmessages:OpenDataChannel",
    "sso:AssociateDirectory",
    "sso:AssociateProfile",
    "sso:CreateApplicationInstance",
    "sso:CreateApplicationInstanceCertificate",
    "sso:CreateManagedApplicationInstance",
    "sso:CreateProfile",
    "sso:CreateTrust",
    "sso:DeleteApplicationInstance",
    "sso:DeleteApplicationInstanceCertificate",
    "sso:DeleteManagedApplicationInstance",
    "sso:DeletePermissionsPolicy",
    "sso:DeleteProfile",
    "sso:DescribeDirectories",
    "sso:DescribePermissionsPolicies",
    "sso:DescribeRegisteredRegions",
    "sso:DescribeTrusts",
    "sso:DisassociateDirectory",
    "sso:DisassociateProfile",
    "sso:GetApplicationInstance",
    "sso:GetApplicationTemplate",
    "sso:GetManagedApplicationInstance",
    "sso:GetMfaDeviceManagementForDirectory",
    "sso:GetPermissionSet",
    "sso:GetPermissionsPolicy",
    "sso:GetProfile",
    "sso:GetSSOStatus",
    "sso:GetSharedSsoConfiguration",
    "sso:GetSsoConfiguration",
    "sso:GetTrust",
    "sso:ImportApplicationInstanceServiceProviderMetadata",
    "sso:ListApplicationInstanceCertificates",
    "sso:ListApplicationInstances",
    "sso:ListApplicationTemplates",
    "sso:ListApplications",
    "sso:ListDirectoryAssociations",
    "sso:ListInstances",
    "sso:ListProfileAssociations",
    "sso:ListProfiles",
    "sso:PutMfaDeviceManagementForDirectory",
    "sso:PutPermissionsPolicy",
    "sso:SearchGroups",
    "sso:SearchUsers",
    "sso:StartSSO",
    "sso:UpdateApplicationInstanceActiveCertificate",
    "sso:UpdateApplicationInstanceDisplayData",
    "sso:UpdateApplicationInstanceResponseConfiguration",
    "sso:UpdateApplicationInstanceResponseSchemaConfiguration",
    "sso:UpdateApplicationInstanceSecurityConfiguration",
    "sso:UpdateApplicationInstanceServiceProviderConfiguration",
    "sso:UpdateApplicationInstanceStatus",
    "sso:UpdateDirectoryAssociation",
    "sso:UpdateManagedApplicationInstanceStatus",
    "sso:UpdateProfile",
    "sso:UpdateSSOConfiguration",
    "sso:UpdateTrust",
    "sso-directory:AddMemberToGroup",
    "sso-directory:CompleteVirtualMfaDeviceRegistration",
    "sso-directory:CompleteWebAuthnDeviceRegistration",
    "sso-directory:CreateAlias",
    "sso-directory:CreateBearerToken",
    "sso-directory:CreateExternalIdPConfigurationForDirectory",
    "sso-directory:CreateGroup",
    "sso-directory:CreateProvisioningTenant",
    "sso-directory:CreateUser",
    "sso-directory:DeleteBearerToken",
    "sso-directory:DeleteExternalIdPCertificate",
    "sso-directory:DeleteExternalIdPConfigurationForDirectory",
    "sso-directory:DeleteGroup",
    "sso-directory:DeleteMfaDeviceForUser",
    "sso-directory:DeleteProvisioningTenant",
    "sso-directory:DeleteUser",
    "sso-directory:DescribeDirectory",
    "sso-directory:DescribeGroup",
    "sso-directory:DescribeGroups",
    "sso-directory:DescribeProvisioningTenant",
    "sso-directory:DescribeUser",
    "sso-directory:DescribeUserByUniqueAttribute",
    "sso-directory:DescribeUsers",
    "sso-directory:DisableExternalIdPConfigurationForDirectory",
    "sso-directory:DisableUser",
    "sso-directory:EnableExternalIdPConfigurationForDirectory",
    "sso-directory:EnableUser",
    "sso-directory:GetAWSSPConfigurationForDirectory",
    "sso-directory:GetGroupId",
    "sso-directory:GetUserId",
    "sso-directory:GetUserPoolInfo",
    "sso-directory:ImportExternalIdPCertificate",
    "sso-directory:IsMemberInGroup",
    "sso-directory:IsMemberInGroups",
    "sso-directory:ListBearerTokens",
    "sso-directory:ListExternalIdPCertificates",
    "sso-directory:ListExternalIdPConfigurationsForDirectory",
    "sso-directory:ListGroups",
    "sso-directory:ListGroupsForMember",
    "sso-directory:ListGroupsForUser",
    "sso-directory:ListMembersInGroup",
    "sso-directory:ListMfaDevicesForUser",
    "sso-directory:ListProvisioningTenants",
    "sso-directory:ListUsers",
    "sso-directory:RemoveMemberFromGroup",
    "sso-directory:SearchGroups",
    "sso-directory:SearchUsers",
    "sso-directory:StartVirtualMfaDeviceRegistration",
    "sso-directory:StartWebAuthnDeviceRegistration",
    "sso-directory:UpdateExternalIdPConfigurationForDirectory",
    "sso-directory:UpdateGroup",
    "sso-directory:UpdateGroupDisplayName",
    "sso-directory:UpdateMfaDeviceForUser",
    "sso-directory:UpdatePassword",
    "sso-directory:UpdateUser",
    "sso-directory:UpdateUserName",
    "sso-directory:VerifyEmail",
    "states:InvokeHTTPEndpoint",
    "states:ListActivities",
    "states:ListStateMachines",
    "states:RevealSecrets",
    "states:SendTaskFailure",
    "states:SendTaskHeartbeat",
    "states:SendTaskSuccess",
    "states:TestState",
    "states:ValidateStateMachineDefinition",
    "storagegateway:ActivateGateway",
    "storagegateway:CreateTapePool",
    "storagegateway:DeleteTapeArchive",
    "storagegateway:DescribeTapeArchives",
    "storagegateway:ListAutomaticTapeCreationPolicies",
    "storagegateway:ListCacheReports",
    "storagegateway:ListFileShares",
    "storagegateway:ListFileSystemAssociations",
    "storagegateway:ListGateways",
    "storagegateway:ListTapePools",
    "storagegateway:ListTapes",
    "storagegateway:ListVolumes",
    "sts:DecodeAuthorizationMessage",
    "sts:GetAccessKeyInfo",
    "sts:GetCallerIdentity",
    "sts:GetServiceBearerToken",
    "sts:GetSessionToken",
    "support:AddAttachmentsToSet",
    "support:AddCommunicationToCase",
    "support:CreateCase",
    "support:DescribeAttachment",
    "support:DescribeCaseAttributes",
    "support:DescribeCases",
    "support:DescribeCommunication",
    "support:DescribeCommunications",
    "support:DescribeCreateCaseOptions",
    "support:DescribeIssueTypes",
    "support:DescribeServices",
    "support:DescribeSeverityLevels",
    "support:DescribeSupportLevel",
    "support:DescribeSupportedLanguages",
    "support:DescribeTrustedAdvisorCheckRefreshStatuses",
    "support:DescribeTrustedAdvisorCheckResult",
    "support:DescribeTrustedAdvisorCheckSummaries",
    "support:DescribeTrustedAdvisorChecks",
    "support:GetInteraction",
    "support:InitiateCallForCase",
    "support:InitiateChatForCase",
    "support:PutCaseAttributes",
    "support:RateCaseCommunication",
    "support:RefreshTrustedAdvisorCheck",
    "support:ResolveCase",
    "support:SearchForCases",
    "support:StartInteraction",
    "supportapp:CreateSlackChannelConfiguration",
    "supportapp:DeleteAccountAlias",
    "supportapp:DeleteSlackChannelConfiguration",
    "supportapp:DeleteSlackWorkspaceConfiguration",
    "supportapp:DescribeSlackChannels",
    "supportapp:GetAccountAlias",
    "supportapp:GetSlackOauthParameters",
    "supportapp:ListSlackChannelConfigurations",
    "supportapp:ListSlackWorkspaceConfigurations",
    "supportapp:PutAccountAlias",
    "supportapp:RedeemSlackOauthCode",
    "supportapp:RegisterSlackWorkspaceForOrganization",
    "supportapp:UpdateSlackChannelConfiguration",
    "supportplans:CreateSupportPlanSchedule",
    "supportplans:GetSupportPlan",
    "supportplans:GetSupportPlanUpdateStatus",
    "supportplans:ListSupportPlanModifiers",
    "supportplans:StartSupportPlanUpdate",
    "supportrecommendations:GetSupportTroubleshootingResponse",
    "supportrecommendations:StartSupportTroubleshooting",
    "sustainability:GetCarbonFootprintSummary",
    "swf:ListDomains",
    "swf:RegisterDomain",
    "synthetics:CreateCanary",
    "synthetics:CreateGroup",
    "synthetics:DescribeCanaries",
    "synthetics:DescribeCanariesLastRun",
    "synthetics:DescribeRuntimeVersions",
    "synthetics:ListGroups",
    "tag:DescribeReportCreation",
    "tag:GetComplianceSummary",
    "tag:GetResources",
    "tag:GetTagKeys",
    "tag:GetTagValues",
    "tag:StartReportCreation",
    "tag:TagResources",
    "tag:UntagResources",
    "tax:BatchDeleteTaxRegistration",
    "tax:BatchPutTaxRegistration",
    "tax:DeleteSupplementalTaxRegistration",
    "tax:DeleteTaxRegistration",
    "tax:GetExemptions",
    "tax:GetTaxInfoReportingDocument",
    "tax:GetTaxInheritance",
    "tax:GetTaxInterview",
    "tax:GetTaxRegistration",
    "tax:GetTaxRegistrationDocument",
    "tax:ListSupplementalTaxRegistrations",
    "tax:ListTaxRegistrations",
    "tax:PutSupplementalTaxRegistration",
    "tax:PutTaxInheritance",
    "tax:PutTaxInterview",
    "tax:PutTaxRegistration",
    "tax:UpdateExemptions",
    "textract:AnalyzeDocument",
    "textract:AnalyzeExpense",
    "textract:AnalyzeID",
    "textract:CreateAdapter",
    "textract:DetectDocumentText",
    "textract:GetDocumentAnalysis",
    "textract:GetDocumentTextDetection",
    "textract:GetExpenseAnalysis",
    "textract:GetLendingAnalysis",
    "textract:GetLendingAnalysisSummary",
    "textract:ListAdapterVersions",
    "textract:ListAdapters",
    "textract:StartDocumentAnalysis",
    "textract:StartDocumentTextDetection",
    "textract:StartExpenseAnalysis",
    "textract:StartLendingAnalysis",
    "thinclient:CreateEnvironment",
    "thinclient:ListDevices",
    "thinclient:ListEnvironments",
    "thinclient:ListSoftwareSets",
    "timestream:CancelQuery",
    "timestream:CreateScheduledQuery",
    "timestream:DescribeAccountSettings",
    "timestream:DescribeBatchLoadTask",
    "timestream:DescribeEndpoints",
    "timestream:GetAwsBackupStatus",
    "timestream:GetAwsRestoreStatus",
    "timestream:ListBatchLoadTasks",
    "timestream:ListDatabases",
    "timestream:ListScheduledQueries",
    "timestream:ResumeBatchLoadTask",
    "timestream:SelectValues",
    "timestream:UpdateAccountSettings",
    "timestream-influxdb:CreateDbParameterGroup",
    "timestream-influxdb:ListDbClusters",
    "timestream-influxdb:ListDbInstances",
    "timestream-influxdb:ListDbParameterGroups",
    "tiros:CreateQuery",
    "tiros:ExtendQuery",
    "tiros:GetQueryAnswer",
    "tiros:GetQueryExplanation",
    "tiros:GetQueryExtensionAccounts",
    "tnb:ListTagsForResource",
    "transcribe:CreateCallAnalyticsCategory",
    "transcribe:CreateLanguageModel",
    "transcribe:CreateMedicalVocabulary",
    "transcribe:CreateVocabulary",
    "transcribe:CreateVocabularyFilter",
    "transcribe:GetMedicalScribeStream",
    "transcribe:ListCallAnalyticsCategories",
    "transcribe:ListCallAnalyticsJobs",
    "transcribe:ListLanguageModels",
    "transcribe:ListMedicalScribeJobs",
    "transcribe:ListMedicalTranscriptionJobs",
    "transcribe:ListMedicalVocabularies",
    "transcribe:ListTagsForResource",
    "transcribe:ListTranscriptionJobs",
    "transcribe:ListVocabularies",
    "transcribe:ListVocabularyFilters",
    "transcribe:StartCallAnalyticsJob",
    "transcribe:StartCallAnalyticsStreamTranscription",
    "transcribe:StartCallAnalyticsStreamTranscriptionWebSocket",
    "transcribe:StartMedicalScribeJob",
    "transcribe:StartMedicalScribeStream",
    "transcribe:StartMedicalStreamTranscription",
    "transcribe:StartMedicalStreamTranscriptionWebSocket",
    "transcribe:StartMedicalTranscriptionJob",
    "transcribe:StartStreamTranscription",
    "transcribe:StartStreamTranscriptionWebSocket",
    "transcribe:StartTranscriptionJob",
    "transcribe:TagResource",
    "transcribe:UntagResource",
    "transfer:CreateConnector",
    "transfer:CreateProfile",
    "transfer:CreateServer",
    "transfer:CreateWebApp",
    "transfer:CreateWorkflow",
    "transfer:DescribeSecurityPolicy",
    "transfer:ImportCertificate",
    "transfer:ListCertificates",
    "transfer:ListConnectors",
    "transfer:ListProfiles",
    "transfer:ListSecurityPolicies",
    "transfer:ListServers",
    "transfer:ListWebApps",
    "transfer:ListWorkflows",
    "transfer:UpdateAccess",
    "translate:DescribeTextTranslationJob",
    "translate:ListLanguages",
    "translate:ListParallelData",
    "translate:ListTerminologies",
    "translate:ListTextTranslationJobs",
    "translate:StopTextTranslationJob",
    "trustedadvisor:BatchUpdateRecommendationResourceExclusion",
    "trustedadvisor:CreateEngagement",
    "trustedadvisor:CreateEngagementAttachment",
    "trustedadvisor:CreateEngagementCommunication",
    "trustedadvisor:DeleteNotificationConfigurationForDelegatedAdmin",
    "trustedadvisor:DescribeAccount",
    "trustedadvisor:DescribeAccountAccess",
    "trustedadvisor:DescribeChecks",
    "trustedadvisor:DescribeNotificationConfigurations",
    "trustedadvisor:DescribeNotificationPreferences",
    "trustedadvisor:DescribeOrganization",
    "trustedadvisor:DescribeOrganizationAccounts",
    "trustedadvisor:DescribeReports",
    "trustedadvisor:DescribeRisk",
    "trustedadvisor:DescribeRiskResources",
    "trustedadvisor:DescribeRisks",
    "trustedadvisor:DescribeServiceMetadata",
    "trustedadvisor:DownloadRisk",
    "trustedadvisor:GenerateReport",
    "trustedadvisor:GetEngagement",
    "trustedadvisor:GetEngagementAttachment",
    "trustedadvisor:GetEngagementType",
    "trustedadvisor:GetOrganizationRecommendation",
    "trustedadvisor:GetRecommendation",
    "trustedadvisor:ListAccountsForParent",
    "trustedadvisor:ListChecks",
    "trustedadvisor:ListEngagementCommunications",
    "trustedadvisor:ListEngagementTypes",
    "trustedadvisor:ListEngagements",
    "trustedadvisor:ListOrganizationRecommendationAccounts",
    "trustedadvisor:ListOrganizationRecommendationResources",
    "trustedadvisor:ListOrganizationRecommendations",
    "trustedadvisor:ListOrganizationalUnitsForParent",
    "trustedadvisor:ListRecommendationResources",
    "trustedadvisor:ListRecommendations",
    "trustedadvisor:ListRoots",
    "trustedadvisor:SetAccountAccess",
    "trustedadvisor:SetOrganizationAccess",
    "trustedadvisor:UpdateEngagement",
    "trustedadvisor:UpdateEngagementStatus",
    "trustedadvisor:UpdateNotificationConfigurations",
    "trustedadvisor:UpdateNotificationPreferences",
    "trustedadvisor:UpdateOrganizationRecommendationLifecycle",
    "trustedadvisor:UpdateRecommendationLifecycle",
    "trustedadvisor:UpdateRiskStatus",
    "ts:ListExecutions",
    "ts:ListTools",
    "ts:StartExecution",
    "user-subscriptions:CreateClaim",
    "user-subscriptions:DeleteClaim",
    "user-subscriptions:ListApplicationClaims",
    "user-subscriptions:ListClaims",
    "user-subscriptions:ListUserSubscriptions",
    "user-subscriptions:UpdateClaim",
    "vendor-insights:CreateDataSource",
    "vendor-insights:CreateSecurityProfile",
    "vendor-insights:GetProfileAccessTerms",
    "vendor-insights:ListDataSources",
    "vendor-insights:ListEntitledSecurityProfiles",
    "vendor-insights:ListSecurityProfiles",
    "verified-access:AllowVerifiedAccess",
    "verifiedpermissions:CreatePolicyStore",
    "verifiedpermissions:ListPolicyStores",
    "voiceid:CreateDomain",
    "voiceid:DescribeComplianceConsent",
    "voiceid:ListDomains",
    "voiceid:RegisterComplianceConsent",
    "vpc-lattice:AssociateViaAWSService-EventsAndStates",
    "vpc-lattice:CreateServiceNetworkVpcEndpointAssociation",
    "vpc-lattice:ListAccessLogSubscriptions",
    "vpc-lattice:ListListeners",
    "vpc-lattice:ListResourceConfigurations",
    "vpc-lattice:ListResourceEndpointAssociations",
    "vpc-lattice:ListResourceGateways",
    "vpc-lattice:ListRules",
    "vpc-lattice:ListServiceNetworkResourceAssociations",
    "vpc-lattice:ListServiceNetworkServiceAssociations",
    "vpc-lattice:ListServiceNetworkVpcAssociations",
    "vpc-lattice:ListServiceNetworkVpcEndpointAssociations",
    "vpc-lattice:ListServiceNetworks",
    "vpc-lattice:ListServices",
    "vpc-lattice:ListTagsForResource",
    "vpc-lattice:ListTargetGroups",
    "vpce:AllowMultiRegion",
    "waf:GetChangeToken",
    "waf:GetChangeTokenStatus",
    "waf:ListActivatedRulesInRuleGroup",
    "waf:ListByteMatchSets",
    "waf:ListGeoMatchSets",
    "waf:ListIPSets",
    "waf:ListLoggingConfigurations",
    "waf:ListRateBasedRules",
    "waf:ListRegexMatchSets",
    "waf:ListRegexPatternSets",
    "waf:ListRuleGroups",
    "waf:ListRules",
    "waf:ListSizeConstraintSets",
    "waf:ListSqlInjectionMatchSets",
    "waf:ListSubscribedRuleGroups",
    "waf:ListWebACLs",
    "waf:ListXssMatchSets",
    "waf-regional:GetChangeToken",
    "waf-regional:GetChangeTokenStatus",
    "waf-regional:ListActivatedRulesInRuleGroup",
    "waf-regional:ListByteMatchSets",
    "waf-regional:ListGeoMatchSets",
    "waf-regional:ListIPSets",
    "waf-regional:ListLoggingConfigurations",
    "waf-regional:ListRateBasedRules",
    "waf-regional:ListRegexMatchSets",
    "waf-regional:ListRegexPatternSets",
    "waf-regional:ListRuleGroups",
    "waf-regional:ListRules",
    "waf-regional:ListSizeConstraintSets",
    "waf-regional:ListSqlInjectionMatchSets",
    "waf-regional:ListSubscribedRuleGroups",
    "waf-regional:ListWebACLs",
    "waf-regional:ListXssMatchSets",
    "wafv2:CheckCapacity",
    "wafv2:CreateAPIKey",
    "wafv2:DeleteAPIKey",
    "wafv2:DescribeAllManagedProducts",
    "wafv2:DescribeManagedProductsByVendor",
    "wafv2:DescribeManagedRuleGroup",
    "wafv2:GenerateMobileSdkReleaseUrl",
    "wafv2:GetDecryptedAPIKey",
    "wafv2:GetMobileSdkRelease",
    "wafv2:ListAPIKeys",
    "wafv2:ListAvailableManagedRuleGroupVersions",
    "wafv2:ListAvailableManagedRuleGroups",
    "wafv2:ListIPSets",
    "wafv2:ListLoggingConfigurations",
    "wafv2:ListManagedRuleSets",
    "wafv2:ListMobileSdkReleases",
    "wafv2:ListRegexPatternSets",
    "wafv2:ListRuleGroups",
    "wafv2:ListWebACLs",
    "wam:AuthenticatePackager",
    "wellarchitected:ConfigureIntegration",
    "wellarchitected:CreateProfile",
    "wellarchitected:CreateReviewTemplate",
    "wellarchitected:CreateWorkload",
    "wellarchitected:GetConsolidatedReport",
    "wellarchitected:GetGlobalSettings",
    "wellarchitected:GetProfileTemplate",
    "wellarchitected:ImportLens",
    "wellarchitected:ListLenses",
    "wellarchitected:ListNotifications",
    "wellarchitected:ListProfileNotifications",
    "wellarchitected:ListProfiles",
    "wellarchitected:ListReviewTemplates",
    "wellarchitected:ListShareInvitations",
    "wellarchitected:ListWorkloads",
    "wellarchitected:UpdateGlobalSettings",
    "wellarchitected:UpdateShareInvitation",
    "wickr:CreateNetwork",
    "wickr:DeleteNetwork",
    "wickr:ListNetworks",
    "wickr:ListTagsForResource",
    "wisdom:CreateAssistant",
    "wisdom:CreateKnowledgeBase",
    "wisdom:CreateQuickResponse",
    "wisdom:CreateSession",
    "wisdom:ListAssistantAssociations",
    "wisdom:ListAssistants",
    "wisdom:ListKnowledgeBases",
    "wisdom:ListTagsForResource",
    "wisdom:NotifyRecommendationsReceived",
    "wisdom:SearchSessions",
    "workdocs:AbortDocumentVersionUpload",
    "workdocs:ActivateUser",
    "workdocs:AddNotificationPermissions",
    "workdocs:AddResourcePermissions",
    "workdocs:AddUserToGroup",
    "workdocs:CheckAlias",
    "workdocs:CreateComment",
    "workdocs:CreateCustomMetadata",
    "workdocs:CreateFolder",
    "workdocs:CreateInstance",
    "workdocs:CreateLabels",
    "workdocs:CreateNotificationSubscription",
    "workdocs:CreateUser",
    "workdocs:DeactivateUser",
    "workdocs:DeleteComment",
    "workdocs:DeleteCustomMetadata",
    "workdocs:DeleteDocument",
    "workdocs:DeleteDocumentVersion",
    "workdocs:DeleteFolder",
    "workdocs:DeleteFolderContents",
    "workdocs:DeleteInstance",
    "workdocs:DeleteLabels",
    "workdocs:DeleteNotificationPermissions",
    "workdocs:DeleteNotificationSubscription",
    "workdocs:DeleteUser",
    "workdocs:DeregisterDirectory",
    "workdocs:DescribeActivities",
    "workdocs:DescribeAvailableDirectories",
    "workdocs:DescribeComments",
    "workdocs:DescribeDocumentVersions",
    "workdocs:DescribeFolderContents",
    "workdocs:DescribeGroups",
    "workdocs:DescribeInstanceExports",
    "workdocs:DescribeInstances",
    "workdocs:DescribeNotificationPermissions",
    "workdocs:DescribeNotificationSubscriptions",
    "workdocs:DescribeResourcePermissions",
    "workdocs:DescribeRootFolders",
    "workdocs:DescribeUsers",
    "workdocs:DownloadDocumentVersion",
    "workdocs:GetCurrentUser",
    "workdocs:GetDocument",
    "workdocs:GetDocumentPath",
    "workdocs:GetDocumentVersion",
    "workdocs:GetFolder",
    "workdocs:GetFolderPath",
    "workdocs:GetGroup",
    "workdocs:GetResources",
    "workdocs:InitiateDocumentVersionUpload",
    "workdocs:RegisterDirectory",
    "workdocs:RemoveAllResourcePermissions",
    "workdocs:RemoveResourcePermission",
    "workdocs:RestoreDocumentVersions",
    "workdocs:SearchResources",
    "workdocs:UpdateDocument",
    "workdocs:UpdateDocumentVersion",
    "workdocs:UpdateFolder",
    "workdocs:UpdateInstanceAlias",
    "workdocs:UpdateUser",
    "workdocs:UpdateUserAdministrativeSettings",
    "worklink:CreateFleet",
    "worklink:ListFleets",
    "workmail:CreateIdentityCenterApplication",
    "workmail:CreateOrganization",
    "workmail:DeleteIdentityCenterApplication",
    "workmail:ListOrganizations",
    "workspaces:AcceptAccountLinkInvitation",
    "workspaces:CreateAccountLinkInvitation",
    "workspaces:CreateConnectionAlias",
    "workspaces:CreateIpGroup",
    "workspaces:CreateTags",
    "workspaces:DeleteAccountLinkInvitation",
    "workspaces:DeleteTags",
    "workspaces:DescribeAccount",
    "workspaces:DescribeAccountModifications",
    "workspaces:DescribeApplications",
    "workspaces:DescribeConnectionAliases",
    "workspaces:DescribeTags",
    "workspaces:DescribeWorkspaceBundles",
    "workspaces:DescribeWorkspaceDirectories",
    "workspaces:DescribeWorkspaceImages",
    "workspaces:DescribeWorkspaces",
    "workspaces:DescribeWorkspacesConnectionStatus",
    "workspaces:DescribeWorkspacesPools",
    "workspaces:GetAccountLink",
    "workspaces:ImportWorkspaceImage",
    "workspaces:ListAccountLinks",
    "workspaces:ListAvailableManagementCidrRanges",
    "workspaces:ModifyAccount",
    "workspaces:RejectAccountLinkInvitation",
    "workspaces:TerminateWorkspacesPoolSession",
    "workspaces-web:CreateBrowserSettings",
    "workspaces-web:CreateDataProtectionSettings",
    "workspaces-web:CreateIpAccessSettings",
    "workspaces-web:CreateNetworkSettings",
    "workspaces-web:CreatePortal",
    "workspaces-web:CreateTrustStore",
    "workspaces-web:CreateUserAccessLoggingSettings",
    "workspaces-web:CreateUserSettings",
    "workspaces-web:ListBrowserSettings",
    "workspaces-web:ListDataProtectionSettings",
    "workspaces-web:ListIpAccessSettings",
    "workspaces-web:ListNetworkSettings",
    "workspaces-web:ListPortals",
    "workspaces-web:ListTagsForResource",
    "workspaces-web:ListTrustStoreCertificates",
    "workspaces-web:ListTrustStores",
    "workspaces-web:ListUserAccessLoggingSettings",
    "workspaces-web:ListUserSettings",
    "xray:BatchGetTraceSummaryById",
    "xray:BatchGetTraces",
    "xray:CancelTraceRetrieval",
    "xray:DeleteResourcePolicy",
    "xray:GetDistinctTraceGraphs",
    "xray:GetEncryptionConfig",
    "xray:GetGroups",
    "xray:GetIndexingRules",
    "xray:GetInsight",
    "xray:GetInsightEvents",
    "xray:GetInsightImpactGraph",
    "xray:GetInsightSummaries",
    "xray:GetRetrievedTracesGraph",
    "xray:GetSamplingRules",
    "xray:GetSamplingStatisticSummaries",
    "xray:GetSamplingTargets",
    "xray:GetServiceGraph",
    "xray:GetTimeSeriesServiceStatistics",
    "xray:GetTraceGraph",
    "xray:GetTraceSegmentDestination",
    "xray:GetTraceSummaries",
    "xray:Link",
    "xray:ListResourcePolicies",
    "xray:ListRetrievedTraces",
    "xray:PutEncryptionConfig",
    "xray:PutResourcePolicy",
    "xray:PutSpans",
    "xray:PutSpansForIndexing",
    "xray:PutTelemetryRecords",
    "xray:PutTraceSegments",
    "xray:StartTraceRetrieval",
    "xray:UpdateIndexingRule",
    "xray:UpdateTraceSegmentDestination"
   ]
  }
 },
 "type": "object"
}
