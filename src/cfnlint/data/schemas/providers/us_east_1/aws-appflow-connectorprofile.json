{
 "additionalProperties": false,
 "createOnlyProperties": [
  "/properties/ConnectorProfileName",
  "/properties/ConnectorType",
  "/properties/ConnectorLabel"
 ],
 "definitions": {
  "AccessKeyId": {
   "maxLength": 256,
   "pattern": "\\S+",
   "type": "string"
  },
  "AccessToken": {
   "maxLength": 4096,
   "pattern": "\\S+",
   "type": "string"
  },
  "AccountName": {
   "maxLength": 512,
   "pattern": "\\S+",
   "type": "string"
  },
  "AmplitudeConnectorProfileCredentials": {
   "properties": {
    "ApiKey": {
     "$ref": "#/definitions/ApiKey",
     "description": "A unique alphanumeric identi\ufb01er used to authenticate a user, developer, or calling program to your API."
    },
    "SecretKey": {
     "$ref": "#/definitions/SecretKey"
    }
   },
   "required": [
    "ApiKey",
    "SecretKey"
   ],
   "type": "object"
  },
  "ApiKey": {
   "maxLength": 256,
   "pattern": "\\S+",
   "type": "string"
  },
  "ApiKeyCredentials": {
   "additionalProperties": false,
   "properties": {
    "ApiKey": {
     "$ref": "#/definitions/ApiKey"
    },
    "ApiSecretKey": {
     "$ref": "#/definitions/ApiSecretKey"
    }
   },
   "required": [
    "ApiKey"
   ],
   "type": "object"
  },
  "ApiSecretKey": {
   "maxLength": 256,
   "pattern": "\\S+",
   "type": "string"
  },
  "ApiToken": {
   "maxLength": 256,
   "pattern": "\\S+",
   "type": "string"
  },
  "ApplicationHostUrl": {
   "maxLength": 256,
   "pattern": "^(https?)://[-a-zA-Z0-9+&amp;@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&amp;@#/%=~_|]",
   "type": "string"
  },
  "ApplicationKey": {
   "maxLength": 512,
   "pattern": "\\S+",
   "type": "string"
  },
  "ApplicationServicePath": {
   "maxLength": 512,
   "pattern": "\\S+",
   "type": "string"
  },
  "AuthCode": {
   "maxLength": 4096,
   "pattern": "\\S+",
   "type": "string"
  },
  "AuthenticationType": {
   "enum": [
    "OAUTH2",
    "APIKEY",
    "BASIC",
    "CUSTOM"
   ],
   "type": "string"
  },
  "BasicAuthCredentials": {
   "additionalProperties": false,
   "properties": {
    "Password": {
     "$ref": "#/definitions/Password"
    },
    "Username": {
     "$ref": "#/definitions/Username"
    }
   },
   "required": [
    "Username",
    "Password"
   ],
   "type": "object"
  },
  "BucketName": {
   "maxLength": 63,
   "minLength": 3,
   "pattern": "\\S+",
   "type": "string"
  },
  "BucketPrefix": {
   "maxLength": 128,
   "type": "string"
  },
  "BusinessUnitId": {
   "maxLength": 18,
   "pattern": "\\S+",
   "type": "string"
  },
  "ClientCredentialsArn": {
   "maxLength": 2048,
   "pattern": "arn:aws:secretsmanager:.*:[0-9]+:.*",
   "type": "string"
  },
  "ClientId": {
   "maxLength": 512,
   "pattern": "\\S+",
   "type": "string"
  },
  "ClientNumber": {
   "maxLength": 3,
   "minLength": 3,
   "pattern": "^\\d{3}$",
   "type": "string"
  },
  "ClientSecret": {
   "maxLength": 512,
   "pattern": "\\S+",
   "type": "string"
  },
  "ClusterIdentifier": {
   "maxLength": 512,
   "pattern": "\\S+",
   "type": "string"
  },
  "ConnectorOAuthRequest": {
   "properties": {
    "AuthCode": {
     "description": "The code provided by the connector when it has been authenticated via the connected app.",
     "type": "string"
    },
    "RedirectUri": {
     "description": "The URL to which the authentication server redirects the browser after authorization has been\ngranted.",
     "type": "string"
    }
   },
   "type": "object"
  },
  "ConnectorProfileConfig": {
   "description": "Connector specific configurations needed to create connector profile",
   "properties": {
    "ConnectorProfileCredentials": {
     "$ref": "#/definitions/ConnectorProfileCredentials"
    },
    "ConnectorProfileProperties": {
     "$ref": "#/definitions/ConnectorProfileProperties"
    }
   },
   "type": "object"
  },
  "ConnectorProfileCredentials": {
   "description": "Connector specific configuration needed to create connector profile based on Authentication mechanism",
   "properties": {
    "Amplitude": {
     "$ref": "#/definitions/AmplitudeConnectorProfileCredentials"
    },
    "CustomConnector": {
     "$ref": "#/definitions/CustomConnectorProfileCredentials"
    },
    "Datadog": {
     "$ref": "#/definitions/DatadogConnectorProfileCredentials"
    },
    "Dynatrace": {
     "$ref": "#/definitions/DynatraceConnectorProfileCredentials"
    },
    "GoogleAnalytics": {
     "$ref": "#/definitions/GoogleAnalyticsConnectorProfileCredentials"
    },
    "InforNexus": {
     "$ref": "#/definitions/InforNexusConnectorProfileCredentials"
    },
    "Marketo": {
     "$ref": "#/definitions/MarketoConnectorProfileCredentials"
    },
    "Pardot": {
     "$ref": "#/definitions/PardotConnectorProfileCredentials"
    },
    "Redshift": {
     "$ref": "#/definitions/RedshiftConnectorProfileCredentials"
    },
    "SAPOData": {
     "$ref": "#/definitions/SAPODataConnectorProfileCredentials"
    },
    "Salesforce": {
     "$ref": "#/definitions/SalesforceConnectorProfileCredentials"
    },
    "ServiceNow": {
     "$ref": "#/definitions/ServiceNowConnectorProfileCredentials"
    },
    "Singular": {
     "$ref": "#/definitions/SingularConnectorProfileCredentials"
    },
    "Slack": {
     "$ref": "#/definitions/SlackConnectorProfileCredentials"
    },
    "Snowflake": {
     "$ref": "#/definitions/SnowflakeConnectorProfileCredentials"
    },
    "Trendmicro": {
     "$ref": "#/definitions/TrendmicroConnectorProfileCredentials"
    },
    "Veeva": {
     "$ref": "#/definitions/VeevaConnectorProfileCredentials"
    },
    "Zendesk": {
     "$ref": "#/definitions/ZendeskConnectorProfileCredentials"
    }
   },
   "type": "object"
  },
  "ConnectorProfileProperties": {
   "description": "Connector specific properties needed to create connector profile - currently not needed for Amplitude, Trendmicro, Googleanalytics and Singular",
   "properties": {
    "CustomConnector": {
     "$ref": "#/definitions/CustomConnectorProfileProperties"
    },
    "Datadog": {
     "$ref": "#/definitions/DatadogConnectorProfileProperties"
    },
    "Dynatrace": {
     "$ref": "#/definitions/DynatraceConnectorProfileProperties"
    },
    "InforNexus": {
     "$ref": "#/definitions/InforNexusConnectorProfileProperties"
    },
    "Marketo": {
     "$ref": "#/definitions/MarketoConnectorProfileProperties"
    },
    "Pardot": {
     "$ref": "#/definitions/PardotConnectorProfileProperties"
    },
    "Redshift": {
     "$ref": "#/definitions/RedshiftConnectorProfileProperties"
    },
    "SAPOData": {
     "$ref": "#/definitions/SAPODataConnectorProfileProperties"
    },
    "Salesforce": {
     "$ref": "#/definitions/SalesforceConnectorProfileProperties"
    },
    "ServiceNow": {
     "$ref": "#/definitions/ServiceNowConnectorProfileProperties"
    },
    "Slack": {
     "$ref": "#/definitions/SlackConnectorProfileProperties"
    },
    "Snowflake": {
     "$ref": "#/definitions/SnowflakeConnectorProfileProperties"
    },
    "Veeva": {
     "$ref": "#/definitions/VeevaConnectorProfileProperties"
    },
    "Zendesk": {
     "$ref": "#/definitions/ZendeskConnectorProfileProperties"
    }
   },
   "type": "object"
  },
  "ConnectorType": {
   "enum": [
    "Salesforce",
    "Pardot",
    "Singular",
    "Slack",
    "Redshift",
    "Marketo",
    "Googleanalytics",
    "Zendesk",
    "Servicenow",
    "SAPOData",
    "Datadog",
    "Trendmicro",
    "Snowflake",
    "Dynatrace",
    "Infornexus",
    "Amplitude",
    "Veeva",
    "CustomConnector"
   ],
   "type": "string"
  },
  "CredentialsMap": {
   "additionalProperties": false,
   "description": "A map for properties for custom authentication.",
   "patternProperties": {
    "^[\\w]{1,128}$": {
     "description": "A string containing the value for the property",
     "maxLength": 2048,
     "minLength": 1,
     "pattern": "\\S+",
     "type": "string"
    }
   },
   "required": [],
   "type": "object"
  },
  "CustomAuthCredentials": {
   "additionalProperties": false,
   "properties": {
    "CredentialsMap": {
     "$ref": "#/definitions/CredentialsMap"
    },
    "CustomAuthenticationType": {
     "$ref": "#/definitions/CustomAuthenticationType"
    }
   },
   "required": [
    "CustomAuthenticationType"
   ],
   "type": "object"
  },
  "CustomAuthenticationType": {
   "maxLength": 256,
   "pattern": "\\S+",
   "type": "string"
  },
  "CustomConnectorProfileCredentials": {
   "additionalProperties": false,
   "properties": {
    "ApiKey": {
     "$ref": "#/definitions/ApiKeyCredentials"
    },
    "AuthenticationType": {
     "$ref": "#/definitions/AuthenticationType"
    },
    "Basic": {
     "$ref": "#/definitions/BasicAuthCredentials"
    },
    "Custom": {
     "$ref": "#/definitions/CustomAuthCredentials"
    },
    "Oauth2": {
     "$ref": "#/definitions/OAuth2Credentials"
    }
   },
   "required": [
    "AuthenticationType"
   ],
   "type": "object"
  },
  "CustomConnectorProfileProperties": {
   "additionalProperties": false,
   "properties": {
    "OAuth2Properties": {
     "$ref": "#/definitions/OAuth2Properties"
    },
    "ProfileProperties": {
     "$ref": "#/definitions/ProfileProperties"
    }
   },
   "type": "object"
  },
  "DataApiRoleArn": {
   "maxLength": 512,
   "pattern": "arn:aws:iam:.*:[0-9]+:.*",
   "type": "string"
  },
  "DatabaseName": {
   "maxLength": 512,
   "pattern": "\\S+",
   "type": "string"
  },
  "DatabaseUrl": {
   "maxLength": 512,
   "pattern": "\\S+",
   "type": "string"
  },
  "DatadogConnectorProfileCredentials": {
   "properties": {
    "ApiKey": {
     "$ref": "#/definitions/ApiKey",
     "description": "A unique alphanumeric identi\ufb01er used to authenticate a user, developer, or calling program to your API."
    },
    "ApplicationKey": {
     "$ref": "#/definitions/ApplicationKey",
     "description": "Application keys, in conjunction with your API key, give you full access to Datadog\u2019s programmatic API. Application keys are associated with the user account that created them. The application key is used to log all requests made to the API."
    }
   },
   "required": [
    "ApiKey",
    "ApplicationKey"
   ],
   "type": "object"
  },
  "DatadogConnectorProfileProperties": {
   "properties": {
    "InstanceUrl": {
     "$ref": "#/definitions/InstanceUrl",
     "description": "The location of the Datadog resource"
    }
   },
   "required": [
    "InstanceUrl"
   ],
   "type": "object"
  },
  "DynatraceConnectorProfileCredentials": {
   "properties": {
    "ApiToken": {
     "$ref": "#/definitions/ApiToken",
     "description": "The API tokens used by Dynatrace API to authenticate various API calls."
    }
   },
   "required": [
    "ApiToken"
   ],
   "type": "object"
  },
  "DynatraceConnectorProfileProperties": {
   "properties": {
    "InstanceUrl": {
     "$ref": "#/definitions/InstanceUrl",
     "description": "The location of the Dynatrace resource"
    }
   },
   "required": [
    "InstanceUrl"
   ],
   "type": "object"
  },
  "GoogleAnalyticsConnectorProfileCredentials": {
   "properties": {
    "AccessToken": {
     "$ref": "#/definitions/AccessToken",
     "description": "The credentials used to access protected resources."
    },
    "ClientId": {
     "$ref": "#/definitions/ClientId",
     "description": "The identi\ufb01er for the desired client."
    },
    "ClientSecret": {
     "$ref": "#/definitions/ClientSecret",
     "description": "The client secret used by the oauth client to authenticate to the authorization server."
    },
    "ConnectorOAuthRequest": {
     "$ref": "#/definitions/ConnectorOAuthRequest",
     "description": "The oauth needed to request security tokens from the connector endpoint."
    },
    "RefreshToken": {
     "$ref": "#/definitions/RefreshToken",
     "description": "The credentials used to acquire new access tokens."
    }
   },
   "required": [
    "ClientId",
    "ClientSecret"
   ],
   "type": "object"
  },
  "InforNexusConnectorProfileCredentials": {
   "properties": {
    "AccessKeyId": {
     "$ref": "#/definitions/AccessKeyId",
     "description": "The Access Key portion of the credentials."
    },
    "Datakey": {
     "$ref": "#/definitions/Key",
     "description": "The encryption keys used to encrypt data."
    },
    "SecretAccessKey": {
     "$ref": "#/definitions/Key",
     "description": "The secret key used to sign requests."
    },
    "UserId": {
     "$ref": "#/definitions/Username",
     "description": "The identi\ufb01er for the user."
    }
   },
   "required": [
    "AccessKeyId",
    "UserId",
    "SecretAccessKey",
    "Datakey"
   ],
   "type": "object"
  },
  "InforNexusConnectorProfileProperties": {
   "properties": {
    "InstanceUrl": {
     "$ref": "#/definitions/InstanceUrl",
     "description": "The location of the InforNexus resource"
    }
   },
   "required": [
    "InstanceUrl"
   ],
   "type": "object"
  },
  "InstanceUrl": {
   "maxLength": 256,
   "pattern": "\\S+",
   "type": "string"
  },
  "JwtToken": {
   "maxLength": 8000,
   "pattern": "^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_.+/=]*$",
   "type": "string"
  },
  "Key": {
   "maxLength": 512,
   "pattern": "\\S+",
   "type": "string"
  },
  "LogonLanguage": {
   "maxLength": 2,
   "pattern": "^[a-zA-Z0-9_]*$",
   "type": "string"
  },
  "MarketoConnectorProfileCredentials": {
   "properties": {
    "AccessToken": {
     "$ref": "#/definitions/AccessToken",
     "description": "The credentials used to access protected resources."
    },
    "ClientId": {
     "$ref": "#/definitions/ClientId",
     "description": "The identi\ufb01er for the desired client."
    },
    "ClientSecret": {
     "$ref": "#/definitions/ClientSecret",
     "description": "The client secret used by the oauth client to authenticate to the authorization server."
    },
    "ConnectorOAuthRequest": {
     "$ref": "#/definitions/ConnectorOAuthRequest",
     "description": "The oauth needed to request security tokens from the connector endpoint."
    }
   },
   "required": [
    "ClientId",
    "ClientSecret"
   ],
   "type": "object"
  },
  "MarketoConnectorProfileProperties": {
   "properties": {
    "InstanceUrl": {
     "$ref": "#/definitions/InstanceUrl",
     "description": "The location of the Marketo resource"
    }
   },
   "required": [
    "InstanceUrl"
   ],
   "type": "object"
  },
  "OAuth2Credentials": {
   "additionalProperties": false,
   "properties": {
    "AccessToken": {
     "$ref": "#/definitions/AccessToken"
    },
    "ClientId": {
     "$ref": "#/definitions/ClientId"
    },
    "ClientSecret": {
     "$ref": "#/definitions/ClientSecret"
    },
    "OAuthRequest": {
     "$ref": "#/definitions/ConnectorOAuthRequest"
    },
    "RefreshToken": {
     "$ref": "#/definitions/RefreshToken"
    }
   },
   "type": "object"
  },
  "OAuth2GrantType": {
   "enum": [
    "CLIENT_CREDENTIALS",
    "AUTHORIZATION_CODE",
    "JWT_BEARER"
   ],
   "type": "string"
  },
  "OAuth2Properties": {
   "additionalProperties": false,
   "properties": {
    "OAuth2GrantType": {
     "$ref": "#/definitions/OAuth2GrantType"
    },
    "TokenUrl": {
     "maxLength": 256,
     "minLength": 0,
     "pattern": "^(https?)://[-a-zA-Z0-9+&amp;@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&amp;@#/%=~_|]",
     "type": "string"
    },
    "TokenUrlCustomProperties": {
     "$ref": "#/definitions/TokenUrlCustomProperties"
    }
   },
   "type": "object"
  },
  "OAuthProperties": {
   "properties": {
    "AuthCodeUrl": {
     "maxLength": 256,
     "pattern": "^(https?)://[-a-zA-Z0-9+&amp;@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&amp;@#/%=~_|]",
     "type": "string"
    },
    "OAuthScopes": {
     "items": {
      "maxLength": 128,
      "pattern": "[/\\w]*",
      "type": "string"
     },
     "type": "array",
     "uniqueItems": true
    },
    "TokenUrl": {
     "maxLength": 256,
     "pattern": "^(https?)://[-a-zA-Z0-9+&amp;@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&amp;@#/%=~_|]",
     "type": "string"
    }
   },
   "type": "object"
  },
  "PardotConnectorProfileCredentials": {
   "properties": {
    "AccessToken": {
     "$ref": "#/definitions/AccessToken",
     "description": "The credentials used to access protected resources."
    },
    "ClientCredentialsArn": {
     "$ref": "#/definitions/ClientCredentialsArn",
     "description": "The client credentials to fetch access token and refresh token."
    },
    "ConnectorOAuthRequest": {
     "$ref": "#/definitions/ConnectorOAuthRequest",
     "description": "The oauth needed to request security tokens from the connector endpoint."
    },
    "RefreshToken": {
     "$ref": "#/definitions/RefreshToken",
     "description": "The credentials used to acquire new access tokens."
    }
   },
   "type": "object"
  },
  "PardotConnectorProfileProperties": {
   "properties": {
    "BusinessUnitId": {
     "$ref": "#/definitions/BusinessUnitId",
     "description": "The Business unit id of Salesforce Pardot instance to be connected"
    },
    "InstanceUrl": {
     "$ref": "#/definitions/InstanceUrl",
     "description": "The location of the Salesforce Pardot resource"
    },
    "IsSandboxEnvironment": {
     "description": "Indicates whether the connector profile applies to a demo or production environment",
     "type": "boolean"
    }
   },
   "required": [
    "BusinessUnitId"
   ],
   "type": "object"
  },
  "Password": {
   "maxLength": 512,
   "pattern": "\\S+",
   "type": "string"
  },
  "PortNumber": {
   "maximum": 65535,
   "minimum": 1,
   "type": "integer"
  },
  "PrivateLinkServiceName": {
   "maxLength": 512,
   "pattern": "\\S+",
   "type": "string"
  },
  "ProfileProperties": {
   "additionalProperties": false,
   "description": "A map for properties for custom connector.",
   "patternProperties": {
    "^[\\w]{1,256}$": {
     "description": "A string containing the value for the property",
     "maxLength": 2048,
     "minLength": 1,
     "pattern": "\\S+",
     "type": "string"
    }
   },
   "required": [],
   "type": "object"
  },
  "RedshiftConnectorProfileCredentials": {
   "properties": {
    "Password": {
     "$ref": "#/definitions/Password",
     "description": "The password that corresponds to the username."
    },
    "Username": {
     "$ref": "#/definitions/Username",
     "description": "The name of the user."
    }
   },
   "type": "object"
  },
  "RedshiftConnectorProfileProperties": {
   "properties": {
    "BucketName": {
     "$ref": "#/definitions/BucketName",
     "description": "The name of the Amazon S3 bucket associated with Redshift."
    },
    "BucketPrefix": {
     "$ref": "#/definitions/BucketPrefix",
     "description": "The object key for the destination bucket in which Amazon AppFlow will place the \ufb01les."
    },
    "ClusterIdentifier": {
     "$ref": "#/definitions/ClusterIdentifier",
     "description": "The unique identifier of the Amazon Redshift cluster."
    },
    "DataApiRoleArn": {
     "$ref": "#/definitions/DataApiRoleArn",
     "description": "The Amazon Resource Name (ARN) of the IAM role that grants Amazon AppFlow access to the data through the Amazon Redshift Data API."
    },
    "DatabaseName": {
     "$ref": "#/definitions/DatabaseName",
     "description": "The name of the Amazon Redshift database that will store the transferred data."
    },
    "DatabaseUrl": {
     "$ref": "#/definitions/DatabaseUrl",
     "description": "The JDBC URL of the Amazon Redshift cluster."
    },
    "IsRedshiftServerless": {
     "description": "If Amazon AppFlow will connect to Amazon Redshift Serverless or Amazon Redshift cluster.",
     "type": "boolean"
    },
    "RoleArn": {
     "$ref": "#/definitions/RoleArn",
     "description": "The Amazon Resource Name (ARN) of the IAM role."
    },
    "WorkgroupName": {
     "$ref": "#/definitions/WorkgroupName",
     "description": "The name of the Amazon Redshift serverless workgroup"
    }
   },
   "required": [
    "BucketName",
    "RoleArn"
   ],
   "type": "object"
  },
  "RefreshToken": {
   "maxLength": 4096,
   "pattern": "\\S+",
   "type": "string"
  },
  "Region": {
   "maxLength": 64,
   "pattern": "\\S+",
   "type": "string"
  },
  "RoleArn": {
   "maxLength": 512,
   "pattern": "arn:aws:iam:.*:[0-9]+:.*",
   "type": "string"
  },
  "SAPODataConnectorProfileCredentials": {
   "properties": {
    "BasicAuthCredentials": {
     "$ref": "#/definitions/BasicAuthCredentials"
    },
    "OAuthCredentials": {
     "properties": {
      "AccessToken": {
       "$ref": "#/definitions/AccessToken"
      },
      "ClientId": {
       "$ref": "#/definitions/ClientId"
      },
      "ClientSecret": {
       "$ref": "#/definitions/ClientSecret"
      },
      "ConnectorOAuthRequest": {
       "$ref": "#/definitions/ConnectorOAuthRequest"
      },
      "RefreshToken": {
       "$ref": "#/definitions/RefreshToken"
      }
     },
     "type": "object"
    }
   },
   "type": "object"
  },
  "SAPODataConnectorProfileProperties": {
   "properties": {
    "ApplicationHostUrl": {
     "$ref": "#/definitions/ApplicationHostUrl"
    },
    "ApplicationServicePath": {
     "$ref": "#/definitions/ApplicationServicePath"
    },
    "ClientNumber": {
     "$ref": "#/definitions/ClientNumber"
    },
    "LogonLanguage": {
     "$ref": "#/definitions/LogonLanguage"
    },
    "OAuthProperties": {
     "$ref": "#/definitions/OAuthProperties"
    },
    "PortNumber": {
     "$ref": "#/definitions/PortNumber"
    },
    "PrivateLinkServiceName": {
     "$ref": "#/definitions/PrivateLinkServiceName"
    }
   },
   "type": "object"
  },
  "SalesforceConnectorProfileCredentials": {
   "properties": {
    "AccessToken": {
     "$ref": "#/definitions/AccessToken",
     "description": "The credentials used to access protected resources."
    },
    "ClientCredentialsArn": {
     "$ref": "#/definitions/ClientCredentialsArn",
     "description": "The client credentials to fetch access token and refresh token."
    },
    "ConnectorOAuthRequest": {
     "$ref": "#/definitions/ConnectorOAuthRequest",
     "description": "The oauth needed to request security tokens from the connector endpoint."
    },
    "JwtToken": {
     "$ref": "#/definitions/JwtToken",
     "description": "The credentials used to access your Salesforce records"
    },
    "OAuth2GrantType": {
     "$ref": "#/definitions/OAuth2GrantType",
     "description": "The grant types to fetch an access token"
    },
    "RefreshToken": {
     "$ref": "#/definitions/RefreshToken",
     "description": "The credentials used to acquire new access tokens."
    }
   },
   "type": "object"
  },
  "SalesforceConnectorProfileProperties": {
   "properties": {
    "InstanceUrl": {
     "$ref": "#/definitions/InstanceUrl",
     "description": "The location of the Salesforce resource"
    },
    "isSandboxEnvironment": {
     "description": "Indicates whether the connector profile applies to a sandbox or production environment",
     "type": "boolean"
    },
    "usePrivateLinkForMetadataAndAuthorization": {
     "description": "Indicates whether to make Metadata And Authorization calls over Pivate Network",
     "type": "boolean"
    }
   },
   "type": "object"
  },
  "SecretKey": {
   "maxLength": 256,
   "pattern": "\\S+",
   "type": "string"
  },
  "ServiceNowConnectorProfileCredentials": {
   "properties": {
    "Password": {
     "$ref": "#/definitions/Password",
     "description": "The password that corresponds to the username."
    },
    "Username": {
     "$ref": "#/definitions/Username",
     "description": "The name of the user."
    }
   },
   "required": [
    "Username",
    "Password"
   ],
   "type": "object"
  },
  "ServiceNowConnectorProfileProperties": {
   "properties": {
    "InstanceUrl": {
     "$ref": "#/definitions/InstanceUrl",
     "description": "The location of the ServiceNow resource"
    }
   },
   "required": [
    "InstanceUrl"
   ],
   "type": "object"
  },
  "SingularConnectorProfileCredentials": {
   "properties": {
    "ApiKey": {
     "$ref": "#/definitions/ApiKey",
     "description": "A unique alphanumeric identi\ufb01er used to authenticate a user, developer, or calling program to your API."
    }
   },
   "required": [
    "ApiKey"
   ],
   "type": "object"
  },
  "SlackConnectorProfileCredentials": {
   "properties": {
    "AccessToken": {
     "$ref": "#/definitions/AccessToken",
     "description": "The credentials used to access protected resources."
    },
    "ClientId": {
     "$ref": "#/definitions/ClientId",
     "description": "The identi\ufb01er for the desired client."
    },
    "ClientSecret": {
     "$ref": "#/definitions/ClientSecret",
     "description": "The client secret used by the oauth client to authenticate to the authorization server."
    },
    "ConnectorOAuthRequest": {
     "$ref": "#/definitions/ConnectorOAuthRequest",
     "description": "The oauth needed to request security tokens from the connector endpoint."
    }
   },
   "required": [
    "ClientId",
    "ClientSecret"
   ],
   "type": "object"
  },
  "SlackConnectorProfileProperties": {
   "properties": {
    "InstanceUrl": {
     "$ref": "#/definitions/InstanceUrl",
     "description": "The location of the Slack resource"
    }
   },
   "required": [
    "InstanceUrl"
   ],
   "type": "object"
  },
  "SnowflakeConnectorProfileCredentials": {
   "properties": {
    "Password": {
     "$ref": "#/definitions/Password",
     "description": "The password that corresponds to the username."
    },
    "Username": {
     "$ref": "#/definitions/Username",
     "description": "The name of the user."
    }
   },
   "required": [
    "Username",
    "Password"
   ],
   "type": "object"
  },
  "SnowflakeConnectorProfileProperties": {
   "properties": {
    "AccountName": {
     "$ref": "#/definitions/AccountName",
     "description": "The name of the account."
    },
    "BucketName": {
     "$ref": "#/definitions/BucketName",
     "description": "The name of the Amazon S3 bucket associated with Snow\ufb02ake."
    },
    "BucketPrefix": {
     "$ref": "#/definitions/BucketPrefix",
     "description": "The bucket prefix that refers to the Amazon S3 bucket associated with Snow\ufb02ake."
    },
    "PrivateLinkServiceName": {
     "$ref": "#/definitions/PrivateLinkServiceName",
     "description": "The Snow\ufb02ake Private Link service name to be used for private data transfers."
    },
    "Region": {
     "$ref": "#/definitions/Region",
     "description": "The region of the Snow\ufb02ake account."
    },
    "Stage": {
     "$ref": "#/definitions/Stage",
     "description": "The name of the Amazon S3 stage that was created while setting up an Amazon S3 stage in the\nSnow\ufb02ake account. This is written in the following format: < Database>< Schema><Stage Name>."
    },
    "Warehouse": {
     "$ref": "#/definitions/Warehouse",
     "description": "The name of the Snow\ufb02ake warehouse."
    }
   },
   "required": [
    "Warehouse",
    "Stage",
    "BucketName"
   ],
   "type": "object"
  },
  "Stage": {
   "maxLength": 16,
   "pattern": "\\S+",
   "type": "string"
  },
  "TokenUrlCustomProperties": {
   "additionalProperties": false,
   "description": "A map for properties for custom connector Token Url.",
   "patternProperties": {
    "^[\\w]{1,128}$": {
     "description": "A string containing the value for the property",
     "maxLength": 2048,
     "minLength": 1,
     "pattern": "\\S+",
     "type": "string"
    }
   },
   "required": [],
   "type": "object"
  },
  "TrendmicroConnectorProfileCredentials": {
   "properties": {
    "ApiSecretKey": {
     "$ref": "#/definitions/ApiSecretKey",
     "description": "The Secret Access Key portion of the credentials."
    }
   },
   "required": [
    "ApiSecretKey"
   ],
   "type": "object"
  },
  "Username": {
   "maxLength": 512,
   "pattern": "\\S+",
   "type": "string"
  },
  "VeevaConnectorProfileCredentials": {
   "properties": {
    "Password": {
     "$ref": "#/definitions/Password",
     "description": "The password that corresponds to the username."
    },
    "Username": {
     "$ref": "#/definitions/Username",
     "description": "The name of the user."
    }
   },
   "required": [
    "Username",
    "Password"
   ],
   "type": "object"
  },
  "VeevaConnectorProfileProperties": {
   "properties": {
    "InstanceUrl": {
     "$ref": "#/definitions/InstanceUrl",
     "description": "The location of the Veeva resource"
    }
   },
   "required": [
    "InstanceUrl"
   ],
   "type": "object"
  },
  "Warehouse": {
   "maxLength": 512,
   "pattern": "[\\s\\w/!@#+=.-]*",
   "type": "string"
  },
  "WorkgroupName": {
   "maxLength": 512,
   "pattern": "\\S+",
   "type": "string"
  },
  "ZendeskConnectorProfileCredentials": {
   "properties": {
    "AccessToken": {
     "$ref": "#/definitions/AccessToken",
     "description": "The credentials used to access protected resources."
    },
    "ClientId": {
     "$ref": "#/definitions/ClientId",
     "description": "The identi\ufb01er for the desired client."
    },
    "ClientSecret": {
     "$ref": "#/definitions/ClientSecret",
     "description": "The client secret used by the oauth client to authenticate to the authorization server."
    },
    "ConnectorOAuthRequest": {
     "$ref": "#/definitions/ConnectorOAuthRequest",
     "description": "The oauth needed to request security tokens from the connector endpoint."
    }
   },
   "required": [
    "ClientId",
    "ClientSecret"
   ],
   "type": "object"
  },
  "ZendeskConnectorProfileProperties": {
   "properties": {
    "InstanceUrl": {
     "$ref": "#/definitions/InstanceUrl",
     "description": "The location of the Zendesk resource"
    }
   },
   "required": [
    "InstanceUrl"
   ],
   "type": "object"
  }
 },
 "description": "Resource Type definition for AWS::AppFlow::ConnectorProfile",
 "handlers": {
  "create": {
   "permissions": [
    "appflow:CreateConnectorProfile",
    "kms:ListKeys",
    "kms:DescribeKey",
    "kms:ListAliases",
    "kms:CreateGrant",
    "kms:ListGrants",
    "iam:PassRole",
    "secretsmanager:CreateSecret",
    "secretsmanager:GetSecretValue",
    "secretsmanager:PutResourcePolicy"
   ]
  },
  "delete": {
   "permissions": [
    "appflow:DeleteConnectorProfile"
   ]
  },
  "list": {
   "permissions": [
    "appflow:DescribeConnectorProfiles"
   ]
  },
  "read": {
   "permissions": [
    "appflow:DescribeConnectorProfiles"
   ]
  },
  "update": {
   "permissions": [
    "appflow:UpdateConnectorProfile",
    "kms:ListKeys",
    "kms:DescribeKey",
    "kms:ListAliases",
    "kms:CreateGrant",
    "kms:ListGrants",
    "iam:PassRole",
    "secretsmanager:CreateSecret",
    "secretsmanager:GetSecretValue",
    "secretsmanager:PutResourcePolicy"
   ]
  }
 },
 "primaryIdentifier": [
  "/properties/ConnectorProfileName"
 ],
 "properties": {
  "ConnectionMode": {
   "description": "Mode in which data transfer should be enabled. Private connection mode is currently enabled for Salesforce, Snowflake, Trendmicro and Singular",
   "enum": [
    "Public",
    "Private"
   ],
   "type": "string"
  },
  "ConnectorLabel": {
   "description": "The label of the connector. The label is unique for each ConnectorRegistration in your AWS account. Only needed if calling for CUSTOMCONNECTOR connector type/.",
   "maxLength": 256,
   "pattern": "[\\w!@#.-]+",
   "type": "string"
  },
  "ConnectorProfileArn": {
   "description": "Unique identifier for connector profile resources",
   "maxLength": 512,
   "pattern": "arn:aws:appflow:.*:[0-9]+:.*",
   "type": "string"
  },
  "ConnectorProfileConfig": {
   "$ref": "#/definitions/ConnectorProfileConfig",
   "description": "Connector specific configurations needed to create connector profile"
  },
  "ConnectorProfileName": {
   "description": "The maximum number of items to retrieve in a single batch.",
   "maxLength": 256,
   "pattern": "[\\w/!@#+=.-]+",
   "type": "string"
  },
  "ConnectorType": {
   "$ref": "#/definitions/ConnectorType",
   "description": "List of Saas providers that need connector profile to be created"
  },
  "CredentialsArn": {
   "description": "A unique Arn for Connector-Profile resource",
   "maxLength": 512,
   "pattern": "arn:aws:.*:.*:[0-9]+:.*",
   "type": "string"
  },
  "KMSArn": {
   "description": "The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If it's not provided, AWS Lambda uses a default service key.",
   "maxLength": 2048,
   "minLength": 20,
   "pattern": "arn:aws:kms:.*:[0-9]+:.*",
   "type": "string"
  }
 },
 "readOnlyProperties": [
  "/properties/ConnectorProfileArn",
  "/properties/CredentialsArn"
 ],
 "required": [
  "ConnectorProfileName",
  "ConnectionMode",
  "ConnectorType"
 ],
 "typeName": "AWS::AppFlow::ConnectorProfile",
 "writeOnlyProperties": [
  "/properties/ConnectorProfileConfig",
  "/properties/KMSArn"
 ]
}
